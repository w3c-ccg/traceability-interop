{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5042fe9c-3a45-45b6-8fbc-358c93384c1d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2a29b500-8d77-40d4-829d-3303d93ac31b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e08256d4-e39c-441f-8bcf-ec6c16d96887",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e03c926c-cdff-493c-ae65-85b874ee913b"
                }
              }
            ]
          },
          {
            "id": "d8efe514-858a-425b-a4a4-645d110c8624",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f07a1a53-abf4-48ee-8db9-7fcb56e54329",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "878dc987-08cd-4325-8518-1fb174558ab9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9a53a87c-4a0b-4ad1-824f-f6b73514c01d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d9ac67cc-a670-436c-b6c5-02761b42fed0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8ca00fa-23fb-45fa-94bc-6c4817b67dec",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54784337-8f86-4ba7-9b0e-5a0ae07a7f0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e8f3558-5fb2-41c5-a75e-6a226a3dc27d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f96f9425-c8b5-4c60-b00c-ac33cfaf0098",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "424dfdfe-1281-4569-bddc-9952c416893c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ae5c7c3-4e41-4fa2-a178-43120f74c97f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79f67a8a-9311-40e8-9fef-0f81f5af3e55"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c484a19-7264-40c7-8dd6-a221bda6b363",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1e9539f2-2c16-41fc-86b7-e6c5e50462d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4876131c-90c3-4482-86e1-d57a993b1da9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc4cb355-dff0-494b-ad9f-45a5009853ed"
            }
          }
        ]
      },
      {
        "id": "c7fbc9a9-4007-48b4-af92-e67ce737b87b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4edd9081-aa74-4a6e-a2df-1f4ba5a1f2d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdf0a1ae-dc18-458e-89be-645e9deb556f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06d62da4-89e3-47b4-abf3-e90574e55d44",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a21a011-3425-4123-84f0-1db3300ff87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e55cf98-81ee-4b3a-abdb-09b8a63db5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76193cae-4447-4805-a22c-338070c11a66",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e79ff24-5f14-4d54-9279-42ff3703d4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54450fc0-077d-47b8-8858-aaa95d396196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8af41a8-0d25-4439-83bd-5d6f3ae53545",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f7bdb7-c52a-46be-a4d6-959ff6cb2f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45431607-a0e1-4d4c-8e6c-3287e06833a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86eca097-faaa-4f96-bbe5-a3bf7f2923e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f7e94aa-69eb-497f-b342-aca3757200f6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0be03e-cb9b-4593-8f69-b142155adb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "510dbd5a-f30d-4702-96c7-4734cbca88ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d34b620-9ce8-4bf0-ba80-a2c7a9c49196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03726f23-ca70-402c-8a78-c70527d8af8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "603ecbe2-5ffe-4ec7-98b4-486436f40d89",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86acf123-af2b-403f-b927-f95f0b720c32",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94883fe9-9f08-4aaa-bf4b-87abd9b1463d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6b2b98ae-5222-41a8-b973-64e8ca6d8b4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de70adf6-ff26-40ad-9680-6dc81878cba4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c6762482-a669-443b-aafc-87ab6614cc98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da39df1f-92f9-4692-a71c-bbff2a787417",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b493619-751a-4d3c-9bf4-0733092c0c7c"
            }
          }
        ]
      },
      {
        "id": "86d7fff6-88a0-42e3-bf96-349a9aae4d4b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "63747d67-1e4b-4c6f-94a0-76a2ee163f3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81d182cb-86ea-47f4-a355-8b93626d5beb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "39d1d5de-6deb-4c1f-9b25-e6312d32040f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56de07b8-fdae-4afa-91b4-b13e594bf08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c8dbd6-0ee2-4194-8e4a-6fadccdc6c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0709fecd-945c-4b50-8ce6-eedf28a86859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0412f84-407f-4fb9-a13a-e023b9c08165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7972fd07-9079-4049-9130-93a2445a138d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe10fa8-4390-4ca9-862d-63979c946de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8b4b2b-8cb2-48dc-bf2f-06815508b461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae14ffa-e65d-4467-b575-c829de4fc1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94f99fa8-c1cc-4ded-a25b-6decf75f522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c538a19c-76f2-4312-8863-e23c27bf496b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d74264a-228c-4067-9d5a-f3d2ce56a3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33834815-0ec5-4863-8c0b-26c6d9e661ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa685463-bb60-43f1-8397-8535d9604130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a7fd51f-5f1c-44cd-9a94-e08413bf86ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7b0434-5e9a-425f-9b41-76a3fefe4e79",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036adcdb-6fde-4610-abc8-5f99e0ce4423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6ed0db-6dc5-43bd-8676-331a98131137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f100e7-6c0e-41d8-8346-0d6f1b117744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7a6a5f3-cb7b-41b3-9ac7-0ec16352e10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a71ff72-5063-4332-bb91-2004dd05b68e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b147a91f-8d32-4b22-8b3f-d250b9e4fcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ae8b8f-927f-4671-8769-7f5edfadec7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf974d5-0a61-4ca3-a85b-62bd3a6e986d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f25ce834-67ba-44ca-979d-0e9db952bc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854e8182-54ce-4904-b5b1-789446faad23",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe402d0e-00c7-44f7-bca5-29501646943a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237647c4-4b32-4916-954d-7516c3d3cf68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a21d405-72ce-41c3-a25f-5a33a67bab84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1f17a63-f464-4f8f-817a-59846febb523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fe33e3-fafd-47d8-a687-cfd3bc4ddfe1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a87f1b5-4a9e-4cf4-9652-b6c55e8f6188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a0320c-3665-411e-968f-1ba8b8a04ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5924449-7c6e-422f-b695-d63526646a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "718ddbb0-55fc-482f-9d4e-80eba450b706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20504513-de1d-4e02-9e71-8c0e4d5d5360",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66147d5-3941-42ef-a284-0802936c8dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9350e4fd-0977-4092-8fe5-36f55a091d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cee98e2-f05b-4207-8c5c-fb5cf27d777d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95454ce3-da77-4827-a963-481b01dfd097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc3d339-91e6-4f09-add9-2ec8596d43c7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b2a4df-7974-494a-b74a-7df62e369d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6236b753-32f6-458f-bab3-71890db494ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac48d1f-9e95-458c-8063-0bd62e8d3834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa237ae7-e18f-4d94-9159-5ecf7dcba31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e0f2e7-7360-471e-a2b3-68681bb1bf1d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e56d284-cae2-4d14-92ea-e4e9ac00d9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dc65b6-ef75-4f04-b65e-b14bfd32f01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91992b39-f1f7-4157-8eeb-ed42deb2f99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ec4b2be-335d-4049-8927-6785b0c43608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e6a3fc-8ea6-4102-a829-aeddceb91ef2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd08479-c6c3-4fcc-9d02-f3b6899254c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b551238f-7ae7-44ca-b8df-399e14a011d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9608feb-ae9e-4d87-9551-6e34f9975f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3221f4fb-9ebd-4d9d-a8f6-0a68967fa9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d43e463-eca7-4dec-b150-55a8a18bf75f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedbe5a2-547c-4e9b-9a81-0872b7a2aeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb40fe11-568b-4b48-a6d4-c4f65f8ee30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8510486f-1e49-4860-bc28-9f1447888374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6d9796e-83e6-4cbd-b148-d981c887c90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cb515c-1236-4325-9681-24933480cc66",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af00944-f8ca-4a82-87a4-7d281a059988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfd89ee-7b20-4f8f-9e9f-02caf9c9eea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608d487e-7335-4bad-aa65-7060d362f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf85380d-570e-41c1-90f7-eba24f876978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19340ba3-ba47-476e-afbd-9d17eda094e9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0704df-1fe4-4b59-ad49-fa4c91f9be5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da48448-5c0f-4911-bcfa-2a97554fcdc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7685a3-a31c-4a64-9f65-168eda32daea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cc2341d-52a1-48c5-91d7-8f0fa75bc3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed961bdb-13d4-498d-80ad-8b2f0d1c6e8c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a086eac-5583-4eca-a826-290a8f13aa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef14d1d-cad9-413c-86cf-6261ac0c9ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a331bd2c-cc79-47bb-9f7e-a024b1764659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a98e6be2-764d-4499-ad7e-02715d6ce212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba17530e-41ab-431a-8bda-faddd470dd80",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e40d95-17b3-421e-bb91-455d28bcf55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600f1bcb-e7db-4821-9daf-1fd7fe1de454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c4c281-0a2c-43c6-9f4e-6f8347eeab77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb161609-98f9-4690-b6c2-011df92250f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a67276-594b-4c1e-ab48-cf306a019af9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b668eb3c-4c0b-4002-8769-23602e4a3048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e900553-3f2e-4cc0-95f3-5e382fb64ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003dce4e-f95a-4047-bdbc-426cb6bcba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dee255a-d2a3-4d0c-8abf-1f997b119440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104687a4-04be-4c5b-89e4-f65f04bf6822",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d65ae2-e313-45aa-866f-267cda2e7b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c6368d-3910-4d16-bdd4-cd6779533a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840cccd5-2b10-40a2-8b25-513bcdd99cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed96489-e03d-4939-8e6f-8f65e7240f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bba78a2-5eb9-447a-aca8-17292a02d884",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605c0205-bac5-426b-99e8-c301bb22a912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c814a8-a4e6-4f1c-9670-89ba8ba4d82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46624056-04a5-4f16-8bec-25bd3477c33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2db8a780-8b65-4793-ab11-ec91fe2804c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449dacfe-1d8c-4ba6-94cc-56f2787fb62d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d2fad5-bfe5-4fac-be67-279eeb676d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068d2b88-1680-4b20-a073-82b10181b99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da86a10-ba58-4eea-9c5f-b69b51c3106a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d928885-e5bd-44ef-8519-698cc37b20e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01261c5-4d52-4ce7-b93d-3be39830076b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1dec3a-203a-4f32-9fd7-35c397504f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926265e2-776c-4932-b126-98af88d94beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0026848e-7cf7-4ae4-a1de-4e3df8b569d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b15eab-2bd7-48f3-aec4-8bb38ce57f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49651226-f657-4708-bbae-08385e330781",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d34126-bec9-4f6b-bd17-7f8d06202724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c1290a-dd66-4de7-af8b-23443eeac045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94be7c1a-126b-4f99-b2dc-dc18edb29ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba3dbea-1dd6-4221-ac87-7eedbe992e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b748f2f-bcb8-4348-9d2c-d171c1f8fe73",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51dcecaa-daa3-4ced-a27b-21ac5c89314a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37539a64-5605-48c4-8e73-4eb8608b6962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cef97d-5e08-4b1b-a2ec-1ba8c0db9502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31c32a0b-1357-41c7-8882-1995d473be50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9c70fa-c34a-4799-b29b-9d3f3d18eaf0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8af89b1-f543-45d3-80b0-65d4ee03f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ccf31d-7939-46c6-9ecc-a0d462875ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d509afe-9ef0-4b93-93a9-93fd317bfdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2acc6ce0-84b8-4154-85c5-7004753f7ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86da1eaf-1202-4e3b-8fa5-8fe04717dc26",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8cdc9d-7800-407a-9511-bd383e5d213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36262af-204f-435b-bf07-e1cb4b59fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fd2de3-8d0c-45ba-b68d-3db990c404d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "848ac150-6a5c-48ff-9363-cf0f4ff8b9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd3943a-183a-422e-abe0-7710ffdce99c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a249d4dc-6430-4a1a-acb2-a2f0d275b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e0a390-1c71-44e0-aa61-d4775fd6eeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ce3350-6c1a-498b-8cde-b880ef962c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4b718d-55eb-4c13-81f8-2ba685e28f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2a5f0e-f99b-4a84-90b1-df4e9b656015",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be11212-36dc-481c-980c-0985e9628e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf9bb5f-6524-4535-b2ac-9277b2e1eae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4ed076-e004-427f-9392-2e9f9f3f4500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd948995-a150-42f0-aac4-af9ac55bf90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bd052c-81ea-4160-bc24-e3aa39e7ef06",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68086f41-0dd8-4fa9-9272-5f79c6c6f715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ef5f82-c6ab-409a-be23-b92090dd0e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34162625-0269-4d51-9e69-3920c18597b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5755c4-1f97-41e3-be77-d8464faaf8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a9019a-ab52-4930-b921-029226dce6eb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c225bc70-46e0-491c-aaf8-57965f5dff2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0948bd39-8bba-4fed-ae9d-f58f10ed8e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1511724e-196d-4d78-9360-8cbb0bb41ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47caea44-5f66-4e67-85fd-5e76206eec57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f95ff8-ec96-4623-8018-c4e9ef3524c0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25caebec-2f1c-4154-96c9-41e841eed130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7339817f-ee30-41c6-9a63-01dd531ad888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3d117-ff55-4789-89d8-02953e2c7510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "22fabb0e-5bf4-4055-a782-10cfd5fd6935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fd245b-4e57-4e94-82c9-7731ce342602",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e20c55-cbe7-4943-bb28-f39deada06f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4194c0-8bd4-4a6a-a88f-ae5051513600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daff8f76-877d-40df-93ea-9031f3f1dbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1af309f-ee03-4715-a07f-8e6cdc9c568c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8cb1c0-c8f8-4bcc-9187-64f9ce6ebb40",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1ede97-a591-4087-b8f5-27242eee827f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80adcb84-51e6-407c-a11f-eb0455869edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa37f92-1cce-477d-9982-dbc36dc6af13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f5c8e01-3bdd-4cdf-8a31-d6f29a5f50f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5232cc5-272c-41d3-bd1f-9a347d3ad201",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3b87e6-fc69-48d3-b28c-e1328876f91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9583bc5b-3568-4fef-81fa-36ca1b062fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d40b02-40c3-4193-b7b3-2e0c105db11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f332b91e-ca66-419e-813f-1c1f316cc029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34786c1-a613-42df-9288-0b1f45db8a1d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4441eb1a-7e02-46cb-9933-b7d674a8c79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2f033f-b428-4cf4-af45-06d396a5f86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2dc161-2f28-4880-97b4-67e78de794ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4940af-d072-4f6f-ab12-707cc9c098d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff5145e-603e-4920-81d9-0aba6a142bf5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5024c32-4a6f-4ff5-850d-3388b79bbffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bf42ae-1337-45f3-a80b-a198ddcc7231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e389950-1af4-4c3a-bce8-0a7cecba1204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba1d2a5-be40-4e1d-8e6d-db949c418b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f12d6b-8c17-4ffc-9ad0-3304c6584b76",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6ce4fe-6bd1-43c8-b4db-c69016fafefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "177b1c0a-6a0c-43fd-ad3c-9e8892acd239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a278e-4eeb-48a1-99ef-289746772782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d521aeb-e179-4642-8008-d77c8dfa3291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7e8256-2175-4f1e-ab43-a7021102f131",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0fbac8-fb24-40e9-a2e5-5e72c2a3a103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8198d423-b56c-4ee3-83fa-18f32b5323b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e774f75-3e41-40f3-81ea-14edeed81f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ba549a-98e6-4002-9456-83e580b20e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a35695-4a69-410a-86ef-99cb5779dc7d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfad4441-fa8b-486d-8077-6ff6b5d14e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69af7d33-8a3a-42ed-8be5-ca9fdeeb77e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdbcb78-6f49-4c62-9301-b5d95fb27603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba69ac9-915d-47aa-91f3-48c67a36355b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adad7315-4fa2-4f1c-a301-63d0c136550b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a806ee0e-2bde-4ddf-ad3e-eb850d5513b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a44c2a5-3af1-442b-85cc-758a4af1ffcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06acb840-016e-487e-83eb-988113227d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3378ff-4d42-4eac-aab6-5e9f6648217e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49ea069-18e3-46a2-b9c0-98144978f496",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bbfeef-a2a9-4011-87a5-ca744090bda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7339ae-22c7-4648-89df-d222d100e520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b02e096-3717-4245-be91-e3c86f9f7b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2d639f-aa3f-4922-af2b-5ecfdec914d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9338e663-e9cf-4221-9954-1d7c5442c606",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba3748-9d78-42e5-8ab3-a86a4774d2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8005347d-e5e7-4dce-93ab-ea207900bdef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04eae31-9744-455b-9392-affb85d599b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf85b549-6c4a-4d29-8833-a87824c2844c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b35598c-0139-4848-82b1-0062b7f0282e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92bd1e4-0456-4620-a09f-047f5a9cbbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec311e8-0e7b-49df-b1c9-95228ac2f729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a659b6e-aa26-4056-9868-66763691397e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "60d54f7e-ab60-4f03-b6ac-9484645cf803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db8a71e-b866-4813-8b42-933c2e85ccf0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350fddac-5c49-4486-b212-511a59b56ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f65757-5a15-4339-a089-f7fc03835453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2a6ad9-01b7-4447-97c1-490115adb5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fce1816-639f-44ed-a283-893e0d6f979f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf31e7c8-ebaa-4299-9b7e-c341bcedf8bc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26603142-4e6d-4729-b67f-1359e4a6f06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562a9866-f8d5-48bf-b18c-2dffd74250ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91282208-4e45-4bab-8e7b-ed77d1cbcce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "db0a5fb4-4ce0-4b4f-b6e8-88877d96853e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6935bcd2-0a70-4607-9d29-c1d468ae586c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f44632-9d4e-425f-be51-55f609e6882b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3f7118-0389-423d-ae01-43749358eed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a7430c-24a2-454f-bf59-988ebfbe1753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "784150f5-8407-4e74-bb85-d3711b099436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26030220-4398-4797-a748-f08268fa324c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be16f2cb-83b1-4797-9079-8a2925c8238c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e031d1f-ef5d-4d10-91cb-c36dabecbefb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d546753d-30b2-4ddc-addb-bf7e74ddb6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "251d865f-fb33-4e45-9c06-8b74934c3b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d367c4ac-ec95-49f9-96f5-e7c694475b86",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f825db-af3a-4cd9-8d72-5fe8e204c468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ac3b32-3374-4080-a8e2-b7344cd9aa49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058a4702-4db8-46d7-8433-6c180b54e6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "213cdce4-abce-4460-91c2-9d409e2bc32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32d1fb0-0173-46da-967f-83e748d89f85",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970e35dc-c49a-4b7c-aec7-2358fdb623dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409dd868-6df0-4978-aa60-705459562434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5359de-b258-41a5-8b7e-0009ba039ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae3605c-1fbe-49af-8f86-6ddf3d1f33a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7e8ed-a825-4d41-ba69-da7bbac01aa7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8937a88e-d83f-4afd-8542-c010a86968cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18ad874-48f2-4381-9be1-953ad9d78f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f29168-accf-4cd8-ac94-af681fa8d13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf5246c-e29b-4b06-8bec-e14a250d47c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37728a85-ad29-48df-85e7-03c5cec22030",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cbaace-74cf-409b-a3a6-0b3a6b916c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c46e4b-d018-49c4-bba8-f37eef0ae7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e767368-56a8-4ad5-acfa-ae9de5e28579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e53e244-318a-4cda-af4e-5c7cd2157309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3dd9dc-b043-43ca-af76-348a123d7b12",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55e21e9-0eb2-4e79-a9f7-1d8ed7c512fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17874cd4-0f39-4f5f-9c1e-f36c4381bfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da5983f-1181-4a98-bd68-a58fe66461a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fd25ec-0e08-4c2d-80d6-6119a6eb8163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe784682-90ee-475b-9d23-caf778e76b86",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5972216-d155-4496-9c16-b389d0128665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d419af11-1bc1-4824-a685-60014a8a81d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d3825e-2c59-4546-aa78-bdd0411c8a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59d0499-be61-49f0-bb73-617481cbf5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d15368a-eca1-4b83-b89b-ba1f9f51fec6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f30360c-4960-4858-bd99-e0a18d878357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a314254-6e25-4ae5-84ba-13604ab26f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6952b76-25bb-4b45-8c9b-62b351fb0e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d4b174-6e3d-46ca-9f6f-7ba1f3911071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b5c252-74bb-4036-987c-44d832f7b6d1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b264b7-5983-4699-b6d5-cbd6eac12a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36bbe2f-4925-4b8e-bf46-7e689441bee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a5f2ff-d2b7-4a58-8b0b-30dbbd0bcf93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2e59eb-89a7-4794-bf93-3cb3404ab612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fa2c60-9f48-47fe-bef1-7ac98670329a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faced639-0774-4944-bee2-119e5b156da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5763510b-d56b-44ed-a71b-9c31debf63bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3d00b6-9c5b-4388-ac55-5d17278ded6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d48082fe-591f-4eaf-9b23-b93687616c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73946608-79b8-4bc0-b121-da7b7bb65bbf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac2c627-053f-43f4-834e-9f8b7aedb768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66794bed-bcec-445b-b68d-46c8efbff584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bbb1a9-ae01-4e31-8573-b9c18892a868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd2a467-ef9c-4124-b58d-09d7cbabb0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1927b308-5668-45dc-8e88-6e7a90e70acb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9923dbf1-12d5-48f3-8f9b-e5569860e712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529a0919-2623-437f-a0b1-c110e22d7982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7f9b92-86e3-4b03-a48c-ee418e18702b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1cc9ab-f38e-4dbe-8947-8bb5229ed4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999f50ab-949f-42f4-b848-4cfdc79298af",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e349bab6-8009-4285-acac-21f9e0d0b540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e400e9a-e479-4755-bacf-07cc66c1aa2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3585cc25-d378-4a61-a4f3-ec36d16313c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f34cb6c8-58e8-4468-ad63-7e609d43d39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d25d04-4c37-4b7b-985d-6f92b2ab9f86",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dffab0-3fdd-4d35-b4d5-e05e50acf4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8b7439-516c-4333-a481-e75d57ad4517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944ad966-3828-485f-a186-d8d97d83e032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc3ef66-8b94-4e81-a719-7e2b94f9b5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad9e1f5-8630-4b71-aec9-959b392f76ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84159ef1-2f5b-4e38-bcea-a168322435a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d40ea16-0dea-4fd6-9420-4f08ddc7e4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa346c4-73ce-45ab-8eaa-b43b8c2cfb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "808f0757-ea6e-41ff-a193-11781807778e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4f87e3-f73a-489b-9c29-480bb965c3f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74b9646-1b47-4d2d-88a1-a48b317d927f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebbe8e1-9533-4045-b04c-e4b0516beb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9bba5c-08bb-40fd-a033-d466c4876a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "da075992-53ea-4967-927d-92a6436475b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02291dc-1bc5-41a1-a2f9-92678605cfc0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c9c8dd-4f6e-4ffb-859f-c051a2b263cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a77b6b-9819-4748-9458-5fafedea2aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9184ba9e-a5f1-480a-8e0f-870c4c9b89a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c94e30a-92e3-4085-aad2-b46dff166c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2073cc68-1963-44be-81af-5edf12d10e2f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36608626-08e1-46ab-8920-dcd427bc80df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a5181b-b8da-4421-8f74-127ff0e8bc2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f16ee3-c6ff-43fb-83c7-0fd705c8d4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5fd1a6-6cbc-434e-a418-5699c705554e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b719ab87-7d5a-4b2e-b4dd-6444a901e7b8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6804af82-2bd2-4274-9c10-d434ab5b8796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab3afa7-df1f-4bed-a19f-13c48fdc8a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88844e3c-d3c3-4565-a546-059c986dd2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf5d684-ea4e-45b2-ad8b-7fde87930f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1554c1ff-4b2b-4ef6-b358-f4a87a9141e6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760daf11-35e4-49e7-b605-690d36a0fb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2464934-b720-4ccd-bdd2-e69a3684a8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f67b88-5c23-4a62-9753-eec78795f760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8970b2ca-6d50-4f53-9ffd-bc5bfd0d60ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307b30a8-adf5-4243-a606-e7e8865b0b1f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ccd341-7207-4cd0-a07b-4f5e79136749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb2787a-999a-4a04-a319-2aef466ba773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee495a13-755e-4576-a767-5656eac763fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "535f55e5-efeb-44f5-8431-6905e153b0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc477c2e-98dc-4d07-ad6a-de72c27967b6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e60bc5-2ac5-4df1-8e08-bb77d39c6cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b46d96-eb48-4fb6-b108-04c270054f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde742aa-ecd4-4c57-8200-4543c849bec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11ca3620-6e42-433b-b4c5-8ccae509a21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083a0980-5909-4403-b3aa-72af6fb8858a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6550d5af-12a3-48c2-97df-6a82765d325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626a89d7-6748-4a79-a42d-8799e6af7db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ff6871-98be-45be-9088-f5aa72a8854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f86827-d3ea-40f2-b6a0-e3ead02fecaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3843ec9-7bb4-4b16-9db0-3203b77f93a7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a396e5-2760-4ee1-9750-8e91d30131cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef22fe6-8349-46c4-a1fc-635d034e19cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7077e0-156c-4db7-9db5-4ef2900b39ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "155e8a36-486c-4db7-b3e0-c259e31839e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d265a076-5fb5-4bd6-814a-eb32bb6f20ce",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec78d7e0-b3b7-4d25-9cb7-c9420517e339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9197d51-68eb-4a2b-8946-f454249753b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5642338e-49ae-42e8-8b2d-39d14a6cb2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb0d89a-d390-4c59-89e7-1181e4f449e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7760d9af-45d3-4e7b-b00a-f6a01179d14e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff85aa8-2839-4d5a-a7ff-275f61f0b22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7801d273-53ce-41bf-946c-cd3ab1a85940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fccc36-c24e-4cf1-a9b3-23995564fc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4dc715c-07dc-46e4-997a-565021e7923f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835717b5-f8d2-44f9-8bed-416218029b38",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8887c0ca-4e3e-4436-90f9-e5150360f61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a840da-766a-41dd-8e59-380c5d369ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea10c47-f01c-4a9b-9686-3569fb285dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae7b88eb-60a5-4810-a5b3-5eb1d9452188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa4369c-4238-4849-8e53-543ad6cd41c2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a069d8-5597-4262-96e1-69d9b2e65ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bd1ed1-233f-4c3c-9519-1dfbd32cce71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c377e9-b5ed-46c9-855c-04bc58900316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32f67697-a2c0-4251-9240-9572ec00e3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b1b951-22f2-4920-b55f-0d04875302ca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b76b4b-9fac-4ebc-bc8a-dd8797faed07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5149f7e-17c5-4cdc-98cf-6237bb45d87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795851d3-b9b6-42fe-b3be-c840b27f529c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11ce981d-b1f8-4430-bce8-d465e58f963b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bd36f2-83fa-438f-8712-81c7744d30e1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d008d96-3a8e-43e7-960b-4807787e2ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dfce59-c1a6-4e6e-a727-dd8f799418c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930748b8-5dd0-4338-a845-b11e992d5ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f713e194-be3a-48d8-9e26-f811cc757b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567990cb-bd8a-4f36-9261-e40970d929f8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b28d4d6-b87e-40ce-b252-f00d15897d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1438ad-fc5b-479e-90a9-9f1bf888d85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70c142e-9c6a-4932-8847-01eb2acaf6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a28da28-5be0-4468-9946-6c0ec2776047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870f153b-f0cd-4e50-b7d7-dc612986d331",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071a0c4c-f18c-4eb1-aa80-ce688967866b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c131ad86-dfbb-4ec3-822e-603aaa03ed95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6aaf2f-9a86-47a5-99c1-d3db48273c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a2b5a0-803f-45e0-951b-2aec0c7d30ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d647705-8fba-41ed-b0b5-f3a547654e20",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abed23d-854a-4ed8-8278-47ecb69b7767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be597400-7003-459a-a000-8f57872fd2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fa832f-2df4-4ffb-8f96-e1451669a38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fda3f659-540d-4d52-84dd-9155c4cf8e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0fb340-4764-4322-aeee-ac8d75c9336b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37932f8-bbe5-422c-a583-011b8d58c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c847004-eaaf-4af5-9f51-a2094bc5755e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452ea35b-26f1-49e8-a272-550890fec4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d20426a-f48a-435f-a81e-438bc42e0f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9e7cb6-4a41-42cf-a9fd-5788b7c3cae5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308755d0-83c9-44a8-a51a-3764d4052547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299c2dac-6e7b-4538-a8ed-27155cd10700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c460b88e-faaf-4ebf-afd4-f85d649e66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4adedce-3c6e-4054-9369-c7cf9101c5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cd448d-e04a-4214-997b-3dee6b7759c0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08fba7a-825a-4a58-8cf5-494f95ce6104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0095e388-4995-413d-8c4d-673da7c4902e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d18a895-1731-472c-8ec0-8d6e162dcd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9691a51-7e65-403a-b77f-57e88a94cc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed5563b-1bb3-46b1-8a3d-fd5fb3345a0b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800bfe3d-0789-4b89-9120-aea88d7b44b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b05d9f4-b0f2-432f-977b-8b1d2f60a3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf4aa9c-3a9e-4b5d-958f-f53ba50b5cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "247a723d-8b76-4bc7-bee5-e26d950aa147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfb74c5-58b7-4e88-9fdd-ff20f6ea669b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7bb7f5-7d27-4802-975b-8b98948c31ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "150d235f-c1e3-4a2f-857b-6736150308be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba115ccb-e9f8-4aa5-9eb5-938ebee3bc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9890d5-2f4b-48d7-957a-5b7fe9af08cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ee45fa-ba97-468a-956d-bf3d08eeaffb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa30278-52f0-4c73-a9a2-68b905b1e64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f909ec-fd1c-468f-8594-c9f109a1767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c9ee78-372c-4f02-b9bd-e5d3398b9349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8001d106-8bad-4498-a91d-9eec39b3547b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d98edba-006e-4cdd-8a77-e07b2e9b6dec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accc63df-5c64-4b7f-afa8-36566c86a6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b4a65d-c92a-4440-bda4-0ca1556298bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb406db-7da9-4a03-aa19-956a0f8655a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61724dc7-cb79-4eca-bec0-f812f2fca1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af0105d-8d55-492f-9a28-d4ba1d1f2a82",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fd834e-ed49-4c22-aa23-fadff37989fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6653689d-f6d0-49b8-9531-09a708de034e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636d1450-5c8a-43ed-b0ec-20f2c69c2408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd6ed3a2-d349-4a69-a5f4-ff2fe20b297e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f49778e-45df-44bd-b352-7922d8e53fcf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c0fe15-50b5-4469-b3d0-d96c6ebe7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da7ab5f-14ab-4848-bc02-6ae046573161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8266d1f-c573-49d3-99ac-170e861e265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d70cc35-9f39-46cd-9c15-4a3e91630cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043a7ee2-b163-420e-8581-7a120b083f77",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6d71df-3d7f-4ea6-84d0-6e4c7152b192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9eaba4-581d-4d5d-bf03-e286e24b36c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7d5e74-ca70-4256-8efd-8ad23756ad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd6b137-b5c1-4117-856e-4c126aacdbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115f244a-761a-4188-a503-0548b00e6413",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652463f7-67d8-4636-a727-a8ada28db705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8adc9f1-604f-410f-ab5c-665a46dc665e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6123e1b-8153-4acd-b231-95945c38b7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "27ba1cab-6cc8-4faf-93db-481b4febd1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9cd708-60b0-44d5-9001-f4230fefbaa2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598cd45f-0b28-41a1-97e3-47012d9b438f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6215cf8b-2a1e-41e0-b539-241f1f4ea386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e566e7da-a9c7-43ff-ad04-96a63c7957ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9555d075-dce1-46e1-9246-d77c3497556f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d4525f-a926-4962-a3ff-72a5f1346539",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a1ee95-f768-44cf-b170-1fb2c361ec8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6e421c-9f68-46e5-99df-abae773b1c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978df594-a3fc-4d1b-af15-896f224d67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5ec9f9-e1f4-41a6-b01e-adfd34390cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25ffe22-ae00-4c18-9200-c7136e16d336",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b11893-36e9-40e0-bdb2-a0b62c1e9ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dd4ae64f-d5a9-4378-a2b9-de400ea135ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692a9359-cf72-40a4-9828-d78c3a202f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "65fb39ab-a3f5-4886-b7c2-891d51245691"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fdc8500e-1088-4de5-ab5b-6c6c230fc3aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5cc808d7-23c3-4973-bf74-9f87e4e991ec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021a24b0-fb82-41a8-839c-427ab4911921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6b0b07b-6e9b-4cc3-8e0f-b61830692045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71650274-d505-4ce2-8e47-0ea67fe247db",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ad53221-662d-4a28-ab63-726879231453"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9786bfd5-a287-4043-a634-e0f4b024c8bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "999cb527-7457-4296-8e6a-bba65dea350f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5812880e-a3f8-4964-b624-76a893a1ee91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "050941bc-4be3-47fe-8f28-14381a9dd27c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2353e650-c92e-4363-98c2-76b663a4473a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4082dae1-b93e-44d4-bb8d-94ff71bad70f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "032acf1f-f8b3-452c-9533-f806d597fed4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a4f0124-2e4a-4e2e-9afd-a2566428a275"
                }
              }
            ]
          },
          {
            "id": "005960f4-e1f5-4cf4-8c44-14d4e073b6e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a406f51-7f1a-47cc-99d4-cbd59506a509",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aca0754-40d7-4ace-8bf1-cf243a4209b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc9f645d-c48a-4541-845c-54463cecde32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "388904b2-91e3-4a8b-8885-7be3623ab277",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76fa9b51-fa28-404f-9bf4-f1245d1fed5c"
                    }
                  }
                ]
              },
              {
                "id": "ecaa913e-3e03-409d-b3d8-d9affc33bbef",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e34719fc-49cb-43f5-8dbe-2e1cea42f5f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e58303fa-38a5-4794-a683-ada314521b7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecdcf8da-c9ec-453c-b9c0-052c3194803a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfc2a922-4407-4bb8-a820-0074e3b9cee2"
                    }
                  }
                ]
              },
              {
                "id": "8e7e6273-2783-4739-99f0-f5db67fb09a1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce4cf195-703d-4a8a-9ad7-f51371c2a57b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9164334b-6092-454d-8189-8f052f896e0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fab0f33a-14ae-4930-b3db-6850e989da6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7a150d4b-b58f-4839-8d0e-eaccf74632cf"
                    }
                  }
                ]
              },
              {
                "id": "920d658e-9db9-4492-95ff-44a1c6a491d2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25d957f-fbbf-48a9-87f3-fce789d4e5ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4723bf2a-4e1e-4672-907c-95acbde86b2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32ce03fb-cf40-4d99-9220-64d8f5978eec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3ea5e412-b066-41c2-96f9-45daf35ef531"
                    }
                  }
                ]
              },
              {
                "id": "1c0d6f7b-3ca7-407d-bae9-432c81ea5de4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56fd52c3-53dc-4422-b256-1641ddda070d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d8f98c9-69bf-44a0-8076-09b3f59caba1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "998928a3-0a06-488b-8eac-ff56d7680232",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "37131aad-eac1-40a3-a619-bfc4a59b458d"
                    }
                  }
                ]
              },
              {
                "id": "5a2d23c9-8f25-47a3-afe7-77903370861d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea879d0e-eb45-4fb2-942f-d39fb2ebd64e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "528830f3-de8f-4452-8ca2-ec3dcc1a0bc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bac7bd4c-c3b4-46f5-813b-1ca93846d742",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "28f94b3e-1c57-4b79-be8c-a7e590b81fe2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98b5d583-a781-4d44-9c6e-df930ec1b0f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4a3ef2e-2f75-4d05-a9db-67eef0986029"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5ae5d0c0-0653-46dc-bb06-7e09cb430cb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f745b89-543c-41bb-bb39-65d1d7b64e53"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d476794-7039-4fdc-90fd-75f1ffe9b2e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5756a840-89dd-4374-ba59-9fab57aed095"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23c98af3-15ce-4356-8a2a-ca87162d48f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "595e711e-1f96-411f-9811-f30bd8ec8fa1"
            }
          }
        ]
      },
      {
        "id": "8471b2e0-e2a0-4f3c-a61f-6165e16b4c73",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f9742471-dbb3-41d1-8e9e-c709df6e9758",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab14b778-c691-47b9-98e9-755c0bf67627",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "19ab4cee-29d2-49fd-bef9-dff8016a0386",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea397a8b-9281-4642-88ec-54108fc62bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba0a74b-95c3-4678-9de8-8249ef1aa88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a86674-5ede-48e0-b902-21652f80185f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f9745e-e5f9-48bc-a595-27150283d1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af484061-482a-4db4-b5ef-746afa32818a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8f8b97-3535-44d5-a1e9-e12947cada85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d63bd0-dcc9-46fe-abcf-ab88434c9dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268ebb4f-87f6-438d-93c7-0c1be6b38648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3479ca29-4857-470a-9807-033806d0f885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244a18d1-90d9-4f8f-9af5-e5ef0a1c4fc3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761f8a50-b382-413f-ad92-723303639031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a26848-f949-4f85-9228-90e48b580fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e908fb-55da-43b0-9db2-2b1a29927745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "127c7ea5-34cc-4e7b-9bf2-63dd8dcccd93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62056770-1fe5-4f50-9a17-2c5d1bf125fc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f4a54f-4a58-455e-bbf6-18cb914a5a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3be53ee-109d-4d21-8102-9bb73fd6c3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4da37-a07e-4061-8faa-cb8df30c6535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e71aad-6476-438e-bb3e-1112b22b076d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c646ee-5718-47d2-be87-8138fe9ad29e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469b162c-8a5e-4da4-bc49-9c571e77aed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513cf3c8-6d00-4990-a4cc-bb771e55ec07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6c90ef-b004-4f7a-8a8f-eccc7d629ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f07d93-76dc-4272-9537-bc24f63d2843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1e88b3-764e-45a7-9f72-c1c34169d683",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df79b78-b8fe-4cb6-9967-eac36ad5d950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31dc169-dad6-40fb-95b4-ca81682fb088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526afe3d-8234-40ff-9ba4-e38a575dad2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b79f15c-f86c-4eaa-b8f3-5a94d0c8010b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d646eb1-5a62-473f-ad01-1f0c9a2f9e1e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197176f-2a7b-4fc2-9fa5-99ba769b02b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21ace23-5f77-46a1-a9e3-38a283b8ce5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c8b0de-75bf-45ed-a8a5-447d0e7f622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c742ca-bd21-4797-bb44-d1a7acc643df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1520b095-435a-4e56-b87c-7abd2b9ea6a3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4499736-ad5c-4f33-8854-f81e3068f773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279b1f1e-4d3c-4b66-bed0-25591f760447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa365d1d-4fa4-4f8b-9d7f-0cd4c5fa8230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4b79a7-c011-4a92-b305-1ea84ddd39c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59c4b4c-ba70-456f-9d5c-b0718315bfc0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5290e370-18a2-4b88-a2f5-dc1190f06fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3244d2b-629d-455e-a9d9-079704515c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ead063-589a-4d99-8c6f-93446dd7f1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "909d7645-8d64-4ef8-b835-744159d95cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6cbe0c-838a-4034-84f7-67190126bb89",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb69658b-55b9-4a77-a8c6-992a8aac34e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c8cd65-643a-4d32-a850-6ef545ffbe75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc32472-74d5-4e41-bc81-c0cf4bdb5600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b13a5a3-785f-4e39-96a0-73266d681177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234c5338-f04f-4c7a-a809-6ba55bb6ec42",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de596ba5-4101-41dd-bd97-be317cf43f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b157396-6df7-4e35-974c-623f40b5e0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10734e3d-e740-4c85-9cee-9ac4bc96501f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "19fa9984-265f-4c5d-b579-92004fdba229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae878e6-c610-4262-b3dc-d00c3ac38f5a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a54313-5c77-4d92-adde-256607317e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc4bb9f-0e61-4c65-ba23-552fe20ee36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77126c2d-d23d-46fb-a107-44b38b2d03c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b842464-739a-4b5a-8a1c-978f4057fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb0e800-5269-4915-8a97-1070d3a004c3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7cafc8-0273-448a-bcc5-5ae9bb2429a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e064c57-2bf9-4325-9af2-aea57eacfd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568214fe-6a5c-44bf-ad65-a4121e7430c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d99b81f-f3c1-4a36-a4b5-abdce7813e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b910d6cc-9290-4668-b791-96ea37301477",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555e3e59-e8c5-42bc-b0eb-9e17555e82b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ed47ea-705a-4a52-9f5c-8427565d1276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeacf1b8-f974-4202-b120-cf72997d4c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "db405e1a-7565-4897-92d2-0d151cb8bc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d112bd-2422-40d2-b9d9-dd5206a21422",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d61079-2f3b-4f79-bf0d-958512d743a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6a0562-121c-4e9c-9454-3c7c9a1f5960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8d1e13-4fcc-45fb-872f-b868e3acfa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "49335b8e-ccbe-496a-81c1-77db4afb7fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fe3122-2a0c-4ba1-8ea6-13dabae727e5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7facf947-f497-4370-8129-cc0c5638df55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7b5159-25f1-4cd3-bcb8-d93d519f2a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b165767-f336-4922-b1e8-b69428cdc3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d37f5be-831c-4df2-8808-4bfa634cd600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f38259a-30ad-4dd4-8423-c67bfe018513",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0a7a28-794c-4a61-9fc8-0d45f0278ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a127296-59e1-4eb0-bc08-9597de77ce9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773aed2e-3e8f-483b-9bc3-2e9a75466738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4a6783-d844-487c-a891-0e4d9f7435f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa555e5c-dadf-492a-92ef-2a6efc02ab28",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbb52c2-ff69-4b45-89c1-6b6302ecad4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1551fb-95bb-4bb8-816d-d749932c8252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340be4be-37f9-40ed-a6aa-5293f53fd0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59b08df-ad7c-4e45-8a4d-0b53e8ac6de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00a676-8a10-44f5-89bc-8a7fb71fc734",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8b3508-c29f-4696-b81d-ff29041125bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9744a515-3407-41d7-a1ec-6013b4352f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a9ff05-d0da-485b-89d2-607ae6d13e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b5c6d1-cd8b-453e-bb5b-9170dc85f99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dbf236-5f0b-44af-b534-34e83b6c8441",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f274878-3741-437b-82ef-6aa17bf3124d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea95712-b394-4a37-b1f8-8fc2bf82ceda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989a9e69-d06a-411e-81eb-0408042f629d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf0b6a1-f1e8-4303-b8c5-925ce983fc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baa464e-4030-4713-a0f0-20635f6425a9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88adac1c-bdaf-493f-a342-ddc4a2e8d11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf13e85-f460-4603-a644-d2131cc1cae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9617f177-8e3e-4901-b001-2ad7754cce68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ee2de9-9166-4402-b33d-28923527d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47dea27-4b00-41e6-92a0-30a04c74ed66",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fabec9-6bc1-47ee-822f-877d67574e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ce707a-b2a3-4e5f-84c0-9ff358a6a5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a5bb02-db8c-4acd-abe6-611c2b520a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35f94fcd-1854-4b62-8c2f-b183f092eda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b100266-ddd6-44da-b50f-7a6194e763d9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc905670-6052-43b5-9ead-3739d004a06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9a462b-267d-4af7-a806-ccab7037a415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bacee00-e614-4728-a4ef-cc1d384ac020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99751319-15f3-4368-948d-93d34befeb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575d6e7e-2785-4bc8-9697-b83e9174083f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbac199-518a-4bd4-9fea-ece1c967e3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a47510a-0d95-485c-a533-340669fc0ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fc2ce6-4f80-4303-b71d-ba1443690ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52e7a05-6709-48df-a021-b330ff833bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5cd706-cb0b-4add-b4ed-8cb7dcaa7ee6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f209a46a-49ac-453b-977b-3f67df8b1bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02bbd9f-ed7f-48a1-b4d9-01ec092bf9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6c2415-3589-43d9-b9fe-307de7e9ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f4aad8-2370-4066-a71b-52c86e26f480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300189c5-ba70-4177-bfb7-38e1d8a5fe58",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c144720b-f996-415c-bf7d-8e7b634b9b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e530bf9-b0b1-4c6e-9134-a38581e3f52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a53f20-a2ae-42f0-ab2c-ed56046230e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a496e894-d5d3-4aac-9ffb-bc6d6e29e779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee340221-ea46-4c1a-8dff-73b973c3e3cb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8655d7d6-2363-485b-8fc6-5fcb629f0969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157cad4b-2548-49b1-8930-cd9b77873f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b208b1-52aa-4626-b50e-0ced55b61fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "921de7c5-01dc-411b-813c-4ad7585c55b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4456a2c9-57a7-4a8d-ad2e-ad994abf1f6a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9faea63-16d0-4926-b58f-433fca32fad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a8759e-776d-4daa-9993-ec619edcc6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718a4679-84b0-4042-bfe0-ceaf9bad783c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a20d2229-e52c-4dd7-8316-6a1c31795fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e17f6-eb39-40d9-869c-2280ea767aff",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21890a86-c880-40bf-9291-e6dba5d4c830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf64a98-a8c8-44c6-b762-5fce24b3eacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5a70fc-233e-4b14-b990-b1cb9b412bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec77f0c7-5f1d-47db-93c3-8023c7c800f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149aab57-51e1-4edf-83b3-a714a9335520",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f49621-b66d-434b-93f7-6254117bc36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e6e356-93fc-4959-ab33-fce42adb8818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a431db-adff-4cc7-ab38-47ba7d33ed48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "850741cc-6124-49cf-9041-a3111abb0367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0bec85-c7ca-4492-9e1f-1ddb29575a40",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a527f53-4b8c-4e30-b95f-2f0735cbebb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8ea2d9-2a81-4305-953d-80ab53db4f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a343f0-5f7d-482b-8776-c4758752859c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6cc46c-1776-4a0f-8f4f-c9d3c3f5246c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca57be36-5699-4741-9327-29d3743ef831",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358a4b94-e3d2-4eed-bb5b-1d83fa9eba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42777b10-f81c-403f-81c4-86ff2b3e4aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9f9111-504b-4bd7-9394-06ced27e8f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b423cf-4076-4dc0-8b13-e48563ccf93a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "79cbccfd-46bb-431f-bebe-09d92ab73895",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0c5204d-a02b-463b-a5df-21beda0cce23",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a27c8-780e-4167-b8f8-8cdda6053d98",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "899697ac-73ff-4cdb-919f-9a08baaf41e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fdb8d3-0d97-4a40-a902-e46c6cca9dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a1a18ab-afc0-4363-96ba-71f66a0c2ea6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3c3ef6-ec32-4d70-9b7b-96a0423ca455",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce3d2016-39ce-40a1-86de-854ce12e90b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aef5f23a-ddc7-4b26-b7eb-b1d4b01113e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e592d61d-9f80-4701-997f-c4920ab5a9ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57508d41-1598-4d1a-9eed-fcb43318e152",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38b8666f-23d8-4e5c-ab12-e5d13ec5e9be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "313b824e-519d-4de0-b041-ec7c61a69107",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ba8ab61-9d56-4308-a222-6ccfd882c3f9"
            }
          }
        ]
      },
      {
        "id": "f81490a9-1318-48aa-add0-7541481e3f2c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8565b6a7-26c0-487a-a608-3220aec8ebcb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45c5b4e0-7f11-4dd3-889c-00980be7aeef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ebec54d4-40a2-4c78-9c16-73b1767b100a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc54fe20-5dd2-4156-8f91-67eb8a7370c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cca4ef3-6eb7-45b1-9fcb-86b054a46dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f874ba-732e-4306-99a3-4a70c55a537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fc7270-5c4f-4527-8bd4-f261608e9d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36042d41-dcb4-4dca-a2b0-a481c028f9a1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3a8688-7e99-45fa-b162-1190869dc074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c4652f-f491-45aa-ba6e-4918142c6a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a11908-634e-4405-b9f4-7c903387b6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f24a53ce-5b16-41ab-82ac-976342ae5c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a991a08-73b9-4e08-9ecc-60b641af1b58",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287f9a1f-b063-4244-af74-6f8511049668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea159b0-49b3-4463-9a4c-5ad58c502d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b902161b-cbca-4788-8206-48828bbaff8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e71c8cd8-2cdc-4a3a-be37-353120a505d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e1d597-6bf7-48f6-a575-9ababd6b6662",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001910fb-7f3d-4408-8a24-6614b5a9a033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3aaa18-0542-4318-b9b7-dc3061c189d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60785716-b2f7-4aa9-9ecd-2ca13f0247f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5216dbaa-7566-44a0-b8b3-879a3e64f0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4c38e4-5307-4566-a197-88b00f3598e8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6900b3bd-b1ec-4a08-a846-70777fab113f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9562afcf-65a6-4604-9f94-6311151e8a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b827af3b-886a-46c8-ae36-2782fce87604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "476756c7-980a-42ce-abac-ee879c9be2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e92487-43de-4b8b-80ff-561573138f0e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c680c8-0962-43ba-984f-0225b94bab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "470dae58-7289-4073-9cd5-952793bc7270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9f0572-ed7e-45fd-8770-fa0c966b76d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a63e76-4289-468f-86f9-894010b4b4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda15341-99e9-43c4-9e20-978fe86764f7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a96334b-b098-4392-b2a2-d006e0976833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ad9f76-17ad-461c-a5d0-c9f7a6ed2f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdb5353-9243-4e34-9716-22b775a33ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "63beb94c-2083-4765-88cb-864f2ae5f4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0e3c9a-4e5d-4f67-8ea9-59b87d0bd121",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273ec9ff-1e86-43e4-9e54-8b44156d969b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16be63bb-0d8e-403c-af27-1a11ae39e27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8f65ef-94b7-4911-93b4-93e9d0b64357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29995c4c-3430-4f1a-a974-2c0c93f65f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933397cc-e84d-43be-a99a-38cfc08551a8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812aaa80-d5bf-4f7a-8c7c-c6ee382b40fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae17e45b-b78e-46b6-8fb2-c2b4817f4c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79af2aa-b153-47d6-96ad-b84fa1efc355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b329ddcf-fd7a-41da-880f-d9e463c31b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f027b1cb-0b63-41a4-ba89-4f522f55a903",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9606cb-26be-43c6-9e7f-23b2e2f0b876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d362e89e-6390-4322-b510-73822846890f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2978803d-3b7e-49d5-9289-f81a40ef8257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "485d0c99-1b2b-432d-9067-58dd3020fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3976d4db-9b9a-45ec-bfa6-83ac8cf9dc61",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65b2e23-4d61-49df-9a3e-2d96b4cce0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331ef4a8-9dd5-41cb-893a-5b4a43c9a015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65af09e-3b9d-497e-90b1-33c905dc4b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "24dc3bbc-c81e-4b95-8d31-536106710e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035035fe-8d8f-4204-9848-ef2ce6e3208b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b21fba-ed18-4898-ac1f-210b40f27ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065b9982-ed9f-46f6-927e-92b2b6bbbc8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13d8a04-5cb9-4afd-a5a4-12bd61726924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67aafdc0-5993-4d97-8ea9-9c42e1719577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfb4258-dbe3-4639-ace4-ecbbacfd3188",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d68d3c0-5c65-4f1d-b08b-7ca0b13a93af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cbc00b-1711-4ccb-81ce-8741192575f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577a9c15-9d1e-49f6-b031-7e4c5d8971db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4d3cde-5d7c-4f90-a549-d22fee7354bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760883fd-5bbc-4f46-874d-589429b4a5c8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca759c4-a769-4511-b0c3-80a4cc065590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965378a8-2e25-466b-88f4-765f4670cf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04c758a-ace1-470a-b2fa-b1f0b4733c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b69d46-f08d-428b-9f06-f18717342c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0455a883-1494-4955-93a7-347088ec01bf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da66a641-d793-49d0-bfdc-cf9a4e75a3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09e902d-0d34-4b32-a381-cc229dee72bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb4de8b-8092-4fec-90e5-b2a03874f106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e441e53-d5c5-4fe9-9d81-6ec7df63ed19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ee3386-cf1b-4a9a-b243-ab33d2be2968",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c495e9-8424-477e-a1fb-ddfcfeb2cf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c4bde9-a2a5-48ea-97f4-0fd5a059fd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751be864-be8b-4af9-b8db-d0e71f0c5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a1be49-4927-4cc9-be1e-40e6df182358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683a9fde-aab3-4786-ab34-b37b835ddcd7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eef5f11-188f-4633-a723-200b9538bf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714fe90f-f680-4374-9878-ba88c0155844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23c234c-accd-44b8-8173-076b9424f7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "15298f35-915b-44be-b773-678406107d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ed8e2c-897a-437c-aa27-a8bd855d9bf4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3e445e-b620-49a7-ac57-01b7c149fc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403f06a3-4ce3-4e54-b718-d7af288fdd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64005a7-967a-4d4f-a1be-5b1b2485b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "025d4a98-78e3-4c37-be56-740000ffa51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2493943-541d-4b53-8e99-f7f13ebdcba7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03b5bd9-caca-4fea-bf10-f89b4ad641f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfeb14b7-3568-4b65-9a5d-91485fcb7065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3161475-2291-4e44-8c60-b312864c2a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11f02c5-3d91-447f-a80b-b72962c39158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f3b9ca-a09d-46ed-bd57-8da5756f1a32",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4078f75c-7b79-44d9-aa16-27777c968b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f87d01a-9f53-4bfd-b9ca-e754d9bddecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1274c8a8-f13b-4cb1-9368-6ce7f85fd1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a4e898-215a-4ea9-9b28-6128cd047b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e581ad-fcc2-448f-9952-727a468b6e5a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e99876-93ba-4e99-b211-8b7324b153c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e51fe6-1130-4d44-b293-e2411aed03f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3216d3-df91-4b07-9825-b62f277f7a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c62a730-f800-4758-ab9d-8a4d31d33a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a56fa58-f0df-459d-a6ba-6a61f0ce126e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22df554-b716-4fbb-b105-d8d30fcd9318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090d3121-46f1-46ae-ac89-4ef2601a8553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3306d6-1fd0-4422-91f8-7ba447d247e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e46a8362-5189-4b3c-9bbe-96e7a9c238b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ccab2d-a399-40a3-b265-5169bf7a95ec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bf591f-1621-4c89-84da-5678e2ae5482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f7c330-dc4d-40e1-8122-57e6d8b6ab25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafc053f-8613-4ee2-9e77-8e899dcdc76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8a235a-3fd0-4fcf-ab70-2f20c4f06d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14246ed-ac8d-46c1-bb43-ac69b843348f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b381b51-088e-4c18-9738-bde7ed323e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3af0f91-2af1-472b-8b44-2670ae99e0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8afafba-3561-4c99-bbb0-708f6b1e8c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40eee477-f104-47f3-a7de-41cf2c325c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89b5623-752a-4674-96c3-467b75f83063",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9968ce4-d515-40a4-b955-920a31893a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b90ec0-a83e-4055-a7ac-a58c87b9d697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73495ac-15a7-4948-93e4-0365eeb51804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03823e4-9ba3-4777-9f5a-a47652bb6090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d051c0c-beca-4097-924b-0a1084088075",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee50165-ee8f-4d1a-b30e-0ba7deb4cc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac47c628-a972-4f43-bd68-7fad6cd79806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635b139a-6769-4bdc-9cdc-76523b9b5652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d516a927-5c06-44d0-a8a7-881df9efcd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0621c139-53d5-44db-8e49-f24f23d2357b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d77c61c-866f-44ce-91d1-359cd0fb8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3ad370-c7a5-4ebb-b86e-4918d8419574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aca126-48a9-437a-b898-2abd0355def7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1868ca-81e0-4bc3-a156-393e4ddf284c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d2f0bf-0cfd-470f-a338-775196ba18e9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8033f1-49c7-4a7f-8a24-33c47f04f3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1880f32a-3edd-46e2-bf73-cf04f8f12dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1732f0f-a900-4fcd-a57b-ba33bc8e5bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17303637-798f-4553-a800-1da55aee5e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed003882-9e7c-4f2b-9007-cfa4b8f108a4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d06039e-1fdf-49bd-86dc-4b1fc4634a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fead7d-e3f5-47bc-a232-254fe301b034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc6b3df-966a-4d50-a55a-d1ca19dc3584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a36a2cbc-6a9a-48d5-9cb1-3f46003ee4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85201701-0fc4-49a9-9078-66369a400cdc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c2c4c8-d1b6-4b9b-a45e-50d80c47f50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977438f8-132a-4723-bada-e5c56c1b331b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0248f909-aaf7-48c1-8a61-828346c2899d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ed275f-8b76-4763-b11f-e056d3f9c027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62946558-1d40-4b70-a3c6-f74a762a6a18",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372a6f27-4b9b-4f19-a191-469a5dfa1db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e618686-568f-475a-a189-931e42493dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d944a25-cc20-485e-be59-44b611090e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de93b10d-1f54-4a11-b586-9bb253a44e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711b47d8-1568-4c83-8c0f-f6c17a91cfed",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cfde2c-bd28-451b-adda-3a529da0932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71220a75-042a-49a6-9d51-a26fcde08436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e458df43-6c90-438c-8516-bd5f1ef10a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f970044c-5145-4353-bb44-9640c0174425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dacad4a-8514-4177-8212-63d9be26ebcd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e88023-b972-42d6-9671-24dff4346653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8152d27-68be-4361-883a-b3b8bb467086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f80b0d-bf6b-40a2-ac04-74ffbaa110a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4594441b-1489-413b-b878-0e59a6242226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5913e84f-8d84-41a6-bb1e-5e0104775843",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00695a60-55a8-427e-8c3b-fca7bc133891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7400c321-bde9-4674-9e00-8ca53d838aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fcd5bd-1f8c-4684-9e7a-61c6597f3ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c69f6c2-d14c-489a-aef8-467a69a485bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba72b7e9-95ed-4abf-a457-766451e1127e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51a582d-3921-4f93-b2e5-ad714eebd72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065c8bc4-70ca-4cf2-9342-459faefb8e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2e8e37-2ea0-4787-98fc-fc559d911297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7caf4e1e-6c40-4563-a616-1d9d7d9f38b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cdc41f-d8f4-489e-b341-4692aa0ebd40",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8979719b-da5d-4ea5-88f9-7f241f1273bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b3d947-a0cf-4796-9e97-b0c066f3ea61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a33ae4-faef-4964-ab01-434014d8f8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b88343f-7bfa-4ce7-ba27-f156da86e2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a534dd0-b6a9-4a4e-8fe5-ee1234ce2a27",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bef4d27-89ca-42d4-b557-ad34ef4fcde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf886e5-21fb-4e3b-8588-84d1ff00e63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8a5e45-76de-488e-9077-2657e34920ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "719a178a-e65a-48ea-b19d-44ceb5339e60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b7cfc2b-c745-4b92-825b-2cbaf2097f5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47ef6b5e-e6cf-41f8-8904-60558194cfcf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb619a-f90a-4063-8368-26c500945189",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6c6f01-9285-4b31-add9-524f22270df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1dbe71-1a10-4623-99ff-f754ac513cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7e5b2e4-bdd6-4d3c-8f60-c28550726666"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61081fa2-3fa9-45a9-98c7-e81d5a0de9a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bcf9697-61d2-4d88-a35b-b7ed0297159e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7d9d9e2-24ac-474d-b50d-a0ba20a1e4a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "830b2c81-9ba4-4df8-90b1-35405a8d1c6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0838c672-3454-4282-8f94-fb4e8c1b5a73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb564bee-0de1-47c7-a806-66806861ff17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d432d40f-1c9c-44ba-911c-8a8ac7892547",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cb99880-3b98-490c-93af-902ab866727b"
            }
          }
        ]
      },
      {
        "id": "152bd964-8c97-4e6a-921b-d3aaae1a63e2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "52927328-413c-4547-9608-45015491486d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "726cbb1a-7e17-43eb-9975-ad9970b396da",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aee9ee55-8d29-4459-8cb2-a76bd60d7fb6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c76ed14-87f3-4ce8-88ef-c4513e211c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01737842-b7fd-46ea-94fb-0ca030f5db15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d52b3a3-284a-43e8-b062-604311109802",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f50b66-e8c4-4045-959d-a854827ddc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa69826-6ab1-4005-8e22-af031f01c718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e360f3c2-fe42-43ab-bfe9-f2a546366b9c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96318c30-71f5-4132-b557-9edf53e55411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183c4585-b1eb-4061-a96d-e5820fc63d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc66ba1-f8d4-4176-989f-2db8b456972f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e78c4b-6a78-4376-8944-1f882723baeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c3cf7d-412e-4fc7-9b72-8980e0f76ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61779edd-6696-41d5-9615-45ea91bb2578",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c8e4b7-5cbc-45f9-8110-e7c5efba263b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510c8135-82e1-471f-afdb-2cc72edfd5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2313542-9f21-4929-b0d9-23f4d708ca54",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b749f3-de47-421e-843c-09bdf47ef005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359ad20e-9f7c-4227-953c-94eefc9b034a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3594bc25-e315-470f-aad4-d9c6322a170b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a56f88-f211-4bfc-9f70-4f3067083262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4290e48b-5ccf-4eca-8586-b5398db8a002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50b5701-8bfa-44e5-9c62-0f060ae33573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d8e148-e51a-46cd-a2e5-2f0453489326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a821bf-a819-4032-b424-0d725f3ea170",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2347718-77d0-4915-b60f-52d24190a94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34a1309-bc6d-47a0-b300-1f9dff12438e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8de8901-4cd6-4ca0-a020-9d1322489c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1669caa5-157b-4e29-95c2-ddccb9490137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9723e2-f6c2-4589-b5be-5d9d1683d9d0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66532a10-8f78-43c9-bd83-3aed7d23a6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a92b92-6b83-428d-9c66-2fd4cc509ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a78b8a-d988-4340-9d25-8e3ee5dfc751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2859f45-110e-44b8-b0fc-04431609de8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5987ba2-8b6f-4774-9f30-cc76e20d7eaa",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26febbae-a6b4-43d5-9c78-c172968ce098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b112db-46cc-40af-aeac-2b0ea5f490fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd59bd5-2f06-4983-a111-d4d145527cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe3dc0b-0c75-4299-8cd8-44cb58e5ec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d49a16d-a70a-4d9c-9c78-61da0e68b871",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a037de-17d2-4edc-b978-774131a29204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd11502a-661a-4822-82aa-2144556451ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7bac4c-63f2-4851-ada0-4792fc832510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5590e5-5b08-448e-916b-4897bbfeedd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488fc9d6-aa13-4301-9ba8-2409d57907aa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fbcc29-a807-47b9-a38b-db14234f94b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ea4d74-65c7-4bd3-8d74-ae74f3e9f9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78994258-1c00-496d-a6b5-0c4f23ba6e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c64a91-1d0b-4cf2-b00c-ec9345f188c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab04293a-293c-4f81-9958-06345b200488",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32f8f88-acdf-43a1-bcbf-2fc10e12efc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec81416-7a84-4ca0-b107-6f79e528557d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5161248f-a6e9-4613-aeee-5940e5e61a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13e0b38-9dd3-47e9-8d99-ee94e4422b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1a3cc4-0acf-4b72-b6aa-030994500179",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726ec53a-52d9-4a07-8d05-f7dca190d5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d4eb35-ee12-4f1d-878f-42d4df2884b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fe9120-c43d-46a8-9bd0-b4def9d83f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001cc115-0e4f-4e4e-8315-9c6dc0afc270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42fe177-ce3f-42bf-8c19-1f4be48eda51",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57d2b87-05c7-4565-9b8b-71360d41fc07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc6453e4-110a-4818-bc58-e0e7c9394884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6338a01-4bff-457c-822b-f30bce2672d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4302122-ecc6-40d6-b302-c35c2400082e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c16fc6a-1d2e-4522-83aa-93a96d1db1ed",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f7e7e3-2990-4196-9589-fca0ba87620c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc3e0cb2-b895-4cc7-84c5-f18e020c9f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcb2b71-bcb8-4467-bd65-0db89a0c1330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3ee890-3233-472b-90b1-8c3bc1a2c1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed95771-27e7-4fb3-990d-bb10b67b1590",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d079a2c-3b30-464a-a915-59184df03a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d171242c-ce6a-4c2c-83ff-f429fdfa1277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a994c874-040a-4cd9-8bc1-17e421886729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e3f298-8f86-4113-bf7a-a73f46abd50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55693c30-1256-4062-8309-33c51d4ae98d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcb9fc4-054a-461f-bfe7-5d4f5b8c9e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c55da4-6fd1-45b4-9ff0-cd00f956b4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13f7636-2aab-437b-9f68-644b1b9463c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5430e193-51e5-4793-9f0e-19f2ea2a837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffc747a-a1d6-43ef-a615-ab655da5dbd3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f410b7d-3a47-4567-be01-df51c45c9dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a87e8b5-3664-4c30-9e2e-54441d9a2dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3632b7a3-4808-4a8a-bd6f-dc289d8b1994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48b555e-7dc2-4915-b501-9a6a025a2ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0d507f-c9e6-4753-a4ee-b6c301fcad90",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdcf799-21de-43ce-ac3d-9a147bde441b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b528c944-8ffb-4e50-88fa-838b463db60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e8e98c-155c-4b01-9cfb-78f6ac7575d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d59b6db-d037-4c96-82ac-55029b7780b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a010ea-ccfd-4f01-9a4f-4473799b2ef9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36e1adc-1702-4b3a-a70f-1ce1bdc86226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ba1118-e8d7-4e34-9e8e-5924deaae944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccdc8ce-cb18-48a1-ba5e-d44a47b02ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6d2f3f-0048-4f07-aa11-b1ba118bb4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d73766f-408d-477c-b8ec-c25e9f63a859",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09621e96-09a7-444e-9d8e-96e57a110d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2675a6-862d-4e2a-956c-a28165661675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "128a3e25-7f05-404b-9b63-0e56d4c73902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078dd3ab-8767-4e29-a446-c42222f818db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98fde2e-acca-45fe-a869-6bf32d23f3b9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078a5451-03ce-4cda-a081-0065bf3213ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dddc000c-1101-4cf4-ae80-ee1b4a47992d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ce46d7-0d48-44fc-a1cd-ad0c0cf623e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dc9f52-6ee3-4aa1-a2fe-731a0830b1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58ee133-6575-407a-ad60-635e247c5bd8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9c01db-fa20-4698-aa9e-064b17f1ae33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c784f002-1ec7-4f85-a095-5b78902e6f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29052e76-0386-498c-bad0-7be97902c4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4883b7-b219-430b-812c-4683884e69cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb28153-881b-41d8-add4-ea949518bb38",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f45e516-4d69-4a9c-b2fb-304d3dd57d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f75f9fb-3b08-4288-9a1e-71edcae0fb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ea2c6f-b04d-46c5-a65e-04f003ab7680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47de0d0-97b2-4f4c-a391-42da2d9303f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081c87bf-d3b4-46de-8171-593362e9d037",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11773c01-1fff-4d96-894f-588dcf42cbeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6335a796-b271-40cb-819b-9b19acdcaffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7dd9f8-3b2e-42b9-8830-fdf5b9798e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e4668a-6fba-435e-ac3b-4bc0643ba653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c722aeb4-780b-48f1-a767-101929f81a1b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b91206-b89f-4c32-8aca-84e417e04f36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e741b72-bb53-4ddc-8fc2-b1318ad4d3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cc9805-61ee-4470-a94c-f8b58e173aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da439cd2-bfd1-44f3-9ea3-f0666773c930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee37230-a94c-4a8c-8cd1-0ee25608d80c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6880ca5d-fea6-4931-978c-3ab47b049dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b8e724-1ad5-49dd-82f4-8c89865eda4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5287ed0d-b2f2-4e5c-b779-ff095448e34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66578a06-6a57-4ba1-82ce-5cc1e8ddbdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826e379f-0199-4d4c-970a-f104f95441d9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cb91e5-75b1-4040-950e-dae7a9b5b2bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431627e8-aa99-4a05-a14b-6b141370a3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b974d0-112b-467f-b36f-4f8892e9867c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e175b8-08f1-450c-92df-4010a9e88aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f1c412-5f4e-41d2-946d-e8d2b201ca02",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87b4b70-8095-4b25-8469-102265df0f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a712b943-2197-43d0-ad17-93d83e930843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5ed30d-eecc-4f88-8fd3-fb10664e9a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305aef21-8a58-455a-889d-962fc892c0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32aabff3-481f-4375-af58-efa6e0489fa1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d5e673-d282-4bdd-9a86-f7bf9627bb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db6906df-265a-4360-beba-bbdb50937e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932cd63a-f7c8-44f5-ab61-b049e0b8f30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15103c35-f2da-4685-b402-f728a516e2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44520bb0-2a54-4563-a8d7-48af020d1551",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37a9b36-8aaa-435c-a54c-edb6f580245e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d10b2b3-ef8f-4c26-b9eb-08192daaa254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a53c75-448f-4b4d-98f0-6b37a1a95b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c561d6-489b-4701-a6f8-036742d77f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d97d4-9019-4d5d-a663-4f25abdcbef6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a994a59f-9b63-4fa4-8da4-d054d9e0a741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f9dc84-7469-4308-a1d0-f5761b1433ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98db10ad-4420-4087-8c85-0d43bd18fc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2d8a20-d503-4789-b279-f4bc1e1fe73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbbd743-778f-4499-a2b0-59a44c0fa139",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8cbec6-d877-4c4b-929f-1cb789335b4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f45168a0-09a6-4a30-93d2-83900d52f05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d7cd89-3f78-46f4-ae26-853f35ed9dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1ce5c8-5ff5-42af-9580-f28e7debb22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd33e84-c7d2-4023-9f1b-ea7616ce47bf",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52e5688-de42-402f-bb9f-55b0a278abbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2666280-0e93-47f2-ae63-54d31280f3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5151a3d4-1d61-4ee1-b109-d3c6698feb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6801c9-7047-408c-87c2-d58ce7bd8df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a194e4-581a-4a2d-bae4-96f0b51b3edf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04997d1d-55c5-416f-af1c-542787327800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1977e162-ffbc-4309-bff2-d0a064c79725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41168d91-967c-4ec1-9980-b1756f352df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9d58f3-d9d8-40cc-af15-3fd8c23dcdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c184730c-75f4-4a89-99db-76ffd4654ef7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4023abdd-dd5c-41c2-96e8-49efbaec90f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54984ec3-53b2-4b50-9814-e74e2fea2df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fc9711-056c-4bc9-a5fe-bf523c7f6879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201d2aac-4e28-43fd-9bb6-90c6b854ed0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87dfab7-3244-4fa9-8625-cf02381c2ff7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ca44be-9880-4343-b36b-31a448ca0667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e7f69c-6d0e-45da-a8c4-c4645afe6f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5c7b12-adb2-43d8-a54f-fda8b72bd765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11612e5a-bb8c-4130-a7c2-8eaac8477ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a5134f-632e-4abf-970e-5e6770baadbe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b325b77c-646a-455e-b29b-b6e2cc3792a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "967c8315-09fe-4316-a250-b762a39dfbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708691f8-a119-49e0-b9cc-1903e34b53ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49e4444-4805-4535-bbc4-3de6e52f9c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05641043-32b7-402a-bc32-cd8e331f686a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4780577-f690-4dec-aa13-1d95c370444b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a64ec1-5cd1-4cec-9cc7-f1400262240b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969a72bd-d8d0-437b-8cec-052b43027ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5619686a-3ef6-41d9-aa8d-467a0215a636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68315c6-5064-47b4-b8d4-d55a979f961a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f87c596-7ba8-4b82-9b38-449b8204f88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50515b7e-4463-4764-a926-e1859b82a3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6808628f-e8f9-49a3-aeea-df838f25e25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a08ecad4-0553-4cd9-a99c-74dd42b0cb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30ca059-5aea-45d4-964a-35e6e3a1ea2d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a1c042-cc1d-422f-aa7d-f737eafc35d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d685484a-e8f5-432c-9d21-a04fc6e31436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6df3a8-7a0d-42e5-b90e-e0c35d794338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27107bd3-1d8c-4b57-83d2-d17da7b9e385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7561828-851c-44f5-acaa-66f6ba466efa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aae36b4-7c9a-4d6a-b38d-b25e71eae74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be47d7d-3517-4f7f-9079-cbe893d4e81a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a293265-d9af-47e6-b179-31c755c3c5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729ed811-71bd-496c-a195-530e84c03f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509054e0-e3f0-4647-ab0f-39924b82dc3d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778db8e6-0651-4bde-8985-692c6b95fa08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f4c38d-0626-4949-bfc8-8c470281e624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d86002-b75b-48c0-b436-3fa018878fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916f7f56-b360-4fd3-aed3-0e7f12c4d1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9551927-0d44-4cdf-b560-7d0c4486853a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90549f23-4078-479a-b338-a3aa69e2b9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a175615b-fc1d-46eb-953c-dcc783f5b702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c4f077-776c-4892-a104-e2b9e2fc98b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a685d05e-e713-454b-a7ea-4c4b8a1fcf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53036c91-2572-4b81-a328-707e1f4562e8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9fa4a41-0440-4ce1-a37d-8366aa5842a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5764fc-393f-48ea-bb2b-a08b0d45048c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699fb3f0-c8fe-4f04-9014-690596edb229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab09947-bbdb-4593-8e5a-0b447764a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e9134e-269f-4340-b65c-bf935cd67f9a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13353b4-453e-40b6-acc5-08335f735805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25cf4d94-100d-42ed-aabf-2dd663e63660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632a772f-38a2-464d-b5e4-319a25604928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f84ef0-c863-47aa-a793-0b4b9356e3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c424bd6b-9e08-48a4-a1e1-6274c741e717",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581a0149-acde-4e21-a36a-c537ad9bd4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7ee343-a81f-4dbc-9d83-6346c3b6c12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bc644a-704c-4a51-bf87-60bc6908ff5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c03c10e-ebd4-4a24-8b8b-d501e0d956eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d956513-0ee4-44d9-935c-5981925ed468",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d788b5-6a85-4bc8-a33b-4244fee14ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c69d17-3948-4a46-a965-13624f43e991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c408c521-38b6-431e-8635-c5938be96142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c536ff-f349-4b06-a1b3-4836448d2d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc927ee-b23c-4810-8577-887272a31238",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6daa4bc-ebbc-48d7-bdc4-c7a78a5dc907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e361a9c-ce77-4f67-b66b-3113756e0bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c9ed5c-f7ab-4240-bbf9-57a7b8c651d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4887a8b5-9d59-47c5-b369-ad7b037088a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8773eee-ac19-4c20-84d1-d571f82b1bc8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dae847-e373-4e78-94b5-57c8674e4f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b48265-e599-4230-ba34-9a87a2f6f7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb144ce-c7fc-4831-80e0-7d939ff5f491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598c73d4-933f-4b38-8f15-ffa1fd664f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633d4acc-bdff-46e9-910a-99afdce769f9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d92c2e3-fa81-46cf-ace3-43b22d0329f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb89de63-9608-4f87-8346-61b5de62a841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918ec268-5837-434b-82c0-7e46d7b210a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b0bfc35-3b32-4e62-b772-ec2f6658dc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c1baf1-aa16-4e97-a45b-1b6eb34f6724",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44156e74-f718-459c-857c-18564e65668c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ee2906-a7ba-4fe6-86e0-a8d8509a462e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d92528-5b0d-4003-8c61-fad19e470435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5b56c7-714f-4648-b5fc-81eb114e1814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48175aab-a046-4427-9217-4939dba66ffb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956057cf-901c-4031-b18d-9610732f8c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ae2887-038e-4d2f-ae88-20104fdf0e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a461e59e-9231-48e1-bf25-9ce332fc1a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8ca62c-eed2-4465-ab1e-67b3e0372d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd73b9e-da68-4c08-b230-1a4ef99ff179",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d0362e-93cb-47e4-805b-7889b80fb120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f920c00-24a5-41f2-af80-7e80281c3d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0745125-9a6f-43fb-88a7-4f746b8c9fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2744f162-060f-4545-9ff9-bb1c38fae1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc6abc4-1eca-45b2-950a-f772af47acec",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae71de5-81b0-4823-9b64-b8002068354e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c98bbc-8cc6-4a82-b675-2a9082146b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75498db6-a5c2-442c-a1f3-575836f60786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec70224c-e8ec-44f0-9b74-6620c760eced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f959e72-019b-4303-b24f-71fb6a624fae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa21a313-1e5d-4158-8d29-00111e676c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623ce3fb-8f84-447f-a78b-252d3155e3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c1e5e0-f3d7-499a-8fec-e5265c3bd6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52b7fd1-9ec6-4207-9809-57d8feae823e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324fec49-8dcd-4361-b3c3-251b2796bd58",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144006aa-285e-44f3-944d-75d7ece9131d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1710cfe0-712c-4859-8be1-322450a73f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a753d1-70e5-4388-8bf7-cf21507c2bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fd7f8b-a501-42dd-b289-5fdfcebf4d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdfae77-4842-4a55-ad59-38ad0da42956",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6765a5-d3d4-4f1b-acbc-09168f7446f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa2819a0-2b18-4501-87f2-be9a3a6518a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5d9310-4ca5-40cf-8d4c-eb1f722f1bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1183ca-6141-4546-9312-5579c16dc7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a94fa9-14a4-4f35-b59c-c6facb0f4483",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea2bcaa-048b-4d46-b045-2d55e171ede8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8028ff6e-7d4d-4374-ab36-4ddc6194f85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726737c3-f558-462b-a7f5-8e2354df12da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe77faea-935d-4f2f-b79b-0f6aaddb47ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13843d12-00ae-4b82-a025-bed1f4bb5b1c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf3ab5c-ee82-4c99-88fa-7633835687b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced750ae-5588-4218-9c92-60932015c7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1012562-26fe-4a53-a810-5599ae730c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e851ee3-2ce9-4a60-b572-ebb70b0aaa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8159ba6c-3f00-4ca9-a3c1-b5a0cd1cf88b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a657ce6e-60eb-48ac-ac45-4895798cf634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e624f541-b08d-4a6d-8fd5-7fe6869021a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661fe6e3-50c8-4f83-b8e1-6c7dc5fb2176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c03260f-7790-4e4f-84d5-a98dee73cf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc46610-e667-4b60-80f4-86cb386cdcd8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee489a2f-3ee0-4761-8f39-c932bf432d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af8b523-67c8-4cdb-8ba0-5fbfdca8dc6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4525776-8e1d-4c79-85b8-e6b445fa3e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063fcfc1-c64d-4938-91fd-642ad07bbbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9266cc-d81c-418e-9b04-b601a2d92484",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41262f4e-6cc8-4888-8ca3-2b88ea952984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abf6d66-9b90-41a2-8f62-f208a4d36f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d625e23-84b8-4362-8ba5-5d3684e79747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943ebd87-ce56-4dc2-9d7a-e5b4ba28e431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcae555-f436-44de-8f38-a1fd9e7d3e51",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d27ff0-8c5a-413b-a408-b669cbaacb92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d05803-e310-4d14-8e60-bda519da9952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca6311f-c889-42aa-aa27-4de2726e0fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f85a153-72f1-49f1-8120-0ffe5a531bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b70e6a6-d73a-465c-830d-614ce9338f48",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3548adf-5468-46cf-9935-41ee8eb6d0b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "750e7fcf-230c-4806-9115-c82f0643c633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2581d4-6175-4768-8a00-db0ac956769b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dab3a2-2e33-44a7-9b51-3fb554a34956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab0318b-ee0a-4988-bce1-bac3fe50865a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82df6f0f-7144-475c-851c-e6571d0c57c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1dccc50-47be-46f5-8318-e686bdf86b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb40112-b067-4f3a-af1f-9cc6358531c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320d7d19-c9a2-4615-8330-6e0d790e32b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff6da6c-fab5-4b31-8de6-15cc42f2cda4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d706299-08a5-4fa4-ae50-1cd5e1779941",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c349d9-924c-4b63-ae12-e1d6a5e9f438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c32547e-c798-4c49-83b2-45ed32467f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a767e8-149e-430a-9b58-d2b047330be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2891eb75-20ce-4a04-8af7-8d5f9b8fc01f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f731178-341b-4d02-98c0-9fdc1e1b1ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95deedb8-02f8-4fdf-a538-ffcb24a55fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5653b4-f9d8-406d-891d-691575b69bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c20b03-299a-4982-b5cd-ed9086ee2fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eaf378-9838-4609-87eb-47f71856bf4f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108cb523-c076-4f2d-a696-642e65639441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7c9841-0d1f-4ece-b223-9a00548672eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd68e2c-7c57-48ab-9fe3-8d15625c4e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9de0f3b-f5f6-4590-a4dd-6077ebdd4298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b505cae-6a48-477b-9885-f800fee626dd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e93e386-bfde-4538-a1eb-bb61e026c7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a104c21-05a0-4f7a-aada-15edb0edb45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b19297-55b5-4a07-baff-4a3c7d8351f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8371273-ad58-4ba8-a477-ff6738265b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d982db-400e-40bc-a4d9-2323dcee232b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1328d548-b0b7-49c1-a083-adad3c33c6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62f0e9cb-77ba-4fde-b005-5a6e8ba8b3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693c749d-7ef2-4ed1-935b-1fe23beba5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe71fe92-3172-463b-abbe-675889922d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07eb259-4f46-4239-9391-9aacfb95e54c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c40aa9-3c16-43cf-ae44-bc9023aa62a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7537cd49-c719-45fe-a7ef-0b0221024f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e075ca8-4ecf-4da0-bf00-334264e3d1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f51a3a-ff3c-4433-b96e-9d993dc9a692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba240dbd-5048-4020-973e-621b88479a4b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bc3eef-c866-4108-ad75-4910ca3a790e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8067286-acff-4145-9da6-c2f4aef244f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55909d57-1107-47a5-83af-421c25d2e77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe51872-f847-446f-afd2-288e6ae5142e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b602760b-40ab-47bf-8b90-223c74f8cf61",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c828263-f19f-4d4f-8f04-d7971d98cfe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "837750d1-9450-4522-8c57-613c0d1d7995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f392017-9f4c-4395-a1e2-547d24588153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de02eb8-f918-4397-96d9-922a95e4071f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaaa1dcb-ab12-49d8-bba8-0735248f6d2c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54a5130-6f5c-4b89-8516-3ea0c63b06e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a87f66-668e-4f06-9a4e-e961094e0ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fb5576-34ce-4518-bd21-c59129433b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c874d32c-46db-4b1d-938a-7ed2cf39215c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bb7838-34ce-4a70-9b60-4c0acc0f0db1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19dfac1-261a-4d98-ae1c-a2a6bbeb3790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f401c28-9b02-4b25-9d76-8cc3d2f80467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e186cff8-c49d-489d-af02-7c8391e344fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01180703-221f-477e-acbf-8fac7310afc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8a3e83-0918-426a-bb18-a48d4841aa52",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5a0d50-1144-440c-9699-9631d691f528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ed29a6-fd6d-4308-a648-231bda7f9817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d43d97-c619-4d41-8519-4437738a5679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f12d35-dd6c-441b-ac8a-dfda4f8f3a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9aa365-ddb6-44ab-9131-f033f9c7516c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02674b6a-913f-4cfb-be4e-6c262b0b9366",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd69d633-f7f6-44fb-81a5-449f9382836b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf6a292-ffdc-4328-b198-7a4c2ff6daae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b615eae-b0b8-4343-8597-2f58199bde01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a71912-3200-4d64-91e1-1cfa73b8ebd8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483da1de-bd9f-4723-a85e-b0659fb517ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae18861a-4bd9-4d26-b8ca-7c2e028c1c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e353bf5-2305-4890-ae0a-188ec33cd045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cd590d-89e7-4f8d-9403-5c9a76c66843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a93ce77-8379-4a18-a5a4-e9a840de3c25",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881c357d-4c75-45a1-a362-013e2047e545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd8bd665-2027-4635-9c2c-b30d90b11af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3358900c-d06f-4b32-87d3-5344d83a0a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab309edd-fcc3-4b8a-bc19-3984373e85f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef076b6-4548-4a91-9b01-fe09c3657ec4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2fb71f-adfe-4f8b-b824-e1fde7500e03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecef7608-72d4-41a2-a20d-e090f45ce720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9c46c7-8faa-4706-a243-d5710c30fc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8cf7fa-ec3a-422e-937e-08780bbc4797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce330b3a-d92f-48ca-bb72-aea4065ff9f0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b33789-c64d-4792-8871-b754d775c6f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278e74db-fe7a-4adf-a300-70bf42cf226e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708f5e27-7a8b-4d67-9e97-de45c3b4968e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcf14db-c70d-4252-8d65-b39966c1f6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29831f8-5464-4262-8bb8-52df673010e0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd92d30-d429-4305-a438-74f09825dd4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8157962c-884a-4994-8f8e-3a36d6d2add8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06173c9e-6cf7-4e1c-9752-a4cc5b66ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d8854d-4d9b-4dd6-b13a-cd629b23afc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1e4849-64e8-4ba6-9469-31d7ff9f4efa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51817a71-38fc-4b44-b8e1-a3d19cfd15e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "495621b7-8d87-40d6-b031-68e55997cdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "985e8910-09c2-4e16-a577-ba7c90acba99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39600541-71e3-4e51-9d93-4c326c17f9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde74c49-da08-459a-b3c2-3c6aa1ffa9c4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7231009b-583b-4a0c-ab6b-ba05dea39c9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92f6e2b-f5f5-4854-9ce2-08fadb0da0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121ddfab-7813-4ca5-bfb0-cf52b5231119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5ee1fd-417f-4ac3-8d5c-97025c8cd774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a766b4-7c87-418e-b1dc-9ab646c334e2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3d4c89-5d8d-4f2e-8397-f0a1378c64bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c989d8-65d4-47f7-ac18-2d40ce1066fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a02d9c-02e7-422d-be87-65f61fcb3c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4863c052-4e92-4d24-a052-9b4b81110626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b27945-6e5e-44ea-b010-4705add18dc3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dd30f0-12d0-4d05-a52c-1dbc14fb58e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc1e9064-2600-4018-aa24-6850923fecc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1f0ea3-3d06-4918-b311-cd9617b54bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d738b9-758d-45f0-8c7e-33b125a7be79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406da193-39b7-480f-9f84-484050716605",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6655479-1699-4344-a7a9-7c1ec363f848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7453351-a378-4c1f-8294-ebd0347c5043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808be918-404b-48ff-a696-d1b20b3e0053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7455c94b-3d13-4462-91d1-9c597bfc9da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064e7d26-4e98-452d-9984-16c69eca977f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ccecba-72ad-44f2-8012-455f376e8436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0bf284f-ae3a-40e7-9b7a-13dd23ecdd33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afb77cb-486e-4645-b24c-56c185738c8c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c8bb6b-57dc-4996-8a26-1fe7579b78e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ed7bc9-4f2d-4034-9022-7fd697234f95",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a95d3-dd03-4595-ad0e-00fe1deef367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7072d10b-0a40-4e6f-ac99-3a1e9924d5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561c9d2e-1d97-484f-9f3f-6522b2a52627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd43fb0f-e86f-4ef2-b915-62c86413f8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc30e80-6013-4082-a964-03742a2d335f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459487b6-0a0c-4073-94c8-64d956449c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f917eb1-f5a3-48f6-a8f8-176ed6ffd12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004a110a-f686-449b-b9b5-73de3da7575a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b4c634-3337-4612-b7ec-eb0821f1aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300bb10a-6fb3-4ae0-abc5-57269ef33d08",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e22cb1-de29-4a35-8230-49fac7811ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389981b6-dd2c-46f5-9b84-d8d07e1cff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00af599-7729-4303-8221-9bf5a6e3311e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c700096-0858-4205-abfa-43778900d7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8501615c-1c35-4324-b710-0f2f3efb7656",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716dc407-5759-4fe9-8bdf-3e19af7f39c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16390b8-0965-45a8-99e3-2fb4875b77bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a796a3-442d-4fd1-b4aa-151a92413677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba06ebe-344e-4e69-a2b8-477c68ed89fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8add76-83d1-430b-84ad-128a1f797e3e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72e2964-edf7-4e03-9886-5f0e302873da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d879616-e64e-47d6-9330-6c22ebaba640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef663690-480c-4af8-82ab-2f3d71bb3f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f3ac65-c6db-4ad6-bf67-07f7f8144eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4615ec8-7920-4159-b973-6e9a55da560a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba18b67c-8382-4aa2-8544-b7b09af9dcf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a87a36-0839-4d36-8fe0-5ebe0611b7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95c509c-0f98-4370-a901-3bd395fb4867",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e1efaf-0a9f-4bdd-91c1-97426404a4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253ab385-945b-42a4-9867-b810db74bebb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020f7c21-49b0-45ee-81aa-5e172e6ff5e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516d4513-92c8-4777-bded-b27f325aa167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7262508a-0f8d-43c8-b686-9eb645eff63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1488d866-7871-4295-951a-aeedc198ade4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce19bc34-f9e5-4cbc-979f-66a0a8e53359",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95b02658-8309-444a-bb69-fa98619b2395"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c781e2e-4421-4269-b26e-2b66ae67e5a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46aa50fe-aebe-419e-ac08-0502e6b86423"
                    }
                  }
                ]
              },
              {
                "id": "4f0870a7-052b-4c71-9140-b2e0a88c6186",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0165590b-4289-401f-b1f9-c6a6761c2f02",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301bb147-0a4a-4310-aaa4-f3bd58d2ec12",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4daca47e-5503-40c7-9756-cb8ef5cb4995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579aa60a-9b96-44b4-8e93-6959da3d0f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa2fc820-6cf1-478c-b0f9-964e03bc2312"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6028abef-eeec-4746-8c2f-1c027b673b81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "047da93f-d569-43c1-9f9f-573ff033da01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3de933b-3259-4733-8a2a-1dd2bf960882",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd8a3a3c-e2ce-4674-a66b-bd3975322b57"
                    }
                  }
                ]
              },
              {
                "id": "f10649c1-d8e9-49b1-9584-736e31ec1351",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "67b0f5f4-ea95-4785-909e-4c1524806ae6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d03fbbc-0217-4fea-a63d-b4aeb1cf0806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "19bd195c-1f6d-45dc-989d-55b0e5015fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10429b4-8881-4666-96ac-4e4cee017dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba76cb69-2c2a-4d0a-97e7-24a7049ef96e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5b8e67a9-3c45-49c9-a709-473c71b2aef9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49c62ea4-c0fa-49c6-a2f5-d9e82b82576c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dec9c405-a584-4e6d-bf35-480ecacce857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb3d7166-87cb-4a9d-ad3f-3764537d3ea4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7b4b0ec-8a5e-4f77-8186-6a035cdf5deb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a0494f6-3e2d-43c3-8d73-6d1dce0bcfda"
                    }
                  }
                ]
              },
              {
                "id": "cab06548-1169-4330-8ab5-cf7e50bc0b7a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c562fbee-ea3d-47cf-bdb0-9c3813704a3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "036f40b4-8ef2-48f8-91d0-5eff43837dc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbfdb3e8-0bb4-4fc7-8d5b-4bfbca0cb420",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f78fb22c-6644-4ff7-af02-6d3324ca1553"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "141f95ef-6bef-4c36-a8dc-85fd2757cfd9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a3585e72-a021-45c7-8490-5fc2568d5d9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e12d3682-86ad-4776-b747-f0ae954bf386",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b88bb2a-a208-4dda-9e29-9cad0d946673"
            }
          }
        ]
      },
      {
        "id": "fd2eef36-cdbd-4f92-b13d-5d209347d2ff",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "01f831bd-34d7-4726-a9bd-86a4742e94fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f8207ef-597a-4fdb-8c10-4f55e21e2bba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c29342ed-a0cf-4cf3-a958-107cef5c40c7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200c9eb4-0296-4c9b-864a-3be1c54675dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a61ae831-85de-458e-b3b8-a3765cce5e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e1ab4c-a2b6-48fd-8cd9-a7515f4e1060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d56a9f3-6d89-4f92-9d9f-109d381d7016"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d36eb1b0-c984-40f2-b7da-352f0d21c1c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59cccc5c-85d6-4531-865f-9c89d116e8b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6001880-28e8-484d-a2df-38dc2eb46e1f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69fa5977-7e46-41b3-92e2-56b3c3ff8413"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caa01b4a-b58e-4e3b-8b3e-11b199dbed86",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3b4a02cb-ba65-47ac-b122-6bc56e56d215"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f068c5b3-ef25-410b-af5e-43a5e62b1749",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7548b0b8-a5c5-4418-831b-3091511527cc"
            }
          }
        ]
      },
      {
        "id": "aa41638d-0861-4bad-95e2-8f37039516c5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1d7006dd-f7f1-41f6-bc23-8121c9f9e5f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e3a2346-a06d-4d7f-9c4a-d99d0abc8275",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc709ecf-a717-4133-a9b5-226259b1723a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc80d928-e867-41b4-b733-470716df18f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d2bba22-2e0b-4b68-87f0-2509ae1c4a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cf913e-728c-4de0-89ff-ffc2d4253fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "983114b6-aedb-424b-91b0-8b6815a1c27a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f725988a-becf-4125-8397-8dea525b496d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18282c72-27b1-48e4-9af8-965b37eb9a10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb7fa39a-2975-4a66-a11d-a9167f668816",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfaaf76a-00af-414b-baf7-35084c3ab93a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a991db8-6540-4435-b4a6-2f0e7dcb2563",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "860e7041-911b-4c34-929e-1930e9957acc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a551b1bd-7a03-441f-9ebc-ba0ad3211ccf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a67c100c-e638-4d5c-a944-c48886598f63"
            }
          }
        ]
      },
      {
        "id": "b8aaf18b-68c6-46a7-98d2-e7953e429698",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3bad0341-85f4-47f6-b49d-5e5caf843d87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49ecd82b-c731-48c3-9647-fd0b79ee7968",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "112d2fdb-d560-4728-bb8e-b7579cb9e0e2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575b87c-0c72-4876-8091-baa22f2aef7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f4685de-b56a-4330-a6af-62b2ebbc6598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31561677-c6c7-47e2-91c5-9b989d22731e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "658355fb-bcc5-402d-975c-62393f1d2dea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bbe2f06-ee51-4a6b-abbe-8adbf398e497",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81ed4c97-5687-429f-b93a-c4347be6a8ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a9a35c2-38ab-4df6-90c0-e00430f2ae4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fda63f1-6673-4569-b4aa-b8b91bf778a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9b9e9d0-2940-448c-8e53-8a6730faea6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78e9612e-8b55-4da7-be6d-de7d71beeb16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1472544-40e0-4ce6-bfcb-2706e500fca0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0907bb06-befc-43eb-bd16-68c6fb1f9d62"
            }
          }
        ]
      },
      {
        "id": "dd75b22f-5465-463f-a644-337ea213a550",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d390b93-3e4c-4147-97e5-38300fdedc22",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63e5d0ed-0746-4020-8219-5368b710b74b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9d54a3d7-662c-407c-a12a-44ce50499cb0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23c748a2-bffd-4eca-950d-43e81ee62661",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d271c0fe-5ca0-401d-af72-117be8c51f1e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 99.14084507042251,
      "responseMin": 8,
      "responseMax": 2047,
      "responseSd": 247.21931278395368,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693701268849,
      "completed": 1693701308924
    },
    "executions": [
      {
        "id": "2a29b500-8d77-40d4-829d-3303d93ac31b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b6512636-0e0b-4a94-83ef-60ecf237a214",
          "httpRequestId": "b7b15317-2295-4b87-9baa-5ec8a7246005"
        },
        "item": {
          "id": "2a29b500-8d77-40d4-829d-3303d93ac31b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "896a96ac-b972-45f9-96cd-f2f751769616",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "d8efe514-858a-425b-a4a4-645d110c8624",
        "cursor": {
          "ref": "e27b3cb9-611f-40e2-a1c8-198b4528c896",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a08d16d1-a728-4c42-ab8b-8822cc414099"
        },
        "item": {
          "id": "d8efe514-858a-425b-a4a4-645d110c8624",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8a258f1b-738e-41d9-a6bb-df24b1a5e2d7",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "d8ca00fa-23fb-45fa-94bc-6c4817b67dec",
        "cursor": {
          "ref": "c1bdefa9-6bf9-441e-8d35-adf653923e83",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bbceebe3-f8fe-47c5-a664-439dcb9b73fc"
        },
        "item": {
          "id": "d8ca00fa-23fb-45fa-94bc-6c4817b67dec",
          "name": "did_json"
        },
        "response": {
          "id": "b89875ef-012b-4822-85ed-4dff30b86d72",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d62da4-89e3-47b4-abf3-e90574e55d44",
        "cursor": {
          "ref": "930498b5-9b91-4ab0-8a41-60d70b9c061a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "118ae8ba-62ad-4e6a-8154-310aaef6fe04"
        },
        "item": {
          "id": "06d62da4-89e3-47b4-abf3-e90574e55d44",
          "name": "did:invalid"
        },
        "response": {
          "id": "73f56231-26e5-4107-878c-ba1ea1711a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d62da4-89e3-47b4-abf3-e90574e55d44",
        "cursor": {
          "ref": "930498b5-9b91-4ab0-8a41-60d70b9c061a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "118ae8ba-62ad-4e6a-8154-310aaef6fe04"
        },
        "item": {
          "id": "06d62da4-89e3-47b4-abf3-e90574e55d44",
          "name": "did:invalid"
        },
        "response": {
          "id": "73f56231-26e5-4107-878c-ba1ea1711a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76193cae-4447-4805-a22c-338070c11a66",
        "cursor": {
          "ref": "56670b7a-23c0-4c64-9658-a845c257eab4",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e344f016-b7c4-48fa-8166-3d7c46cf32b4"
        },
        "item": {
          "id": "76193cae-4447-4805-a22c-338070c11a66",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2fa44477-99db-47a6-b8b6-27282991f864",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8af41a8-0d25-4439-83bd-5d6f3ae53545",
        "cursor": {
          "ref": "93e7ece8-3a24-46ce-b7db-58139b75d0b5",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c5ef2cff-4547-4b64-ba2f-dac197f0aaa2"
        },
        "item": {
          "id": "b8af41a8-0d25-4439-83bd-5d6f3ae53545",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8d14ece9-9a20-4441-8a18-6cab089c418b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7e94aa-69eb-497f-b342-aca3757200f6",
        "cursor": {
          "ref": "9ec2a138-0558-495c-a75d-065f2d3b8833",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "87108723-6cd4-406e-b959-62840f0fbb2a"
        },
        "item": {
          "id": "1f7e94aa-69eb-497f-b342-aca3757200f6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "39789015-7db0-4f0b-a21b-0faf751ce7da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86acf123-af2b-403f-b927-f95f0b720c32",
        "cursor": {
          "ref": "a59779de-dbad-44b6-9467-8e9b02c17c00",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1f732d47-ce54-4439-b36b-20df2fbe78dd"
        },
        "item": {
          "id": "86acf123-af2b-403f-b927-f95f0b720c32",
          "name": "identifiers"
        },
        "response": {
          "id": "2f56d4d8-a360-40c7-833c-d81f9f20cd6d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d1d5de-6deb-4c1f-9b25-e6312d32040f",
        "cursor": {
          "ref": "a223cad0-1a3b-4f7f-9054-157b3dfcf4b5",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "180542c5-6c76-44b9-b05f-5548da2d0e83"
        },
        "item": {
          "id": "39d1d5de-6deb-4c1f-9b25-e6312d32040f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5c4caeb1-8719-4329-918a-92a13ffe1957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7972fd07-9079-4049-9130-93a2445a138d",
        "cursor": {
          "ref": "6a4f6697-5aa9-4417-9a07-6fee9df46a3b",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b89e93ff-9586-4bad-a9f3-311b7a24a727"
        },
        "item": {
          "id": "7972fd07-9079-4049-9130-93a2445a138d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "18a82b01-ce46-45df-9787-17cf7b5b783b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c538a19c-76f2-4312-8863-e23c27bf496b",
        "cursor": {
          "ref": "157ca262-62b2-40b2-b850-1f5e1bb765fe",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fb3a1ae0-85cc-4beb-a7e4-ccbbad64dfed"
        },
        "item": {
          "id": "c538a19c-76f2-4312-8863-e23c27bf496b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a422f3c4-039c-4cc9-9028-d09b81b0a619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7b0434-5e9a-425f-9b41-76a3fefe4e79",
        "cursor": {
          "ref": "3223eafa-dd1f-492a-bb7a-856c98ef92c9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2222420e-3d30-4c45-8fdc-7a5aa871ca0d"
        },
        "item": {
          "id": "5c7b0434-5e9a-425f-9b41-76a3fefe4e79",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1650733e-3202-4d25-8066-f85ce5327a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a71ff72-5063-4332-bb91-2004dd05b68e",
        "cursor": {
          "ref": "6457c083-1273-4af5-856c-3ac540d09fdf",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dcfb5abc-9c90-463d-875d-1edbdf2b3f70"
        },
        "item": {
          "id": "6a71ff72-5063-4332-bb91-2004dd05b68e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "946ab571-24cf-407d-b156-8d0d5abf162f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854e8182-54ce-4904-b5b1-789446faad23",
        "cursor": {
          "ref": "864f2168-277b-488c-8f50-147d404846d0",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a7032fa7-07e5-4b49-90ef-50df129716e4"
        },
        "item": {
          "id": "854e8182-54ce-4904-b5b1-789446faad23",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "158c6771-d3ef-4023-9575-8f51b8124bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fe33e3-fafd-47d8-a687-cfd3bc4ddfe1",
        "cursor": {
          "ref": "ed1fdcf9-dfde-4b99-824f-933cd0a5dca7",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "10d0d455-1cc1-4344-808a-e580ce48317b"
        },
        "item": {
          "id": "d3fe33e3-fafd-47d8-a687-cfd3bc4ddfe1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "55a379d9-de5e-46c8-b554-a6003a0ff84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20504513-de1d-4e02-9e71-8c0e4d5d5360",
        "cursor": {
          "ref": "78f11707-7840-40bc-9eb9-84a8865d4a1c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7677f1c9-664f-47e8-9485-59baf981dbd9"
        },
        "item": {
          "id": "20504513-de1d-4e02-9e71-8c0e4d5d5360",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "be875f9d-965b-4778-bf46-3f69e69ba7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc3d339-91e6-4f09-add9-2ec8596d43c7",
        "cursor": {
          "ref": "f30f45e6-4e44-44ce-a4e9-026c2f2fee66",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d4b39e32-ec27-42fb-91cb-a579053dcb69"
        },
        "item": {
          "id": "0cc3d339-91e6-4f09-add9-2ec8596d43c7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ce27ec34-1a6c-43f3-a527-9cb67eef3473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e0f2e7-7360-471e-a2b3-68681bb1bf1d",
        "cursor": {
          "ref": "155f638c-024b-45b4-9198-fb5f128b8134",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "839a2913-6f60-48e1-994e-9f4af4d0a881"
        },
        "item": {
          "id": "b2e0f2e7-7360-471e-a2b3-68681bb1bf1d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "446fc509-fe68-4b62-8b71-bdac25e22651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e6a3fc-8ea6-4102-a829-aeddceb91ef2",
        "cursor": {
          "ref": "84f28037-4702-461d-b1b1-aff78b7e6e13",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "38709275-3fdf-4bba-a2d4-52ffccd3e15c"
        },
        "item": {
          "id": "c2e6a3fc-8ea6-4102-a829-aeddceb91ef2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9e91633c-9ecb-4aea-8be7-4deb1e9e6fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d43e463-eca7-4dec-b150-55a8a18bf75f",
        "cursor": {
          "ref": "c7a12f77-9310-4c09-bdec-7961fced7a51",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7ab31a8a-2fae-4bb1-a2d0-098731bc601d"
        },
        "item": {
          "id": "4d43e463-eca7-4dec-b150-55a8a18bf75f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2db080e5-d578-44db-9477-e397194563b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cb515c-1236-4325-9681-24933480cc66",
        "cursor": {
          "ref": "a496ba96-1480-4e2d-ae0a-e6cd2fa1045f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3725f957-87e5-4128-b642-4d8bb6f94eb7"
        },
        "item": {
          "id": "c5cb515c-1236-4325-9681-24933480cc66",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0a22744a-6807-47a8-879a-e8fe1c8089c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19340ba3-ba47-476e-afbd-9d17eda094e9",
        "cursor": {
          "ref": "5b9b0d7c-8363-48ec-9577-bd2986923236",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "93046ed9-8d23-4bd6-a0c8-029250c219bb"
        },
        "item": {
          "id": "19340ba3-ba47-476e-afbd-9d17eda094e9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "760c3f0c-02ff-432c-a316-349761c8ce25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed961bdb-13d4-498d-80ad-8b2f0d1c6e8c",
        "cursor": {
          "ref": "f364673f-bc7b-451b-8f30-73dddb063484",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "49d83fec-c752-47ed-81ed-f7f648852e01"
        },
        "item": {
          "id": "ed961bdb-13d4-498d-80ad-8b2f0d1c6e8c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6e2ee933-b36a-4acc-a3a7-abfc3561a537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba17530e-41ab-431a-8bda-faddd470dd80",
        "cursor": {
          "ref": "75cbf08e-7eaa-40b2-8b3b-d9c87c206c43",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "47e01bc8-1234-47c0-8d07-62a5e149da98"
        },
        "item": {
          "id": "ba17530e-41ab-431a-8bda-faddd470dd80",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0c2f2d88-f5ec-44cb-9c90-f0bba8b7ff73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a67276-594b-4c1e-ab48-cf306a019af9",
        "cursor": {
          "ref": "94307e37-63e8-465f-a27c-d237fac101a1",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d24bfb6a-20e8-4c76-9446-75f8aec490db"
        },
        "item": {
          "id": "c8a67276-594b-4c1e-ab48-cf306a019af9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "45165ba2-1418-4a58-8d03-208e789f4413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104687a4-04be-4c5b-89e4-f65f04bf6822",
        "cursor": {
          "ref": "621aaa4a-8748-4d25-a398-28124a746727",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b7b0ca0a-ccdc-446c-aa5d-050f4d924725"
        },
        "item": {
          "id": "104687a4-04be-4c5b-89e4-f65f04bf6822",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3a8084c1-a99d-450f-a67d-f8b49be58ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bba78a2-5eb9-447a-aca8-17292a02d884",
        "cursor": {
          "ref": "ac48023a-d9fc-4039-acc6-194629652730",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cdb957a1-6805-40ee-b229-639dbd24f8a1"
        },
        "item": {
          "id": "7bba78a2-5eb9-447a-aca8-17292a02d884",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9245feed-bd04-463b-914d-55d3ff47d208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449dacfe-1d8c-4ba6-94cc-56f2787fb62d",
        "cursor": {
          "ref": "cdf38556-776c-4272-9cc5-767b95c84dc7",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4afd9397-1bbb-4228-a584-37900f0871a6"
        },
        "item": {
          "id": "449dacfe-1d8c-4ba6-94cc-56f2787fb62d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "20a2185a-81b8-419f-be35-e72d1f1bdff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01261c5-4d52-4ce7-b93d-3be39830076b",
        "cursor": {
          "ref": "acd46c5e-6dc8-44e9-8e58-2b0f085da095",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bcd87ca3-e010-404b-afd4-083f609a64cc"
        },
        "item": {
          "id": "b01261c5-4d52-4ce7-b93d-3be39830076b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "080e5dd4-f994-468a-8bd5-2d7aafd65b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49651226-f657-4708-bbae-08385e330781",
        "cursor": {
          "ref": "69eab320-303a-4b35-9f31-b5dc08daed2f",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2e2274c3-1428-4495-80ac-a2b95e326215"
        },
        "item": {
          "id": "49651226-f657-4708-bbae-08385e330781",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "293fd081-c8e0-4a87-8fc6-d5f0c4bfe5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b748f2f-bcb8-4348-9d2c-d171c1f8fe73",
        "cursor": {
          "ref": "433ab938-1ec6-4323-996a-253e17cba490",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "747ed7f1-58ad-4b04-a5e5-d3a8b1a4f5e5"
        },
        "item": {
          "id": "7b748f2f-bcb8-4348-9d2c-d171c1f8fe73",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c71a367d-55b5-42fe-9a1a-c7b38f59d952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9c70fa-c34a-4799-b29b-9d3f3d18eaf0",
        "cursor": {
          "ref": "345a7414-ed4f-4901-9918-0df204bfd2ca",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5dc6aa1a-c114-49ec-ad04-750076634867"
        },
        "item": {
          "id": "3b9c70fa-c34a-4799-b29b-9d3f3d18eaf0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2441fbcf-3709-40f9-a451-d7a7b1aa7a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86da1eaf-1202-4e3b-8fa5-8fe04717dc26",
        "cursor": {
          "ref": "905bc8b2-ac2f-4415-876f-9fffc2177a73",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "27f3ca72-4990-4b6b-b701-9374b917531f"
        },
        "item": {
          "id": "86da1eaf-1202-4e3b-8fa5-8fe04717dc26",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d8352348-6471-498a-8186-95bed47b04a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd3943a-183a-422e-abe0-7710ffdce99c",
        "cursor": {
          "ref": "0dc4a3f6-1840-4247-91e0-b7e2c490eb5e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2216d960-d9fa-4e00-9b47-3b1061f73f71"
        },
        "item": {
          "id": "6dd3943a-183a-422e-abe0-7710ffdce99c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "26bcc90d-6489-418a-86dd-ddc397f031f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2a5f0e-f99b-4a84-90b1-df4e9b656015",
        "cursor": {
          "ref": "f3530397-89b8-4926-aecc-98a26e6a50d2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d92b7a68-2d0c-47cd-9d7c-a211db7c8c6f"
        },
        "item": {
          "id": "ee2a5f0e-f99b-4a84-90b1-df4e9b656015",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aac4a68d-d178-482b-8f5f-c82e7de51a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bd052c-81ea-4160-bc24-e3aa39e7ef06",
        "cursor": {
          "ref": "93173ceb-dde2-4918-acb2-306f49140e40",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b11efea4-3716-4b25-80d2-81f020495089"
        },
        "item": {
          "id": "64bd052c-81ea-4160-bc24-e3aa39e7ef06",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6c63a0e5-d031-41ff-a44c-e54d83753ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a9019a-ab52-4930-b921-029226dce6eb",
        "cursor": {
          "ref": "7ae2e127-5294-48b6-8944-80d7a41e92fa",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e4888970-90ae-4578-9e83-701db76a49eb"
        },
        "item": {
          "id": "f8a9019a-ab52-4930-b921-029226dce6eb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f79df01c-be3b-450e-9a24-16842b74bd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f95ff8-ec96-4623-8018-c4e9ef3524c0",
        "cursor": {
          "ref": "b7c7b067-03b8-43a9-8802-985218692ce6",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "00ad7c85-a69d-4541-8ef8-ca2b5061d1ff"
        },
        "item": {
          "id": "f1f95ff8-ec96-4623-8018-c4e9ef3524c0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "df24a93f-cd55-45c8-be57-a5d8a264b2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fd245b-4e57-4e94-82c9-7731ce342602",
        "cursor": {
          "ref": "63d68abd-7bec-46ac-a81e-58410f5e9c56",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "56393f83-5e2a-4baf-b528-e1f39c8a3a27"
        },
        "item": {
          "id": "82fd245b-4e57-4e94-82c9-7731ce342602",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fce151e7-4e68-47ba-878d-8648c7d15dbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ef8cb1c0-c8f8-4bcc-9187-64f9ce6ebb40",
        "cursor": {
          "ref": "5505725b-8872-4ec1-a997-2c79670422ca",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "169b1148-4a68-42a1-9a8c-73f4e7826688"
        },
        "item": {
          "id": "ef8cb1c0-c8f8-4bcc-9187-64f9ce6ebb40",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "12b2b71a-9c34-4af9-b434-61793978ba17",
          "status": "Created",
          "code": 201,
          "responseTime": 2047,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d5232cc5-272c-41d3-bd1f-9a347d3ad201",
        "cursor": {
          "ref": "ae2472e9-98d6-4607-949d-de891cd490cc",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6482df04-d912-4cdb-861f-6da21cd87a94"
        },
        "item": {
          "id": "d5232cc5-272c-41d3-bd1f-9a347d3ad201",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9e9b7f1d-6bc0-4255-b50e-0311fd5383f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e34786c1-a613-42df-9288-0b1f45db8a1d",
        "cursor": {
          "ref": "c277cb0f-d378-4b98-bb38-f206337f85c2",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "38d110b9-f6be-4b1d-a0af-c3e7a48fa7dc"
        },
        "item": {
          "id": "e34786c1-a613-42df-9288-0b1f45db8a1d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1ce6f2a2-ae0e-4d2f-9a39-1510b1b5bfd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff5145e-603e-4920-81d9-0aba6a142bf5",
        "cursor": {
          "ref": "e8940192-fe0d-4913-ac33-e362f5fbfecb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "27919262-3ac5-403f-a81c-b7023ba34f4a"
        },
        "item": {
          "id": "5ff5145e-603e-4920-81d9-0aba6a142bf5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f3859885-03c8-4040-825d-8f4dd35f5d84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "84f12d6b-8c17-4ffc-9ad0-3304c6584b76",
        "cursor": {
          "ref": "7af7bf1e-1b60-438c-9ce5-09e9d10baae0",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bc3fb9a1-6bae-4a77-ae37-a9dfe688ac5a"
        },
        "item": {
          "id": "84f12d6b-8c17-4ffc-9ad0-3304c6584b76",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4cd69775-0f1b-4a00-b945-bb5986a8b93d",
          "status": "Created",
          "code": 201,
          "responseTime": 1224,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0c7e8256-2175-4f1e-ab43-a7021102f131",
        "cursor": {
          "ref": "a4193d36-2509-4496-8688-91b404da653a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1977d192-f91f-48b1-88ff-a003e6136a2f"
        },
        "item": {
          "id": "0c7e8256-2175-4f1e-ab43-a7021102f131",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "62dc52ec-8b00-4297-a547-5f6d19095212",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d8a35695-4a69-410a-86ef-99cb5779dc7d",
        "cursor": {
          "ref": "95639a83-8520-4cd6-908f-0c61b25ee70e",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6c3b8fe2-9fc9-4d2f-bb5f-0e3786eaaa1b"
        },
        "item": {
          "id": "d8a35695-4a69-410a-86ef-99cb5779dc7d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0275694b-7fa3-4040-8ec9-5d36c67fe87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 805,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "adad7315-4fa2-4f1c-a301-63d0c136550b",
        "cursor": {
          "ref": "acd959e3-3b03-4534-bb19-6071a4882b6d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "12c51af7-ae2d-47f0-bc63-39190d085fc8"
        },
        "item": {
          "id": "adad7315-4fa2-4f1c-a301-63d0c136550b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "42fff670-fd41-43e8-ad00-3becf37a3b43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b49ea069-18e3-46a2-b9c0-98144978f496",
        "cursor": {
          "ref": "9dc38e00-f4a0-46f8-a301-9dbc8c82a8b6",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "35f358a4-78b2-4fb1-99e7-9980bd2e475a"
        },
        "item": {
          "id": "b49ea069-18e3-46a2-b9c0-98144978f496",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e2fee3e7-06a8-4545-b44b-762a52d5ae23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9338e663-e9cf-4221-9954-1d7c5442c606",
        "cursor": {
          "ref": "d26e214d-0d66-4a6b-82b0-2f695b2b4e65",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cfe1c846-352a-4879-84b4-3e9dc6df6c05"
        },
        "item": {
          "id": "9338e663-e9cf-4221-9954-1d7c5442c606",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "253db3bb-b6f9-4e0d-8183-e9863fdd8a01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6b35598c-0139-4848-82b1-0062b7f0282e",
        "cursor": {
          "ref": "e89d027d-9afe-4369-870b-19036de4b3ad",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "58522550-ffd5-425e-bd53-90b9a158f7fc"
        },
        "item": {
          "id": "6b35598c-0139-4848-82b1-0062b7f0282e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8e572ac4-be1b-4292-9a32-96a48140764c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0db8a71e-b866-4813-8b42-933c2e85ccf0",
        "cursor": {
          "ref": "ede83904-3210-47cd-9a7f-54571fff83ea",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fd076fbf-b6e5-4ab5-a510-fd705b8b606c"
        },
        "item": {
          "id": "0db8a71e-b866-4813-8b42-933c2e85ccf0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c5783776-4fb8-49eb-b45c-67fd51bb987f",
          "status": "Created",
          "code": 201,
          "responseTime": 1019,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bf31e7c8-ebaa-4299-9b7e-c341bcedf8bc",
        "cursor": {
          "ref": "b11029cb-131d-4ae6-b24a-141eaf7adbc3",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4b1a400e-aab4-4bd7-b1d1-f4a3c1ecfbfa"
        },
        "item": {
          "id": "bf31e7c8-ebaa-4299-9b7e-c341bcedf8bc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0485fe31-bf83-4c17-a5a9-e58ad120a8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6935bcd2-0a70-4607-9d29-c1d468ae586c",
        "cursor": {
          "ref": "1c8375d8-baff-4db7-a7d9-3c81adcb2e58",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a345140b-8826-44b2-b52b-ed1b79f9c53f"
        },
        "item": {
          "id": "6935bcd2-0a70-4607-9d29-c1d468ae586c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f677751f-d7a5-4618-a5cf-4f1ace7fc076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26030220-4398-4797-a748-f08268fa324c",
        "cursor": {
          "ref": "9f32d33e-a2b8-4bea-8ebe-2da16f1126a8",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a22dbf47-85ea-4c52-80e3-df922e5bbec6"
        },
        "item": {
          "id": "26030220-4398-4797-a748-f08268fa324c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9aedaf8b-9f5a-4268-989b-ad3ea1e50381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d367c4ac-ec95-49f9-96f5-e7c694475b86",
        "cursor": {
          "ref": "c3a4ee4c-37ac-4a0e-85fd-247cceb1e46d",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e1eaebc1-78bf-4460-a4f0-dffac310b525"
        },
        "item": {
          "id": "d367c4ac-ec95-49f9-96f5-e7c694475b86",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "da6ec8f3-704d-4c4e-92e3-c5676201e6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32d1fb0-0173-46da-967f-83e748d89f85",
        "cursor": {
          "ref": "2f52b506-a402-4a15-aea7-af1e709c122b",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5ca40bb5-57b0-448e-9a31-4dd8dc60c347"
        },
        "item": {
          "id": "a32d1fb0-0173-46da-967f-83e748d89f85",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9e2a8692-120c-4ec5-9cb2-9cd3c39dbde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7e8ed-a825-4d41-ba69-da7bbac01aa7",
        "cursor": {
          "ref": "aacec0f9-1c9c-436d-a53d-9852b963b570",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f3bf314e-5e9f-4105-8fe7-e4296f0668c8"
        },
        "item": {
          "id": "20d7e8ed-a825-4d41-ba69-da7bbac01aa7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "168ac6de-3b23-41c3-9ee1-33f827b9ad8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37728a85-ad29-48df-85e7-03c5cec22030",
        "cursor": {
          "ref": "c7820f8f-c27a-4a4a-89dc-3ee70519112d",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "19c09e28-b9a8-4e82-b4a9-93e9421fc0c5"
        },
        "item": {
          "id": "37728a85-ad29-48df-85e7-03c5cec22030",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "31e573a5-6fcc-4a83-a84a-f6009f859af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3dd9dc-b043-43ca-af76-348a123d7b12",
        "cursor": {
          "ref": "24e07242-b545-450a-b5ba-5c0b0dc3b547",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "806bf71b-80fd-4883-9240-00a65624570e"
        },
        "item": {
          "id": "ef3dd9dc-b043-43ca-af76-348a123d7b12",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d763e58-315c-4a93-908c-27b11d17d7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe784682-90ee-475b-9d23-caf778e76b86",
        "cursor": {
          "ref": "c244605a-1059-46d7-948c-524a3a360fa0",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a059115a-739c-497d-8cb7-bde55a042fdd"
        },
        "item": {
          "id": "fe784682-90ee-475b-9d23-caf778e76b86",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "088406fa-39cf-4125-82ef-a5c41c9a893d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d15368a-eca1-4b83-b89b-ba1f9f51fec6",
        "cursor": {
          "ref": "090ca669-d32d-426b-8bdc-4dd723d13c52",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "40b2e565-ce0f-4bcb-82bd-4fee0cf3906e"
        },
        "item": {
          "id": "3d15368a-eca1-4b83-b89b-ba1f9f51fec6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "61b070f0-a910-491c-a351-5da7cee86118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b5c252-74bb-4036-987c-44d832f7b6d1",
        "cursor": {
          "ref": "b7f40afc-311a-44fc-8bc4-01b1eb9263e2",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "aceba94e-4b46-483c-96ba-642bb735d4b4"
        },
        "item": {
          "id": "c3b5c252-74bb-4036-987c-44d832f7b6d1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7dd705fa-9eb7-44ab-a982-5d3ab65d8e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fa2c60-9f48-47fe-bef1-7ac98670329a",
        "cursor": {
          "ref": "8f73453a-bc36-450e-8ef6-8de14851b54c",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3b04b7e4-ef21-41c4-8c1e-10b864cf156c"
        },
        "item": {
          "id": "d1fa2c60-9f48-47fe-bef1-7ac98670329a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "de6ac602-492c-4b6d-a7b3-ed2494652cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73946608-79b8-4bc0-b121-da7b7bb65bbf",
        "cursor": {
          "ref": "215da702-a489-4e35-a321-caf41e6da8f8",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6e11ec8a-9181-4c51-9289-8543ddbc7422"
        },
        "item": {
          "id": "73946608-79b8-4bc0-b121-da7b7bb65bbf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f78acfdd-f463-4b0c-80ba-236f30a213e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1927b308-5668-45dc-8e88-6e7a90e70acb",
        "cursor": {
          "ref": "febe748b-2d4b-405f-a5ee-ed5f3d7ad525",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d21496b8-b447-4b0e-961f-42f7b03c214a"
        },
        "item": {
          "id": "1927b308-5668-45dc-8e88-6e7a90e70acb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a6311164-bacb-4985-9229-bd14838f6746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 741,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "999f50ab-949f-42f4-b848-4cfdc79298af",
        "cursor": {
          "ref": "16a4beb3-0b15-43f0-94e8-ff7288aa7e9f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "54877050-3bf9-4f30-990a-4cf9b747536a"
        },
        "item": {
          "id": "999f50ab-949f-42f4-b848-4cfdc79298af",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "44190c3d-899c-469c-a641-4e578bf49f7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 755,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a0d25d04-4c37-4b7b-985d-6f92b2ab9f86",
        "cursor": {
          "ref": "aecd703c-f525-402c-9dd3-dfc64fb39835",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e40ce12-8a84-4691-a3a1-61c27e450eb3"
        },
        "item": {
          "id": "a0d25d04-4c37-4b7b-985d-6f92b2ab9f86",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9668bb01-49f3-4ca3-8c6b-40aa32fa931a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8ad9e1f5-8630-4b71-aec9-959b392f76ea",
        "cursor": {
          "ref": "b823b06f-0870-4e68-9314-51dfb9c8754a",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b00ce89c-ba77-4a93-8beb-0fc1c7668abb"
        },
        "item": {
          "id": "8ad9e1f5-8630-4b71-aec9-959b392f76ea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "876ebae4-31a6-43ac-bc9b-98dd6a286b2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 857,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9c4f87e3-f73a-489b-9c29-480bb965c3f2",
        "cursor": {
          "ref": "a84fcd58-ad1c-488e-ae66-b238f0f1cafd",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "eefe04f4-e8e4-4151-9f7f-f5458f202827"
        },
        "item": {
          "id": "9c4f87e3-f73a-489b-9c29-480bb965c3f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6ab20540-718f-40d8-b1b1-9aa34ff724f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d02291dc-1bc5-41a1-a2f9-92678605cfc0",
        "cursor": {
          "ref": "459b7462-0290-4ad0-bad4-224f1e91c054",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "644cbf5a-ada4-4daf-9cdc-b27e379b7f85"
        },
        "item": {
          "id": "d02291dc-1bc5-41a1-a2f9-92678605cfc0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4f5fb57f-96d0-4197-bd4c-2b1039d0d23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2073cc68-1963-44be-81af-5edf12d10e2f",
        "cursor": {
          "ref": "ed925c2b-549e-49d7-b81d-b1c9086dfa81",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ddc5b2e6-04be-4230-aaed-2c76765f14be"
        },
        "item": {
          "id": "2073cc68-1963-44be-81af-5edf12d10e2f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4dedfdcc-7b93-4d0c-b50b-29f8d4edc64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b719ab87-7d5a-4b2e-b4dd-6444a901e7b8",
        "cursor": {
          "ref": "ec922ee2-0140-453c-9116-3f3b934bc4c6",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b654564a-8c2d-4695-8815-67a336e839d8"
        },
        "item": {
          "id": "b719ab87-7d5a-4b2e-b4dd-6444a901e7b8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "543fb8ab-bf91-4bfe-bae8-1d96de7aece7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1554c1ff-4b2b-4ef6-b358-f4a87a9141e6",
        "cursor": {
          "ref": "a99bf5a3-8b70-47c5-86d5-89bf7fa8bfd8",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c31ff20d-5965-472a-b94b-a2577ed0eb88"
        },
        "item": {
          "id": "1554c1ff-4b2b-4ef6-b358-f4a87a9141e6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "75b5bb45-e22e-4fdc-87bc-e4d7a1ed2be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307b30a8-adf5-4243-a606-e7e8865b0b1f",
        "cursor": {
          "ref": "d83fbbd3-1d70-482d-85fc-e27212eba855",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "08003603-2ded-4d94-8df9-b85198f343c1"
        },
        "item": {
          "id": "307b30a8-adf5-4243-a606-e7e8865b0b1f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5e093d7a-3fbd-45ed-94d5-34cb886b70ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc477c2e-98dc-4d07-ad6a-de72c27967b6",
        "cursor": {
          "ref": "46c61533-dbd9-443c-88e2-1a252af24992",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ca49f9b5-8990-4209-ab9d-8f608b1cff8e"
        },
        "item": {
          "id": "cc477c2e-98dc-4d07-ad6a-de72c27967b6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "daab6b7c-442c-4509-8c08-fb7b2cdaace9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083a0980-5909-4403-b3aa-72af6fb8858a",
        "cursor": {
          "ref": "41929aa6-e4c0-4793-b908-a539fec38615",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8f1821be-3155-4c6d-b261-b31ea295ffb7"
        },
        "item": {
          "id": "083a0980-5909-4403-b3aa-72af6fb8858a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "36ef1017-e2cb-43af-b7db-e23c5635dbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3843ec9-7bb4-4b16-9db0-3203b77f93a7",
        "cursor": {
          "ref": "e4e413fc-f0a0-4d63-9be5-fe76c18cb406",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "99989781-eca6-470f-b858-1480ae130823"
        },
        "item": {
          "id": "a3843ec9-7bb4-4b16-9db0-3203b77f93a7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c85e3992-73fe-492f-8f78-29da29081e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d265a076-5fb5-4bd6-814a-eb32bb6f20ce",
        "cursor": {
          "ref": "90df612e-80e4-4bcb-b7ac-e436f846d7d3",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "14de830e-3e34-4fb4-9551-e3281dc39285"
        },
        "item": {
          "id": "d265a076-5fb5-4bd6-814a-eb32bb6f20ce",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03b052d6-e89a-46cf-a919-f00f3edc67f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7760d9af-45d3-4e7b-b00a-f6a01179d14e",
        "cursor": {
          "ref": "20ff2a91-8ef0-437a-b09e-8fda534c70d2",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f47ab95b-6102-44a9-b4f7-86672089b3e5"
        },
        "item": {
          "id": "7760d9af-45d3-4e7b-b00a-f6a01179d14e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "247aea0c-d445-470c-9571-0eba4542e151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835717b5-f8d2-44f9-8bed-416218029b38",
        "cursor": {
          "ref": "24ccdcad-e7b1-48ba-a69b-4f905b1f001b",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fb086456-fe88-4519-9886-7f2e21166e85"
        },
        "item": {
          "id": "835717b5-f8d2-44f9-8bed-416218029b38",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2bb77346-fb54-4bf8-8192-40826ce02582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa4369c-4238-4849-8e53-543ad6cd41c2",
        "cursor": {
          "ref": "97006dd4-d43c-4827-a37b-47862da67236",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fb3ef903-7f73-4d45-981d-36e360cf4cf4"
        },
        "item": {
          "id": "2aa4369c-4238-4849-8e53-543ad6cd41c2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7b15ee86-1915-44b6-8d3c-f1b0fe827590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b1b951-22f2-4920-b55f-0d04875302ca",
        "cursor": {
          "ref": "f163225b-2d16-4d8a-b4d3-7942d48a4182",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a6c1d0a3-6973-4284-9adc-90753ba20f33"
        },
        "item": {
          "id": "00b1b951-22f2-4920-b55f-0d04875302ca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bf482d00-9bcc-4fb9-aff5-3f3ba3d29055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bd36f2-83fa-438f-8712-81c7744d30e1",
        "cursor": {
          "ref": "a8c6ad61-498e-4602-bb7c-3df5a7686da7",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a0c6f706-c535-4312-9ea2-631636561c5c"
        },
        "item": {
          "id": "83bd36f2-83fa-438f-8712-81c7744d30e1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6c6bd872-8ea8-4a0f-a174-d86ced65a0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567990cb-bd8a-4f36-9261-e40970d929f8",
        "cursor": {
          "ref": "b20e7377-896c-41d7-8d66-3b84162c834c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4f524be0-7a44-45f5-a287-9b52c6e4d936"
        },
        "item": {
          "id": "567990cb-bd8a-4f36-9261-e40970d929f8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4f9ee9da-6190-45ac-b2f3-8c069ea4f12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870f153b-f0cd-4e50-b7d7-dc612986d331",
        "cursor": {
          "ref": "a317d85a-dc3f-47c8-8d20-11b838b9268a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "301d8b03-fdd7-4a20-b6c3-772c28186be9"
        },
        "item": {
          "id": "870f153b-f0cd-4e50-b7d7-dc612986d331",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fcbf2d2b-4e67-40db-8fdb-824feebbca58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d647705-8fba-41ed-b0b5-f3a547654e20",
        "cursor": {
          "ref": "44a42b40-29c6-453e-987e-0e16ba69813b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e192bd85-7a0c-4efb-b8e5-2772b6f906a5"
        },
        "item": {
          "id": "9d647705-8fba-41ed-b0b5-f3a547654e20",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3b5922c4-61e0-4303-8c85-bcd27ee3a3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0fb340-4764-4322-aeee-ac8d75c9336b",
        "cursor": {
          "ref": "47084393-5c98-401d-b682-70e5e1f301e6",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3d1a789f-2c04-4c35-b1c2-b27bc43691f4"
        },
        "item": {
          "id": "de0fb340-4764-4322-aeee-ac8d75c9336b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8947a863-f4a9-46f4-b501-c29401d95722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9e7cb6-4a41-42cf-a9fd-5788b7c3cae5",
        "cursor": {
          "ref": "ff38137f-d1a3-4225-8226-3f75f6fcdef6",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d73a5c04-6154-4965-b907-f00877aec406"
        },
        "item": {
          "id": "be9e7cb6-4a41-42cf-a9fd-5788b7c3cae5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "61b37831-64d4-4996-b0ae-b67f60a26f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cd448d-e04a-4214-997b-3dee6b7759c0",
        "cursor": {
          "ref": "bec6d5c7-b83e-4b3f-9df8-7d2729b12599",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "63eaf4b9-fac6-446d-ba76-a27551018a9a"
        },
        "item": {
          "id": "d6cd448d-e04a-4214-997b-3dee6b7759c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9e947bbc-fe7c-4334-9621-6492316ee617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed5563b-1bb3-46b1-8a3d-fd5fb3345a0b",
        "cursor": {
          "ref": "49b2dc8f-d869-4c61-9729-a35d0178ca6d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d36af881-8797-47a5-a3eb-d2e336359819"
        },
        "item": {
          "id": "1ed5563b-1bb3-46b1-8a3d-fd5fb3345a0b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "65547150-2a56-4442-8156-18165cbab804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfb74c5-58b7-4e88-9fdd-ff20f6ea669b",
        "cursor": {
          "ref": "8e350588-77dd-4ef4-87a6-ae28629cd973",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2d986199-0770-413a-9156-df370f851b4e"
        },
        "item": {
          "id": "fbfb74c5-58b7-4e88-9fdd-ff20f6ea669b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "740fe2e3-c41f-49c1-98ac-18e309147240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ee45fa-ba97-468a-956d-bf3d08eeaffb",
        "cursor": {
          "ref": "0518d0cf-0364-46a5-b16f-8a978367e88b",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9b80b24c-5e86-4b42-86f9-3b9750f92792"
        },
        "item": {
          "id": "65ee45fa-ba97-468a-956d-bf3d08eeaffb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a5a79920-ad0b-40bf-bd84-30049d8a919a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d98edba-006e-4cdd-8a77-e07b2e9b6dec",
        "cursor": {
          "ref": "07c47c4f-9986-4873-96e1-82dda7f3f2d7",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "88161ee3-b617-47aa-a723-3a033b082494"
        },
        "item": {
          "id": "1d98edba-006e-4cdd-8a77-e07b2e9b6dec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "60b12340-00b0-49a0-9274-7b6204ff3d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af0105d-8d55-492f-9a28-d4ba1d1f2a82",
        "cursor": {
          "ref": "904bc3f7-f9b1-4976-95fc-df35df67af7d",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9168ece4-462b-4ef9-800c-56038d858b67"
        },
        "item": {
          "id": "5af0105d-8d55-492f-9a28-d4ba1d1f2a82",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "51bb69c0-12bb-40e4-9d5f-bca996df4ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f49778e-45df-44bd-b352-7922d8e53fcf",
        "cursor": {
          "ref": "f1d4f228-1d27-498c-9d48-14a0d8949e3e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "570cd1c3-adf3-4781-a6f8-bb9830e3e3dd"
        },
        "item": {
          "id": "6f49778e-45df-44bd-b352-7922d8e53fcf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9c60c7ce-596d-46a0-9113-d81b0b707283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043a7ee2-b163-420e-8581-7a120b083f77",
        "cursor": {
          "ref": "48d1921d-24f6-4d0a-b172-4e974e703d63",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4030dba1-c5b3-4628-bab5-2715db40c3ca"
        },
        "item": {
          "id": "043a7ee2-b163-420e-8581-7a120b083f77",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "749182fe-4786-4224-b645-888be38b50fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115f244a-761a-4188-a503-0548b00e6413",
        "cursor": {
          "ref": "a8f54d7c-6409-4724-ba22-7cd40cd1dc5c",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a9c005a5-109d-42e3-bc7f-028e1e1deab2"
        },
        "item": {
          "id": "115f244a-761a-4188-a503-0548b00e6413",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6cb32815-4d8f-447d-ad96-df3609fb2121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9cd708-60b0-44d5-9001-f4230fefbaa2",
        "cursor": {
          "ref": "f4e7dd45-181d-4b47-8e78-881d11c40cf4",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6b4bf98b-810a-4e8e-b0f6-aabc0e6606a6"
        },
        "item": {
          "id": "3f9cd708-60b0-44d5-9001-f4230fefbaa2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c866d255-58c5-41b3-ad35-efad77766954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d4525f-a926-4962-a3ff-72a5f1346539",
        "cursor": {
          "ref": "83c12b0d-ee54-429e-975e-eed5dee2fb60",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8bcb999c-87d0-473d-b0f1-47dc359ae34c"
        },
        "item": {
          "id": "56d4525f-a926-4962-a3ff-72a5f1346539",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "453688d0-aa1f-45a6-a966-825f8baf70fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25ffe22-ae00-4c18-9200-c7136e16d336",
        "cursor": {
          "ref": "ad820859-d8fd-490f-b583-784a44a22828",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "53a34dad-5c8d-41ce-9a48-7f137182378b"
        },
        "item": {
          "id": "c25ffe22-ae00-4c18-9200-c7136e16d336",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "91eeec34-6d77-40c2-a8ad-f4dd6883675c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc808d7-23c3-4973-bf74-9f87e4e991ec",
        "cursor": {
          "ref": "b28600d3-e1eb-4a45-a270-aaffc522e8e5",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0d735fa0-ba05-4bac-977a-ba4609a468de"
        },
        "item": {
          "id": "5cc808d7-23c3-4973-bf74-9f87e4e991ec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "60b9ec84-4ec5-49ce-9df7-b9391e8c1b54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a406f51-7f1a-47cc-99d4-cbd59506a509",
        "cursor": {
          "ref": "1c5d93f1-89c1-4850-bbb5-d95c436ea1c0",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3fe4bc42-d89b-44f7-8f70-b44752c99f29"
        },
        "item": {
          "id": "0a406f51-7f1a-47cc-99d4-cbd59506a509",
          "name": "credentials_issue"
        },
        "response": {
          "id": "68a2cb22-5e5d-4ac7-97e5-eadbc6d1feb0",
          "status": "Created",
          "code": 201,
          "responseTime": 1087,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaa913e-3e03-409d-b3d8-d9affc33bbef",
        "cursor": {
          "ref": "307b7c4e-e2aa-4905-b2d3-7c2b31cc5549",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5595a2d7-8288-47c0-801d-b680985bb006"
        },
        "item": {
          "id": "ecaa913e-3e03-409d-b3d8-d9affc33bbef",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "77e89585-757b-4876-a8b9-3950cf2230af",
          "status": "Created",
          "code": 201,
          "responseTime": 982,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7e6273-2783-4739-99f0-f5db67fb09a1",
        "cursor": {
          "ref": "0f6c50e9-9dc3-4c4d-8037-7967f3957cda",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5cf80c84-d76c-464d-b073-24b7f0e65575"
        },
        "item": {
          "id": "8e7e6273-2783-4739-99f0-f5db67fb09a1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1107c4cf-dab3-416b-9a3f-7e9c7605eafa",
          "status": "Created",
          "code": 201,
          "responseTime": 1000,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "920d658e-9db9-4492-95ff-44a1c6a491d2",
        "cursor": {
          "ref": "e0b62c7f-d0ac-408d-b0a9-4c04309ad316",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fc937b1e-9330-40e7-babd-fc0025a462e6"
        },
        "item": {
          "id": "920d658e-9db9-4492-95ff-44a1c6a491d2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "21d480c3-e306-4071-ae34-c7db480ec28d",
          "status": "Created",
          "code": 201,
          "responseTime": 1168,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0d6f7b-3ca7-407d-bae9-432c81ea5de4",
        "cursor": {
          "ref": "db8d5ca1-38d4-4b17-b3f4-d0c8585a8a39",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "692dccf7-7daf-4c68-9089-ef6a11d6f30d"
        },
        "item": {
          "id": "1c0d6f7b-3ca7-407d-bae9-432c81ea5de4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f02491ff-19d0-4bd8-bf34-681b39101b29",
          "status": "Created",
          "code": 201,
          "responseTime": 957,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2d23c9-8f25-47a3-afe7-77903370861d",
        "cursor": {
          "ref": "6325156b-a76c-446f-bb76-e025aa11bc82",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "85b9cbf4-3365-4fe6-9aea-e6fbd518e8a3"
        },
        "item": {
          "id": "5a2d23c9-8f25-47a3-afe7-77903370861d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7c3585e1-edf5-4d3c-b411-815cc6af91ef",
          "status": "Created",
          "code": 201,
          "responseTime": 1005,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ab4cee-29d2-49fd-bef9-dff8016a0386",
        "cursor": {
          "ref": "e2828d3a-b953-4991-ac71-b9446e3e3128",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f3dc658d-b899-4b8d-96b2-570d358da6a6"
        },
        "item": {
          "id": "19ab4cee-29d2-49fd-bef9-dff8016a0386",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e8f3fbe-6525-4dbf-a4e8-e8de01db4e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af484061-482a-4db4-b5ef-746afa32818a",
        "cursor": {
          "ref": "87d37876-c043-44bf-9c99-8542822735df",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "91fcbe69-f380-4090-94ae-2ddc743b2189"
        },
        "item": {
          "id": "af484061-482a-4db4-b5ef-746afa32818a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08804b3d-41f9-4ad7-9d97-ecda1896b316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244a18d1-90d9-4f8f-9af5-e5ef0a1c4fc3",
        "cursor": {
          "ref": "79df416b-1d41-447e-80e4-a80d45b2fabb",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7fd29d3e-c019-407e-ba33-f9d2d88cc454"
        },
        "item": {
          "id": "244a18d1-90d9-4f8f-9af5-e5ef0a1c4fc3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "748a606b-b678-4331-9c36-42c0283e24e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62056770-1fe5-4f50-9a17-2c5d1bf125fc",
        "cursor": {
          "ref": "746a0063-0e01-4ac5-896c-dfdc3ede1a97",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a42f9d36-fe0c-46b7-b5a6-f3da22872b31"
        },
        "item": {
          "id": "62056770-1fe5-4f50-9a17-2c5d1bf125fc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "497c78b0-a068-4951-b271-db672aa5258f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c646ee-5718-47d2-be87-8138fe9ad29e",
        "cursor": {
          "ref": "01c22c38-ef00-48ee-8ded-dab7aa06202f",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3e73a9b5-6064-4ff6-aec9-0a98074b107d"
        },
        "item": {
          "id": "01c646ee-5718-47d2-be87-8138fe9ad29e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f20697d3-034c-40f1-bf53-73f7cb1f9762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1e88b3-764e-45a7-9f72-c1c34169d683",
        "cursor": {
          "ref": "01553ed6-68f8-4e0a-8478-cbc9c3d8e1d7",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "76883788-25eb-4075-9d09-23ecae8f7ed6"
        },
        "item": {
          "id": "1d1e88b3-764e-45a7-9f72-c1c34169d683",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "26a8a7d5-1e03-47e6-a734-9fb5e99c852f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d646eb1-5a62-473f-ad01-1f0c9a2f9e1e",
        "cursor": {
          "ref": "6732177f-09f7-4301-b908-157519465e8f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b8530d64-c795-4fd5-bae2-2edacd03ce0c"
        },
        "item": {
          "id": "9d646eb1-5a62-473f-ad01-1f0c9a2f9e1e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2dbda783-2661-4115-809e-c48ad4406407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1520b095-435a-4e56-b87c-7abd2b9ea6a3",
        "cursor": {
          "ref": "7602f210-49e7-44e6-97ab-4162b3488de6",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7cdf13f5-4b12-4b35-b709-b929bf1c5464"
        },
        "item": {
          "id": "1520b095-435a-4e56-b87c-7abd2b9ea6a3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cb5d5093-3ee3-4935-9fea-6a06852a30af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59c4b4c-ba70-456f-9d5c-b0718315bfc0",
        "cursor": {
          "ref": "6b415cdb-d1e9-41bb-82f1-86dcd8147a98",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b82c76f9-6a62-4083-999e-04891179f527"
        },
        "item": {
          "id": "f59c4b4c-ba70-456f-9d5c-b0718315bfc0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c9247181-b0bd-4bde-8c40-798d926938fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6cbe0c-838a-4034-84f7-67190126bb89",
        "cursor": {
          "ref": "892d3e52-2195-467a-b450-0a32fedbfc56",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e2818f3-72fb-4378-beaa-ced5286bfe03"
        },
        "item": {
          "id": "0f6cbe0c-838a-4034-84f7-67190126bb89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3242162-7413-46a3-bb46-57dd82e00459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234c5338-f04f-4c7a-a809-6ba55bb6ec42",
        "cursor": {
          "ref": "4b09d292-87f4-40c3-9b73-793538ae3e90",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "516cf8be-819f-48d6-bc49-4553077907de"
        },
        "item": {
          "id": "234c5338-f04f-4c7a-a809-6ba55bb6ec42",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b20e1b0c-462e-4258-879a-324a2377f3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae878e6-c610-4262-b3dc-d00c3ac38f5a",
        "cursor": {
          "ref": "c58bb93e-08a8-4f2b-ba19-01183dc59214",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6054251b-e770-43c1-b7e3-b436bca8b376"
        },
        "item": {
          "id": "8ae878e6-c610-4262-b3dc-d00c3ac38f5a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "10db28aa-57ca-4df4-9bbd-b0c21cd09eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb0e800-5269-4915-8a97-1070d3a004c3",
        "cursor": {
          "ref": "0e8e1a90-d38c-4acb-8e11-2fa5271d2aab",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bd41ba92-b58d-4564-a16a-30ff7c058443"
        },
        "item": {
          "id": "dcb0e800-5269-4915-8a97-1070d3a004c3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7845303c-dbd4-49f5-b922-ab258eea37d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b910d6cc-9290-4668-b791-96ea37301477",
        "cursor": {
          "ref": "6fa4d0be-e098-40aa-a268-fd59dc01481a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "158cb413-f5fc-4bce-9653-574d214a170a"
        },
        "item": {
          "id": "b910d6cc-9290-4668-b791-96ea37301477",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81c1f17d-1170-4618-ba5a-8bef4601ccdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d112bd-2422-40d2-b9d9-dd5206a21422",
        "cursor": {
          "ref": "1804b999-a20d-436c-b78f-7f6c21157722",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "06eac1c7-a6c0-43a6-915a-6a9c70f0cd2c"
        },
        "item": {
          "id": "19d112bd-2422-40d2-b9d9-dd5206a21422",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4e34ed7c-339b-48ff-b22a-e5910624eb2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fe3122-2a0c-4ba1-8ea6-13dabae727e5",
        "cursor": {
          "ref": "4e5aa0f7-c4fe-49a0-acf0-18747e484347",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "34f022dc-d6c9-4abf-b155-f91ec3b056a1"
        },
        "item": {
          "id": "e7fe3122-2a0c-4ba1-8ea6-13dabae727e5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b1dc543c-9515-4a5b-bdea-36d0544d5e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f38259a-30ad-4dd4-8423-c67bfe018513",
        "cursor": {
          "ref": "89c77521-25d1-4a50-a86a-c44afb767204",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bd43a5d5-86fe-4860-9679-a1999e2df737"
        },
        "item": {
          "id": "8f38259a-30ad-4dd4-8423-c67bfe018513",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "19fbc0b4-3824-499c-a47e-55aadc88ba17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa555e5c-dadf-492a-92ef-2a6efc02ab28",
        "cursor": {
          "ref": "fbecb947-1440-4a07-a877-9501aa4bb4d4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "069baba1-4503-4586-9cc4-b88eb8167875"
        },
        "item": {
          "id": "aa555e5c-dadf-492a-92ef-2a6efc02ab28",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2be33d3b-6275-4c4c-9fd1-e7f6ecacdab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f00a676-8a10-44f5-89bc-8a7fb71fc734",
        "cursor": {
          "ref": "8f3f17fc-d8c3-4403-8fd0-0bb07868b733",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "372e907f-d9c4-4e5d-b566-d74164605818"
        },
        "item": {
          "id": "8f00a676-8a10-44f5-89bc-8a7fb71fc734",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "867f3748-b462-4469-9400-ef44b4e0f6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dbf236-5f0b-44af-b534-34e83b6c8441",
        "cursor": {
          "ref": "31684a57-28cd-4f71-8bcc-675ee104237d",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f7d1f0d3-54a0-4510-9b96-4e04ba5476ce"
        },
        "item": {
          "id": "13dbf236-5f0b-44af-b534-34e83b6c8441",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8f8d89d7-4d19-49ad-bd15-e1c6af8a9ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baa464e-4030-4713-a0f0-20635f6425a9",
        "cursor": {
          "ref": "b3e383a6-feed-4bed-85bd-93bc4de14597",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6eaaa2a3-6fd6-4b9e-927f-e93c8a50869a"
        },
        "item": {
          "id": "4baa464e-4030-4713-a0f0-20635f6425a9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "911e7d8c-f9fc-49a6-879c-90779bffca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47dea27-4b00-41e6-92a0-30a04c74ed66",
        "cursor": {
          "ref": "f1b22a83-2dbd-44d2-90b4-4b0582e78cf2",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e6318831-c4e7-442c-90d2-dfe3714d56b2"
        },
        "item": {
          "id": "a47dea27-4b00-41e6-92a0-30a04c74ed66",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48ac111b-6d39-4db2-a798-31da01a673b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b100266-ddd6-44da-b50f-7a6194e763d9",
        "cursor": {
          "ref": "4648e9da-903a-4dbd-bace-84bd638e1de7",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3e9ae32d-86f2-410d-af5a-ed077f8e10a5"
        },
        "item": {
          "id": "5b100266-ddd6-44da-b50f-7a6194e763d9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "be52e24d-77ad-4dd5-a199-ae1384c1fc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575d6e7e-2785-4bc8-9697-b83e9174083f",
        "cursor": {
          "ref": "cbadb2c3-7603-473b-9516-d8494f60c353",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "338c335c-fbc4-48d3-964d-03e28af229e5"
        },
        "item": {
          "id": "575d6e7e-2785-4bc8-9697-b83e9174083f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2308e7b7-e16f-4400-9462-fa7a1186e0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5cd706-cb0b-4add-b4ed-8cb7dcaa7ee6",
        "cursor": {
          "ref": "4595e9f7-b24f-41a7-a08d-f77e0041f2de",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4640393b-727f-47bd-8361-2bf5ef6d4323"
        },
        "item": {
          "id": "ad5cd706-cb0b-4add-b4ed-8cb7dcaa7ee6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d691eb83-7bcf-4771-a2e4-c36c70774eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300189c5-ba70-4177-bfb7-38e1d8a5fe58",
        "cursor": {
          "ref": "9f40a477-c0e8-4c82-b40a-fb33ae2bb6f5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9be5e986-68e0-4482-9288-7520d1098fc7"
        },
        "item": {
          "id": "300189c5-ba70-4177-bfb7-38e1d8a5fe58",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "994f7227-68bd-48b4-97df-6835ee5a3667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee340221-ea46-4c1a-8dff-73b973c3e3cb",
        "cursor": {
          "ref": "a36e6bdb-c429-4825-b5e8-d2c984933522",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2c13651a-5af1-492c-9eae-19fed23d8333"
        },
        "item": {
          "id": "ee340221-ea46-4c1a-8dff-73b973c3e3cb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c97e7f90-4c96-4cae-b825-bf02a214e171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4456a2c9-57a7-4a8d-ad2e-ad994abf1f6a",
        "cursor": {
          "ref": "57db1739-69db-4555-892d-e566949ab75d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c67055a8-c9a7-406d-a09e-caeeca47ded2"
        },
        "item": {
          "id": "4456a2c9-57a7-4a8d-ad2e-ad994abf1f6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4329babf-a12c-457e-9bdc-1bf6d555578b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e17f6-eb39-40d9-869c-2280ea767aff",
        "cursor": {
          "ref": "6c131acb-0b08-45f9-97f5-7196fecdf0f6",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a759f5a9-a958-4cf4-bf9b-d58d6d3ad0cb"
        },
        "item": {
          "id": "c77e17f6-eb39-40d9-869c-2280ea767aff",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c1040543-1e02-4903-8543-60bb7d4066d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149aab57-51e1-4edf-83b3-a714a9335520",
        "cursor": {
          "ref": "cfb4f589-2d69-4e03-86ff-d6389f63d5c4",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f448fda6-f135-49c9-96a8-58de6c843179"
        },
        "item": {
          "id": "149aab57-51e1-4edf-83b3-a714a9335520",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d7579f49-eda2-41b2-b7ad-c901880a46a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0bec85-c7ca-4492-9e1f-1ddb29575a40",
        "cursor": {
          "ref": "af3d1cc0-b1a5-4f15-b61c-827a18058ac9",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5ef2a9b0-d343-463b-bf1e-db1e15e0e9f2"
        },
        "item": {
          "id": "ad0bec85-c7ca-4492-9e1f-1ddb29575a40",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d51c7991-1e45-4ddd-9100-491006ab656e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca57be36-5699-4741-9327-29d3743ef831",
        "cursor": {
          "ref": "32a4d681-59e7-4fe4-92f3-efc7b41108ac",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eab6de5d-2156-43ad-bbba-c9eae2a6fc4d"
        },
        "item": {
          "id": "ca57be36-5699-4741-9327-29d3743ef831",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "148090cb-dee6-4753-b051-48196a38fe0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c5204d-a02b-463b-a5df-21beda0cce23",
        "cursor": {
          "ref": "f4528efb-7a68-41e6-9f3b-6c57a16125b2",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0361d186-e357-46b9-be51-d75a14f98cab"
        },
        "item": {
          "id": "b0c5204d-a02b-463b-a5df-21beda0cce23",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b698b1e3-c32c-4c5f-aae2-0f259e9846e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebec54d4-40a2-4c78-9c16-73b1767b100a",
        "cursor": {
          "ref": "2c93e0da-e967-49df-91ae-06d3d82f7975",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "40fd6c8b-3072-488e-a177-93a657af18d7"
        },
        "item": {
          "id": "ebec54d4-40a2-4c78-9c16-73b1767b100a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "49b91a35-1979-4ca7-8471-de4339648fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36042d41-dcb4-4dca-a2b0-a481c028f9a1",
        "cursor": {
          "ref": "f57ed702-4255-4a1e-966f-4f255e3081c6",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bd31775e-c3fe-4bc0-a360-4e8fdb3bb605"
        },
        "item": {
          "id": "36042d41-dcb4-4dca-a2b0-a481c028f9a1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f3c19e47-5518-4a36-b3ef-cbd9b33915aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a991a08-73b9-4e08-9ecc-60b641af1b58",
        "cursor": {
          "ref": "394671f3-965c-4f91-9b14-c4c436824e01",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "04052802-6568-492b-9571-b3973a8efd57"
        },
        "item": {
          "id": "8a991a08-73b9-4e08-9ecc-60b641af1b58",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b30edf21-68c3-45ed-beb8-875e4ef47547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e1d597-6bf7-48f6-a575-9ababd6b6662",
        "cursor": {
          "ref": "e2af0192-50ad-424c-bd52-e253a2dbf39f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "975f3219-d45f-4c52-9587-ac3daa9fd5aa"
        },
        "item": {
          "id": "d8e1d597-6bf7-48f6-a575-9ababd6b6662",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2dfab16f-20bf-438e-8b65-9447c326345b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4c38e4-5307-4566-a197-88b00f3598e8",
        "cursor": {
          "ref": "706450da-3033-4b72-a76f-d51e4c23d877",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "051a7956-01b2-45c9-baa7-c86e5bba5565"
        },
        "item": {
          "id": "6d4c38e4-5307-4566-a197-88b00f3598e8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "189be65f-df04-47e5-aeb5-c6a25e30fe5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e92487-43de-4b8b-80ff-561573138f0e",
        "cursor": {
          "ref": "4220dc51-fb10-417c-8992-0d8ffed2d511",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ceb7414a-1766-4230-8c6d-c22e87c40d92"
        },
        "item": {
          "id": "a7e92487-43de-4b8b-80ff-561573138f0e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cb28fc49-97cc-4e48-b120-342aa1687b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda15341-99e9-43c4-9e20-978fe86764f7",
        "cursor": {
          "ref": "47704f67-2c2f-4494-85c3-3ed67b706390",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c49ab589-c856-477a-8832-508f9bd7f7ce"
        },
        "item": {
          "id": "cda15341-99e9-43c4-9e20-978fe86764f7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ba52c5f-e657-424a-ae2a-cb89a300d99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0e3c9a-4e5d-4f67-8ea9-59b87d0bd121",
        "cursor": {
          "ref": "3ecc012a-5201-4cf6-8191-1ba8443225b3",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "84164eaa-8fab-4782-93c7-845f53e7c776"
        },
        "item": {
          "id": "2d0e3c9a-4e5d-4f67-8ea9-59b87d0bd121",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a74e21f-416e-4103-9eee-e8dbfd3c8efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933397cc-e84d-43be-a99a-38cfc08551a8",
        "cursor": {
          "ref": "eba09766-bfdc-4803-8dd6-f75e831061bc",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8e41390c-4932-483e-9565-bc304072b9e5"
        },
        "item": {
          "id": "933397cc-e84d-43be-a99a-38cfc08551a8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eb06390b-025b-4607-900d-01042ead6e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f027b1cb-0b63-41a4-ba89-4f522f55a903",
        "cursor": {
          "ref": "2751ecc4-3393-431d-a3bd-ef77bcbfecc2",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1a2e8e2e-3974-40e0-9619-e379cc718956"
        },
        "item": {
          "id": "f027b1cb-0b63-41a4-ba89-4f522f55a903",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de2b610d-f5a6-4323-8dfa-e14ae44f95d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3976d4db-9b9a-45ec-bfa6-83ac8cf9dc61",
        "cursor": {
          "ref": "35ff703c-fd3f-4ea5-8e1a-70e9174d3404",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5ca15bcc-25c5-448d-a873-fd43b80283ff"
        },
        "item": {
          "id": "3976d4db-9b9a-45ec-bfa6-83ac8cf9dc61",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "27494191-2bb1-4373-942e-499572403538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035035fe-8d8f-4204-9848-ef2ce6e3208b",
        "cursor": {
          "ref": "db077d4d-aa26-4eb2-b1a7-f904d100f3b5",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3698b951-a4f9-4599-a21b-04288dbf6084"
        },
        "item": {
          "id": "035035fe-8d8f-4204-9848-ef2ce6e3208b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bd610bbd-413d-4334-ace7-96d538bf6a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfb4258-dbe3-4639-ace4-ecbbacfd3188",
        "cursor": {
          "ref": "72a189df-58e0-4efa-8824-1801ec35bfe0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "38569a74-a599-4746-bfbc-f0286ec96aec"
        },
        "item": {
          "id": "abfb4258-dbe3-4639-ace4-ecbbacfd3188",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "87e645bd-3504-4a85-9b56-26128e5b7bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760883fd-5bbc-4f46-874d-589429b4a5c8",
        "cursor": {
          "ref": "9bab88dc-2fe0-409e-b44f-012ed9629c26",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "67278d33-01ab-4c5d-8fb6-c8b6796e2cbd"
        },
        "item": {
          "id": "760883fd-5bbc-4f46-874d-589429b4a5c8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "52ddeb4a-c776-43ea-abd3-17f43be6be3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0455a883-1494-4955-93a7-347088ec01bf",
        "cursor": {
          "ref": "9e989184-cd1f-44e5-a1d6-7a02fe9082cf",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4182b91e-9bc4-45ce-bf79-e2d39b2b6796"
        },
        "item": {
          "id": "0455a883-1494-4955-93a7-347088ec01bf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d7941d1c-feae-457b-9b91-a1511f7d3ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ee3386-cf1b-4a9a-b243-ab33d2be2968",
        "cursor": {
          "ref": "c71396d5-a87f-4141-aa24-bdd9b0d7d865",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7bdad41d-feaf-49fa-9a2e-adbdf1c08451"
        },
        "item": {
          "id": "c3ee3386-cf1b-4a9a-b243-ab33d2be2968",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "368d7b29-f907-4e8a-a8cb-d6d92672ab78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683a9fde-aab3-4786-ab34-b37b835ddcd7",
        "cursor": {
          "ref": "e599f49c-90d1-44ef-821b-76fdfe407e17",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cf229b38-2b49-4073-a856-ae0ccac4b114"
        },
        "item": {
          "id": "683a9fde-aab3-4786-ab34-b37b835ddcd7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6f48157a-3c22-443d-bece-8af88248030b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ed8e2c-897a-437c-aa27-a8bd855d9bf4",
        "cursor": {
          "ref": "5017aa3e-9f5d-4adc-be7b-6ca9ac2f1758",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1b901bad-41e9-4209-a22d-a6f032f8ff9d"
        },
        "item": {
          "id": "54ed8e2c-897a-437c-aa27-a8bd855d9bf4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0ca13bf2-5ac8-49e5-a292-829ddf319ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2493943-541d-4b53-8e99-f7f13ebdcba7",
        "cursor": {
          "ref": "cd14a3b4-2330-4d4a-b7f0-343c53f6b838",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4f7fd121-6992-4075-8f05-f83265dc4fb0"
        },
        "item": {
          "id": "b2493943-541d-4b53-8e99-f7f13ebdcba7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4c47a1f7-e320-4d2d-af71-6d026cc3638f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f3b9ca-a09d-46ed-bd57-8da5756f1a32",
        "cursor": {
          "ref": "62bec1d1-7c13-4720-b23e-f0d72cb173f4",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b5cfe116-f895-44b1-884f-77cc029b7dc2"
        },
        "item": {
          "id": "55f3b9ca-a09d-46ed-bd57-8da5756f1a32",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a591be22-cfdc-43e0-8240-83b7df07a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e581ad-fcc2-448f-9952-727a468b6e5a",
        "cursor": {
          "ref": "5ae4f793-8a8b-4c8b-bf13-91cb2a913d1c",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "63b53b49-1b8d-47ac-80ac-48260ecc8fb7"
        },
        "item": {
          "id": "d6e581ad-fcc2-448f-9952-727a468b6e5a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "33713997-96c5-4326-9036-4fdcac719242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a56fa58-f0df-459d-a6ba-6a61f0ce126e",
        "cursor": {
          "ref": "6056489e-8c47-4a7a-b365-2a48b2f6dde2",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ac1787d6-a4d3-488d-801c-b5486fbcaad2"
        },
        "item": {
          "id": "1a56fa58-f0df-459d-a6ba-6a61f0ce126e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "475c47ec-86ac-4f8e-9897-48f67f1c087d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ccab2d-a399-40a3-b265-5169bf7a95ec",
        "cursor": {
          "ref": "6d8a5bd5-4461-4334-ad48-2c782fbec60c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "be79f4e9-7115-48bd-9924-824756d43b20"
        },
        "item": {
          "id": "d8ccab2d-a399-40a3-b265-5169bf7a95ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c106b9cc-c8f9-47d3-95c5-97a5c6a1fd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14246ed-ac8d-46c1-bb43-ac69b843348f",
        "cursor": {
          "ref": "b8ae0b6a-1bd7-49be-b5c8-e1cdc6e430f1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7ca55af8-b272-455a-b63f-57b660b278d2"
        },
        "item": {
          "id": "f14246ed-ac8d-46c1-bb43-ac69b843348f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d7297baa-9c30-4ef9-969d-b4a833142abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89b5623-752a-4674-96c3-467b75f83063",
        "cursor": {
          "ref": "c839d187-a2f6-4efc-aac9-a9fe494c204a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b2ad4dd6-68ac-447c-aa13-1cef175a43a6"
        },
        "item": {
          "id": "b89b5623-752a-4674-96c3-467b75f83063",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1ce8dbb0-81f1-4771-b348-04660b49b8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d051c0c-beca-4097-924b-0a1084088075",
        "cursor": {
          "ref": "64ac6164-f960-44ef-8fde-11bd0ca329ea",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2af44ca1-a9bc-41b4-8176-560bce469506"
        },
        "item": {
          "id": "9d051c0c-beca-4097-924b-0a1084088075",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cd953106-1dbc-4d9a-8fbd-97104e56b7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0621c139-53d5-44db-8e49-f24f23d2357b",
        "cursor": {
          "ref": "5590e945-80e4-44c0-9bc0-15ea7dc4f5ea",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dd5dc94a-4368-42ab-aa6f-29d8fc120e22"
        },
        "item": {
          "id": "0621c139-53d5-44db-8e49-f24f23d2357b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "72ac120f-26a0-4804-adec-b6db9499f6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d2f0bf-0cfd-470f-a338-775196ba18e9",
        "cursor": {
          "ref": "89b2b0b3-9c12-41d9-bff6-7fb6e5cb1d27",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "abd56ac5-049e-4a14-992f-3dc26c7d88e1"
        },
        "item": {
          "id": "d7d2f0bf-0cfd-470f-a338-775196ba18e9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6bd65cc4-96fa-4b0e-b37b-e6e20fb3e13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed003882-9e7c-4f2b-9007-cfa4b8f108a4",
        "cursor": {
          "ref": "609b24a3-f3a4-4d13-89de-4643297bcfde",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ad149bec-b085-4cd8-8eca-7c977c089bee"
        },
        "item": {
          "id": "ed003882-9e7c-4f2b-9007-cfa4b8f108a4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "541066c0-f02c-4ac0-b21d-d89a3fa9a418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85201701-0fc4-49a9-9078-66369a400cdc",
        "cursor": {
          "ref": "8b6433b4-d10f-4b64-b5f4-e36a0838d31a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c084fd72-2dff-4abf-83a6-7cdc7d6f4170"
        },
        "item": {
          "id": "85201701-0fc4-49a9-9078-66369a400cdc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9c8ece7e-9c33-4b75-8cbd-b18c6fd683be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62946558-1d40-4b70-a3c6-f74a762a6a18",
        "cursor": {
          "ref": "05b41573-b739-47b6-baed-1dc3f1dc38eb",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5ab75522-1f70-4d16-9e64-6c1f9f52d70e"
        },
        "item": {
          "id": "62946558-1d40-4b70-a3c6-f74a762a6a18",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2a718ade-fcc7-436a-97a1-e31570e0890f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711b47d8-1568-4c83-8c0f-f6c17a91cfed",
        "cursor": {
          "ref": "931178a6-7150-41e0-b64f-c829ca7e00fc",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "45d9f2bc-3cf4-4fe9-a66c-6822e8ca0218"
        },
        "item": {
          "id": "711b47d8-1568-4c83-8c0f-f6c17a91cfed",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1929790d-aaf6-4775-b6cd-95e8dbc2a657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dacad4a-8514-4177-8212-63d9be26ebcd",
        "cursor": {
          "ref": "d5102f96-39f2-47e0-8fec-66debef33d4a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "313f781d-1c89-4b13-b98a-007e7025cb85"
        },
        "item": {
          "id": "8dacad4a-8514-4177-8212-63d9be26ebcd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "46cda730-a015-4b57-8812-ca6012c51785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5913e84f-8d84-41a6-bb1e-5e0104775843",
        "cursor": {
          "ref": "dc6693bf-fc01-4483-a3dc-516ffb51c7f4",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "eec3e376-7b57-42fa-98c0-613346ad98e2"
        },
        "item": {
          "id": "5913e84f-8d84-41a6-bb1e-5e0104775843",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4c4b1b13-eb04-462f-8ec1-440fa507d485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba72b7e9-95ed-4abf-a457-766451e1127e",
        "cursor": {
          "ref": "91903b19-5444-449e-b386-bef29610e206",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5d3c1774-0f3f-42c6-96c2-78b76a3adda1"
        },
        "item": {
          "id": "ba72b7e9-95ed-4abf-a457-766451e1127e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c4b6307f-e23b-4030-8e3c-833688ba3a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cdc41f-d8f4-489e-b341-4692aa0ebd40",
        "cursor": {
          "ref": "2d45d1e7-592c-4bce-92f5-48e13d57353c",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4ac34a13-709e-4443-854d-43c6805e1948"
        },
        "item": {
          "id": "97cdc41f-d8f4-489e-b341-4692aa0ebd40",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "05bd4a22-903d-4b88-8669-e9c6fc5f653e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a534dd0-b6a9-4a4e-8fe5-ee1234ce2a27",
        "cursor": {
          "ref": "d18ad7e0-c859-4ce1-b92c-44e6adffb663",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "84fbcc2c-786d-4994-8c3a-9d80a6a2f410"
        },
        "item": {
          "id": "9a534dd0-b6a9-4a4e-8fe5-ee1234ce2a27",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6cb6b096-3d63-449f-8161-eedd58b3824f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ef6b5e-e6cf-41f8-8904-60558194cfcf",
        "cursor": {
          "ref": "2d07ed29-85c8-439e-ace3-f3088fbf9fd4",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2d965b5b-c6f8-483f-937c-29e9b46fed7c"
        },
        "item": {
          "id": "47ef6b5e-e6cf-41f8-8904-60558194cfcf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e88ee6ab-5303-47b2-860d-8085332426ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee9ee55-8d29-4459-8cb2-a76bd60d7fb6",
        "cursor": {
          "ref": "5b7ef6fe-8dc0-4812-b206-89273a3e03f9",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d641093b-b586-4782-9667-91c6e1951d00"
        },
        "item": {
          "id": "aee9ee55-8d29-4459-8cb2-a76bd60d7fb6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5f84d928-e080-46ae-9358-911bb31cc697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d52b3a3-284a-43e8-b062-604311109802",
        "cursor": {
          "ref": "077c8524-4d6b-4097-ae48-4119f1c5bd4e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "83988968-ca38-4bba-b424-c070d832e01c"
        },
        "item": {
          "id": "8d52b3a3-284a-43e8-b062-604311109802",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5585e970-7c2c-4e4f-b122-a22e1b688cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e360f3c2-fe42-43ab-bfe9-f2a546366b9c",
        "cursor": {
          "ref": "1b9b6bfb-f3e6-482c-87b1-407019986d1b",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "becbf2e8-75f2-4e8d-9eb5-d0c3eedca1c2"
        },
        "item": {
          "id": "e360f3c2-fe42-43ab-bfe9-f2a546366b9c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f4b604a5-284e-4bef-9414-03fb3d72939b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc66ba1-f8d4-4176-989f-2db8b456972f",
        "cursor": {
          "ref": "6e47c6f7-38bc-4cd8-99a4-aefc02337ed5",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d7632683-facd-4ae7-b9d3-e614bd8eaadc"
        },
        "item": {
          "id": "6cc66ba1-f8d4-4176-989f-2db8b456972f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8df743e7-0a36-414d-86d6-6decd29cd85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61779edd-6696-41d5-9615-45ea91bb2578",
        "cursor": {
          "ref": "1db8ac25-f04c-4a1d-a303-569adab23042",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d7b7bf54-fc2e-4355-9ebd-e54f719f4f1d"
        },
        "item": {
          "id": "61779edd-6696-41d5-9615-45ea91bb2578",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "19f5e8a3-6d6f-42c1-b4e7-9a2ecbf8ec69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2313542-9f21-4929-b0d9-23f4d708ca54",
        "cursor": {
          "ref": "20c55941-e100-4ca9-8c17-1c9ea576996b",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c868a66b-4de2-4d01-bbe5-80cba244ff98"
        },
        "item": {
          "id": "d2313542-9f21-4929-b0d9-23f4d708ca54",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b6960461-e455-49af-b1bf-52b2bf1cf0c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3594bc25-e315-470f-aad4-d9c6322a170b",
        "cursor": {
          "ref": "c2096c63-73c8-4c7f-869f-003855f91496",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "388eee5d-8917-4545-ae22-27daf6e51dbd"
        },
        "item": {
          "id": "3594bc25-e315-470f-aad4-d9c6322a170b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fb16b9ba-2d75-45f4-b4e8-135a923440fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a821bf-a819-4032-b424-0d725f3ea170",
        "cursor": {
          "ref": "9264a5b2-b14d-4a46-900c-d91452111bb8",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4b838c28-fa60-48ef-a4f0-c30b2965cc6d"
        },
        "item": {
          "id": "40a821bf-a819-4032-b424-0d725f3ea170",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "180deec5-c2b0-4971-937c-0386418e793d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9723e2-f6c2-4589-b5be-5d9d1683d9d0",
        "cursor": {
          "ref": "717b8a52-ff65-4f4f-8b3f-4ed051746935",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "406200b4-7060-4b45-8a0b-c1406edabb2c"
        },
        "item": {
          "id": "3a9723e2-f6c2-4589-b5be-5d9d1683d9d0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5256c05e-ef67-4d11-94ec-a76ac33afd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5987ba2-8b6f-4774-9f30-cc76e20d7eaa",
        "cursor": {
          "ref": "d7b14f06-9f8c-494f-a969-1df165345a20",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0fe714ef-d2b8-4c2d-98f7-8659e30b3ae4"
        },
        "item": {
          "id": "f5987ba2-8b6f-4774-9f30-cc76e20d7eaa",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6fb2f3d1-7d43-482e-a450-9d1369de6281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d49a16d-a70a-4d9c-9c78-61da0e68b871",
        "cursor": {
          "ref": "bdad2f25-babd-4d50-bc23-8a73460edbff",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "201f31c3-82a4-4f5d-894c-b1f9952572a4"
        },
        "item": {
          "id": "8d49a16d-a70a-4d9c-9c78-61da0e68b871",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6e0f89c4-821c-47ff-9fb5-262f5ccae9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488fc9d6-aa13-4301-9ba8-2409d57907aa",
        "cursor": {
          "ref": "91ba0544-5644-4ed4-94a7-f09a9408dbfc",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0a285e5e-a444-4eff-b341-0bad160a54f1"
        },
        "item": {
          "id": "488fc9d6-aa13-4301-9ba8-2409d57907aa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dc9c0970-a024-4c67-9a3f-f2899487d83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab04293a-293c-4f81-9958-06345b200488",
        "cursor": {
          "ref": "ca531273-2e62-46f5-a57f-562d5174059d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "65edab04-7a55-4603-9da6-f976e479be8e"
        },
        "item": {
          "id": "ab04293a-293c-4f81-9958-06345b200488",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "61429e1e-7ee9-45e4-aa10-e2bb73168aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1a3cc4-0acf-4b72-b6aa-030994500179",
        "cursor": {
          "ref": "235008b0-0192-4c08-b311-9222c7c49a9f",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9c327b04-f300-427f-b39b-0a7819715820"
        },
        "item": {
          "id": "ab1a3cc4-0acf-4b72-b6aa-030994500179",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "18e418bc-21a9-49f3-843d-6e904b173b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42fe177-ce3f-42bf-8c19-1f4be48eda51",
        "cursor": {
          "ref": "81c5a64e-4ba9-4662-ba15-3226151db618",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6e9fe754-b772-4290-88b7-7f9c6444020e"
        },
        "item": {
          "id": "a42fe177-ce3f-42bf-8c19-1f4be48eda51",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "07eccd5b-c393-44a8-a525-ccac2a697dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c16fc6a-1d2e-4522-83aa-93a96d1db1ed",
        "cursor": {
          "ref": "cf00a5a6-4a30-40b1-9bce-9166de8baf4a",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "75c1ca76-7100-480d-84e8-cf3b8937e49b"
        },
        "item": {
          "id": "5c16fc6a-1d2e-4522-83aa-93a96d1db1ed",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d7c0e60b-c0d4-4525-b5a4-db254bbb6503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed95771-27e7-4fb3-990d-bb10b67b1590",
        "cursor": {
          "ref": "9db864f7-7a95-42b3-b079-99955988ebe1",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "142ab8eb-ad44-4cb4-8964-112435030d93"
        },
        "item": {
          "id": "2ed95771-27e7-4fb3-990d-bb10b67b1590",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "79c3b5b0-1dc9-49ae-b20e-c560f032aa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55693c30-1256-4062-8309-33c51d4ae98d",
        "cursor": {
          "ref": "fb37ba34-bf62-43b4-bab0-c32f7b1a6c4b",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "415ce71d-e0b3-4ab4-867a-285e008d9b89"
        },
        "item": {
          "id": "55693c30-1256-4062-8309-33c51d4ae98d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b62c0646-0ddc-43ac-9970-9f5d587aeb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffc747a-a1d6-43ef-a615-ab655da5dbd3",
        "cursor": {
          "ref": "241afcb0-bb7a-456e-8299-92f8f77dc76c",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f6544b99-03f5-494c-9186-db7c9017bf5e"
        },
        "item": {
          "id": "fffc747a-a1d6-43ef-a615-ab655da5dbd3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "51c7c8c7-fcbc-4981-820a-7e812efa2bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0d507f-c9e6-4753-a4ee-b6c301fcad90",
        "cursor": {
          "ref": "57e664cc-8c2d-4605-b1af-5d18d878e167",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "23d92232-62f7-4a89-b71a-d7b712fb2909"
        },
        "item": {
          "id": "4b0d507f-c9e6-4753-a4ee-b6c301fcad90",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6e325fa2-4831-449b-85d7-69d774909806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a010ea-ccfd-4f01-9a4f-4473799b2ef9",
        "cursor": {
          "ref": "59dc49b1-fd15-4f30-bedc-a8ef38e8eb40",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c5cd784b-39c9-447e-90b7-fbb78fcd0554"
        },
        "item": {
          "id": "74a010ea-ccfd-4f01-9a4f-4473799b2ef9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1e4aff5a-557f-4614-96d1-577d143784e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d73766f-408d-477c-b8ec-c25e9f63a859",
        "cursor": {
          "ref": "9f28e27c-59cb-4031-8d33-ad851ac52600",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2900e8b4-335d-4e5b-a43d-d9fb34a50b32"
        },
        "item": {
          "id": "5d73766f-408d-477c-b8ec-c25e9f63a859",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0db68f40-5d62-4d8d-b74f-8437b105d4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98fde2e-acca-45fe-a869-6bf32d23f3b9",
        "cursor": {
          "ref": "c7e36764-496f-4a2e-9f3c-1e6f650d4e91",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e2a3c72b-536f-4099-8d27-b62133e9a5ba"
        },
        "item": {
          "id": "a98fde2e-acca-45fe-a869-6bf32d23f3b9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8f382c7a-037d-4cff-aa8d-6d3123b81a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58ee133-6575-407a-ad60-635e247c5bd8",
        "cursor": {
          "ref": "b73f1978-0fda-4499-8007-38f1c2f50596",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "32e35974-4649-41ef-b5e3-6e56ca99df26"
        },
        "item": {
          "id": "e58ee133-6575-407a-ad60-635e247c5bd8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "17aea70c-c4ff-401f-8883-cf7f6e5476f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb28153-881b-41d8-add4-ea949518bb38",
        "cursor": {
          "ref": "995759db-4570-42c2-a7ec-3c810a8e5488",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "280efd01-10b2-47c6-969a-0a7db98be5eb"
        },
        "item": {
          "id": "3eb28153-881b-41d8-add4-ea949518bb38",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3c1a6838-fef2-4613-8b3c-2dd754835349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081c87bf-d3b4-46de-8171-593362e9d037",
        "cursor": {
          "ref": "bcc79de7-333d-4bd9-9809-42cd369a8ee0",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9f6f0c8f-10c7-40c9-b54f-ea0a0e9ad333"
        },
        "item": {
          "id": "081c87bf-d3b4-46de-8171-593362e9d037",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bf0e5878-ff05-4404-b2bd-feecaec857aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c722aeb4-780b-48f1-a767-101929f81a1b",
        "cursor": {
          "ref": "7d238e5c-d7e3-4c19-a372-1f1fd28adb29",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e04394fa-9e68-4e39-9ff8-dab96bd658d0"
        },
        "item": {
          "id": "c722aeb4-780b-48f1-a767-101929f81a1b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "950429b4-f074-40f7-a458-72723389bc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee37230-a94c-4a8c-8cd1-0ee25608d80c",
        "cursor": {
          "ref": "fefe452d-3342-43cf-be2a-0c1f3b5a4726",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "265c9628-7327-452b-a545-cfc96391542d"
        },
        "item": {
          "id": "3ee37230-a94c-4a8c-8cd1-0ee25608d80c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "382101fc-8eb7-4c19-bd1c-51bd30e9e76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826e379f-0199-4d4c-970a-f104f95441d9",
        "cursor": {
          "ref": "a9c07972-e21a-4ff9-bae4-f1f63cf838a7",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ae4753d0-7554-4ea5-86bf-c85f029b15c7"
        },
        "item": {
          "id": "826e379f-0199-4d4c-970a-f104f95441d9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d0579d7c-1b9c-43fc-b3ff-71abdcc8d839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f1c412-5f4e-41d2-946d-e8d2b201ca02",
        "cursor": {
          "ref": "cbf24398-8b45-4a05-95b7-938a978f4bee",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a2be7a90-b96e-424a-ad93-4b68b739a7f3"
        },
        "item": {
          "id": "d5f1c412-5f4e-41d2-946d-e8d2b201ca02",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b48e307b-5873-4a6e-bc8f-7350bb3ecb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32aabff3-481f-4375-af58-efa6e0489fa1",
        "cursor": {
          "ref": "2e63123d-16ac-448b-9879-16aa2cab33f3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e77ecbc9-fed5-4fc0-8324-515b3c23899b"
        },
        "item": {
          "id": "32aabff3-481f-4375-af58-efa6e0489fa1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d6f2058b-eea7-4b20-b866-9cece1b8fdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44520bb0-2a54-4563-a8d7-48af020d1551",
        "cursor": {
          "ref": "8140817a-11d6-4e34-9e28-b4c4b9a90c5f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "84206647-3e24-4db3-aaa8-f64f6f20a5f0"
        },
        "item": {
          "id": "44520bb0-2a54-4563-a8d7-48af020d1551",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d8579525-bba3-49f6-8397-4553e9e9cd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d97d4-9019-4d5d-a663-4f25abdcbef6",
        "cursor": {
          "ref": "5481ff6c-9971-4808-b5d1-d0b16335d688",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d2acff18-70ba-499b-884c-945798747b51"
        },
        "item": {
          "id": "d24d97d4-9019-4d5d-a663-4f25abdcbef6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e0c32c96-2b6e-4118-92fc-9a0742302834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbbd743-778f-4499-a2b0-59a44c0fa139",
        "cursor": {
          "ref": "92a5ed9d-9e32-4750-b23c-561d0ba09b35",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "83cdc91e-b09f-4335-935e-0055b6d9093a"
        },
        "item": {
          "id": "afbbd743-778f-4499-a2b0-59a44c0fa139",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "319b95b0-911c-4ea8-9403-890ad0e9ad42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd33e84-c7d2-4023-9f1b-ea7616ce47bf",
        "cursor": {
          "ref": "f82842a1-7818-4ef7-8759-634b07ba46c8",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "af55bb8b-772a-43fa-ae7c-9955e3cc7274"
        },
        "item": {
          "id": "6bd33e84-c7d2-4023-9f1b-ea7616ce47bf",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e8976a50-29f0-44e9-afc6-0b1dc5cb9817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a194e4-581a-4a2d-bae4-96f0b51b3edf",
        "cursor": {
          "ref": "375c202e-a560-4d73-8c03-f837f6d6666d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66cf9b70-ce35-468c-b14e-2fd04a98cc8c"
        },
        "item": {
          "id": "f4a194e4-581a-4a2d-bae4-96f0b51b3edf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7db0e2f-0dd4-4d84-b12e-f29a8e5b8300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "c184730c-75f4-4a89-99db-76ffd4654ef7",
        "cursor": {
          "ref": "c7570814-3901-408f-95fd-ef8f044446e2",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "208c1d61-b779-43dd-a36f-10693c19d981"
        },
        "item": {
          "id": "c184730c-75f4-4a89-99db-76ffd4654ef7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dfc137b6-6eb1-41d5-a54d-23e066652d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d87dfab7-3244-4fa9-8625-cf02381c2ff7",
        "cursor": {
          "ref": "4c181300-e1d2-4d90-a9d8-eb27d29b5ef3",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0056b809-c405-4c51-8375-d85764722c01"
        },
        "item": {
          "id": "d87dfab7-3244-4fa9-8625-cf02381c2ff7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0e9bbb39-3767-4ad1-afab-bbcc4f936f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a4a5134f-632e-4abf-970e-5e6770baadbe",
        "cursor": {
          "ref": "fc59294f-e304-4b98-ac5a-99e8aa7c8762",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "05bce53c-f850-422b-aba6-ef79b6eac87b"
        },
        "item": {
          "id": "a4a5134f-632e-4abf-970e-5e6770baadbe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7a7ff162-63e1-4dc2-a8b9-905aa5407573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05641043-32b7-402a-bc32-cd8e331f686a",
        "cursor": {
          "ref": "e5329f8f-7053-46cb-a7c0-4c8fe42d7928",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "abe6be56-2c56-45d5-bffb-d44a472c96bd"
        },
        "item": {
          "id": "05641043-32b7-402a-bc32-cd8e331f686a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b5b6eae7-2712-4eaf-8d33-16fbbf32d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e68315c6-5064-47b4-b8d4-d55a979f961a",
        "cursor": {
          "ref": "47f0fa80-f8b7-4d76-abc0-ef827517038d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a7dbd4a9-4c19-4779-b32c-3b889b7d258c"
        },
        "item": {
          "id": "e68315c6-5064-47b4-b8d4-d55a979f961a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d257eb20-1add-4e67-8383-f7580b20a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 854,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e30ca059-5aea-45d4-964a-35e6e3a1ea2d",
        "cursor": {
          "ref": "b8472083-e3dc-49ea-8269-b20b038df72b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "45a97fd7-0097-4f89-aa93-9cb75251b2c2"
        },
        "item": {
          "id": "e30ca059-5aea-45d4-964a-35e6e3a1ea2d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2ee18064-b0fe-437c-af89-e824eab030a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e7561828-851c-44f5-acaa-66f6ba466efa",
        "cursor": {
          "ref": "ea3f93fd-a78b-44d0-b972-f855ae6c59dc",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6574e320-3330-469c-9e30-b3748f90ce7a"
        },
        "item": {
          "id": "e7561828-851c-44f5-acaa-66f6ba466efa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "efb5b7bb-2742-4211-a586-1a8b92c5c6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "509054e0-e3f0-4647-ab0f-39924b82dc3d",
        "cursor": {
          "ref": "6c572cea-7696-4552-bdae-e311c854a705",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "92e8d999-2f92-4535-a86c-9d3abcf709c4"
        },
        "item": {
          "id": "509054e0-e3f0-4647-ab0f-39924b82dc3d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f47ea382-f347-4ba5-924e-9327879c40a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b9551927-0d44-4cdf-b560-7d0c4486853a",
        "cursor": {
          "ref": "b0fed349-425b-4207-85bc-5e588c0bc79f",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f4fda0ff-6360-4ff8-b479-d2b8497286e8"
        },
        "item": {
          "id": "b9551927-0d44-4cdf-b560-7d0c4486853a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4f2c79f7-5675-4868-9aaa-af5faadb125d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "53036c91-2572-4b81-a328-707e1f4562e8",
        "cursor": {
          "ref": "b1e08020-bc7a-4151-a4f4-190b3bc99242",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a26af068-7db3-4084-9871-9316fb72f854"
        },
        "item": {
          "id": "53036c91-2572-4b81-a328-707e1f4562e8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cbacbfbd-0879-4dee-ad52-a6f1392119ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e9134e-269f-4340-b65c-bf935cd67f9a",
        "cursor": {
          "ref": "4d433dd6-946c-4da9-b494-06ba9754900e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c7369155-5a80-4047-bde5-e20801089974"
        },
        "item": {
          "id": "f2e9134e-269f-4340-b65c-bf935cd67f9a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3b4fbbd8-57df-4b04-8ec5-809e97c1b80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c424bd6b-9e08-48a4-a1e1-6274c741e717",
        "cursor": {
          "ref": "961784c2-1a3d-4693-beda-65136b997ac0",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "965c4ec4-ff62-42a6-b8ac-2287183e459d"
        },
        "item": {
          "id": "c424bd6b-9e08-48a4-a1e1-6274c741e717",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "089b0f47-c088-4e5d-8377-ec05407654fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d956513-0ee4-44d9-935c-5981925ed468",
        "cursor": {
          "ref": "73e75dbb-8942-46a9-a368-f687c9a5ff05",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "70d6ce18-37b4-4237-af2f-e325c27e116c"
        },
        "item": {
          "id": "8d956513-0ee4-44d9-935c-5981925ed468",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9d10350d-0df8-4cf7-a460-5a2a546c6d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc927ee-b23c-4810-8577-887272a31238",
        "cursor": {
          "ref": "3ab4233d-1915-4515-a4b6-f80d27283df6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3d354bfa-66c0-42b9-8895-9b69cda06444"
        },
        "item": {
          "id": "0dc927ee-b23c-4810-8577-887272a31238",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0cc710f5-8d20-439e-b397-75b425daa7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8773eee-ac19-4c20-84d1-d571f82b1bc8",
        "cursor": {
          "ref": "748f54bf-2627-45fd-95ec-e25bd63817c1",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "57e4ce4b-2faa-4f0f-a62e-8dd306268bc4"
        },
        "item": {
          "id": "c8773eee-ac19-4c20-84d1-d571f82b1bc8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "83f70b16-71ae-496e-be39-df9c01d22feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633d4acc-bdff-46e9-910a-99afdce769f9",
        "cursor": {
          "ref": "f44de709-b36a-4bfd-924d-70f2cc7667bf",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bf14e2ff-88ca-48a7-ac34-f906556cc2b5"
        },
        "item": {
          "id": "633d4acc-bdff-46e9-910a-99afdce769f9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e852b3ae-0e6d-4381-81cd-d8de70b18873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c1baf1-aa16-4e97-a45b-1b6eb34f6724",
        "cursor": {
          "ref": "faf51881-c788-4652-89ce-e5d284a74edf",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b51a688a-a8ce-4dd7-b85f-5df81ccfd99e"
        },
        "item": {
          "id": "d7c1baf1-aa16-4e97-a45b-1b6eb34f6724",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6788caba-6de3-40c7-a407-c870bccb530c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48175aab-a046-4427-9217-4939dba66ffb",
        "cursor": {
          "ref": "eba2e8ca-d80b-4d5b-a820-6d8c0bce7bcf",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "da5e39ae-4244-41b6-b204-b3d4c65c58e7"
        },
        "item": {
          "id": "48175aab-a046-4427-9217-4939dba66ffb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2e70b9b2-6499-4b9b-9bb3-613418f6fd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd73b9e-da68-4c08-b230-1a4ef99ff179",
        "cursor": {
          "ref": "5b01eb28-4842-4859-9291-9da170bcc58c",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5eded932-b516-4de7-bf42-42c91cae196d"
        },
        "item": {
          "id": "9fd73b9e-da68-4c08-b230-1a4ef99ff179",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6afff804-363d-4b0e-8dd7-230706e29b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc6abc4-1eca-45b2-950a-f772af47acec",
        "cursor": {
          "ref": "667e640c-5874-43e8-8997-187c3e73f20e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7d5f5f29-ccea-44ef-8664-68b130ea7048"
        },
        "item": {
          "id": "1dc6abc4-1eca-45b2-950a-f772af47acec",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d357e522-5908-4505-9a7d-14b08b82f4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f959e72-019b-4303-b24f-71fb6a624fae",
        "cursor": {
          "ref": "3970a055-c70c-4b41-9c17-7660683005a5",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e6c0f83b-f2a9-4672-b33c-ae8e8db142f0"
        },
        "item": {
          "id": "1f959e72-019b-4303-b24f-71fb6a624fae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d9b948e4-7705-4751-9ee2-f0158a5cf5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324fec49-8dcd-4361-b3c3-251b2796bd58",
        "cursor": {
          "ref": "9f74c840-8590-4d78-bdfb-bfcd75bf150a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "26339518-e277-4731-85d5-6ea70444368f"
        },
        "item": {
          "id": "324fec49-8dcd-4361-b3c3-251b2796bd58",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0d09b826-4ae9-4756-ae50-840f19d15867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdfae77-4842-4a55-ad59-38ad0da42956",
        "cursor": {
          "ref": "0e8bd5e4-8d27-43c9-89ec-f07f8a666d9f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8377cec7-5349-4576-9593-4e2ed6e076be"
        },
        "item": {
          "id": "cfdfae77-4842-4a55-ad59-38ad0da42956",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5664baaa-351f-4252-a3da-c9144bc897a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 735,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "87a94fa9-14a4-4f35-b59c-c6facb0f4483",
        "cursor": {
          "ref": "4edb27c9-6024-471d-9fab-16cc6248ec92",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90d0e7a9-f10e-4ed9-8517-ea0f5e9975e1"
        },
        "item": {
          "id": "87a94fa9-14a4-4f35-b59c-c6facb0f4483",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8756ce24-7af3-4229-938d-53e94b5239be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1083,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "13843d12-00ae-4b82-a025-bed1f4bb5b1c",
        "cursor": {
          "ref": "b27ef74a-7215-4a0f-b6a8-b0e79ba69905",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7ca2a058-9fef-4b76-9452-63ea183681c6"
        },
        "item": {
          "id": "13843d12-00ae-4b82-a025-bed1f4bb5b1c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2041f04b-fe11-484b-8e66-46fbeb51691d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8159ba6c-3f00-4ca9-a3c1-b5a0cd1cf88b",
        "cursor": {
          "ref": "607d93f7-3103-4cc5-b4c5-76b5ea7ec60e",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "adda065d-03e8-41dd-b8c3-597a3ef546b3"
        },
        "item": {
          "id": "8159ba6c-3f00-4ca9-a3c1-b5a0cd1cf88b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "15df0763-4f1a-4b69-afa8-91d12b0c3e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 706,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0dc46610-e667-4b60-80f4-86cb386cdcd8",
        "cursor": {
          "ref": "1e55142c-f9f2-4918-80be-da32d1fc0d20",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2c432f67-032d-4635-9169-4a46718e0a21"
        },
        "item": {
          "id": "0dc46610-e667-4b60-80f4-86cb386cdcd8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "08d01d28-d33e-4697-9835-647a84fe3d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4c9266cc-d81c-418e-9b04-b601a2d92484",
        "cursor": {
          "ref": "6d36f074-1e3c-4149-bffc-7d648f213d6c",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4c48fb96-e2b2-4b78-88f2-a9d9071c2b7b"
        },
        "item": {
          "id": "4c9266cc-d81c-418e-9b04-b601a2d92484",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "de6804f4-835d-46a7-bfe5-067e1268f50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcae555-f436-44de-8f38-a1fd9e7d3e51",
        "cursor": {
          "ref": "eae771a2-9d5c-41da-a428-16e0e70f3234",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f1d885c9-cd9e-421c-977b-27164433814e"
        },
        "item": {
          "id": "5dcae555-f436-44de-8f38-a1fd9e7d3e51",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "63767046-ff48-4f64-afd4-b9d7fc5399a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b70e6a6-d73a-465c-830d-614ce9338f48",
        "cursor": {
          "ref": "8a1ebaff-5815-4c69-978e-931b59c63e44",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f0fefd19-9c83-4e0c-b5eb-9422b6d3ae7e"
        },
        "item": {
          "id": "8b70e6a6-d73a-465c-830d-614ce9338f48",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "caaf3b67-349f-4afc-86a6-818cab54fc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab0318b-ee0a-4988-bce1-bac3fe50865a",
        "cursor": {
          "ref": "0e90b4c9-b9f1-41c1-92df-ca13b91511d5",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bb2a5458-766b-4b2a-9b5c-a110ceb68712"
        },
        "item": {
          "id": "aab0318b-ee0a-4988-bce1-bac3fe50865a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "144c56af-94b1-4444-a0c8-f7d2b24ff5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff6da6c-fab5-4b31-8de6-15cc42f2cda4",
        "cursor": {
          "ref": "80d4c07f-e896-4e97-ad2f-0f8043eefa6a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eb51d825-72bb-421e-ad97-c58cde181958"
        },
        "item": {
          "id": "4ff6da6c-fab5-4b31-8de6-15cc42f2cda4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "884cd263-0403-44ac-857c-4a7e371ab10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2891eb75-20ce-4a04-8af7-8d5f9b8fc01f",
        "cursor": {
          "ref": "9bdcdf59-c70d-47af-926a-da88d703e80e",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "09f89931-57dc-4959-9b38-75a943ef67ee"
        },
        "item": {
          "id": "2891eb75-20ce-4a04-8af7-8d5f9b8fc01f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4bb07ce-23fd-4be8-b678-c13882fa3eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94eaf378-9838-4609-87eb-47f71856bf4f",
        "cursor": {
          "ref": "84b3ea57-4bc8-481f-ac54-ef0d5ddc6c04",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "55aae945-ecf4-4ce1-ae43-915142b1c7a0"
        },
        "item": {
          "id": "94eaf378-9838-4609-87eb-47f71856bf4f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3324fccd-431c-48ef-85f7-aac0e5e0787e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b505cae-6a48-477b-9885-f800fee626dd",
        "cursor": {
          "ref": "282a6611-4203-419e-9589-67cb92fc47c0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a4b0d1f2-376a-46b1-8399-ec7c28093c2b"
        },
        "item": {
          "id": "6b505cae-6a48-477b-9885-f800fee626dd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "57244acf-9ae6-40b1-8114-9b1030dd2c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d982db-400e-40bc-a4d9-2323dcee232b",
        "cursor": {
          "ref": "baa5686c-a4c0-47dc-ab11-bf55b5c9cfe7",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "088947b8-8371-4854-a806-2c7e1b840c2f"
        },
        "item": {
          "id": "25d982db-400e-40bc-a4d9-2323dcee232b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0e6ffdf8-4c8d-471a-812f-4517b57677cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07eb259-4f46-4239-9391-9aacfb95e54c",
        "cursor": {
          "ref": "8ded2245-5c02-4dcd-b8b2-db4876256205",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9bc913b5-d9f1-4454-8e42-fe4f104e39b7"
        },
        "item": {
          "id": "b07eb259-4f46-4239-9391-9aacfb95e54c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2d402a92-aaa9-4770-a16c-650e533f7cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba240dbd-5048-4020-973e-621b88479a4b",
        "cursor": {
          "ref": "9c3a0546-0868-4009-b9e0-dcf3e86f128e",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "16bbe3f5-b937-4acc-bd5a-6302982169c4"
        },
        "item": {
          "id": "ba240dbd-5048-4020-973e-621b88479a4b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "612c7223-3a0a-44ad-904b-63f190f2ade0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b602760b-40ab-47bf-8b90-223c74f8cf61",
        "cursor": {
          "ref": "4fe99c7b-4352-4dde-a613-6719ea23581c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "60691017-d639-4efc-9ff1-5549cc94faf3"
        },
        "item": {
          "id": "b602760b-40ab-47bf-8b90-223c74f8cf61",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6a82dbf3-f16a-4bf5-ba44-d809ae38bb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaaa1dcb-ab12-49d8-bba8-0735248f6d2c",
        "cursor": {
          "ref": "900db004-a020-42ce-b31b-e0b8e5466318",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8f863a4d-8a47-4449-a4bb-a345cdc519ff"
        },
        "item": {
          "id": "eaaa1dcb-ab12-49d8-bba8-0735248f6d2c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f91f7b9c-1e6b-4c24-b292-519d0702b9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bb7838-34ce-4a70-9b60-4c0acc0f0db1",
        "cursor": {
          "ref": "ae0cbe81-7833-49e8-bd40-7c4e31b088fd",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4ed7c882-6287-4c17-b90e-c48c2e902f66"
        },
        "item": {
          "id": "66bb7838-34ce-4a70-9b60-4c0acc0f0db1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c638f370-d56e-408d-81d5-b6f4a1a3151f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8a3e83-0918-426a-bb18-a48d4841aa52",
        "cursor": {
          "ref": "308bf163-8a13-4d89-813f-68aa50283734",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1ff0db82-bb3f-4ff2-a4a6-c583504dc659"
        },
        "item": {
          "id": "bd8a3e83-0918-426a-bb18-a48d4841aa52",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "66291643-a8cd-4744-b6b4-d03cca39967e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9aa365-ddb6-44ab-9131-f033f9c7516c",
        "cursor": {
          "ref": "17340691-69b1-4cfe-a5cf-d2e04c478939",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4d420e10-c41e-46b6-9242-0be25f6c3bf7"
        },
        "item": {
          "id": "7e9aa365-ddb6-44ab-9131-f033f9c7516c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7d389800-e229-4124-852d-15697251e923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a71912-3200-4d64-91e1-1cfa73b8ebd8",
        "cursor": {
          "ref": "a66cee1a-f452-4ce3-aad2-478ac2205cd9",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1dbece36-7951-4cfb-ab4d-60a87a352183"
        },
        "item": {
          "id": "65a71912-3200-4d64-91e1-1cfa73b8ebd8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5606d8e4-b1e0-46f1-91c9-7836db37b18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a93ce77-8379-4a18-a5a4-e9a840de3c25",
        "cursor": {
          "ref": "ca7df331-5b0c-4f04-9c74-70f610657445",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1fae81c6-760a-48e4-86a6-b0ceb204761d"
        },
        "item": {
          "id": "7a93ce77-8379-4a18-a5a4-e9a840de3c25",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "00727ac1-4789-4b07-8dda-e1540585b190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef076b6-4548-4a91-9b01-fe09c3657ec4",
        "cursor": {
          "ref": "b71dfbca-84d8-40f4-bdcd-d1679e1618fa",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7f7b9332-af7c-4a45-beb2-9766cc77df5b"
        },
        "item": {
          "id": "7ef076b6-4548-4a91-9b01-fe09c3657ec4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3a2e06e1-8dd0-46cd-ae6a-7abc9d047543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce330b3a-d92f-48ca-bb72-aea4065ff9f0",
        "cursor": {
          "ref": "8d2a876e-192a-4ebd-b32c-c5058f2c6b3e",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b19d2d29-60e3-4b28-bec4-32aa55909f88"
        },
        "item": {
          "id": "ce330b3a-d92f-48ca-bb72-aea4065ff9f0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c945934c-1905-4284-9c6d-65fb6c32fe36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29831f8-5464-4262-8bb8-52df673010e0",
        "cursor": {
          "ref": "83836745-f062-46eb-aff6-61df84f8a942",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ba493feb-e130-4c1f-99c0-a6818e4fb6d4"
        },
        "item": {
          "id": "e29831f8-5464-4262-8bb8-52df673010e0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ff9fe707-1381-4e80-9adc-1f2af09747ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1e4849-64e8-4ba6-9469-31d7ff9f4efa",
        "cursor": {
          "ref": "0d9621e4-bc46-448d-b6f4-ed5b8bd0fcd1",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "93735fc5-8b8c-4cdb-a265-2c4fbcaa7025"
        },
        "item": {
          "id": "cd1e4849-64e8-4ba6-9469-31d7ff9f4efa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1761fcda-ad20-4d42-af25-f54ff3cdea29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde74c49-da08-459a-b3c2-3c6aa1ffa9c4",
        "cursor": {
          "ref": "4cdbd424-900b-463c-b069-eafe88edd3da",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ceaf2b45-519e-4bef-9d0d-bad454d04d84"
        },
        "item": {
          "id": "bde74c49-da08-459a-b3c2-3c6aa1ffa9c4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5dd8730f-4178-4c22-be05-1289aa078ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a766b4-7c87-418e-b1dc-9ab646c334e2",
        "cursor": {
          "ref": "e89674ac-c16d-4b8f-9c3d-f91234b971ff",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "93a07f0e-6a1e-4c26-9235-be136960ead4"
        },
        "item": {
          "id": "91a766b4-7c87-418e-b1dc-9ab646c334e2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ed5db664-daf0-44c9-b9f6-7c387badc83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b27945-6e5e-44ea-b010-4705add18dc3",
        "cursor": {
          "ref": "edcd32df-d374-4aa8-9ecc-19ad29fd1332",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d7ef1933-b78e-4af0-bcbb-84fdc80343f4"
        },
        "item": {
          "id": "31b27945-6e5e-44ea-b010-4705add18dc3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "722acbd7-a900-4801-94ee-ae9cd4a54d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406da193-39b7-480f-9f84-484050716605",
        "cursor": {
          "ref": "7353ab68-fbd8-49f9-b46f-4bcd8b3f057b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1faaa0d0-0713-4085-8959-e1ba526cd627"
        },
        "item": {
          "id": "406da193-39b7-480f-9f84-484050716605",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fc98c042-d8c4-427f-9456-695d0ec4be7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064e7d26-4e98-452d-9984-16c69eca977f",
        "cursor": {
          "ref": "db5ac6ab-e9b0-4d2d-887e-7eb16b3bd579",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6b32a66a-8826-4f91-be0f-8b9914749ed4"
        },
        "item": {
          "id": "064e7d26-4e98-452d-9984-16c69eca977f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d8c669f0-ce2a-4b23-bc27-88c7896d6555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ed7bc9-4f2d-4034-9022-7fd697234f95",
        "cursor": {
          "ref": "c0eb7d87-778e-4f51-8446-49370e54007f",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c71e3577-e12e-47af-a6e2-48f36cd54948"
        },
        "item": {
          "id": "b2ed7bc9-4f2d-4034-9022-7fd697234f95",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c4d30f2c-b5e7-4801-a395-299592d83b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc30e80-6013-4082-a964-03742a2d335f",
        "cursor": {
          "ref": "e615d71f-127b-4017-9c02-6276ae13093f",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "80a4c0c2-24c4-45ee-bc3f-164bf3f059fd"
        },
        "item": {
          "id": "bbc30e80-6013-4082-a964-03742a2d335f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d01e3ea8-bc02-4e58-b797-ed248b5c61c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300bb10a-6fb3-4ae0-abc5-57269ef33d08",
        "cursor": {
          "ref": "d24b992a-6d2c-464e-b3d0-78f48a98aabf",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "716eb267-94de-4a42-b4e6-1294404ed8ab"
        },
        "item": {
          "id": "300bb10a-6fb3-4ae0-abc5-57269ef33d08",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "77a815dc-e98e-482f-9728-736e4f51ebba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8501615c-1c35-4324-b710-0f2f3efb7656",
        "cursor": {
          "ref": "e3bd408e-4277-41b7-be25-3fe2b8e62298",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c07e5e95-4e07-405f-a237-a6c5619f2386"
        },
        "item": {
          "id": "8501615c-1c35-4324-b710-0f2f3efb7656",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "05b0028c-5bf8-4f0a-9f7a-584b99a71526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8add76-83d1-430b-84ad-128a1f797e3e",
        "cursor": {
          "ref": "8398e97b-95f2-44d8-a0eb-e3e3467a12c2",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "737a0f8c-f25e-4ee4-93ce-7dbda5b33b69"
        },
        "item": {
          "id": "5a8add76-83d1-430b-84ad-128a1f797e3e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "877596c1-9f1e-4724-86c9-1a8e722241da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4615ec8-7920-4159-b973-6e9a55da560a",
        "cursor": {
          "ref": "521fdfe0-5a20-461e-9d96-6dcbffcff8e1",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "5a1006a5-e146-4b80-bf99-214e341e54da"
        },
        "item": {
          "id": "c4615ec8-7920-4159-b973-6e9a55da560a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2591e7fe-e350-4726-a5be-24aa59e7e649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253ab385-945b-42a4-9867-b810db74bebb",
        "cursor": {
          "ref": "95568417-1b7e-41d6-86ec-16f20080b524",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "542362c1-d8fc-418d-907d-64af0ffca307"
        },
        "item": {
          "id": "253ab385-945b-42a4-9867-b810db74bebb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "957b04fd-71af-4897-8af0-16de308e96d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0165590b-4289-401f-b1f9-c6a6761c2f02",
        "cursor": {
          "ref": "77608e59-3f2e-48da-ab10-dc1500de28a9",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "aca3ebbb-a365-4ffe-833a-2e3a8b49237b"
        },
        "item": {
          "id": "0165590b-4289-401f-b1f9-c6a6761c2f02",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "477eec47-1d58-4600-838d-259e0661e984",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b0f5f4-ea95-4785-909e-4c1524806ae6",
        "cursor": {
          "ref": "2e278f13-c2f3-4bf2-94f9-1ef037f3d4ec",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9650c590-bb61-48e3-a12d-8ca59827e2f8"
        },
        "item": {
          "id": "67b0f5f4-ea95-4785-909e-4c1524806ae6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6fec376e-1e00-4ef4-9377-c51deabfbd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c62ea4-c0fa-49c6-a2f5-d9e82b82576c",
        "cursor": {
          "ref": "60acd0f8-3dc1-440f-b5e6-254f20a3a503",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "4b15c2e0-f6ff-477d-9ddb-190728250435"
        },
        "item": {
          "id": "49c62ea4-c0fa-49c6-a2f5-d9e82b82576c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e47fe6e2-6ece-40a3-9805-723d1f8958ac",
          "status": "OK",
          "code": 200,
          "responseTime": 739,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab06548-1169-4330-8ab5-cf7e50bc0b7a",
        "cursor": {
          "ref": "99f3cbdd-0c02-42f9-acc8-c809a49aae89",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "67df0d49-38f0-461d-81e4-9ebb496e3ec8"
        },
        "item": {
          "id": "cab06548-1169-4330-8ab5-cf7e50bc0b7a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "902a61aa-e11b-45cc-b908-21b8c2e3a45e",
          "status": "OK",
          "code": 200,
          "responseTime": 763,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29342ed-a0cf-4cf3-a958-107cef5c40c7",
        "cursor": {
          "ref": "8943ba71-8e17-4717-bc49-9127a7a2ddc0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de4b13d1-e341-45bf-abf8-561b4a93e676"
        },
        "item": {
          "id": "c29342ed-a0cf-4cf3-a958-107cef5c40c7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abb26c42-d668-4e43-98b7-987c4e22dcf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29342ed-a0cf-4cf3-a958-107cef5c40c7",
        "cursor": {
          "ref": "8943ba71-8e17-4717-bc49-9127a7a2ddc0",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de4b13d1-e341-45bf-abf8-561b4a93e676"
        },
        "item": {
          "id": "c29342ed-a0cf-4cf3-a958-107cef5c40c7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "abb26c42-d668-4e43-98b7-987c4e22dcf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc709ecf-a717-4133-a9b5-226259b1723a",
        "cursor": {
          "ref": "38f04541-d2aa-4657-af4c-e1252cabb304",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dfb665e9-0279-4756-ad5c-33900a8d9b5b"
        },
        "item": {
          "id": "cc709ecf-a717-4133-a9b5-226259b1723a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e32c2402-85e5-41ac-aa1b-db9dc4006fc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112d2fdb-d560-4728-bb8e-b7579cb9e0e2",
        "cursor": {
          "ref": "b54f9155-881d-45e9-b7ed-2a8bf2a17599",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "606ec67c-342f-4b3f-b3e3-b849b5687bd2"
        },
        "item": {
          "id": "112d2fdb-d560-4728-bb8e-b7579cb9e0e2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fb362038-4429-4a07-9178-d17afc59d147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}