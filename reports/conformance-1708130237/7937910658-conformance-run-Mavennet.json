{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c5037e55-8ed0-430f-a2f1-72e6c780707e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "12266a05-b61d-4b76-a254-e5df70cb57f1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b5787e6-ed22-42e4-8f4f-dc9d34d23286",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a5353621-ff45-4735-85f5-944c3b136d32"
                }
              }
            ]
          },
          {
            "id": "1b1b341a-5d54-4192-845a-8830fe7c68f2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "003a114c-b5cd-43ce-8ad6-55baf06d3a25",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6ddb057b-daf7-4ca6-8c45-4a9b12e12296"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "790898d9-3bb1-49b6-816b-23d9d916d418",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eb0b7fed-cb16-4f49-8dd4-fd94d9c6e5b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a8fc9df-0a5a-4587-ac45-75b73ea4a024",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db353074-ba80-4b87-87bc-44dbb76f43ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5380264-eb36-4de5-826d-88593b7cb607"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f138a02-756b-4447-bc7d-dadf58b5b683",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c2e4444-c7c8-4320-8f32-ae49fefedc25"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da7d95b5-2008-4249-8572-bc7a286fbd4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8aef7ab-6231-4644-b36c-c9fd4a82b637"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12d484c6-48ef-43a4-a231-ce0fb8deb617",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e90fe3bb-b3f1-4ef3-b121-52aafaef78af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "393d2967-1f6e-4b32-aa6b-ba811fc4bf3b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33b99c02-d738-4f38-8cfd-547bd05d8681"
            }
          }
        ]
      },
      {
        "id": "d72cb825-47c1-4cd9-8be1-52f6c9d2cf14",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "666a8f75-8d24-45f8-90c6-d9219a0a05ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "979039d1-78c0-4c58-9974-71be724810a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5e76374-c183-4ccb-9d49-b4b9db6023ed",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce266ac-7fa3-4e95-9b68-a0e72ea3c124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b19bba7c-bd94-4f81-9360-bbc4c45f6a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbcc2d9-3844-4bc8-90ae-ed5dfdaf1cc8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5584a6b-a189-4769-aba9-ad77170c30af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7338fc9c-1246-4315-8673-a6df14b53fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ef78e3-228c-48e9-b510-37e64eba8e24",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a7a045-1a65-4c2c-af65-cb93b5bf918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4243a71-05c8-4741-bb0b-9e4f7212acc1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04848590-d2c9-45a0-8880-e6dc1559192d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81913443-109b-4016-af3b-05e7ddb55bc9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0c037c-e3e5-415c-99bb-2cb42585b49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90ac2396-a778-4887-a595-c995f55f5088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0df8e0-a9e4-4fb2-a81d-bad0c85208e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed1f99d-c1c3-4ff3-81ce-463ba0435f9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2435e849-03a9-4f23-944e-d3436d40ed82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "61893cd2-2b32-4091-9400-4d0f87980c8f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b82468ac-ffed-4846-830c-2be17ab88f70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9c899548-1ff3-4d13-b1ae-ba084f59c799"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96225da8-9bbb-4ab0-a693-a3615020c6fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c0d65348-efe4-4135-a0a7-fea4cfab4af5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3793461f-4d48-4ea4-ade5-ee7935f5772a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8487cdd6-5533-4257-a2cf-447090399ff8"
            }
          }
        ]
      },
      {
        "id": "1ec0ef65-adba-416e-8684-4d76e11b2fb1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9ba10975-86d9-4e3f-8cc4-3da392a543b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "171c24e6-d569-4ce6-b1c1-282ba61ddc43",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a9fcd23b-81be-4390-b1ef-2f2750768423",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04eade0-f9d8-4aed-bb5b-670d6e6b7ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74800210-2471-4c10-89f5-ba06c93e93f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94402a1f-4043-4d83-82b6-7870b4e129bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1eeada6e-fd5a-4c18-a286-e78624131382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b883456f-31ec-4482-9384-e67379a3d0fc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707dd56f-cb6f-4a26-8172-31314d026673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76360fb-0a80-4f59-88c7-347d09caa635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5428f3-5d23-4acb-827c-2d4f697a35b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e11a514-3ba2-4f0b-ad20-75a7f8a3f98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d8b173-eeb9-4510-9372-27745bb1ec80",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f760e982-7e17-4d03-bf78-951ba64c56f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c584a6e-1a66-4488-86be-8d5f8604cec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c21d41-4603-49a1-81ec-b1479ef2e5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c9b7382-e3ff-4f69-bf29-cd087c9de9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d655e015-2da0-43a0-89e3-1c735db490c8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3da014-9b9c-4eb4-83af-95be0eb7a872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d48b44ef-07e6-4daa-9a54-9a29b469ff4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394208c2-c0dc-4dd6-9433-ff7459e7f62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "809c5eae-4c42-447d-a076-dfc8ee2c462f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a43041-8a61-4f78-865f-1036162e6709",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cc0468-1a51-4652-9f1a-ecc883fc2d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ef232f-1032-4906-afd3-dba471c504af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e06a2d0-1c7d-4813-a1c4-9e226f075600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af13dc66-0667-484a-a611-3903c1207aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46112d62-4877-43df-ba8e-9c3dfa540d26",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0e03b8-d838-432a-b2ca-d362dc301f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58661d99-6490-4c6f-b481-80e73c5445c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b86031-baf4-411d-a853-7fbc6b03d245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fb96fb0-a668-4959-b041-0f2624060f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c14b4ae-2eb5-49f2-9e3f-b20a2d88f069",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261a7ec3-d063-4e38-abd7-acc71c4d9958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a61f62c-2787-47a5-91db-6302dc02a1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2bae12-74c2-4e42-93e7-15d10d8e91a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65320f00-5831-49f4-836a-a4591c012359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49102de7-6460-4358-bedc-18dc28f0079c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d75a461-ce0a-4f35-8d6b-3729fb5962a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ed53b6-510e-455d-9f76-127df4dc6ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b386a018-73a1-4a8d-b451-cf3a0d64dfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dffa88d-6512-4ca9-a0fa-6a9f14921e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceccd8c1-b111-4910-9f02-d04f4818f14d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff30dadd-7a01-4bc2-a7a2-af33c652741a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae124070-1260-43fe-a245-63e59ac6028f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cfaaed-0b83-4f53-86bc-947b071dd86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d139ac19-52f9-41d8-bc37-b3c4f884cca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081f6db6-80e7-43f9-a0a6-72e6bf82d4fd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713862d7-1406-4677-9b9c-3f11630d6784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c67d55-90a4-4b22-8316-e0439ec8bf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca0f190-413f-46f1-9e3b-72757860e21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa55670d-57ee-468b-b3a7-9ce5c4b19c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c8f23c-19e4-4b92-9f0d-5cbfa4eb53df",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3604f142-3b3f-411c-aa49-a5f559b47ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c4175e-703f-40c0-8a25-10e2d5c71ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02b5b96-d350-4df6-9909-b4f2d838a4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8602613-c3ae-453d-95ee-c48b6ffdf324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06328a2-1b76-46b4-b038-8d846175f2b5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d58807f-fcda-43cd-8269-4c9a31becbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052ec9f7-5e1e-4836-acdf-6eedae5911ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32601b0-fa2d-4847-b57b-71d2e7768b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16c9b443-9a9d-4ecd-9447-86b1b36f5871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfd2f08-95ff-4108-a02c-576441824412",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458a5357-be08-4812-902c-787bde50ec25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1ee759-8cc5-4444-9610-2e8c3efcd2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778fa130-b537-48ab-bd48-31d8421aa71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf0ded7b-158a-42de-80b5-702f43cda19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78634e37-e896-429b-a585-efde64d5b40c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f738b509-971a-4b9c-b0bc-1e7fb21b708c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d67fa5c-4dc4-4eee-aaba-b205f4e15b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df177570-ce6d-4ecd-8c5d-3f956aebc431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e63991e8-c2de-4985-8abe-ca59b5c4ea29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6defa25a-09e8-4bb0-acc9-0157f815cdd2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c0ce69-bd47-4424-9174-b0125029520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e086e2-b8dc-4dc2-a7b0-d4a11af478a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62baa1d4-da4f-4bbd-800f-4163a952e3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90e8200d-2bc1-47c5-acf9-e5074e898c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8696af68-41a1-42dd-ba84-0a3a25902e9b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cd5d4a-bec0-4484-9af6-1e3b64549227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e903d8c3-e4e5-47b2-91e7-b8aa0de3392e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8c7462-d8fa-4f6b-b808-93f247d8d984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da372816-e6fb-4579-a69b-1c607e205270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13ceabb-0f83-4397-ae4b-63ee99e27d2f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9b991c-6112-418b-967b-b2a458ec4dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad79972-31f4-4ec6-a967-7238e8bb06ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81416c87-dbff-4837-aaba-15950d0d56d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01bbc54b-bc23-45c9-8a13-70a1903cc062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3c888b-a2cb-4018-b6ce-cd33182685cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87bc821-e5d3-4b96-89d2-6525b65d89cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3caa62-7b7e-415c-bcac-e6c16e9f2c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d425d6-705c-42fe-b5cc-fd51b2bac9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb92695-d872-4279-ada5-36732d0e3744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30802a0e-b488-41ab-a5f0-890621e356b3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7415ae6b-9e71-468c-ae4e-2c4c58f38ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e56424-62d0-482a-bd4a-e0bcca7fea8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9c25ec-5470-4207-a885-addd6c929ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71c86c2d-e323-4573-a8c1-8befef78546c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5d5109-de9f-40bd-9050-ae19d961e815",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed513e-88c6-4f74-bb8c-b9649cb144db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abbb826-e22e-422e-bee9-8f4e367e43d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f3050d-3a3c-4a1b-87a8-e5a8553d27d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "102b0878-6c7a-40e0-8275-acd9bd910a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a58451a-8f28-4ce0-b4ce-0eb8139ef505",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea230e3-bcd7-4e7f-b32a-f6f296a2a553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c518d5-7eae-4580-927e-9e75715e5717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5b8fb9-7d41-450a-9f2d-9e790fc40ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0989bfa-9da0-47f5-a3ba-6bafb65fe62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcc2997-fccd-4673-9cea-3f47cc1067c9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7196cd25-82f3-44a1-bb9d-0421478301ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ec2c67-fc5b-448e-9f52-21d7fb767e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50415464-f282-4a69-81f1-7797f64fb720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c853306b-a14d-4dbe-a725-2718acae2a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcd4b1e-bd9b-4e27-8cbc-ad9329635c8a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f56681-0893-4cb7-acaf-e9c38940b5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80931cf2-3b0b-4567-becd-b7df9f5acfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e49c42-d6f1-4059-8e85-7a0067397679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59189f0c-a50b-4c43-8f5f-c215f90592d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdd0025-f1e2-4a01-9815-94638325c03e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7c4831-1449-4049-8fc4-2f0b940ca2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f9f7d9-5d7e-4463-a695-ccc0c0397d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d712cc54-8327-41f7-ab57-92a5d837f95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c31b6407-4d8c-4b40-b34a-9cbdb8594501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2d8527-3f1d-4824-986e-7497e172072d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e812dc-7cbf-4c4f-8b73-fc53ab62ec5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09768977-2a3c-4d1b-9300-5c09efd27127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0633a42b-6bfb-4e3f-9324-70e48a03bb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "108368b7-2797-4a10-b612-fbfe867d8f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bf20fb-9498-4637-8e69-b1738681eec1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00714fa-c38e-46c6-8f4e-13304d8aa097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e012c34c-1c99-4fd9-a7aa-bc0f9a6f5d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c2f7e7-a7cf-46b5-93e7-7b030d3764ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "93232ce5-c494-4b6c-ba15-0c09d5766da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd68fd2-7f8a-426a-9b73-3e24930122b7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49cddc8-bf55-412d-a6ae-68a4e6bb0659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa02f8a-a8a9-4851-8809-0db501c3ea28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93ede5d-36ca-46c9-8ac2-090c0b0078aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a26ebe31-88ee-4752-9e18-498bfd476be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537f9783-8953-4891-9cc3-07b7b11c9311",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab4935f-8c6b-43fd-9a04-080d2dac10cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c462ff3-64ed-41b5-8315-cabc04c6c286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60a96fc-f4d5-4f0c-a252-d65478900357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b891541-191e-4ca4-bf91-b221af659a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af34173-b7bc-46c6-a524-6d2a4adea2f4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a1b008-f3d5-47ad-bc20-2b8d9d679532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388f7326-490a-409d-9c63-4bf0af7e432b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93aeaac-3209-4c4d-ab0d-e9316079ab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ddb66b5-2ab0-40e5-838e-2e887c230bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807fde1-de5d-498a-a287-0dab70c586af",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60fe290-031c-4ddf-ace5-367d9bcda8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58303f95-1a64-4d46-8e69-53e7c76f0daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44939e4-79c8-4877-9d98-a0af4089b007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4b424c-2dff-4653-9517-abf8f4541c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e571fbfe-1713-4417-8152-714146274863",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2811bc-15d4-4e17-a0f4-9ae767237b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c0d9526-a65c-435e-b357-817750480427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9864f6d2-9969-447a-91a8-c06c4e2f56a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33636147-0c19-40f4-8fd6-15e304ce6796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c92fef-1b6e-495b-9e52-7057d1b3ad5f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0bf97d-b625-4383-93c2-828f4f626b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779ef7bc-1ad1-434e-9ffc-f85ab2b81ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7795fea9-7d3a-478b-9955-5c68edde0b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bad1800-d1d7-4c69-a20d-c4a37ff96fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c51f2f-a603-4155-8ba5-a81da1958960",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee26978-e4d5-4adc-9e78-bfc64f793a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fd9264-2be9-428e-9796-d4f1e274d705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8813950-09f5-4dfc-ac58-d80627fb639e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef931a7-249e-4b22-afea-79de351a9eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f453dbb5-b627-4230-8309-16621d8dbfd2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c794e9e1-d6d6-48ff-8802-dc53b815981a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282c2a6b-d4c5-4c7b-996b-d5ff3964d755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d06e47a-c839-4697-9722-9e310292e7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f32d24-6557-4a62-879b-b58bd6c7a913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc54373b-c71b-4aa4-b856-6afe67a77047",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ff93f7-9074-47f9-b6cf-6fdc4ae4b66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff2edf3-7b33-45ab-aa66-3a616428c9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306af9a2-b3a9-4a2f-a9e3-17918e54ab96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1a550e7a-29b8-48e2-9680-7d1b4d96a4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4a4ac1-8477-4ac1-bad3-0fcf60075af6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8d5acb-d74d-40ed-9850-bb5e337343fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e0e2292-6928-4373-8d58-b4834ca96be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb4ef47-634e-4dda-a6c1-9b3beb5d05e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d00e43e-2903-457c-9dea-e473867560dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf318bde-448b-4ad8-822e-91f431ffaba5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8226da99-55c5-4192-bc01-75a0beb98b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22677d5-4131-44a9-abd2-f820a8c03c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d79a6c-6b0f-401b-b311-4a964c17ef4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d894e331-f30c-4a49-9795-7472daddf126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68f7eb5-0a56-4e7b-945d-05e6c10f19e7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d7595f-8162-4e99-a29a-1eccc1f3e150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ebb879-d9fc-4efe-8178-a53dc51eff85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbfa26b-cc1a-44be-9034-bf9c0ef8cdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77fdca96-f2ec-4888-9bda-7f2fac86cdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e5fba5-b01c-45aa-af9a-c78d00cd66e0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a80f3bb-b2a1-45b4-8175-d4ff86f2e443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e09490-1c0c-446e-978e-ba433bc2d3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5705801-fcb1-4c97-92e1-b2a2b016eca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bedc9208-ed69-48a4-ba7e-f8046e50bc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacb3489-a887-4e9e-8bca-1ff4bce4844f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e92efca-f8cf-4d3a-a382-88aa6e7d4a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da4f5c9-2f45-4f4e-a49b-0640e489a856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26660cc9-dbf5-49b4-a9be-acbd8a667ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcd4199-649d-4778-bceb-84abf194e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f06312d-0c7b-4dd8-a73f-fed320a5b4ba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a4bbb-64e8-4532-9b31-73a05368d61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e83554d-c4f6-4979-8123-bef55e06b470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e0a383-dedb-4016-b7e0-cad0ec74d560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da7a9275-4e78-48ce-8938-cfc0568e2819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416474b5-f24d-4a13-bf95-1b38d0d2c0d0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0713edd2-d350-439f-a121-3f5a5384cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffd8ad3-c46b-4961-aa2a-acf29b50b37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7446914-54b8-4a3f-9221-2f7908c0d147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed4320a-11c0-4aa6-9d43-1bd40fee610e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc15105-2c0b-4611-8d6f-9ae7c0b3884c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaf1d5b-f819-4fdd-b4cb-ecd3814476ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6d84e2-dff8-4cea-bb0a-8d5c6ae3cc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593b5b1b-0549-400e-8733-806722fe2fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "233b1f87-7310-4709-9cac-51fb968a6fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ce4d7f-ace0-44c4-991e-2a7c19fbba76",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7424ad-c3de-4985-bb7a-4856cd4a2cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d73cf8-1f7d-4152-8366-d9880abada4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bf33b6-e3bc-4d2d-a85b-f052e91ac40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "90975e2b-f71e-4c59-839b-bd9ec1cbdafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d35a50c-7dcc-407d-b067-8b227ff8a4ef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2b1535-3b35-4945-9c69-16cdd2f091da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3396cfe2-7f0c-40fc-a132-00b701abc53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b696dd-b80b-4084-8999-8a9891b2bec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3a5b6a-d9f4-4c47-acd3-ecf4fd914b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92eb31d0-71ab-455e-89b1-576ab38ac370",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6d3367-7cbf-4439-adeb-10f2fe154b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d16358-0e1f-451f-af28-56c19d7c215d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d836241f-7272-4b6a-b6d6-919e32589dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f7b247-3721-48e0-8fcf-2aa7b305c992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f69fad0-2b4a-499a-9c92-af6832a5fefb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1253d9-08f3-4e75-aa32-b6bdadfa59b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903f8ff0-bc42-4555-8312-55ee620a6245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b56ab67-1429-4007-8950-3c16f6f47fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f16eda-b87f-411a-ad6f-fab188e2facb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e56a74-b007-4091-8f19-8340f04b292f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df1c0f0-46f4-485b-8088-04fed1c11fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429aab91-bd15-4c56-a604-f6201a364e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54a0511-43df-43f8-a889-94941d3b85d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1de1d56c-5642-4c88-90d1-2f292f9188dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3a0504-2ab8-422b-813b-784f2cf6de7c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a084bb71-2398-4f8f-affc-a41a17679b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ece3fe6-be31-476e-a180-4fa307379e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2f83e2-6cc5-4f3b-8f12-3fa6fd31626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fba4c71e-7707-4e18-a7b1-5b7c7dcea7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b65d14-e4a0-4c24-b05e-58170f421b42",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271ec4fd-7fa6-4d18-950b-45177c7447a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980a8918-ba0a-4d75-9533-aad0b9c7d937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c76e5e2-6c9b-4d1c-9449-d2e875687fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfc37a7-599a-4927-b6da-56c051eb8775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897d8396-2c98-44ce-aa3f-08d797f04d99",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47945d56-b575-48e1-8d7b-a29267483918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842172c0-bf6a-44c8-8f96-f7352214e98e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdb8cd6-d6d3-4fcb-8217-fdef304750e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "72974f7f-9fba-4b9a-ae63-5f71fe1ce4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058ae2fe-a8c8-48cd-a31e-f94357c910f3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64940f8-fdde-45f4-8744-9f5e426717aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cb0935-adf7-4ac0-b190-9bd655dbbbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e650bea-548e-47a2-9be2-45008610e40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0b4e55-46e9-496a-aa6d-7fc14e5a054e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f60ab2-1487-48a2-a279-791759c05ae5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f729b25-69ac-40ce-afac-5b8b6f983937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4f5532-b522-4416-af28-f0acf89ae14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c661725a-13be-4b4b-8e2b-d23e4779656e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5e3fcb-73cc-4048-96ef-19963fb812f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c584cc7f-aedc-4f4f-83f5-abc48e559980",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36da7b92-5b1f-42d4-89b7-b361e16f12a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab41cf1-2260-4e86-bd86-1d1eaffc6251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32381b1-37a1-47c5-947d-1e04c05824f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ef3dc1-5126-42e5-95e4-80edf8b0bcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28169fd-2830-4e27-99db-477c8886b387",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ebaf08-f220-402e-95f1-09c264323e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c6d054-1867-4581-bd54-e2ebd452e810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbd5f67-50a5-4a68-92cb-74a6bc2f8028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b0f776-abb3-40cf-b6fc-8140ef80da9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11716600-b35e-441c-822b-c323202b9e42",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22042b93-ffff-4132-af19-cfb93d0c26a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf23814-c13e-49d8-9115-f52a7790b078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18a4a97-9da3-4eb8-9c31-22fb940f07ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "76f792c6-ef3a-4fe3-ac3c-18c10a5a7bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c335cef9-b8ac-49dc-bc45-fd6c2ff698b2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe3773c-2279-4cce-a527-8f9a68b7b760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b790b6-e215-48c4-a743-5586558d26d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae63e34-d9d9-4b75-abd4-91dd98d1de20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b383a98-4d24-401a-8a59-6662c3f474ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da5fc72-8288-41ca-a7ed-358f470c4e06",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28874ca7-fdf1-4324-9bca-0e7ad64b229d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec09889-e942-4949-bb2e-eaff1ca9f478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475bea9d-e467-4cb0-bba4-8873404fb19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0289e846-0ad3-415c-aeb6-75191be506ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb19fa1d-4ebd-4079-976f-6495e2d23801",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31682b06-df50-409c-b946-fef18eeb30f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e67df4-2a0f-45bd-a1bb-5504402d54ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0017b3-c1d4-4cad-b074-2abe12e65d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d678626-f745-4cc5-85e9-12e5424f42ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5e5710-7862-4b12-b92f-515b71bc596e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e978c5-bc0c-46aa-81b3-a78795cbdb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623adc1a-5a7f-478c-b21b-5f89d24124f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9124298-7b3f-4459-8971-264e57d940f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1510c322-4bb1-44bf-9605-854fb463987a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f6df71-cebf-4128-b34d-144217a1f9e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddeaa7a-cd62-418c-88e8-3166366c2ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea448100-e6fe-43f3-a043-43cee4e0f20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38b89c8-9974-4d6e-85e7-129b6507f387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "41628c8b-99d7-489b-a74a-34972c96e5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015afe1a-07b5-48da-ab8d-f23a2a955632",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5505b99-ef3c-4d42-8774-ceb0442c839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604f1810-786d-4a89-b61f-955c58b0e549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5eff3b-9fb3-43ef-8461-10084519f53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "295f9924-d72c-412f-bce9-f35a0f0ce67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e2e0a3-cc73-45a8-868f-0b3da546afd0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906f34a3-884d-41ea-b2cb-38064c72f1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4733763c-bd54-43d6-90c7-6eaf59e8d8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ee6e29-fcb4-49ba-9242-98426413d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5057de86-226b-45ee-880f-049de8f07d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf2e70a-954b-4bef-828f-44a6d66c7c76",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a825216-0967-486d-bc64-0103a036f008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303be218-7e13-4c7a-bb35-81a3cd5c3de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac66563-888e-4fee-b6e8-44d4fe608a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d8473e-b4a7-4125-b03c-fc6218d026e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b4ecfc-6bb7-42c6-b00f-af7b89c83534",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfdb0b2-f3db-4b70-be8b-6e9206bd954f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb00501f-bade-418c-ae7c-600cd3da4e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec5c9b-c458-4b74-8509-c1ea21e92b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c47c759-6b6b-497f-9890-d9e88796da18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb806a1-9a29-42ae-a11e-ec22ea54bbca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b8e7c8-aaae-45e5-a5c8-487aedfbd907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e8e01d-3a5a-4188-bb60-89c3d682f682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d783a1d2-136c-4e0d-866e-65185c16ced8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df575993-5941-4eb5-b865-bcc6842ccc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c3199c-588b-4475-9005-6b92bee97146",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e8296c-3a70-4af6-85d8-ed87be559ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa27438e-9b6e-403e-8a12-c41554724b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0f8434-34bb-4cc2-b59f-83fd6c5eec12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14f120a9-6b9c-4df7-8937-e4654611b503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7596c909-36d9-4056-af64-6ebdad099ff7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b822281-c4ef-40f7-b22b-fee08c0e73b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92ff88c-8d93-4108-84fa-1a6688ce30d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68b53c5-c88e-4c5d-98a5-b9d7a69dc7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1953919-b630-4b9f-b17f-f45842c276e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415e12ab-341c-4b7e-ba1a-8254656a19be",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f82ad0-811d-4e9b-9783-0d78fe816256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7004bf87-72ab-40ff-adb2-d2ec532e3ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c257233e-143a-4b98-bee9-c83acebc9ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1071a6b-7989-4383-a298-8cece93eaf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01965324-7c46-4418-823e-56adeded9528",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3879cc3-6190-45ee-83b1-c02e79e8ac49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4836abb4-2370-4bba-88cc-73ee9c456295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf0cd53-52e5-4070-8fc8-ee3a9c4c6e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af700e6e-0b20-4f69-a372-b145d68afd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6530ee2d-b930-4653-b222-7e617d648fb0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4604d8c5-0e7c-4c34-86a6-e39d65e11a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00965d7-ec7b-492d-a4e7-bd7877b3dcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0ef333-523e-4ab1-b2b5-a38830c57f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "027a053a-0c57-40d2-9ea3-1688e15929aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ee609b-95ad-4293-b9e0-ce3a801d7885",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54202e1c-3965-43a2-baf9-a44b8c415096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c71ba4a-9d96-4bd4-b062-ab871a20d730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b8e2d1-4439-4809-89a9-33194e46e3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07fc3812-f5c2-4046-be87-44d66a966750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47a8d6d-1cac-41a7-86de-2e080b042e81",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6da4d8d-19b7-47cb-a726-04e5126c7d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad44505-e46f-4150-ada1-b6fb98edbd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33af5821-4c4f-42b8-8df3-f64733978605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "972f510b-af2d-4cdc-807d-21f068d2e6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc12ee7-94e9-4bf7-a1ec-380f56616e8e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89857139-fcaa-4d14-b9bb-ea6398933d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e269615b-3857-4013-a008-2b6333dbded3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4376abd9-6815-4630-9ae3-45687b8bceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0750857-8fcd-4ed8-a944-381fad27f995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445b289b-1cc4-47bf-9f06-51842c148c63",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817fd7b2-69f7-42e2-9020-b40775d5af69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfeef92-dc8e-45f3-918d-ed23ff0e0010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d72e5-8b28-4901-b0e5-e22d9cb4b8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb456473-2ee2-4f7b-ae24-f45f8f453fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331091e8-6158-4137-b269-8188c049792f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6515c87c-b539-4875-bd85-746f0e4f3b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a03076-b94d-4a32-9cb2-a6d4b656f393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3012513-f497-4533-abe8-51f6b9a66d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3bdef6-7357-43f7-b57e-236c6f42ad76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6997c6-df15-462a-b17a-1d3c22d9445b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5331f56-2af0-4d06-87bf-3882b048e2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8314cf06-2108-4084-9a03-ddf8527c2960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7b0a9f-026b-46e3-aaa2-d934c4b71c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "191ca7d4-6d10-4a82-be30-3da409c5f2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72e5ff3-d9c9-44d3-b796-44c4c52b87df",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd7de1d-91aa-4e5b-81c6-e5beaf9690a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d716f8f-6ee0-400d-beb1-ef0996a3265a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de34a3f9-84dd-49c6-9ae6-ecb0cc8fa0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea000589-ddb3-458d-bf7f-cee5e0109f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02a786c-1420-41bf-877a-19e2a9ce520c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfc221b-1cf2-4e2e-b611-9eaaf6822d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6a6f60-37aa-4e39-ac4f-8af169b81f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3982205a-665d-46af-bd66-58cf935ac481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "108a9497-9a12-4c17-8249-8fd57d0d1861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc6125b-1538-4b90-8f81-b1368cc38e2a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e29379-b3aa-4755-8c11-b89a62897b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "613e0a62-4bc5-4d55-8c9f-d334d71008aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55402dc4-dae3-4d5d-a7aa-cbc22cd32052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6d4ffd-55aa-4dcd-abe3-dcd1350fcb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515abf69-f9f6-4b70-a2dc-fdc032f2c346",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c9855b-f3a4-4e5a-b101-2054b3dd1529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c221781-d7b5-44ec-8fba-f5ff133b0a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347c47e7-675e-4e0c-b1b1-c62394316f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ca98a9-4e66-4516-a6e3-a88c24407b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0563339-895c-48e7-a160-5f44630ecabe",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f75f4c-a7e9-41b0-9f42-3abdeab55201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3fe9a9-e3b4-4c81-9981-200115fad97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cab188d-56c4-4e0f-a3bc-89922fc8e63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2fbcaaf-5b74-4c0f-a0dd-1ee84363fd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb9845a-86d9-42d7-968d-e5db8f2e7694",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca171c3f-6022-42ea-835d-a38cd1eb8fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d2465e-6a21-47b4-9cc8-a29caf910149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa038e36-3c7f-4852-8824-48a52d964d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfeca581-db0c-4c25-8566-ed9a2fd6f9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2024d7b7-3265-4170-a66f-7262b9982aa5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbc22bc-2209-4590-8a88-c28405edf94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d69299-7302-4fed-8ee7-0fc891f1da55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0e661b-497a-47ec-b86e-5649a1c10fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4926e911-c3c6-4547-84ea-aa15d48c4179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647ebd2a-f979-483f-a9e1-7d11688a16ac",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d683f77b-687b-45b8-9b32-fb5d132f21ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f97b71-257e-4c9c-b98b-9f9897b481f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5537ea50-0a59-4099-9c4d-6afd33133845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8e82079-da3f-409a-9383-ca16b8bbca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0e6043-a5b6-4a34-ab59-03799e08d0af",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a70ebd-198b-48d4-86e9-0716731bdfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4b37ed-b30b-4b67-823c-72f3c6e7a586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7a0c08-e7d6-46ed-984d-38e4ed2d37e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "069c4f85-4a66-4b92-98e0-651f49fa8b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fee3afd-b2f5-4a63-84c0-ee581e270d3d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296d8067-d7f2-462e-b68e-01aacc167a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b6c2f3-0c42-44d9-90b5-d155225f6db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fa7e12-7268-4e15-a961-332aec1b51cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2524f5b2-e272-4efa-9ee0-3a71dfb6ee0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f85a100-bf5f-4fe9-a664-d72e472f94a7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4b850a-9b92-4329-9f31-ffa0aeb6509e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c656f9-64a1-4bf1-8a78-49a82c088105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2661ed-3604-45a0-a430-db03d14b0203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "32bb47fa-623b-41bb-852d-ac70163017bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dece05-a46f-4d0c-97df-278255711364",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b517e1-58b6-4f8e-b5cd-e6f03c6d558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166f5492-1273-46eb-901f-bc51fa28c8be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008e56cc-f10c-47bc-aead-98564d445072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b403038-5ec0-4857-85b6-62f0e5c43846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994f4a37-517a-42be-b640-56b7b118f403",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db39cef4-c48e-4c44-9a91-a0edfcf534ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb1afb7-ab14-49ef-9cb5-ce0fdd448deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d80d9f-2222-44ae-8aa4-1784657c1d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4920c0b5-5baf-4c1f-99ea-ba0da8706254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9822b4-45bf-45c8-b76f-a7cc0160c1d9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0794c2af-3c88-45c4-b9bb-0d88b217cc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b0e4cb-c6c3-496e-b580-974458835529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5d7b36-758b-4c53-b462-d4dc3291d87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f69de63-044f-40f2-aff5-e19f7dc086be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f6a1a6-938c-47ec-a460-83002b3914be",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f34dcb4-7cb5-41a9-a000-61fce5adf0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c62c9128-6e25-49ca-aa4f-895cf7c5da9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f242d623-bd46-4b37-a910-47e960faee36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2efa477-eb30-42e0-9bb6-64fec241b154"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "154064df-d24d-4ea7-a7f1-df6dac18616a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6afa01c2-6f7b-4a79-94a8-60c5bd7b1ab3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49de3d4c-8e6c-42d2-9bee-bc5fd94e4324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "917a258e-4bb5-4524-a5a5-43ffe69f3770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debef33f-5c28-4d61-ab20-d38f81f798b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42289128-0e8f-4473-a00b-ef07ea6057ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5f0c4ff-0402-4cb1-b9bd-3c802448954b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c284d33-1820-4271-ac1e-ac9faa3815d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d3cb17f-7ad9-4223-88cc-23f1f51aa57d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8b33852-3d65-4aaa-b9fa-396e4969ad9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51a0e09b-3028-4670-9bcc-b06437429cb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68fb4af8-efce-4615-a795-fefeebd97483"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b6c3b41-343c-4d6d-98be-13db5fd4c66a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72535c08-6a27-44b1-8ef2-44b8b92b1eda"
                }
              }
            ]
          },
          {
            "id": "0a1151ca-a56d-42f0-bbe0-33df293970e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5d857d1-fedd-47fc-8984-d51adc4af730",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b78ab892-77ff-4a7c-9710-577c7d7524f9",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3bf6f7-0f95-4d28-ab79-5aac8d8e3a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2fa75207-c88d-4c4c-abf0-f03aa8d8bc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8650c2-988e-4421-9320-6fa808082b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffab10b0-4cb2-43f6-ac2c-84a37a7dbf7d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "350f2d97-39a9-45f4-a258-9f115e4e3246",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9526885a-ccb9-488e-9761-2814d2294885",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2ac7b14-0340-4e09-b0d9-6ecfe549e629"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dac5b468-2f11-4ce2-92c2-1710fbfb443a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ea97e59-d0f6-4f29-a09c-00e7e8d6ea42"
                    }
                  }
                ]
              },
              {
                "id": "4ce5c810-ca5a-4b38-a411-e58524784889",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7efa178-ba6d-46d7-ac0b-c418be0c977d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf5fd33a-9371-4be8-889e-ee265aec2865"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "233ac831-4901-459f-be6f-5f10bbe688cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5d7b869e-e337-4074-9453-b844f7d5800a"
                    }
                  }
                ]
              },
              {
                "id": "a3459ee7-661d-4401-a58c-8fec12cd0e90",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2d919d1-65c2-4820-afaa-69e625b14475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acac27d8-b588-4f98-9707-bd043cd44b95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ee4d938-fb63-475b-a6cd-ce18dabe6376",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6c28851-dd2b-4c7a-a851-a3c33b281578"
                    }
                  }
                ]
              },
              {
                "id": "e7282c65-3b74-4924-81af-4f9e00741db5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "716bf377-02fa-4f0b-8513-ed45d680dbf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c062006-0d95-49c4-bb3d-4c20b38442fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7f3ffc2-5c99-4b74-bbe5-369331a4491e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "512c8f26-8eda-430a-9aa7-aeff0f81238a"
                    }
                  }
                ]
              },
              {
                "id": "748df836-59a3-4516-add7-396075668e44",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5698fb2a-c445-4631-bcfe-bb544abcc5f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a493951-8254-4a42-b74d-728e0830b8a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99096474-fc35-4da0-8f70-207cf91bb2ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "49b63b09-2c7c-4717-87c7-4eb76dcf9783"
                    }
                  }
                ]
              },
              {
                "id": "25a9e082-4261-45fb-9b82-bd3a63bc600e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "397a3d2e-b62a-4961-b2b9-4e4fdc8b4f54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e0aef31-1725-41a5-9706-c5a106ccade7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a55c0fec-9862-4351-9981-4503edb4ef99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f33e7ae5-8551-423c-85ba-ca7e039a109d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f72073f-a519-4b25-b9e5-ec9430327bcc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56cbed68-e594-4e19-b707-e1cf097b7f46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2cd7303c-a736-45ab-8512-1cafed0ed89e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "48614534-829e-44af-b3c4-dff718d4becc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb39fcbb-55ad-4f16-a635-599d0ce44a19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "56eb7540-2bf5-4b97-9c1e-e696f649b39a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e711ba21-ca62-493d-bf7d-64f2b570b4a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0f7fcbd-d2b2-4e47-8a66-373227f7a6bd"
            }
          }
        ]
      },
      {
        "id": "96272517-3264-4df6-9e79-8e363cf6acc7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fde08c7d-00e1-4660-b557-604fe7b37904",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0d47e23-299b-4673-9a6e-aaf9e85de2df",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45d60d6c-ced1-458a-8edc-ce701125aa4b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a7c632-25ee-4570-84dc-47791946e3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18154f3e-b3ae-47fa-9732-a829a2c30e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bad195-9c94-4d42-9219-46bd14941f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b074dac-dbb3-49ae-9d2b-f918c883b78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dc087c-54b9-4a1f-9d87-fc9dcd6919d3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3ab9ff-52da-4059-a2cf-c8bf4f50dcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6be2eb-20bf-4e2c-b447-478ed2e4da2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e88276d-2d8b-454a-a32b-d1c28472095b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c2136c-6660-4140-99df-c988710e14a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a42173-25a3-41bc-8d00-ae4e3368100b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e509a295-825e-4ab2-98c7-9823593d9198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2eee72-08a1-4d96-a1c8-27e53f81c282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b31c75-b6d9-4364-951e-fe1dd22db4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a808397-2d62-4ec9-aac4-16278f31e0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51864613-afa5-4024-ad6c-3d440500a782",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a722de33-d9d0-4e23-9eb8-04d90aa2871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d9501a-be0c-4dbb-9b13-d67962698802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3220c8ba-4cc9-4198-b1f1-d2cd6bc97e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e89f1713-a1e4-49d5-8312-5b52868050ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c79dbd6-4b85-4c3b-8457-ed1e4fd12072",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dd21df-f090-4660-82e2-e28f9c0f4624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12c4cd9-56ab-40e2-a7c4-39482f75f7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7073722-a9f8-4ef1-bc9e-d26bd56e097e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4db4fd3-0bf7-40dc-bdc8-9b4b62e53323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec32fa6f-90d1-4f16-9690-b50a2a9ac37b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf45c15-5bc6-4c0d-9718-eeb7f732b627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ed8030-5955-41f1-bc1c-8a10ccbdf691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72893a24-d3dd-4432-a31f-0cc586cdebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2302f3-7f13-4397-9793-f5991df2d586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50c78bf-f1a7-4b62-b197-9762784ac3ee",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16d1a69-13c5-4400-8076-edc5aec4e1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff5dd51-c486-4313-9683-77c643001853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380a84d3-f710-4473-a6f7-c22d0cf8f86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b462e557-fca8-4a82-af9a-927c257f6b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d58541a-833f-40a4-a207-781cf959df46",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db57f7a6-1e51-4d9e-ad57-321637ccf0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f70081a1-2ce6-4be1-b394-fcb59f96f46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a383694-cf48-43eb-968d-8399345381a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a51faad-d074-4561-9caa-4fd1351b4515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7a0ec7-35c6-4a19-af06-598683564fea",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f07d99-0414-48c1-8e63-96e1bf4a85c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec8002a-dcff-404b-9c42-2206eae89ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eeacb9-2ba1-4885-9cc3-62f69632e269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1bb7e7b-1a13-407a-a019-6480f34c9020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24477ffa-343b-447d-9a94-ea79635003cf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6dbea9-4c46-4d92-8786-38cf3836d759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e09755-b172-45e9-8cb4-0ebbd4b52984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8869d656-3b49-443a-8a6e-3b70a8c06472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54cf9bb4-fdb5-481a-836c-02e837fc2303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed6da38-2259-4063-adef-e1313e29679d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e8a948-817c-4644-af36-f15dc787e22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29819264-ae4c-40a0-a949-b596917b1518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58185d82-e77c-4ab0-8f27-eb252888d420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca7590f-4b1d-4c53-8151-90fba1a67a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecdad7d-e8f5-4514-a2d0-a043ccacab21",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fee84f-a91c-470c-a755-6629572d1a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4c3b7a-4d50-4215-9126-c9306b698343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883287eb-c56d-4771-bffd-f0e0075150b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc2fac7-6d59-42e2-8a6e-352ab7eedadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e74026b-9f0b-4e37-a5b3-ad7ab58a1627",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f3af9f-8dc5-4c87-b618-fbf0cd07cb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a85979-a64b-446e-8d1f-0474daa2ecee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf125fc-a331-44e3-a122-e31f43e057f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44264815-cda4-4965-8d26-d803a44baa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe10c4fc-8407-4856-b518-52d55ec2d5d9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c152ce-dcb3-4adb-9473-8feed48c6121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0d82bb-dd6d-4d95-8932-784d9b05fd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7673eac9-c629-4d64-b509-1f0aa6e8f1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb0c795-1648-42b1-a885-99ff1f8664f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9c07a1-beda-41a3-81cc-79c8af1ad342",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670a18a0-f447-4129-ba04-375447d66261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74141d88-1f06-4be7-adfe-053da5ebb1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d91f6f-0539-4324-8b2a-a04368139e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "72900342-f897-4a83-a55c-313801a637c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464c8bf7-b8a5-43da-a50d-29f18acec834",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a8618a-5d51-435c-9642-44bb31ad0242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1013e5d9-18b2-4b3a-8222-35436c45aef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba84a5ad-f377-4ce5-bf94-17615504b1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "70bf54e9-1e53-465a-aa82-df7695d84f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf20fa2b-90c1-4403-bbcb-3db93e63a536",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd4b498-43cb-4f5e-916e-c2c6a2ed8142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b8f8b05-1983-4bac-a0b9-11a65e8235a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a544d3ce-985a-4d8c-826f-ec7aafd3acad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbe4937-a43d-4496-ae9f-a311a43c1b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cc33fe-3c5b-443e-a193-dab7ebf25923",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24082fb5-954f-4167-8e0e-4e01f3c60393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9af6dfd-4990-4e89-9fb8-1414a26537c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97429700-4f3b-43a6-a0ad-61d97d3ec7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b38c204a-b056-4ae5-8a69-45b4620d6d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4a61f4-e81d-45ee-b3b8-c6165390de8e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1212260-357a-44b8-93da-2cfd89be6bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7486e70-1ad6-4885-aef7-cf8cbae63de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a81efb-9986-4e45-ab57-9f7a6dfb1a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad7d025-550b-4364-aaee-51430f54321c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636f5f92-c3ef-4e88-a96e-eb08c7dc6f68",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64596681-ba68-4bb8-ac9c-35078adb47d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746541cd-10c4-490c-9db9-fb8e87e34f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857135c1-61e2-43c9-a0e8-78c0998af6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09632ee7-1e54-4fde-8460-2738d882f455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4978b84e-4a80-4d03-96df-3e9f1c3f5c8c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e6eb70-8bad-48f4-9615-254cd72e8f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eb8e7f-ca57-41dd-8bfc-2ec1706f6e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cc90b7-024b-4e10-8aeb-c6c9660a0545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f651b518-41a6-4f24-aa39-a4a46048d727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdec26a-1ac9-448b-a8f6-abd4725b5b94",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb43012-6bad-40ca-8477-2aaf3500d915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa416da-e989-4748-aff7-6583f874a2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a122729c-02f8-4b0b-a058-870686981a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d4f049-9abe-447e-9e20-403aa74c7d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf1a04d-69ef-42ed-998d-5eaa3ecb2b30",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8682754c-7d8f-4248-ab74-67d9de81a7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e551f332-697f-445b-8a1a-fa6b0664ca14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248c3024-3801-4aba-a6bf-499de3e03cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6abac68a-0382-4de2-a76b-60b34eac3346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35184bd5-5f42-4c12-8835-c59c3fd0badc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27830e27-cbe9-4a14-977b-b7d812ae47b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273c9b92-d3be-448a-91bf-8651bdf1608b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7666a66-19f4-4988-8241-35e14c2d2646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2820722b-534b-4257-8681-4e6d2d2b0829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d02407-ea5e-463a-bca4-e43fc4233889",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86be5613-3539-4cb2-8663-18456383c745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661e99ba-4b07-4009-9cbf-a3d024ba859c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48c6ad-e30a-49a3-9599-9223f18c9b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "126cce2f-9b22-4b4b-94b6-198403c8f363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1e538c-dc01-438c-a071-b8555c04822d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83935a8b-c0db-4338-a20b-7b5e5e162d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b432ae21-5e0f-43e8-b459-13c98dff8384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e4b0ca-3d5c-44b3-affb-8064b8847e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7729949-e63e-4135-906f-de8105545fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc8bd23-5eac-45ce-9dec-b9be21d9de79",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa89ed6c-e7ce-4da2-a509-d2890b2827ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0047da2f-2656-4fbc-b831-ed509ca934ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fca2d2b-48d9-41b0-8787-3ba9452d4075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "743a3698-77aa-454c-afc7-b52d4838dacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12cc619-6b63-4c3e-bf3a-20609f351f16",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afeab546-34b8-4d16-9e63-4e6b380bba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069acc01-423d-47a9-96ad-3b1648081366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60c4b25-370b-4d8d-bbab-e62f4cce56cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6bd07fd-b172-425e-85ed-e5926e1202b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7b39fd-abee-4348-b48f-b795bc1f4c20",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3c54b2-3b25-4edc-9edc-a04695c2b87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b5979e-2540-454c-8800-1558b946bb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8413f198-2dfb-4fba-8f5a-982af9d11589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af851025-0b96-454e-8b4c-05e382206649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ec27f9-42e3-4140-b3e5-06f15face63a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4dd66e0-d31b-4b40-8e39-eb8a75df5b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd37d81-6129-44fa-bbcb-31d43c14a164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8a7bbd-50fb-43c8-8427-ba5c142732c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ffb62a-c5dc-404f-ae02-0563165949ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5f7db7-c1cf-4a70-8379-ca3154a95052",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e37775-8ffe-4d43-bf6a-417429564921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00ad9c1-d4ab-4caa-80aa-345da9f6f86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b228f2c-0317-4b0a-9365-ca103e7597cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "243f8b4c-4d41-40cf-a2ea-ed748c55f549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a13ab8-3145-4315-984f-4bc1d1031b39",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4f5d9d-a3fb-4447-ad4e-706dda283b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2635323e-bea0-46e0-bc88-cae08bc1c26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c354f4e-1849-4d5a-bcc0-513c7a95473a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9379e2d8-d4a0-48e7-a98c-cd29e09f5b8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ade70f9-0615-4ebf-8dd5-59cd206d6b47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2e231173-1575-4eef-b268-494887addce8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439d5288-2041-4265-a4b6-04d32d4ad5d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b20c2012-4574-4b3a-8e7a-5065af502883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316df863-5c95-4f89-a306-8c836f36dcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69c79dcd-cbc7-4982-881e-d6074a6815d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "352ac100-6677-41f0-8503-028fd1b5d7f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f99fc3b1-fede-404d-b469-525c65213901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de12e179-a2e7-4a8a-92bb-95dc7d1bf9ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bff4d1b-a261-48c1-a310-43ea0f654fbe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1f3d09f-17a0-498c-889f-f9d39e565bc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b445896d-15a1-47d3-b590-a7ea9fa19d69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c20c7a86-e50b-465f-9611-526560cb56c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ae40c55-d013-4cd1-857e-199edbda86a0"
            }
          }
        ]
      },
      {
        "id": "925fa642-9a9f-4d59-a10d-0a847153e1ff",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "eb5ef32b-f997-48e4-8dde-0e016e2974b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4810e10-c4fa-4802-acc8-a8b4e2f62564",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c1f7a38-45ba-44f9-adf3-0097c1118997",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32296191-9753-482d-9271-fe6407c5d190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdc8ab7-d766-4b70-aec3-286a63f5757b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa6651d-b9ff-4104-92f7-1989f1d27c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "aedb8e45-220a-4fb7-9ea9-9ca2d5a096ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d602a037-4d91-4985-8344-ffffeb4f337a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406cc0f1-f07f-448d-a2ce-9592ef0837e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507eed76-218b-453b-9c16-b40066f83266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad38607b-97d7-47a7-9835-53d5a00a988a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6dbce1-197c-44a5-9ac6-ee6aee0bc3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2872789c-83c0-4f73-b406-6b5b460c52e2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e12dd3-9983-40a6-a33c-ab3e96138148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f947522-c186-4a4b-b6ea-ec50fb0b52c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64120077-a924-47de-9f0f-b6139663b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64afb1e3-0693-4db0-a094-a648109e715f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c72ba4a-2091-43bf-8a9d-40e04b456a2c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f31a46-5efa-435a-9b90-f9ab3d4cc848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72ce581-c878-4c43-b6f5-912563d3242d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38812ba8-1073-447e-af54-9cf99389bbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a2e6f7-0151-42d7-8c64-5bc764010c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8005e43a-a762-451a-a93f-ccdd739612ce",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c9a2b8-9d95-49c0-9af6-394d7b86f2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a969722-71ea-4aba-8636-966a2850654f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b2dd9f-60fa-49fa-9044-5be763056932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75d8bcfd-dafe-4936-84b5-9844b7b8cb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2393887a-f955-4e6f-ab52-797b07a587d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de7a052-cf04-4b13-bd2d-f2609cff1535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716de11e-6a20-4b7a-bf93-0ab63c8c1f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340b52dd-c63c-4116-92ee-063e1b68a325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80daa776-6c56-4c69-9bc7-065c4c7c4257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e47a94-aeb3-4245-b5f2-6fb9e80e0bff",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026b4cef-b6c4-49e2-b2d3-e52236d5e640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a98f6f-d126-4c7f-ab57-895a6110aa0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21694173-4f24-46ca-a5ff-f96e9943f15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9efb660e-ac34-4a3e-ac5c-2244e3cc843f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26da1732-3e16-42e2-b3d1-9f527a493104",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6c0623-8397-4204-acdc-67aacd284053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9511f4-8a1c-4904-abd9-b184fce301c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a8947c-2020-4829-b16d-c6e538a8cfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfc5bd9-3681-44a1-8e5e-5289aa7752c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcd824e-3977-4739-b8ac-83a3e714d0d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b5e923-7cdd-4bee-b0eb-2a92dafe9d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade09761-5869-49aa-b7f7-c04d9c2be573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cf1a32-c199-419e-9f57-2c4824cb7958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b55312-a337-4fd0-860d-48db49888b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8c8eea-b939-4592-8940-3ed43e6bb940",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad036bc3-a87d-4b49-b232-cf4d9d936b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2114cc73-f61a-4654-8c50-a058e6b5eb82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b3df17-f8df-40da-8d16-4f38e5bdb11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "346ee862-4ba8-4ea5-9635-23b6631e2a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942eea1c-d3f9-4328-b8c4-adbfee0aa680",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d10574b-3874-46a6-aa35-9e19e4236d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbdd021-0034-47fa-be61-70190dfc37b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e765ab78-4596-4a03-a148-0c492370ec28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a4506c63-54a9-40a0-bb01-b635646160a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aced5e-63fb-45b9-bb9d-521f48a127a5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1687abc-438b-4884-b1b5-bb0f10288d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c19f59-3558-4442-960a-a7ff53189d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add672c1-5b73-4b7e-964a-b1f469af6fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d27f07a8-998f-4c97-94e4-d928dedcb21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf1ed1c-0883-4e78-a231-07e6d001c37f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd3ce1d-b49b-45ce-96a2-0f6bc397968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2b60dc-c654-4fb9-b8fc-35cd1bfb7515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36894165-a4dc-48c9-9c65-0a7a35a76b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b935da-15f9-4b31-bd8d-09413053cc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a8c173-086f-4c28-9b39-8561f29e512e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9469521-0fbf-4442-8bec-ad1764d2bfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6499039-78d3-41c8-96be-3c1270e29c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bf9197-26c0-496a-a37d-09688f63ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "466426f7-510e-4248-bdaa-ff0781f7a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb28f06-a646-4a8a-8af7-a7dbb96bbd53",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ab972b-a84b-4adc-8782-139be89d4740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98f4f4f-c20e-4ceb-8cb0-a8a2ed810bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dca2a73-d5d6-4f54-8adb-66b584fb6d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a6bd6e-8ee2-4223-8574-c9c38d356165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b9e2e-a7d3-403c-955e-b3dfb17c6ce8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5c402-d3d4-491b-8b00-dd5a09f249b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff7f6a8-7207-40ff-a4c7-077de2aa3173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4c2720-2f61-43e4-a4e1-8d305a91b89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe07baf-7d50-4b4f-922c-c53ed75e4fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258adeab-0622-42a0-b480-d23dc4a835e3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d584c4a-4c05-4210-8b5b-913d3300f19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4541f7-39d5-4934-8c39-39a246c31a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48aa33d3-c7ff-40fe-8292-8af6aa18aaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de16b60-4ed8-4a60-aed1-7fec48fafacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ce7cb5-daa6-487e-bde2-8dc30b62fd6a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd85fc5f-6737-4805-8468-7bdb5c7ca6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957098b4-5626-4afd-a1a2-73e7a90dd156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26de4f97-1a3e-4835-bcb4-5804847ae891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ffea37-ff55-410b-a41e-45dd29aadb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9444b913-c679-4156-9aa6-0c0ca9f663b9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e8c246-8270-4e49-aa42-d3acc69c0224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66e51e7-dde8-49c1-aaea-2a1efe528b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a3b62e-b6e4-40ae-adc8-df06915f7db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0610ea-85cd-4314-a9e7-aec300236624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e8a864-a2a6-4c1b-9a9b-f607ec4c75ba",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da6bcf4-2559-44d8-aad7-778e874f46aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a0a291-5ee2-400f-80e7-b37a47dfa348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4df429a-fdf7-42f6-b045-5bb7235a1961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "664fcecf-7fd2-4b7b-9f17-c0c8b7601f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cffa93-5d9b-46e4-852d-16a8727d6966",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c35aa57-d7b9-4673-b3e4-ad371dbc1742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e96940-2892-40a3-addf-bf6a8754c897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1573c9be-0488-4dd2-ba1d-5c51b3cba323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f05ec3-eaff-4853-80a1-685a67043589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04eb2733-3714-4a85-92fc-d6658075d93b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9065ef-66e9-479d-9291-fbcc6a8902db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073ba941-c05a-4252-a34f-8b73a85545be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fc5d06-ea72-4c55-8287-5a9f28071c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff667fb-03f0-4240-a095-0f344fef214c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0840e5-5369-42a2-a503-6a2848d7cd6a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bfec13-2544-403a-b14d-22f0c2ad3acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca67a19c-4fc1-4272-8f66-97e9f2841dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e773e3d-773c-4b25-97c2-a50d971e305a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f5ef6f-0c02-42eb-a306-9a5e1b298991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e815e3-2f76-407e-aded-18ddafbd08da",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe480416-56e5-42dd-bced-be751a28f2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0213736c-0a26-42f4-ba59-a9467d0cc2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ce326d-ed2e-4e85-9010-f7b6e332f331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf70c13-02fd-4153-b230-aba6056c1e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f7e3c0-b0f9-4ec6-abd2-719312bbdd86",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3518bf3-9dff-461d-8ad8-d96fa73ba104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8a25d7-873b-4676-9e1d-2ed30266df95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7533bba9-7bbc-4070-84e8-b6e606c9998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "180eb37a-a427-4ba7-8808-9fdd72b1d795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca126e4b-0eb4-48fe-b1f4-1fa3efb01c70",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00803b1a-f870-4e9d-adf9-f5dc7fe1f2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbbe6bc-2202-4729-ab35-6feba2dd1cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129073c9-efce-4512-80d7-4558a0497deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "358d64ee-d1bb-4356-9a5c-bb3ba93c24b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d06b4-a3c3-4146-8b8e-0bd8dd3edf15",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46632bca-2d91-40b5-b84c-b71d039745ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc8e747-435e-4b86-8616-4bf3c3f33923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d9391d-6311-4dc9-82e1-1849ba56f2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acaefffa-6a13-4d35-a490-ecf161f79634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d3b8bb-7719-4b9f-a18c-d590235a5092",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629a0828-cffd-40ec-acf4-679050550a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9319177d-ae22-4c4f-a8f6-5ee6194c678e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1b827f-d97b-42b1-bc4b-b74eda8bb7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e620f686-0675-4d74-9c44-c75f8b0a9269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68eb6b2-19d5-4f0f-9596-1048e422c61e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83487c9c-63bc-49f9-aa27-00aff4564f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0f5af6-8c3f-47f0-8d3c-5ecca09e9767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973621db-770a-4beb-b69f-6169ac88524b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c1e4a0-7355-4b35-8864-74d5c2c9e8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1effb4-c57a-4d75-9eb8-b5638a0dd97f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af030b1-9ba3-4efe-ae13-cf307d7aa749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1110b7-f868-4ff1-93a7-0b89b0b0408a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1136fac-98f2-44aa-8ae1-6ebed004c271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab4d798-f40f-46ef-ae22-118bbed5dba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3273148-c9ef-4c1f-871e-75e39ec71b89",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e734cb10-5259-4c17-be03-20f2229fc1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2636deb0-912c-4dcf-89a5-8448d7782849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e1403a-149d-4154-84c7-b24455f1230c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae0d31d-5216-47f3-9fe8-d607fb8ea931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4163d022-9e67-400f-80d1-4412095c6c15",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b04139c-9dbb-4bf6-9e4c-5d441c6e6d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62099c0-0da5-44c9-95c9-aa5517def47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898ab078-f17a-4e38-8b61-8c0433a72d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "989894d8-4d43-4790-bad8-2f83c966cb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afdad29-b09d-44b0-8994-dacb191f4b19",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab1e289-19b8-44ef-b0cf-9add250cd552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850c41f8-98bb-4a18-a7d5-a8c48a7fbc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9851c7b-c958-4530-8573-3c4052056773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9996ddb9-23ad-4c8a-9e98-cf084069248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d516e5cb-aa59-4fe3-8ecd-6187af68542c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77aa3a2-1975-42f0-81c9-d3a1a76dbd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0674fc4-71f5-4b17-bb16-615229834e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fb0c1a-50e4-47cd-8746-674551235744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e50dbe7-1b29-4fc0-9420-97698458f7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b795b0-0c58-4c6c-a7ef-7779acb85370",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5dfbcf-19f3-4cac-8287-a825a595da5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf291467-0a47-4be2-a058-289908147caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d93b7a-5b81-4bf1-8bf7-9fe53de4885c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90660384-3b4a-4c82-b228-8735a49ad0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780a46e0-e04f-4fc2-ba71-fb3c4a883797",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9428f6-bb4f-445d-b34d-5f5be4cfb22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426e2cc9-ba2e-460c-bc7f-2cd001763324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8a8486-88be-4508-bd8b-2b64268df20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca0e38c-67e4-42ac-9cbb-457948bd15d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e83683-efea-46a3-a255-d0ce89c108b3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d69796c-975b-44a4-9125-c1b6fb2b3fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c3c754-2322-4fe0-a254-f233dbe17bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608d15be-183d-4bab-a0f2-4bdb3463fbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8cba74-c93d-4dda-a4ec-ef96015cc6b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5c2f3eee-a3bc-44ca-a0e8-3b863d6df013",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1278dd6-544a-4e0f-a05c-9be103c4ff11",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99788413-760c-48dc-825d-7444b18ef665",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "91ed99e5-2ab3-4d7a-ab05-27b50b463f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd52c92-f268-456b-b33a-2d148349dd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b8a97d6-eb83-4fd1-a9e0-11ec7db14d4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c7431fb-fb52-41a1-b4c5-f180563ec83f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e5a9e89-8688-4e16-b2fc-836b50f840e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bd96cea-8439-4ed4-b343-c6789c75587d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b49afba-f403-4289-9dd5-cf18b04e0b4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36f65c14-8f6d-401b-9b96-fba791d63b66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2e497d67-396f-402a-91e3-c1e07d038c3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77dcb8e0-a24f-41a0-9063-8f3d11762442",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "637a2bf1-3b15-4245-92b0-042bb15a0a19"
            }
          }
        ]
      },
      {
        "id": "dbdae6ac-4536-4de6-91d5-eaf7c0ad538b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "038877b2-351d-4873-a731-1361ea654de4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8145a51-d67b-45a9-a64a-5df4a07a19af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47b643d4-7a79-4ce9-80d5-6b4491f4d814",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2192f47a-0fad-44dd-91d1-946ed9557df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b236622-e4c2-4073-8baf-012bbc298595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe6e5da-d394-482a-b3ad-35773d6d6eb3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221fcd20-52c1-4e4f-808c-9d98dde12b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514f0fb9-cf3e-4f92-9ea3-67e3928cc57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084f9551-93e6-4544-913a-c90d706960d6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3870077f-0bab-42e3-8e0f-e806d09d04cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfeb0acc-b7fd-4b4d-9bba-8c4bd8960260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d781146b-1248-4078-ac94-54d4fcd718f4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ba768-429a-4b95-a821-2b3ccd782c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c48c4a6-6682-4376-bbd9-7c5380529f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9665914-b768-4ca8-833e-6d659fbcecf9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1333b835-c10c-46e1-93c8-fde4eacac924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857ca338-8c56-42f3-b057-df419f84c973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3205684f-5d60-42e8-8bc7-e761ee1cea44",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e252d5-acd3-47f1-b9fe-ce27712cc572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370069b1-15ea-4273-9f10-c654ec956f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5dfc86-cde0-4da4-bd3b-99ed851c0542",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2230ca0b-51d4-40ad-b872-d7d5934d0bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fde740f-7d99-4f0a-95ee-0916259929ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d799a9-1e70-4481-b544-dccbeff74981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd696754-3599-4832-b2fb-03edabc30802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec47f219-a5b2-44c3-864c-230de10dbbc3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13564b2-2ea2-4dd0-94ad-7551d534fcc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b6d5521-64cd-4209-8d77-96627f62fe66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38a48e4-9e70-4d59-bdeb-c120479a1b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91742d42-97a2-4851-8dc6-5c485e45a627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c465bece-3fce-4f68-8978-a69ef3224544",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a230981f-b665-4d4a-97aa-f2c4df1aa28a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0338b8ec-e83e-4e5a-a3fb-cc0f0b7736db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae6be37-662b-456f-a08e-903a57b4e45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b37db5e-f94b-4b43-b398-49f62097cc14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c1ae65-7134-4da5-b204-a95cb334c70c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1e4539-30e6-459c-8ff9-daf7d29601c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f946d1-cb5d-405b-ba8f-6a3c7317d3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c846fd-829b-4360-8402-d53941b41631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674501fa-5f04-48e1-ab95-3db4d9d9e9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e8af6d-24a2-4fae-b4c9-a8696c5d5201",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d59c0c-b978-401a-b22f-a9dde0b14f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe40bb1-1172-417f-b085-c09e8acdb44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5a1ac3-1e7d-4271-af8d-57b2ecb26006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3df45a-f901-41ca-8451-2edb009d8659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a54d23d-702f-41f9-984b-d5bd642a2afc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aec69e-2c8f-449c-8a8c-019c466f6b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ea3c21-3f3b-4571-8fc2-68167581671f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200d740e-6f90-459e-a1dc-3f9fd7a76bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198a6f0a-b5e9-4e2c-8649-e98ad2b6ffc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f075a575-dfb8-45ab-b9af-c1085a6fd7ea",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc74e38-dd2e-46fe-971b-e7ef2acebae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe336962-86aa-4c00-92ab-bfc5f8415135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a68bf4-2111-465d-abec-2e6b2b576368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2a05c4-51f2-4973-bf53-c20ac9359894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1990ed4-b718-4aab-9f86-49fd8a26f429",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be87f39-d2cd-487a-886b-997369701a37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d4cff9-4455-4478-bc7d-eef4f0affde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae242460-8bce-4a63-892e-97d0b9899109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b845eca-6ef1-4515-9510-7f0c7bdfd0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad8939c-53be-42ff-bbdd-dd8689276dc1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cf4f4c-7dde-479e-aa2b-97faf812cfcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36d3b31-4549-4b9e-b763-7dc68ddcafc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0220aa-3bd5-4788-8c6d-a2c2f04449cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262dcd48-3669-4b4f-8361-720d735c2a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f86e46d-f7d0-491f-a0cf-42bf9aae9975",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971fc512-5ea3-48f6-850a-f1e81180fbac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad79d65-0df9-4c81-8fa6-098e7dcc0ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1426406-c528-4448-9095-dc232ced0bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60bbd41-4ab1-4034-941e-2ad6698ea9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e71d25-981e-49f9-9b2d-b27536f43361",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45abb5ec-9627-4a26-b624-52750030a6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd5d0e2-2742-4b3b-b49c-962381a125a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22717eb6-2e08-4f97-bc82-55cee4b2eef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6270a27d-ab9c-4eb2-9703-fe428f8c2a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66dd2a1-a5cd-463c-bc66-c53653452f55",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f921c99d-4404-4951-8fb8-c84f0f2a8bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdec831d-5d9f-4f94-b0f8-f6f93824dad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b6c9f2-6f6f-4363-93d7-acfd76f4b518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a093a8dd-b734-4e2b-8aec-fb70c85fc12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2917699b-f963-4255-99b6-65a8d551f6cf",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af825d96-f89a-4ea2-ade7-9faadd5a7873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0738e3-4201-4528-a01a-196d09c044fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8c9730-1432-4a40-9dc8-8ec0af4e5698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcad8b18-cefc-40b9-b380-a1cfbded0d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0767f168-d195-4db5-8f5e-7a63f901d877",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cfaa50-48ed-4847-b611-e567a4505c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9552adf3-578f-4e73-b95e-30be939b106e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb8a74b-2484-49eb-953d-2db96384a3c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc41f90f-dc87-49e6-bb09-5f8a915b2b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302fc0ae-c870-405a-a6bd-75f1e6cf44d2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e329dac-0c6c-4588-a5a5-744708569c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f63efff-0f3d-403e-9922-e3371645b405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be88717-17de-4790-914d-c83e6110cdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a37b8a-3ca3-45cf-8ff6-29c4f6dfc11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5ba40a-acea-4939-b473-3be006be3b8b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c62b350-f91a-47bd-be59-18994778b8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193dc521-c5cb-4f35-9f49-0c04b6ef7a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a341410-d803-4d39-b954-5d4dd564c787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d341939-7c4d-45c2-afb7-821d80724373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdeb795-3acd-469f-9663-4cf5b1a63183",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3652cce-29d7-42ed-a6ce-b5ecd06d6868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82dcb9dd-3fd1-4f22-b8df-5fe9a9255e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b129bf8-c7e8-456e-8eff-33cfcd0db444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b84d7b-1c97-45e0-9aac-69271c659917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84532d38-6c9d-4a21-975a-3343b33ad7f5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7017911-e77e-4fa0-af17-a980a99d6eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0d4331-fc99-4f5e-8a7b-cadc1c742538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43036bf3-2cb0-4f3f-a894-dbfbee8a30e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ab7a09-b953-4fed-a4de-931ecf3e061b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3705b95f-5eeb-4a17-b126-14613c399379",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193b05d3-7d6a-4325-8ced-0418bae65946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe06473-0613-4912-b682-1d7033bcc894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dae65f-b4c1-4b3e-9c4c-6ddffc8878de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60944d4-c911-43c1-a80d-a740a4365c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e4b650-dec2-4b73-a84b-d12432e79197",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8078bd9-3f28-45f6-a0f6-78c8b12d013c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13e1987-483f-48c8-95a6-f3d898b52635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37a91bf-b7aa-47ae-8f2f-218c3677d784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ef7dc1-3bbf-4c4d-8eee-77a26a645442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac144b2d-8f93-4dd7-8ed6-0262c5b78c60",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def526c4-c2f5-4373-ae31-808a038d1d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "406be162-c466-455a-b4c3-504f03377d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d7c8e8-084f-4a53-8ad5-798385f544c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666a1e38-b8be-4508-a934-450d443bcc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c15c188-f30e-4205-9cf6-a68230154b7c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95aef3f-0878-44bb-9ba2-2b9763ac5b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02fd301a-074f-48a1-9ca9-54c5cd9a31b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea843e9-5853-46a0-a848-7e1319691fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa88198-3001-4426-a03a-95a02886e5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88afac85-8a1f-497b-bea1-54ef41d8df7e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e966abd4-810c-49fa-afc5-c73a4901f1ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816d8e16-f4f6-4702-af49-7836dbc6f6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12834e0e-cf32-4576-acfc-2eb73ea6db65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20be9567-ed2d-479a-8c64-0625e745840b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1a074a-3cdc-4800-8998-160faf19bf7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06e37ca-c5ec-45d7-957f-cc87c242a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05be2a3a-d26b-4cd7-b90b-ffc419a404bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fa08f1-b7bd-4570-8019-3a74743ba8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff2df77-19a2-4c56-a1ee-3c4e0a94cf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d61007-b504-4489-8888-e7ba7ae93663",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6de091-d90f-4ad3-8c98-2225453b73fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f6184f-444a-4b34-8f86-3fd9d44e0781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bad1f39-0271-48a1-ba2b-f4216d332920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94920259-411e-4295-901d-9f02fd017402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef53572-3832-4867-bb99-779012189af7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcadf00-7335-43f2-b028-ead204e0fd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9beb8bb0-6a5d-45d4-9b5b-8003b1315a4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff0f154-da35-4e6e-a2cc-1b553f431390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea6a1a2-f880-4abf-b578-de795dcbb8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13433349-e12b-47ae-93fd-b50d2ebe4554",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe82c39-9e00-4471-85b2-e521d2ea621b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3eaff8c-fabe-4895-959f-9735f5a395cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a678b96-1971-4096-9bd1-f8b580de8e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e94e57d-2b1f-49a6-81ba-4e1e224c5e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7888a2bb-2d71-476a-87c2-3cd6fe35e29d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bea093-fa5c-4130-8dcf-d8017e20e808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "988f1856-f224-42ad-b44c-c57e21037034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008e4faa-530c-4092-b273-3c4622217252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b423a9-e66b-43a4-9515-9a5dcf1a0ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5aa6409-c044-40b1-9515-3d7f7c25effa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5007679-4462-492a-a45a-4195bb5cc299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c245ec3-599d-4709-a492-87117648913e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba713efb-3265-4a34-8b8a-0947aa90d6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae6ffd2-568b-4622-84ab-4772ab9f6b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38a3092-d9af-4b5a-8a28-07de2500a281",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172aae5e-4fb5-4845-b70a-7b25ee3f2da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf880ca3-3f25-4307-bd5a-2f7a95cf6179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017b6db5-2ce9-4602-9863-b78a956cc504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1acc15-a4c1-47c5-bc5a-b8e450624660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3a07a3-dd26-4c97-9892-2fe3bd1a2b66",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c9d193-d093-403e-908f-7431ff772fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914583aa-78e7-4557-8c19-34ced91e6244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c9f4ae-d2d5-4fdc-873a-882e470dbb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9c7be8-be3d-4c36-834b-62413614762e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fd2196-1d4e-43a1-9790-ed9c1c4bf76f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975e4d86-139b-4b8f-a74d-8a9475b26930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620227ce-90c7-49a6-9b94-4f8e8e305348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3143cb8c-3b9e-48cf-a64a-24f8257975a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4737e2-93b3-48d6-863e-1652f16c69eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08495f9-ef82-46e0-8104-537401f50532",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb9440d-85ac-46f5-95fa-90e0fd273720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5df898a-4bba-4673-a8b3-2e058f9b5715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1c85e7-1491-46c5-b575-6ac8cb90d1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cb8aef-86a2-44ab-953b-37504b4e1bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d4588c-a1c8-4177-acaa-1770cd02af6f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dad21c-76b5-4c4f-9c17-da8efe49f70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea656c7-aa3f-418b-be79-6229962bc803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc6ed1c-2541-448e-8f5d-47288d85d6a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb21f38-3a7a-498f-9132-d19f90b01bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e03226-90a7-46d5-9ee6-08b01f2335c8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cf3521-ac02-4247-8378-5561f8d63575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67460338-6e06-45e8-9009-e7ed00581425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b405409-45b6-4279-9260-cb09bdc95070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5cd95a-da64-465f-bd14-fadb79cc931c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d43a04-7fc4-4860-97ce-c791d6d07208",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853f54f7-ae9a-4123-b392-2ff1d1182c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619c9100-8d30-4b93-b4e3-9327adaa5763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9250fb5d-1d8b-4e85-bfa3-6e07906da9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c310878-30b1-479a-8dde-59214ab9ce13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10a4c4d-dc40-48bf-8507-5e7627581455",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b20a70-071b-4516-abaf-50dfd5e12520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6833b79-ff56-46e4-a582-b01350b6f6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67973208-6003-4716-a49c-f306445e700f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72831b57-ec41-4127-8575-f0c18ab8262f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282ab559-bb4f-4206-a094-7382e14b3500",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87ffdd9-8f44-428b-93b8-94595f4c0e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f700040b-a16a-4dd2-aca7-e15d8e4a8f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3519da-2144-40aa-aecb-75921c33b870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7570b672-18a7-4c60-8ef4-21442fd719ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5acc937-dfe4-45dc-bd41-d17e1279a233",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7febb8-91ea-4be7-b1dc-71910c94801e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b515b35a-f0b2-4675-8fd8-33e0d9581013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6a126c-bf66-456d-94d9-f1995deef14e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2f96dd-f1f4-4101-a9f7-f909ca0d4ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee675332-50ca-4d61-9ad6-e7ed36fc36f1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10a0a29-56bd-485e-b807-433dfc6cf681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbedb946-a859-4445-bf7e-5e692a3d5af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f518c3-0d17-4e0a-9903-69ef5701a982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dac660-0349-44e6-9de1-f86561ecd870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d2339a-a809-434e-849b-5e39d5740d0e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9687c281-132e-49c4-acec-79e97fd2a6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0c82b6-ec79-4079-84e3-e191a08f55f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e81228-7542-4bba-81f3-1cfc580ef44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cacd68b-db08-4b33-838e-88863e2a4177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b712fe-1c97-4781-9a8b-70c7684a07a5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6cd97a-c208-4cc1-a173-ba0586ed3a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe28749b-782a-46b5-90ed-f6aee49cb3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cf67d2-bad3-4662-a1ee-7791604be891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec1c0cfc-517d-4d12-b989-1323e7a34dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbe233e-1e18-4e28-8a24-c3d30341f515",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e4fd79-cfd9-41c1-b578-661600877d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f821fb3b-0ce9-4f76-b453-9064754d0774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88239f3-0a63-429d-98e7-75941016a921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9150a6-c83e-4190-88fd-cd6452d245f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55863f5-f771-4b4c-9b20-6430dafa43bf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70129ba2-1065-4ee5-afa2-1d1598941287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0662ddb6-e7ee-467c-bb79-d605dcd3f2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1971021-e5d4-44d4-af16-69fb360af249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382b8678-59b2-403a-817a-788b2f537cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2161d396-eaa0-423b-8877-242937ca3043",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8549fdfd-455a-4633-b7b5-84d70b0c0c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb063d49-31dd-448d-a2bb-50aa64e49ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c5406a-d3a5-43aa-86c8-1df4242fa7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4397207c-139d-42de-918e-21942ab1d0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6a776d-2f11-4a6d-a30b-f5fe6c5176b1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8047365d-af28-423a-9c8c-6886ae787127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2c0a48-487e-4613-885a-9bbc38f0d7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afac1f1c-19a2-4441-9e07-0f9d848af606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5abf1b-7bbf-46c8-9432-d77e77915fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c46ec3-2f35-4389-a808-b467238e0b9f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177b0698-cd42-473a-a7aa-3fc4c2972da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8946676a-425c-4fe6-8a45-06a4caea6b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f3cec8-36b0-4158-92af-783946052580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c019be8c-b65d-4d22-9b4a-ef4082b4ba27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726cf919-4268-43c7-968e-35dc4cfb9c36",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b61fdf-151c-434b-a6d9-eaada31126ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea0eb70-f16a-4956-91e7-db87e19ff2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a1b82d-dffb-4d2f-8fdc-59f3909c0a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28a9b9e-1eb4-4172-8760-7030f8ef484d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec817efa-021a-452c-b208-79e396fcc2e2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aede0d-f270-4f31-bb40-bfc159d4e063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fa029e-3f95-4e09-886e-ba604da2b88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1fa877-e9e6-4db0-ac04-b13ef79a3a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076f1283-b82a-40b4-97b0-daa6be706c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f04a9338-0ef7-4ef6-bf90-7fbea27166ab",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a285c175-fd20-456a-a522-2f7665c3e837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6381886f-7cf6-4243-aa8c-9b708bea3da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0836f01-5c3e-482c-96a1-1f4853b59f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fab3e4e-6df0-44f5-938f-997d0b6fab28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b47ece-29ad-491d-b54f-7e7017605542",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5a6cf0-9afe-4870-a0f0-235eebb82042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b67647d6-5e15-4845-a7fc-2b1371493880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44df9a6-5a60-4221-a646-8e8ce0f3f4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7fc411-5d00-4a34-adfe-e98544ef3abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c0949b-f66c-4da3-9465-8e8bb42859ba",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e71ccd-fe4c-499b-a658-47d2d58c4960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7e4174-aa42-4fc4-8b38-8d3ab7a9614a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2120e7bd-346e-4f32-99ad-0659f348586a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffdc13d-9d87-4a0f-88b7-f9fe87019185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8328386-ee90-4350-86c1-c493cb7e4bfc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612e463-a388-4c31-8c29-1e29ac3b5b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f47976c-3543-4e06-9a66-249344299927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c3dffd-89e6-4bcd-b1ec-79ed9e34c056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846a5e6a-98f4-4858-87c6-fc5e08693ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0751511-3faf-4b66-95a0-c21e0eb01478",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5736e21d-db41-4306-9317-08dcd0b6c955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cb7f59-2d02-4561-a6eb-77ef18b29d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b98c0c4-4884-4db9-96bc-57fe36e1e259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e0b098-3b13-4431-ae8e-510bcfa6fd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8102634b-3924-4caa-b437-99dfc2d7a579",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59800712-7e54-4bb4-b088-347e7f9cdbe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134ea36f-4183-46ef-a47a-074fc48260b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccea505-af70-4799-8f76-efd6d31fb5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ce7c68-7c58-4d54-8203-720b471eb1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40d3f3b-7bbd-47a5-bfd7-124479874c8c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0efd281-cea9-4680-80c0-54ce1754d155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5d4c61-07df-49b7-99bb-414f57894857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1017ac7-3971-438b-8b96-9c2907c16391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec62d4cc-a30d-4431-a85e-103c88d9c81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5499c309-5d9e-4981-9cb4-395538b6868e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b6b58b-eaaf-4917-a038-2fb89d4d3f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7902fb77-e985-4e95-a6cd-1ed56071f286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1739b48-6f93-4838-827b-b3ca3f31e075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c11a4e-97af-495a-9480-3045a0dfc97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3559564f-2b1f-468e-a46a-5f25e24c1550",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbe7a3a-eedd-46b2-a981-76b1843d0dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f6926b7-4d7f-4207-9229-fe1685f97445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522ad02b-2329-4b3d-9723-69a2a4d99c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae01c3f-5e56-47b4-a272-8e9eeb001584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0226b825-f675-4771-ac59-f43b8fb5dc8f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a7b2ea-5d57-45ae-8c61-4ebb28da4cfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86687d9-e5f1-4a92-94c6-d024e21cbde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335ee6e6-2161-4287-b522-2ab7477a23c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125b4e51-369e-4d2f-986f-cb2e5a35a6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdd0e42-e1a5-420c-bf43-e56a7972afb4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a60e076-c3c3-4438-ba22-414ee747b71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64dde0d9-c75c-4d41-aa14-e7e7595dd3e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eebe4df-18a4-42af-bd4f-0f23511f8325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfe8d0d-f9dd-43b9-86c1-cb36a0f98f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e72676a-c4a4-4ad2-9230-ada6e35946fe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6915b7c3-65ec-4d6b-b273-d954fac3cee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "145ebac3-c507-4bb2-8184-d973e9114fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a7b917-c360-4177-8d01-a81a03f24d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcf42f1-c90c-48b8-b6ff-421dd8041c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c303de-7f34-4ffb-b04a-3e73b33c90fd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bea9be6-050e-41a6-a81c-824395ad9ad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78de5ce2-d76a-4285-b3ee-6ec89e44832c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4aa17fb-0398-4e67-b1b3-e05746d6b610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7daabc2f-420e-442f-86c2-ee8ac5a09468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902fd4a7-c6a5-4945-9fa0-4a636571daee",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b4649d-7e08-4b03-8f74-a2696952ba7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ae4f61-a2b8-49d8-9bfd-190b7ba9308f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f47c60a-d60e-4ad7-b6ed-93393cbccd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f7a6cd-5fb7-4294-ab2e-d006f42eb7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c5e9a9-bcf8-43da-bf2f-3b7fb9578c9c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b35cf5-fdcc-4c80-b230-c7429f324699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2097de94-3732-4064-8ece-b5105272d332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98790c34-91b5-4ab7-aedf-590c0e758c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd9cbfd-ce3c-4972-9d4a-3059b58b567e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bf00ce-27f5-499f-a83f-839e7b07b372",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0194ab-6ee2-4757-bcaf-ccd0aab83ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2fc820-c293-4ab5-a7bc-00abe3d9339f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b343fed0-2373-43f2-adb6-9ffb5fed6cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df348fa0-bfc3-43f4-88bb-94f36f01be4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fe24d0-63d6-484a-890a-f187ebfb893d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cf5acb-3879-43e7-a96a-9a41a93759cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "972674ea-ae1a-4b74-893e-74d581d55692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a837d255-ce51-41b4-8249-297ab7a83285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201d0fe4-5cf5-4521-abfd-4a70e164ab43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65acae21-598c-4ec0-9653-c0f535fff416",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13d3baf-d35a-4746-8306-c8f4cd77e837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "373ba8a9-5235-4b78-9b9f-a3da518b7fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177019df-14d9-4bed-8d9f-de04abaf8d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8ec3f1-2a2d-44c9-9a12-beee39548d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5386f87b-c8df-4960-970f-5a66e122bd31",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c116ce0-de75-400b-a430-5d117119a87f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93ae307d-826a-425d-9359-41d5c502d178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15371313-fde7-4c70-9e49-401f2f814a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa65b41-d50f-443a-9ed2-19434f9830ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded4c230-35aa-465b-b9c8-4065385aea80",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecbf812-50d0-4191-9585-f69320693c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1ee8d40-2d3c-413f-b7d6-ba589724b448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcdb772-a22b-4203-bb64-a9ce6cbe9a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b252511-50b2-45f6-91a0-d8823063ebc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7c6b24-0d17-4f05-8505-1a3c23827335",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed74122-693a-44e6-8cd4-d5eec82c7094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "045935ec-76b7-4c09-90d9-505766fa08de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5403f5d-b393-4118-b403-e68af35511a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1547fa8a-aa4e-4359-b47a-ee081a7a5173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66272a8-7266-4c1f-90e2-e3cf37955331",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3ac266-cccc-4899-98f2-5204f934b583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edf6cfa4-b468-4f85-91d0-832c44c3647b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbede9ed-e0a2-41ab-98f3-53e133fc075f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1c8a49-4f5e-4d0f-bd7c-6ec28ac668a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b62643-b554-4ffc-af90-1f245571a7c6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8514a3-16d5-49c9-8a5f-ab6fcda48e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd004147-b456-411f-9f24-d0a41cfa66e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffceafe4-e233-4b7d-a6c9-8c7379a4e376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a555a3dc-5712-4918-958e-c93ca4a21f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f480c15f-c845-430d-826e-eadeb9d1148a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc487e3-79a9-4d1d-bd3a-e5a9e3a5dd85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c41808cc-6e7a-43b0-862a-124f48401e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189b16b3-5243-4520-aba5-7868aa3f50da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b63284-6a90-40e2-ae4d-69732d894651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58c1497-287c-4086-8795-9eb5326021db",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563de6ec-b095-43df-b2b1-fd78f2148166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47dd1237-b0ed-4cc1-b3c4-002966544d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc54d155-27b5-4122-ac6f-d3a51a726e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e7f13f-b2fe-41f1-88dc-33e0fcd63d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03366656-00fd-4dfb-934a-e9fc2a6cc434",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6421c40b-fbd2-40b5-a94b-beeacf911931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c9add59-0b7f-469e-abd3-8c2426d8cc53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f84f4c9-f6a3-4546-b9c8-5e35b4cf71ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d45a8d-6126-45bc-a644-7c275d68c5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccfad0b-4371-43e3-813f-623298e4a5ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dd3cdc-a2a4-40c2-98a8-902fd4fa971e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62d1256-d605-47b5-9577-f99fae402a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b93a76-5927-4fe6-a49f-2dbee3458725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78c8223-55d1-48df-8d6f-fa0ae0606a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339d31d7-eaa9-498c-87c9-ec18df6e4a5a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc671ba-3b6e-4f5a-9e4b-46be88b87a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6fefa6-77b4-4829-b4a3-b1511c5e1cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cacc2f-b44f-404b-bd56-98d540eb419c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdf72b1-3dac-47df-b7c5-109987e20fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499d37eb-2677-4302-aaa2-40af0e51d9fe",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b19fd9-a0ac-475e-9592-12bf8a0cfa45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3392e74a-3669-4a22-af24-e2d337123744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7862e28-feb7-4095-9815-de1d306ab568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dade13-2d28-4467-b39f-9edf5a566aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2762c413-d67e-444a-a7e5-df060f66579d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758c98f9-93e1-4c17-ae65-82a09757ed44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1cf1eb-8b68-4b3c-b1f0-11e8720b68ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ce9723-5b03-49a1-884c-10637b522dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211535fc-620b-4c96-a91c-ea69993d930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0751594-bd00-4fc2-98ea-2151d6bd3a0e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce2ffb5-a887-40cb-a004-85a53b5c23e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be51ef68-3987-4a10-8850-787281aeb1c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f40c091-31aa-4f85-917b-e37bd3e9e90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622ff9af-a279-445a-805c-1a84c0515600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60688e58-c95e-416f-90b2-878573c8ef69",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6f6225-77ec-4b3d-82bb-0f853f2696ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7020385e-552c-4103-8d9f-37ca996718a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd44e03e-f896-4905-811b-a9d25e799684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f5238-e186-4d12-879f-6c9d0667b621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7a63dc-a478-49a1-aea0-25b51070c369",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221a7ec7-bd20-407a-84bd-8a010eb6b9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adc4e136-60c4-4fb4-a8c6-1e8c329ee73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37340bf5-4dbd-4976-adb9-14725e36dd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e1984a-6a42-475e-a463-0b2bec80471a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2847b9-bce6-4dad-9e1b-e8d36a47164a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9145cbc-bdf0-4128-9445-ce6440cf214d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a58e7d67-8fb1-4541-8737-7a092b086eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a01b2-a3f4-42c2-92aa-875b45b280c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d23b2d7-c2ce-46c9-9d48-df51f5979a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb40b559-85ec-4aab-9af9-33b850c77e67",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fa2d3d-ab8b-49f3-92f0-4fe05fe8afc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc6b9416-cbb7-4fc2-b0df-f3e62ed29542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "563774f1-bb00-44bd-92be-1a0f26f3620c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d5c50a-d88f-43bf-9ae4-41c2541b710d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7712dd-fca2-435f-9e47-bfc92f13da23",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f377c2-2d84-43b6-aa50-93ea47d98323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a274be-f13c-46e9-90cb-8c620a60329a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f06998-90e2-48ca-8a1b-edc3c5c49c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e338af2-5ea1-4332-8610-85110fb2434f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6885ba5-a6d7-4541-94d2-4b5706598db7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a08b97c-6ec8-4beb-aa9c-fb99f02a6c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3930450b-9a85-4485-9000-da41986d01cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce3b83d-dece-49cc-a16f-68c229c3f0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9b0063-5b07-4954-88de-efd1b41eae0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babdccef-5930-4abb-b4f9-2d9a144f7ffd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd69a9f-49b1-431c-8667-795ef26d840c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66605a34-2a2c-4abd-b6c5-225cb50e5f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f74a97-8b1d-4900-bd73-76910f0c48a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f403896d-78f9-4964-9a0c-69ced29e4be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7063be-e5a5-4ecc-bd7e-8305ee0c3865",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7943f837-ce62-4303-b4ce-6b66a6cc43f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf3dba39-97fa-40f3-8740-939670476e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e185855-4577-4295-815f-5518906b504a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46623da0-ad08-44b3-ab31-f44c7f9b5a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67a0fbf-f858-462c-a3a9-31504ab7df13",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e166c757-b797-4668-ae98-2011a82fd97c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4aa850-9157-4481-9665-130ba33d5d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceebbf90-6fbd-416c-bb39-23a17a222f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ed06df-fd19-48b2-9be6-903b70222001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e310f8f6-cf6c-4b9a-b8a7-cb0fb8b4c4f3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e196683c-6c1b-4264-b555-cecce89b213f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eecf83b-5b4b-475f-8b18-1c3a6490ec04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "239c9538-633b-449a-9c72-a0bb5f2d4d2a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabebe65-1515-4d8f-b1fe-aedcd8ab5319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fefb4d-8c26-41ee-9a2d-118f3ee415b2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2519366e-7f16-42cc-89ad-86454bbab9eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004e93f7-eeb8-4b86-ae7f-30358cfdde26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990027fc-d69f-4dfc-ba96-298e9202279e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781de6c3-e03f-4ab5-ba68-e96bc5b0536d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2446397-f4ef-483e-aeaf-b00c0f945003",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6af61c9f-da4e-4b81-9fd3-ba9118de77f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d1483e5-29f3-413b-8052-7f18521239a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "238ce255-bb93-4bdd-a833-309c34dfbdca"
                    }
                  }
                ]
              },
              {
                "id": "80911d46-44b4-4664-b3d8-39d3474362f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50c57175-9196-4e3c-98cd-fe64c4ef996d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95b49b8-8787-459a-8a0d-1f9d4748828b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3c42bd8e-c448-413b-b1ed-988a1a4da78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0d4bb2-5d09-4219-ad29-44eb8f16b4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a27cfef0-7851-45a8-b1b5-9e7ebfb01afa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e18b4541-f9c5-4e59-ad5b-0ccb4174bea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "080711dd-31b5-4a7e-8f19-a6dee52c0c6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70f9531e-13be-4c06-b77e-cb6de7726f07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0917d06-de85-4602-b5ad-5acf9e6478b5"
                    }
                  }
                ]
              },
              {
                "id": "47cf8b94-f87d-4d50-8f82-660ae23973da",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1a007938-80b1-4364-8841-f3c1213735ac",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd1b3c5-1c7e-4810-8f30-fe0af798ab05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "94c6f9ff-aec5-4ff6-9dc1-fa5c4f7dfffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e941fe0-b3fb-4e63-b221-01f4aedd946e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567ec6f6-ea09-4359-b8c5-30bcb4c814c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "427a28cd-71e5-4ae7-8eec-11cb03adb24e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "027fe49f-f871-4915-ac61-fdb0a963d8ea",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4d902c1-152e-4c01-86a4-2d558133e49a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69c43a18-44a3-4286-8714-6d42e74a946d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29749df3-fb04-46a3-8e64-9385e4a989aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddf0d876-14f2-4ba5-b4bb-4e8ff58406ac"
                    }
                  }
                ]
              },
              {
                "id": "7d47178a-45de-4732-9fb6-84c559fa5ff1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37d55bac-d444-4135-8285-57a0eb6d7465",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1b61eeda-4181-4c7a-b654-b6c6e5be4fd1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45900ba1-d438-49c9-9ccf-c1491f37e40d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3aefae4b-6d2e-413a-991c-7a331e8fd92d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f235ee8-73c4-40bc-bd29-9398c04ac736",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "dc829c1c-e173-411e-a737-312a496b396d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49b1f097-e2f9-40dc-8ec2-5a69664123cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "614d820e-4b9e-4988-9951-df2fe99cd845"
            }
          }
        ]
      },
      {
        "id": "2650d0d4-ab71-488a-ad93-96ab4d7e9741",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7be53675-d6b1-456b-b293-87dcbe67d887",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20718029-529c-45d0-8a37-913b6eac2cda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25fc0ecb-f08f-4cc4-a5a8-3194721c3a8c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea61aa0-4c22-4de8-bde1-7e667280cff4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "462a0027-20cf-4b31-9535-aabc00a8307b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1569bec1-7a37-427a-a375-d67fdb03ed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84b7f7ef-8339-4c7d-a186-75ed53391bfb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "051910bb-7ed4-4dc5-a20b-c2bc4f01e1f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ece90126-f0ea-4793-afdd-e113d6b5c577"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2d5ce32-0544-46fa-b1bd-a93a6f3fb089",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "134353f3-c2ff-4b7e-a141-3e09f8175dea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec5be114-4b53-40fd-b79c-f26f41521733",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "554aa0ac-93f3-4d8d-9fd7-3fc33998513a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80af2f3d-46a9-46fc-a29a-3328bc7b7d6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f88d40b5-b8a1-45a4-b383-8e335109efe4"
            }
          }
        ]
      },
      {
        "id": "05277716-453e-4880-a132-a9bd2783cdac",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9f6c5512-ceff-4d4a-aeb6-60cf71e2c6dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "545548ca-ace0-44d1-82e8-323a76cb79a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40c5fab4-2a32-48e6-be58-7539a05e7669",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbe4f0c-6da2-4b0c-a5a5-2ee4f4d8b111",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57779678-50fa-4a15-82c2-c142e169cdc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3d535c-08ef-44d4-b353-113d56c68018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac6d3ecf-0f84-4610-90f3-d5b043a3de55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54144c5f-8baa-4c4c-8993-70cf2e05053f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e91cc6e-e6a3-463a-899a-669eeecca458"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dec4601-e8f4-4464-971c-8574bfb533a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d44ed07-1262-4751-9326-47b2d4d74dd5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75a19650-c9de-4227-86a8-537464ed21dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "590bda55-5460-4c54-a116-e3fe77865e82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f47562cb-1eae-411d-89ac-615a20f88152",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a739458a-3d46-4d54-99e7-08fd2cdbd578"
            }
          }
        ]
      },
      {
        "id": "5a1d3f4a-3fd7-4863-8061-83336b78d6d8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c9088e07-4ede-4136-8f3b-49f49a1cadec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04c02187-b592-4334-8d2f-e7d3da8702ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7617e0a0-2916-4f55-a661-74a980598d2b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c74b7cf-c71f-4326-8420-df9f07217edc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d5a8d8f-4190-4fdc-b6a1-657764d5b46b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3133a1-b4a0-4b6d-ad51-465b99048569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8e65e26-6e9e-4c8f-8d13-bb7b642fbc56"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd7d0a59-c52f-4636-9961-b4f028a0b2a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0f1f82c-79bb-482a-a8a3-128684c96659"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "091b3149-cc73-4423-9967-c41a16406464",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa7708fc-19db-46d6-ab19-570c89564b4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "702ec61a-27a7-4889-a969-8c4a1d900b14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6f4dbbd5-eae4-4cef-bbde-34d90d9e8412"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae4e6607-258e-411e-832b-2eaf688f802f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbef7bd4-27b7-4ff9-b2f3-2021daf38d35"
            }
          }
        ]
      },
      {
        "id": "87f82430-5840-488f-8768-5dc7649a7698",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a49775b2-3769-4ea1-8535-65c3f9705e47",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d13a8fa-7f39-4ea8-b74a-ac4f3c82f157",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "59f9e676-7c0e-49ca-9026-d4b2f2084bf6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcf9f67d-2c9d-4c7a-acdb-2718fe1501dc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9c645b0-a7a4-4c1d-9f31-892b325819c4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.38947368421055,
      "responseMin": 5,
      "responseMax": 513,
      "responseSd": 81.34724719398187,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708130015960,
      "completed": 1708130044094
    },
    "executions": [
      {
        "id": "12266a05-b61d-4b76-a254-e5df70cb57f1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b5682092-29de-4439-88ab-29f019d77bc2",
          "httpRequestId": "bdee6a2b-613b-46eb-8fbe-2bb81d9dce7f"
        },
        "item": {
          "id": "12266a05-b61d-4b76-a254-e5df70cb57f1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8de0bc69-4fd1-4b64-81bc-f9a8be4fa66f",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "1b1b341a-5d54-4192-845a-8830fe7c68f2",
        "cursor": {
          "ref": "d546f312-d811-420c-b715-c569f0c7889d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9acd9a41-234d-44f0-9e22-5c7a850763bf"
        },
        "item": {
          "id": "1b1b341a-5d54-4192-845a-8830fe7c68f2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5b6e4b09-0cf2-4e29-a732-cc06c7af43a2",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "7a8fc9df-0a5a-4587-ac45-75b73ea4a024",
        "cursor": {
          "ref": "8282b67a-ccbd-46b3-a956-32f20b9bffeb",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9968758a-2aa9-4599-af27-4305478cf068"
        },
        "item": {
          "id": "7a8fc9df-0a5a-4587-ac45-75b73ea4a024",
          "name": "did_json"
        },
        "response": {
          "id": "6fca3d5e-ca54-4158-8ba0-9085b8c36802",
          "status": "OK",
          "code": 200,
          "responseTime": 432,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e76374-c183-4ccb-9d49-b4b9db6023ed",
        "cursor": {
          "ref": "892da9f5-7559-4822-bcda-7c74ab2baa86",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "65efc5ff-d9c4-4d02-b4dd-90d467eab3bd"
        },
        "item": {
          "id": "f5e76374-c183-4ccb-9d49-b4b9db6023ed",
          "name": "did:invalid"
        },
        "response": {
          "id": "40909b56-8f67-441b-85ef-f6b0dd187f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e76374-c183-4ccb-9d49-b4b9db6023ed",
        "cursor": {
          "ref": "892da9f5-7559-4822-bcda-7c74ab2baa86",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "65efc5ff-d9c4-4d02-b4dd-90d467eab3bd"
        },
        "item": {
          "id": "f5e76374-c183-4ccb-9d49-b4b9db6023ed",
          "name": "did:invalid"
        },
        "response": {
          "id": "40909b56-8f67-441b-85ef-f6b0dd187f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbcc2d9-3844-4bc8-90ae-ed5dfdaf1cc8",
        "cursor": {
          "ref": "8fde5ae7-c6c3-4540-af2a-df2aad29c7bc",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3c092d2e-ec29-454c-8560-a5124c17e9f4"
        },
        "item": {
          "id": "2cbcc2d9-3844-4bc8-90ae-ed5dfdaf1cc8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "01506e7e-835c-472d-a89e-007e55cf5083",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ef78e3-228c-48e9-b510-37e64eba8e24",
        "cursor": {
          "ref": "9065cffe-1f6f-4935-9948-2d11b0ac27c6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3d3a086e-d148-437e-b805-49cefe0ddfe3"
        },
        "item": {
          "id": "64ef78e3-228c-48e9-b510-37e64eba8e24",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e8cb3ff3-a3d7-4af3-898e-5ed849d05752",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81913443-109b-4016-af3b-05e7ddb55bc9",
        "cursor": {
          "ref": "5b1f06b1-93bf-496f-a4b0-9befd584a42a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a667746e-997e-4fd0-a4ec-0338204f34e7"
        },
        "item": {
          "id": "81913443-109b-4016-af3b-05e7ddb55bc9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6c43bc08-a230-4ada-969d-69b60baa3ddd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61893cd2-2b32-4091-9400-4d0f87980c8f",
        "cursor": {
          "ref": "9df6bc29-4793-4ab7-8d6e-f8b15f84da64",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "01a01816-4ca3-42e9-b790-e439a300dca5"
        },
        "item": {
          "id": "61893cd2-2b32-4091-9400-4d0f87980c8f",
          "name": "identifiers"
        },
        "response": {
          "id": "d2e9ff3b-4c4f-4c78-b07d-d9527910024a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fcd23b-81be-4390-b1ef-2f2750768423",
        "cursor": {
          "ref": "95128d8a-753c-43c2-bdba-7960dfd9e636",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "47661639-75d1-4b6c-8811-3182d3081b13"
        },
        "item": {
          "id": "a9fcd23b-81be-4390-b1ef-2f2750768423",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ed590ed7-bd70-4a6a-98b7-3bbb3aa6d001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b883456f-31ec-4482-9384-e67379a3d0fc",
        "cursor": {
          "ref": "b5b0ecdd-d87d-4568-852b-b175c1003c64",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8f748e4c-5252-437c-bcdf-f3edc4867d1c"
        },
        "item": {
          "id": "b883456f-31ec-4482-9384-e67379a3d0fc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f4516b70-e0a8-4a1a-ac4f-ae34d678dc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d8b173-eeb9-4510-9372-27745bb1ec80",
        "cursor": {
          "ref": "a67ee65e-a9fd-4e37-a3c6-f7ddb7a32218",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a2bd7674-20b0-4b1f-8847-e14531a0fdb9"
        },
        "item": {
          "id": "55d8b173-eeb9-4510-9372-27745bb1ec80",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c26c9e7a-7e35-41dc-90f7-4df7f6720d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d655e015-2da0-43a0-89e3-1c735db490c8",
        "cursor": {
          "ref": "2662309c-c974-4573-ba11-5f6bfd3799e9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6b6da70e-e246-49c4-a452-4d0cbead56aa"
        },
        "item": {
          "id": "d655e015-2da0-43a0-89e3-1c735db490c8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "37543b68-92c0-4707-917a-27d45c3f1c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a43041-8a61-4f78-865f-1036162e6709",
        "cursor": {
          "ref": "017c500a-7347-4ce6-9bc7-e959944d0fdc",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2802f4b5-8d9d-4757-bf91-091110c363c2"
        },
        "item": {
          "id": "32a43041-8a61-4f78-865f-1036162e6709",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a41748d2-196c-4e92-8895-a958e5a8590b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46112d62-4877-43df-ba8e-9c3dfa540d26",
        "cursor": {
          "ref": "5402ad70-63a9-49c5-b0a9-6a143804c7aa",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b24d805c-b1dd-4864-a062-fab8adf88471"
        },
        "item": {
          "id": "46112d62-4877-43df-ba8e-9c3dfa540d26",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cc73bf10-0645-4d5b-96e8-93bf81ca753a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c14b4ae-2eb5-49f2-9e3f-b20a2d88f069",
        "cursor": {
          "ref": "240192f1-018f-42c5-8bd9-fe6180de6d80",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1a8971ca-84bf-4186-a449-4a59420b044d"
        },
        "item": {
          "id": "0c14b4ae-2eb5-49f2-9e3f-b20a2d88f069",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9ebb2b57-2161-4b7c-9490-b988ef44c408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49102de7-6460-4358-bedc-18dc28f0079c",
        "cursor": {
          "ref": "da329f2c-9059-47a1-9cc0-b77ebbceda65",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4394cd21-7599-4e15-b57e-a8cf7821ee60"
        },
        "item": {
          "id": "49102de7-6460-4358-bedc-18dc28f0079c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b055583d-3af5-4a4a-8731-a995f960366b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceccd8c1-b111-4910-9f02-d04f4818f14d",
        "cursor": {
          "ref": "66e26036-e8d8-4a7b-92f8-b99c3687980e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2dd41636-1985-4a73-af61-27ceae9aa013"
        },
        "item": {
          "id": "ceccd8c1-b111-4910-9f02-d04f4818f14d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c3f1aebf-50ec-4792-a16a-2c0703771edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081f6db6-80e7-43f9-a0a6-72e6bf82d4fd",
        "cursor": {
          "ref": "657ba51c-9906-4289-b2aa-78348384d31e",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "98c0417c-fa64-48b3-bd8c-cb09f385da5d"
        },
        "item": {
          "id": "081f6db6-80e7-43f9-a0a6-72e6bf82d4fd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d01a2139-eeaa-4d2c-a57f-b918f2808c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c8f23c-19e4-4b92-9f0d-5cbfa4eb53df",
        "cursor": {
          "ref": "ea921c29-fc15-474d-aaf0-d4789296bd82",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "27ef18c3-9722-4257-bc77-a5c4fd370b1a"
        },
        "item": {
          "id": "02c8f23c-19e4-4b92-9f0d-5cbfa4eb53df",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6c98718d-c5fd-4cc5-9e96-2476c6dfb539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06328a2-1b76-46b4-b038-8d846175f2b5",
        "cursor": {
          "ref": "5a743526-efbf-4e6d-875c-c0d10496af4a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "07d9c416-0288-4677-94ed-bbb6bc1c7e9d"
        },
        "item": {
          "id": "e06328a2-1b76-46b4-b038-8d846175f2b5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a9e7a0a2-06f4-480e-8f59-ff5de375de21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfd2f08-95ff-4108-a02c-576441824412",
        "cursor": {
          "ref": "cceed85c-1f4b-4617-a778-44132dbfdc04",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2a16f1c8-21eb-4d6f-a17f-bcf89c3e1e95"
        },
        "item": {
          "id": "3dfd2f08-95ff-4108-a02c-576441824412",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "41ac1271-175e-4d9c-918e-b281c91f8620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78634e37-e896-429b-a585-efde64d5b40c",
        "cursor": {
          "ref": "3883cfb5-c84d-43d9-99cf-1621107bad16",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "50db96bb-fcd1-4f55-80fe-ebd5917c82ed"
        },
        "item": {
          "id": "78634e37-e896-429b-a585-efde64d5b40c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "48c6f355-4c3b-442b-a5f2-22abcab7695c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6defa25a-09e8-4bb0-acc9-0157f815cdd2",
        "cursor": {
          "ref": "dc4708aa-7f79-4a91-86d0-a00b083dda43",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8b90cff5-4d30-460a-8e6b-b9d903c95f13"
        },
        "item": {
          "id": "6defa25a-09e8-4bb0-acc9-0157f815cdd2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "219ae2bd-59b7-4bd4-bc7b-4cc5d42fe278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8696af68-41a1-42dd-ba84-0a3a25902e9b",
        "cursor": {
          "ref": "dd34ed46-cb24-41cf-92b9-0f655962ddc8",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "13e522ec-2eb9-4bb5-bb6c-17d45979e3c5"
        },
        "item": {
          "id": "8696af68-41a1-42dd-ba84-0a3a25902e9b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7e7ea42f-b9fb-4080-9647-6af2b195f6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13ceabb-0f83-4397-ae4b-63ee99e27d2f",
        "cursor": {
          "ref": "a1d04e88-c932-4eff-98bc-0c0b7fcbd7c4",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b77b3ebf-ac68-4a3a-a722-f379b3e590c1"
        },
        "item": {
          "id": "e13ceabb-0f83-4397-ae4b-63ee99e27d2f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2726af90-9c26-4b3b-a3fa-c36ff2146355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3c888b-a2cb-4018-b6ce-cd33182685cf",
        "cursor": {
          "ref": "cf9bbc2d-4e2f-43fc-bf91-6f0fbfb8433e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2eec77fe-f7ea-47a8-b923-4c89a4ac5066"
        },
        "item": {
          "id": "6a3c888b-a2cb-4018-b6ce-cd33182685cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6947192e-8c2e-434e-b851-710e1ef36617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30802a0e-b488-41ab-a5f0-890621e356b3",
        "cursor": {
          "ref": "4a6010a3-3d07-4f48-9e9e-6a73db174743",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1bd56431-fa0c-480b-b83c-1cf96cf383bd"
        },
        "item": {
          "id": "30802a0e-b488-41ab-a5f0-890621e356b3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4813b3cb-bd71-4154-b568-7b023056ac25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5d5109-de9f-40bd-9050-ae19d961e815",
        "cursor": {
          "ref": "2a17fc5f-0dc5-408b-b8c9-d4961a1940f1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0e3b5c22-273a-47d4-b659-8e9bc84c8e0b"
        },
        "item": {
          "id": "2a5d5109-de9f-40bd-9050-ae19d961e815",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9b64aa92-1cf9-4218-8013-6e8e9936d530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a58451a-8f28-4ce0-b4ce-0eb8139ef505",
        "cursor": {
          "ref": "d8169333-fdb4-4084-9111-50dfc2b6dab1",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e5956253-3d64-4a6d-9bcb-a6c5cfc09aec"
        },
        "item": {
          "id": "3a58451a-8f28-4ce0-b4ce-0eb8139ef505",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ba94fa1d-e481-4e32-ab07-cc125f507ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcc2997-fccd-4673-9cea-3f47cc1067c9",
        "cursor": {
          "ref": "c79c62b7-2941-430d-babc-c40b042f31f7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "403ba588-9ee7-470e-b1bf-fde7d98082f1"
        },
        "item": {
          "id": "4dcc2997-fccd-4673-9cea-3f47cc1067c9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e05fcf0b-6e7c-4723-9e72-81bf9da11e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcd4b1e-bd9b-4e27-8cbc-ad9329635c8a",
        "cursor": {
          "ref": "a5d45a5e-be72-4734-9b09-690bcc5990ab",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a5baf823-6ae1-4bdc-a175-c81b736b3597"
        },
        "item": {
          "id": "6bcd4b1e-bd9b-4e27-8cbc-ad9329635c8a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "21129986-f758-4147-8a68-9f57a63fa559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdd0025-f1e2-4a01-9815-94638325c03e",
        "cursor": {
          "ref": "838777ba-29ec-4ddd-a6fe-e9ef21d3cfcd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6d2fbaab-c65e-4f66-ba3a-a8a5d9389965"
        },
        "item": {
          "id": "0bdd0025-f1e2-4a01-9815-94638325c03e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8b769928-d0f8-4fba-9f46-256ac7d1abf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2d8527-3f1d-4824-986e-7497e172072d",
        "cursor": {
          "ref": "27203abd-b13b-450b-889f-a2ed65ba97cf",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0b523a17-3192-4fa6-b3b7-5f30d17e4542"
        },
        "item": {
          "id": "4f2d8527-3f1d-4824-986e-7497e172072d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cf87fc39-af97-46ec-a6c9-200e123a6b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bf20fb-9498-4637-8e69-b1738681eec1",
        "cursor": {
          "ref": "e9c0e058-773e-4de1-aa99-7799d68e17e2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e94aeaf3-9592-48b1-bae3-0c7385cf961b"
        },
        "item": {
          "id": "15bf20fb-9498-4637-8e69-b1738681eec1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7716dc7d-357a-4e27-8817-891bdd336bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd68fd2-7f8a-426a-9b73-3e24930122b7",
        "cursor": {
          "ref": "2b03dc8c-b711-4a14-9640-016053249491",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ebc848eb-8e08-4288-bffc-1c76e6ba2075"
        },
        "item": {
          "id": "9bd68fd2-7f8a-426a-9b73-3e24930122b7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "90174c9a-377f-417f-8ae7-73de3f0d62c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537f9783-8953-4891-9cc3-07b7b11c9311",
        "cursor": {
          "ref": "273172d4-1e99-47e7-b186-7b9e9c98f2ce",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a34aec55-cbba-4d86-9c4d-360fd5e7270b"
        },
        "item": {
          "id": "537f9783-8953-4891-9cc3-07b7b11c9311",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "16ee812a-4380-4a9f-96a7-7dbfb5b9e154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af34173-b7bc-46c6-a524-6d2a4adea2f4",
        "cursor": {
          "ref": "d2a542e6-c70f-4643-beac-017e2d863005",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "890a41fd-369b-44ad-a7a0-238622192307"
        },
        "item": {
          "id": "5af34173-b7bc-46c6-a524-6d2a4adea2f4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d1266969-5227-4e00-8ccb-2244fc5fb8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807fde1-de5d-498a-a287-0dab70c586af",
        "cursor": {
          "ref": "c19d0b3f-ce8a-4c8b-bc7f-ea6093ba05c5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "66c98f8c-1fe9-4d30-ba52-9c5c40d76a39"
        },
        "item": {
          "id": "2807fde1-de5d-498a-a287-0dab70c586af",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "23623660-7c6e-4a76-846e-ceb767bda4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e571fbfe-1713-4417-8152-714146274863",
        "cursor": {
          "ref": "90f74b96-8487-4bf3-b763-b76047066c5c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ca25f858-e24c-4c3f-b787-58f2a90eefef"
        },
        "item": {
          "id": "e571fbfe-1713-4417-8152-714146274863",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0522e0db-3827-4c0c-81b7-f54535c275d0",
          "status": "Created",
          "code": 201,
          "responseTime": 513,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c8c92fef-1b6e-495b-9e52-7057d1b3ad5f",
        "cursor": {
          "ref": "8048dcd7-7453-4d2a-b098-2b6b4f9b2932",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f752b075-2058-4212-9948-1e348ce0cca0"
        },
        "item": {
          "id": "c8c92fef-1b6e-495b-9e52-7057d1b3ad5f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6ceef0c4-a016-4007-ba8a-f13047a6845b",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "63c51f2f-a603-4155-8ba5-a81da1958960",
        "cursor": {
          "ref": "253f218f-96a9-4de6-9b0f-9ed08138bf43",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "273d550d-a689-40a1-b294-e2f59c5b61e6"
        },
        "item": {
          "id": "63c51f2f-a603-4155-8ba5-a81da1958960",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f729a58-a42d-43a2-8884-05267c4479f2",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f453dbb5-b627-4230-8309-16621d8dbfd2",
        "cursor": {
          "ref": "40708024-3a46-4e46-b016-eed8a9a11ce4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f1961de5-4c24-44e1-a256-1e19ae716eae"
        },
        "item": {
          "id": "f453dbb5-b627-4230-8309-16621d8dbfd2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "735aef5f-c77c-4570-a6b5-c43b4f109797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc54373b-c71b-4aa4-b856-6afe67a77047",
        "cursor": {
          "ref": "8cbdbe7d-c7c3-4578-8ec1-696a2cf31313",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "396437f1-102b-4a47-ae9a-b22bd7a68f65"
        },
        "item": {
          "id": "bc54373b-c71b-4aa4-b856-6afe67a77047",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "06c7a472-265a-469d-8c40-ff96612f1733",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dd4a4ac1-8477-4ac1-bad3-0fcf60075af6",
        "cursor": {
          "ref": "96ff592f-f57f-438f-b4e2-c1cba44b5a96",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "432556ac-bd9e-4eb2-bd38-57035a0f8697"
        },
        "item": {
          "id": "dd4a4ac1-8477-4ac1-bad3-0fcf60075af6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6b08a101-71ee-4ce4-b070-e8209fdf768d",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bf318bde-448b-4ad8-822e-91f431ffaba5",
        "cursor": {
          "ref": "f2cd1cfd-942b-406d-8122-e5182e038329",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b9f176bb-ec68-4d95-bf43-fbf7a39a604a"
        },
        "item": {
          "id": "bf318bde-448b-4ad8-822e-91f431ffaba5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fb7dd6aa-5f0f-40d6-8343-979eb7867ff1",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d68f7eb5-0a56-4e7b-945d-05e6c10f19e7",
        "cursor": {
          "ref": "6371fbb5-6450-4d36-a6b5-9f7f132ae919",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5c0b3755-ccb1-43d7-8f8b-e29e385175f6"
        },
        "item": {
          "id": "d68f7eb5-0a56-4e7b-945d-05e6c10f19e7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e656078-79c0-4fd3-903b-091e7be4a292",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a1e5fba5-b01c-45aa-af9a-c78d00cd66e0",
        "cursor": {
          "ref": "51eb842c-6848-4530-9de0-57e5ade720d7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "58674b60-7bfd-43bb-8f6a-a8f70a94e8b9"
        },
        "item": {
          "id": "a1e5fba5-b01c-45aa-af9a-c78d00cd66e0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2cc41b64-2b4d-438b-bba5-efc56096206e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "eacb3489-a887-4e9e-8bca-1ff4bce4844f",
        "cursor": {
          "ref": "d8ba62d2-2e96-4f0e-b989-5b32832cf470",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7547c6ab-bf25-4988-a390-8c1ffc445881"
        },
        "item": {
          "id": "eacb3489-a887-4e9e-8bca-1ff4bce4844f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ddead29e-827f-446d-b6c3-dddbd56a3201",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9f06312d-0c7b-4dd8-a73f-fed320a5b4ba",
        "cursor": {
          "ref": "5a128bc0-5214-49d9-b3f9-50bfbb93918c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4f30b0f8-1a9f-490a-a1db-cd0f8321253b"
        },
        "item": {
          "id": "9f06312d-0c7b-4dd8-a73f-fed320a5b4ba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "88d6ffe7-245e-46b5-ba18-4d899a510266",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "416474b5-f24d-4a13-bf95-1b38d0d2c0d0",
        "cursor": {
          "ref": "d1a53ad7-a657-4c2a-a038-ad532a2ab934",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5ed3303a-1db2-439d-936a-a6ea4cbbf641"
        },
        "item": {
          "id": "416474b5-f24d-4a13-bf95-1b38d0d2c0d0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "10e3fad5-3976-4549-b6a4-296feddee238",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8dc15105-2c0b-4611-8d6f-9ae7c0b3884c",
        "cursor": {
          "ref": "73008748-ca17-4edd-a71f-9e33cda9253d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eccc8eef-ddd6-4f64-8142-99af940ddc6e"
        },
        "item": {
          "id": "8dc15105-2c0b-4611-8d6f-9ae7c0b3884c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "deb7a1eb-7e48-4c52-846c-3c546962b525",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c0ce4d7f-ace0-44c4-991e-2a7c19fbba76",
        "cursor": {
          "ref": "9b084d8e-5854-4119-84fe-5ead0e75d4d5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "98819130-ef94-4b8c-a239-c0d9a836b3c1"
        },
        "item": {
          "id": "c0ce4d7f-ace0-44c4-991e-2a7c19fbba76",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9460d591-66f3-42a5-9f5c-699e8291ee0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d35a50c-7dcc-407d-b067-8b227ff8a4ef",
        "cursor": {
          "ref": "ed5a1296-31e2-4420-9456-6778f90f4f5f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca9d21d7-ee8d-4be1-aaee-a7cee4c47efa"
        },
        "item": {
          "id": "3d35a50c-7dcc-407d-b067-8b227ff8a4ef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c5c3f7f-df5e-4478-8401-984add768611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92eb31d0-71ab-455e-89b1-576ab38ac370",
        "cursor": {
          "ref": "6c26749f-31df-4534-a3ae-9aeff0f39d72",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "abffa225-1925-444e-bcb9-736453e4ffb1"
        },
        "item": {
          "id": "92eb31d0-71ab-455e-89b1-576ab38ac370",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f68a2bba-d6d7-4439-b0c7-e9fcfbcde7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f69fad0-2b4a-499a-9c92-af6832a5fefb",
        "cursor": {
          "ref": "1078f034-dfd7-4318-a27e-5a99ac54ec9b",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "28e38ee7-613e-414f-8563-9e9136c6d201"
        },
        "item": {
          "id": "5f69fad0-2b4a-499a-9c92-af6832a5fefb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "16f570c1-86ed-44f7-a333-24aca8175175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e56a74-b007-4091-8f19-8340f04b292f",
        "cursor": {
          "ref": "c6d1c029-4aba-4d4b-8ea7-a42c5445a852",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6601897e-ff59-421e-89e8-c078fd2b133c"
        },
        "item": {
          "id": "34e56a74-b007-4091-8f19-8340f04b292f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6c2052e6-cd33-4fd6-b0aa-b734c4a1a852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3a0504-2ab8-422b-813b-784f2cf6de7c",
        "cursor": {
          "ref": "68d18f69-c78d-4bb9-80c9-39e77120bb71",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "05c3514e-47f7-4173-83a3-04f808831f4f"
        },
        "item": {
          "id": "9d3a0504-2ab8-422b-813b-784f2cf6de7c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8fa64d19-5555-4d36-8026-2c0fe4ee8fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b65d14-e4a0-4c24-b05e-58170f421b42",
        "cursor": {
          "ref": "7cc133bb-51d8-4523-9f3d-93498374b8f1",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8c55901d-786b-4186-ab25-3d40ed7d197d"
        },
        "item": {
          "id": "33b65d14-e4a0-4c24-b05e-58170f421b42",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "40e2fead-1b87-46fd-8743-30353fab025a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897d8396-2c98-44ce-aa3f-08d797f04d99",
        "cursor": {
          "ref": "cedf78b3-ae16-4328-8181-ba50c2fad678",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "27e4252a-76ef-4bca-b0df-5efd6b6b6d2d"
        },
        "item": {
          "id": "897d8396-2c98-44ce-aa3f-08d797f04d99",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7c2759af-8a4e-4dd8-b176-4839cf6b1d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058ae2fe-a8c8-48cd-a31e-f94357c910f3",
        "cursor": {
          "ref": "c47e3311-606d-48ab-87ef-3b04cfcb90c7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6753a4d4-c36c-49bb-94a5-ac17a50c184b"
        },
        "item": {
          "id": "058ae2fe-a8c8-48cd-a31e-f94357c910f3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3a0ec4b7-5291-479a-9a1b-62539f937c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f60ab2-1487-48a2-a279-791759c05ae5",
        "cursor": {
          "ref": "0f8be7da-840f-4718-bb9d-afadde46524d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a469486b-6b1d-41a9-a28b-51e0d667f902"
        },
        "item": {
          "id": "25f60ab2-1487-48a2-a279-791759c05ae5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6dc844af-8dad-4e55-ad4f-24e533c64377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c584cc7f-aedc-4f4f-83f5-abc48e559980",
        "cursor": {
          "ref": "cb12353c-6baa-49f8-b4cf-d83ad702e5a9",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "787bef8b-60ca-48e6-ae46-22e6e14e4e89"
        },
        "item": {
          "id": "c584cc7f-aedc-4f4f-83f5-abc48e559980",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9120ad19-2f92-4fa8-9dc2-8d7d35c53611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28169fd-2830-4e27-99db-477c8886b387",
        "cursor": {
          "ref": "dedd52c2-6961-4989-85cc-4f3ca1e6c7e4",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e9dcac82-6370-421a-b932-9aefc8cff699"
        },
        "item": {
          "id": "f28169fd-2830-4e27-99db-477c8886b387",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e54c00ff-3aed-4d26-a3cb-eebf8d4f865b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11716600-b35e-441c-822b-c323202b9e42",
        "cursor": {
          "ref": "b5ea0a8f-31eb-4c70-819f-17d1d67479a3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c84bde2b-c660-4ea3-bbcd-23af9602542c"
        },
        "item": {
          "id": "11716600-b35e-441c-822b-c323202b9e42",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9bdb3fec-b5b0-4d7f-8693-93c6580cf807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c335cef9-b8ac-49dc-bc45-fd6c2ff698b2",
        "cursor": {
          "ref": "e8466cd4-f58d-4c06-a1a8-9b85b60187e7",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2d2c1516-e15f-481b-8965-4b5e0cffee01"
        },
        "item": {
          "id": "c335cef9-b8ac-49dc-bc45-fd6c2ff698b2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b970cbd7-40ae-4edd-8687-2bb29920c0fa",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6da5fc72-8288-41ca-a7ed-358f470c4e06",
        "cursor": {
          "ref": "f3bbe226-b717-4a13-84a5-29ae820bcb87",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d5196854-147f-4889-9955-59540e3a474f"
        },
        "item": {
          "id": "6da5fc72-8288-41ca-a7ed-358f470c4e06",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "75424d8f-ad2d-4baa-b832-ab7d55bb4963",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "eb19fa1d-4ebd-4079-976f-6495e2d23801",
        "cursor": {
          "ref": "b0c85695-76c3-4747-8ce3-c3ef1edc8d9f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "498ba860-1ec5-4e64-ac48-e3dd457f532e"
        },
        "item": {
          "id": "eb19fa1d-4ebd-4079-976f-6495e2d23801",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c1d6691c-5508-4dc6-af9d-6daac6019ff4",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "eb5e5710-7862-4b12-b92f-515b71bc596e",
        "cursor": {
          "ref": "0e8189c5-f0c8-453b-a1dd-cd337241f93b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c240de8d-5f7c-4e57-abf2-3bd4308adf5d"
        },
        "item": {
          "id": "eb5e5710-7862-4b12-b92f-515b71bc596e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d087dee8-b001-4565-a2c1-a33b84becb47",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d8f6df71-cebf-4128-b34d-144217a1f9e8",
        "cursor": {
          "ref": "7b6bed59-4bff-4d25-837f-bedc65a5c541",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "738a1ea6-638d-4c42-ba86-38a4073e2d03"
        },
        "item": {
          "id": "d8f6df71-cebf-4128-b34d-144217a1f9e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a113a6ff-950f-4920-b962-782280a3317e",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "015afe1a-07b5-48da-ab8d-f23a2a955632",
        "cursor": {
          "ref": "85b7fdc0-89b0-4c0f-a7fa-f50320b13941",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f0aafc19-d37c-4bf3-a8a3-5aa68ed61387"
        },
        "item": {
          "id": "015afe1a-07b5-48da-ab8d-f23a2a955632",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6c0882f1-7756-414f-bd33-2564e03a909d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e2e0a3-cc73-45a8-868f-0b3da546afd0",
        "cursor": {
          "ref": "876e06ba-fc60-4086-963e-4204c11b9e5e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bc18ec61-b34b-48e5-83a5-3d36f98eabc7"
        },
        "item": {
          "id": "91e2e0a3-cc73-45a8-868f-0b3da546afd0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "95d04143-5e65-4241-98af-f1e69651d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf2e70a-954b-4bef-828f-44a6d66c7c76",
        "cursor": {
          "ref": "ee8fafda-3e07-405d-8017-df7560e3158c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "29cdfc93-d6f4-46e3-abfa-c9da43e3a199"
        },
        "item": {
          "id": "6bf2e70a-954b-4bef-828f-44a6d66c7c76",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "27572dd7-34a0-414a-880d-e5e9d3fb5583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b4ecfc-6bb7-42c6-b00f-af7b89c83534",
        "cursor": {
          "ref": "8670b9cd-9710-48af-9f00-c5d90588e524",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f80ef0f4-f52f-4675-90de-c24e81602c8a"
        },
        "item": {
          "id": "82b4ecfc-6bb7-42c6-b00f-af7b89c83534",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1e6f4b3b-2e1d-49bf-bf23-e9d3de3fa6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb806a1-9a29-42ae-a11e-ec22ea54bbca",
        "cursor": {
          "ref": "aa7574ff-1539-4932-a9cc-7ed57ede4740",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "86538a74-492c-4dec-a2c2-753987754b01"
        },
        "item": {
          "id": "6eb806a1-9a29-42ae-a11e-ec22ea54bbca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "28710d29-faf4-46e8-ad38-1eb0e2b8f8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c3199c-588b-4475-9005-6b92bee97146",
        "cursor": {
          "ref": "aacf012b-52d2-4d48-9d47-3f7b96ca0ef1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "789be2fe-cd46-484b-b48d-09468f030df7"
        },
        "item": {
          "id": "b5c3199c-588b-4475-9005-6b92bee97146",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1e83a440-9ce2-45ab-ad11-5b175823eca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7596c909-36d9-4056-af64-6ebdad099ff7",
        "cursor": {
          "ref": "6617cd32-7c80-43b4-90c3-5a455372e18a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b9346531-1bba-4234-aab4-2d1fd770eb7a"
        },
        "item": {
          "id": "7596c909-36d9-4056-af64-6ebdad099ff7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5b078eba-0cce-418d-8b0c-0ba6a8771ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415e12ab-341c-4b7e-ba1a-8254656a19be",
        "cursor": {
          "ref": "58c31079-a9a5-41bc-945e-7e700180ca82",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d14457bb-c88e-4bca-a2be-19b514e5e0ff"
        },
        "item": {
          "id": "415e12ab-341c-4b7e-ba1a-8254656a19be",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3d0f9e05-b19e-4151-9e93-4dad58fb3d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01965324-7c46-4418-823e-56adeded9528",
        "cursor": {
          "ref": "6faa44c8-6527-45e1-8d5e-272af8255caa",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "57eb96fd-3dc2-4173-896d-317660243fba"
        },
        "item": {
          "id": "01965324-7c46-4418-823e-56adeded9528",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bde5d27d-07fd-465f-99c3-29fb20b89bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6530ee2d-b930-4653-b222-7e617d648fb0",
        "cursor": {
          "ref": "7a08a5bc-6429-4a2f-872d-39f6cdf05d28",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f18a31ff-3914-4c28-8cc6-7fc797594454"
        },
        "item": {
          "id": "6530ee2d-b930-4653-b222-7e617d648fb0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e61781fe-3652-4bd1-b4ff-e5c0a93fa5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ee609b-95ad-4293-b9e0-ce3a801d7885",
        "cursor": {
          "ref": "e6faa167-32ac-486c-bda2-33945d88d9c8",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "898b944d-8b79-4c28-8da3-e1be51cb937a"
        },
        "item": {
          "id": "97ee609b-95ad-4293-b9e0-ce3a801d7885",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "589ebf7c-ab87-4bc1-93e1-953964205096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47a8d6d-1cac-41a7-86de-2e080b042e81",
        "cursor": {
          "ref": "914dda07-75b0-4e67-aaea-22a73522dfd5",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "81453d83-fd40-4589-8274-663a5a2cf7d7"
        },
        "item": {
          "id": "f47a8d6d-1cac-41a7-86de-2e080b042e81",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a4869f7b-108e-4937-9111-a1f3953d10ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc12ee7-94e9-4bf7-a1ec-380f56616e8e",
        "cursor": {
          "ref": "cf760f0f-bb5a-4be3-9138-19bcbf0f36b6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2bc4edfc-f88b-405e-8124-83b4907d9c11"
        },
        "item": {
          "id": "edc12ee7-94e9-4bf7-a1ec-380f56616e8e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0b1b6d1e-4be9-4083-8914-87b35e49bbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445b289b-1cc4-47bf-9f06-51842c148c63",
        "cursor": {
          "ref": "30e135d5-ec79-473b-b67b-3d4fd2a41b3c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "79c755e4-178c-4165-863d-67a84b046350"
        },
        "item": {
          "id": "445b289b-1cc4-47bf-9f06-51842c148c63",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b2222ac7-9bf4-4177-95ae-67c0a1523607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331091e8-6158-4137-b269-8188c049792f",
        "cursor": {
          "ref": "9f1f507a-f72b-4ae4-b766-357d45e9bf66",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2d35a39f-8284-47e3-a516-dbc68d887d73"
        },
        "item": {
          "id": "331091e8-6158-4137-b269-8188c049792f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5da96211-e170-4e95-a5c7-30ffe2b8f0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6997c6-df15-462a-b17a-1d3c22d9445b",
        "cursor": {
          "ref": "94c0b927-e867-4a48-9f8e-f3166b6bacd3",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0b31ca76-1f5e-467f-bd1e-79905616e205"
        },
        "item": {
          "id": "da6997c6-df15-462a-b17a-1d3c22d9445b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "16e0c32f-74da-4682-9015-372bb26070a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72e5ff3-d9c9-44d3-b796-44c4c52b87df",
        "cursor": {
          "ref": "2ab97acf-1edf-42d6-ae0b-eeb183d8ddcc",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bf48abf4-d7cd-4eb5-bd76-973debb1642b"
        },
        "item": {
          "id": "f72e5ff3-d9c9-44d3-b796-44c4c52b87df",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3e9aac12-c1da-4745-a0c3-ed21f78bf197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02a786c-1420-41bf-877a-19e2a9ce520c",
        "cursor": {
          "ref": "bfc1dccc-5c0a-4a24-bf5f-01d9570d0abd",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "aeace3f9-c824-41b4-9e5e-33863d7602d5"
        },
        "item": {
          "id": "e02a786c-1420-41bf-877a-19e2a9ce520c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0f9a0b5e-a8ff-4584-b47d-9de434ab1394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc6125b-1538-4b90-8f81-b1368cc38e2a",
        "cursor": {
          "ref": "60133edb-a7c6-41d1-b844-72bee2ae1da2",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1b746005-0ae1-4d88-96b8-d062eadcd51e"
        },
        "item": {
          "id": "2dc6125b-1538-4b90-8f81-b1368cc38e2a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fd1c33cc-ebfd-46be-a400-c7edfba3ecdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515abf69-f9f6-4b70-a2dc-fdc032f2c346",
        "cursor": {
          "ref": "4d607039-1274-4e73-81f2-e7389e3a957a",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f795e9de-acf6-4384-a117-c117d4eafdc0"
        },
        "item": {
          "id": "515abf69-f9f6-4b70-a2dc-fdc032f2c346",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "442cff81-f4e8-462d-976f-9834222301b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0563339-895c-48e7-a160-5f44630ecabe",
        "cursor": {
          "ref": "7c005199-9881-4201-8960-7e7ddaa83abb",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0b83f7f4-cb52-4adf-912d-b9a2a2becc55"
        },
        "item": {
          "id": "b0563339-895c-48e7-a160-5f44630ecabe",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5fc1a208-ad8a-4046-a636-ff97b6b126dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb9845a-86d9-42d7-968d-e5db8f2e7694",
        "cursor": {
          "ref": "f2e1d88c-4d70-40b8-815a-3f14a607d2e9",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "35f410ad-6440-425c-af69-ac74b44b00b4"
        },
        "item": {
          "id": "2eb9845a-86d9-42d7-968d-e5db8f2e7694",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8ace194b-029d-4636-b1aa-32895dbbd7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2024d7b7-3265-4170-a66f-7262b9982aa5",
        "cursor": {
          "ref": "064e66bb-eef3-491a-bed3-b4ec1f1bae3e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dbfc9084-c680-4094-b0dc-bab33e96d7f0"
        },
        "item": {
          "id": "2024d7b7-3265-4170-a66f-7262b9982aa5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a8fbf50a-ddc5-4021-9a8c-f4cfe44204a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647ebd2a-f979-483f-a9e1-7d11688a16ac",
        "cursor": {
          "ref": "52d1bc74-d777-4763-bab6-6073d6e9520c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aa06db97-f386-4513-8534-51fbb5af278b"
        },
        "item": {
          "id": "647ebd2a-f979-483f-a9e1-7d11688a16ac",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fe249722-a92a-4136-9bfd-ffac7cbde558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0e6043-a5b6-4a34-ab59-03799e08d0af",
        "cursor": {
          "ref": "40926087-240e-4252-81c2-51a1c8cf3133",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c565958b-0413-4e2c-a3b8-6b55621bbd32"
        },
        "item": {
          "id": "2e0e6043-a5b6-4a34-ab59-03799e08d0af",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2439b2e7-7080-428f-8676-567f8c4fa61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fee3afd-b2f5-4a63-84c0-ee581e270d3d",
        "cursor": {
          "ref": "fd457332-7128-4829-82c0-fa149b6626df",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "efb49f52-e432-424d-b2fe-bd452f768032"
        },
        "item": {
          "id": "1fee3afd-b2f5-4a63-84c0-ee581e270d3d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7a6d9e84-9150-4289-90ce-1cfce092e47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f85a100-bf5f-4fe9-a664-d72e472f94a7",
        "cursor": {
          "ref": "f589f870-c3d9-4feb-9350-76bce3565c56",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b23b5ca1-0ac8-4e27-b70c-7176b37a33d1"
        },
        "item": {
          "id": "2f85a100-bf5f-4fe9-a664-d72e472f94a7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f481bfe4-d0d5-43fb-8329-cce841c6c37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dece05-a46f-4d0c-97df-278255711364",
        "cursor": {
          "ref": "dbe12179-9349-4ab9-b8c7-939871bc888e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "896167a5-ec32-4979-b0d9-642aec0519f7"
        },
        "item": {
          "id": "13dece05-a46f-4d0c-97df-278255711364",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4a83cfca-c8ce-4058-be07-da0e58e2a256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994f4a37-517a-42be-b640-56b7b118f403",
        "cursor": {
          "ref": "e8f53c08-1179-4271-9fc8-a9e97792b2fd",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "690e2c98-40fa-447f-af24-0c4a1d2d6636"
        },
        "item": {
          "id": "994f4a37-517a-42be-b640-56b7b118f403",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4fba1af0-3250-4fee-9c56-4726328af851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9822b4-45bf-45c8-b76f-a7cc0160c1d9",
        "cursor": {
          "ref": "b1c5db1c-0c4f-45ef-b926-6c9f03b5d8ac",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "567474aa-b7c5-4e49-96c4-7393d0a9d6b8"
        },
        "item": {
          "id": "bb9822b4-45bf-45c8-b76f-a7cc0160c1d9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "52e38ee7-4eaa-4f9d-9bd1-9a3f8bacd269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f6a1a6-938c-47ec-a460-83002b3914be",
        "cursor": {
          "ref": "b7ff5dfd-e88d-4167-9520-2b18f02f1fe7",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "de1f5686-b2f3-4a33-89ce-0b5446b6843b"
        },
        "item": {
          "id": "78f6a1a6-938c-47ec-a460-83002b3914be",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "88aa6a73-c485-45f4-b906-5f9ded3edf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa01c2-6f7b-4a79-94a8-60c5bd7b1ab3",
        "cursor": {
          "ref": "e614a431-db12-406e-a470-dce06abef8ff",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c5f3fcd2-da52-42a0-9a15-d412a1e6ed30"
        },
        "item": {
          "id": "6afa01c2-6f7b-4a79-94a8-60c5bd7b1ab3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "eb34c9a8-c9e1-4c4f-932e-4469876f9f41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78ab892-77ff-4a7c-9710-577c7d7524f9",
        "cursor": {
          "ref": "4db0e28f-03ef-401c-97cd-74af04725cb6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8fda5a7c-6cba-4db8-bff9-cb0545545f30"
        },
        "item": {
          "id": "b78ab892-77ff-4a7c-9710-577c7d7524f9",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "47fb9659-7f6b-4ed0-9c8c-98cea0c734c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "350f2d97-39a9-45f4-a258-9f115e4e3246",
        "cursor": {
          "ref": "4de88df7-a6a6-4b24-be86-10bbc1cb2615",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2043abd1-1d7e-4ccd-93cc-1a9560c57d42"
        },
        "item": {
          "id": "350f2d97-39a9-45f4-a258-9f115e4e3246",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1b096231-d14e-4e7a-b7dd-7d58a39c6f60",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce5c810-ca5a-4b38-a411-e58524784889",
        "cursor": {
          "ref": "4022a1f5-2375-4cea-8ed9-07413453b63a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "987f6836-ed34-4272-97f2-6a16e9748268"
        },
        "item": {
          "id": "4ce5c810-ca5a-4b38-a411-e58524784889",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8bbfa233-c787-4b8e-a15f-894a9164069f",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3459ee7-661d-4401-a58c-8fec12cd0e90",
        "cursor": {
          "ref": "6b2b3dfb-af38-442a-8180-9a82d8d292b9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6ab2997e-18e6-4d52-9fd2-7594d63baead"
        },
        "item": {
          "id": "a3459ee7-661d-4401-a58c-8fec12cd0e90",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e32a4a4e-14d3-4bef-8ced-eb0ee5e01cd5",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7282c65-3b74-4924-81af-4f9e00741db5",
        "cursor": {
          "ref": "582c0abc-6987-4016-84e3-7d064826e262",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6d157fb8-2d2e-4a72-bf9c-24e011ff8945"
        },
        "item": {
          "id": "e7282c65-3b74-4924-81af-4f9e00741db5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "00ff7ecc-0ac4-474d-a571-9add71c15c71",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "748df836-59a3-4516-add7-396075668e44",
        "cursor": {
          "ref": "f9a8f8e4-9a55-4fc7-9997-7e63fd259ffa",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "afb318a7-9a62-4ea9-ab03-4fda9145bbc9"
        },
        "item": {
          "id": "748df836-59a3-4516-add7-396075668e44",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4da311cc-3c7e-4a4e-aeff-34729a26993c",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-17T00:33:49.821Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-17T00:33:49.821Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "25a9e082-4261-45fb-9b82-bd3a63bc600e",
        "cursor": {
          "ref": "3e2e5bd9-0523-4f08-9cdd-b8a2c207a7a6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3cdf2f73-dd40-44e4-8252-82540a9ef138"
        },
        "item": {
          "id": "25a9e082-4261-45fb-9b82-bd3a63bc600e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6b89121b-0543-43a3-b840-a1e16a6a5c1b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d60d6c-ced1-458a-8edc-ce701125aa4b",
        "cursor": {
          "ref": "b6c5d52c-08a5-4634-8e76-3f1a47be9350",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0b2f2990-bbbd-4d34-9948-26763011c722"
        },
        "item": {
          "id": "45d60d6c-ced1-458a-8edc-ce701125aa4b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "20469e38-961d-4c36-8179-0aa3bba2977b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dc087c-54b9-4a1f-9d87-fc9dcd6919d3",
        "cursor": {
          "ref": "1742e9ee-3dca-4581-8434-da65de850ff4",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2d0865b6-8cfa-4bd7-9242-28de8ed462c6"
        },
        "item": {
          "id": "c2dc087c-54b9-4a1f-9d87-fc9dcd6919d3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b5c856a-f028-46cb-9bc6-b3f237361d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a42173-25a3-41bc-8d00-ae4e3368100b",
        "cursor": {
          "ref": "289d19b0-bbfe-415e-aa16-188e30e33465",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e099d10f-8546-4727-a4f3-ce034e9c3531"
        },
        "item": {
          "id": "b2a42173-25a3-41bc-8d00-ae4e3368100b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4316e143-8781-48b2-9c47-eaff05689482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51864613-afa5-4024-ad6c-3d440500a782",
        "cursor": {
          "ref": "2a470613-ca66-4727-8d2b-f2ca201cfc54",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dda31366-8a3b-4936-929a-91b0409fd969"
        },
        "item": {
          "id": "51864613-afa5-4024-ad6c-3d440500a782",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7b29bb24-215e-487d-9749-7ffa57223465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c79dbd6-4b85-4c3b-8457-ed1e4fd12072",
        "cursor": {
          "ref": "dc0784bb-be8f-480d-afe3-040aba4a1a3e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0fad2c6e-bc3c-4c2d-ac27-085523bd05a3"
        },
        "item": {
          "id": "7c79dbd6-4b85-4c3b-8457-ed1e4fd12072",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c5707b9e-58d7-4b87-a507-d448de064841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec32fa6f-90d1-4f16-9690-b50a2a9ac37b",
        "cursor": {
          "ref": "a2cb3217-fec8-45ff-a6d2-6d1d89b2db2a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8abaf8b5-0eb1-47d2-9506-a97e6869015b"
        },
        "item": {
          "id": "ec32fa6f-90d1-4f16-9690-b50a2a9ac37b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd12097c-098d-4e47-8879-dde14d499872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50c78bf-f1a7-4b62-b197-9762784ac3ee",
        "cursor": {
          "ref": "fffc12f9-eb80-4d00-a1c9-2262f59abae0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "63e86157-95c8-4f73-9155-62a4cbcc8528"
        },
        "item": {
          "id": "b50c78bf-f1a7-4b62-b197-9762784ac3ee",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a1d7d5b8-5528-4863-a129-47a3951cbe34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d58541a-833f-40a4-a207-781cf959df46",
        "cursor": {
          "ref": "06b2e59d-1057-4f40-bcbc-c5a36ebe5a0a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b78b0968-db71-4487-a80c-5ad8e7fcec6a"
        },
        "item": {
          "id": "6d58541a-833f-40a4-a207-781cf959df46",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e7dc822b-bca6-452e-b6e5-a146fcf8327c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7a0ec7-35c6-4a19-af06-598683564fea",
        "cursor": {
          "ref": "064ce7a5-1c6f-4ddf-b91a-c4dfee214164",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c0f216cc-9769-4859-8d00-70967389d01c"
        },
        "item": {
          "id": "7d7a0ec7-35c6-4a19-af06-598683564fea",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "391cc225-53e7-4c64-a737-23f92661ed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24477ffa-343b-447d-9a94-ea79635003cf",
        "cursor": {
          "ref": "f86e171e-52e3-4f68-a2cc-9c2c7eaaa924",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "195b5fa2-3a76-43c1-8f8d-38f13cf0f091"
        },
        "item": {
          "id": "24477ffa-343b-447d-9a94-ea79635003cf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "559d4e7a-71d8-4dd2-9f65-d66264855de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed6da38-2259-4063-adef-e1313e29679d",
        "cursor": {
          "ref": "b5f6e8ec-49f0-4b7d-9223-3dc8c6d97160",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2044560a-3111-4925-bf6c-c852bfadf462"
        },
        "item": {
          "id": "9ed6da38-2259-4063-adef-e1313e29679d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad82cc57-c894-473e-bcb8-9d12bf77eae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ecdad7d-e8f5-4514-a2d0-a043ccacab21",
        "cursor": {
          "ref": "23f0e135-4928-410c-8e65-5b179d478eff",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "493f6ea9-e0c9-4090-8422-d3d85ea20ca7"
        },
        "item": {
          "id": "5ecdad7d-e8f5-4514-a2d0-a043ccacab21",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d1b42c8a-c995-4ed6-8445-f45770ce4c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e74026b-9f0b-4e37-a5b3-ad7ab58a1627",
        "cursor": {
          "ref": "e6f7821f-4f2a-481c-9c07-ecef502fe869",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8973d902-46c4-48ae-8b8d-a5c5a760f975"
        },
        "item": {
          "id": "9e74026b-9f0b-4e37-a5b3-ad7ab58a1627",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ed2568c6-19a2-4580-a862-d30414465af1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "fe10c4fc-8407-4856-b518-52d55ec2d5d9",
        "cursor": {
          "ref": "36a39468-8eaa-4e3c-a389-9c7e2d5253a5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "00e237de-3c29-43d0-8aaa-0b3762f2aa2e"
        },
        "item": {
          "id": "fe10c4fc-8407-4856-b518-52d55ec2d5d9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b4387fe-d0a0-474c-a120-2592702e7519",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "df9c07a1-beda-41a3-81cc-79c8af1ad342",
        "cursor": {
          "ref": "13aa4e56-4256-4d3f-bcc6-6e993aa357f6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1e0f9375-c5e2-4e40-9de5-1748e38b091e"
        },
        "item": {
          "id": "df9c07a1-beda-41a3-81cc-79c8af1ad342",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "33a680f3-f999-48d8-9b4d-a320f75665ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464c8bf7-b8a5-43da-a50d-29f18acec834",
        "cursor": {
          "ref": "58316b60-b93c-4840-aa97-f1adc0a15393",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "72c83ba5-2c31-49bf-96d1-559eeab65c69"
        },
        "item": {
          "id": "464c8bf7-b8a5-43da-a50d-29f18acec834",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c288b97b-0820-466a-9e23-6a7c78bf3c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf20fa2b-90c1-4403-bbcb-3db93e63a536",
        "cursor": {
          "ref": "c7904c52-818b-4471-b13f-9c1e4664735f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "32e062e0-780d-4a13-ba46-25b3a5fdc16b"
        },
        "item": {
          "id": "bf20fa2b-90c1-4403-bbcb-3db93e63a536",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bcd7c537-3d13-4b77-868b-8dbbc703177a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cc33fe-3c5b-443e-a193-dab7ebf25923",
        "cursor": {
          "ref": "9e4c21f9-2cd8-4ade-be17-c91fd549dfb2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "45ac314c-a3e5-4e60-bd63-22387c9032b2"
        },
        "item": {
          "id": "24cc33fe-3c5b-443e-a193-dab7ebf25923",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c8c44d1-6f75-41c6-9f55-f0b18d4c5f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4a61f4-e81d-45ee-b3b8-c6165390de8e",
        "cursor": {
          "ref": "7645225f-9250-4e6c-941f-65290a4e3e22",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ce4a78bb-f86c-4dda-b9e6-cab05f8ccde5"
        },
        "item": {
          "id": "6d4a61f4-e81d-45ee-b3b8-c6165390de8e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "81395ed1-9de9-4da1-ab4c-977947f60c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636f5f92-c3ef-4e88-a96e-eb08c7dc6f68",
        "cursor": {
          "ref": "4d91fc62-ca77-49bb-8838-397c896bf596",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "09dc7100-3479-4b63-8b48-c8342cbc0d23"
        },
        "item": {
          "id": "636f5f92-c3ef-4e88-a96e-eb08c7dc6f68",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b814e2e1-d48a-42c6-bd90-a275a49679b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4978b84e-4a80-4d03-96df-3e9f1c3f5c8c",
        "cursor": {
          "ref": "e65cfc82-a1f5-4b2d-a2c7-0b3e831d1721",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d1002a5a-d018-4d64-a045-cd1c01c7c962"
        },
        "item": {
          "id": "4978b84e-4a80-4d03-96df-3e9f1c3f5c8c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "12c9e553-28d0-4e16-9a42-1fac09978348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdec26a-1ac9-448b-a8f6-abd4725b5b94",
        "cursor": {
          "ref": "3d4f612c-e1ea-4965-8742-facc69baf383",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bc4adeae-e1b6-4d25-85e9-decff7ee988a"
        },
        "item": {
          "id": "6cdec26a-1ac9-448b-a8f6-abd4725b5b94",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c9a3a3cb-286b-492a-b696-0e01a113cc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf1a04d-69ef-42ed-998d-5eaa3ecb2b30",
        "cursor": {
          "ref": "3d966b60-e4f6-433c-bfcc-72e2c53a1f33",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "71a50216-2c97-4166-81a6-98e757267a96"
        },
        "item": {
          "id": "2bf1a04d-69ef-42ed-998d-5eaa3ecb2b30",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c56268c1-ebbf-4aec-88aa-368db897abb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35184bd5-5f42-4c12-8835-c59c3fd0badc",
        "cursor": {
          "ref": "7a650212-3593-4428-84a8-a1903d2c5975",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d8fd9f8e-856e-4fdc-a802-193ba7659c0a"
        },
        "item": {
          "id": "35184bd5-5f42-4c12-8835-c59c3fd0badc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "580b8e67-7aaf-4783-a9b6-6832a881fc06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d02407-ea5e-463a-bca4-e43fc4233889",
        "cursor": {
          "ref": "07b2687c-a515-4840-9afb-fff4046e8bc9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ed239733-9299-44b1-bec0-fc5f45bfc9c2"
        },
        "item": {
          "id": "35d02407-ea5e-463a-bca4-e43fc4233889",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "162c3ae0-0d7d-41f8-81fa-daac0a07739a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1e538c-dc01-438c-a071-b8555c04822d",
        "cursor": {
          "ref": "87567ad0-f513-48c6-9f23-55b1a05f7bf5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0e260abe-d690-43fc-a066-e35a704daefd"
        },
        "item": {
          "id": "ab1e538c-dc01-438c-a071-b8555c04822d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f7225ff-2a5b-4e48-bc66-5f99b10c9651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc8bd23-5eac-45ce-9dec-b9be21d9de79",
        "cursor": {
          "ref": "0875a005-5b77-43e7-9b6e-411de235431b",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "27154e18-b68f-4ab5-bd6f-d78a8e55ee4d"
        },
        "item": {
          "id": "5bc8bd23-5eac-45ce-9dec-b9be21d9de79",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e8634167-1107-4846-be8f-06e49df6b458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12cc619-6b63-4c3e-bf3a-20609f351f16",
        "cursor": {
          "ref": "b9f1860c-d387-4949-aa27-041c13d2f865",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "54acc0ff-2e39-4137-ab69-381cac730da6"
        },
        "item": {
          "id": "e12cc619-6b63-4c3e-bf3a-20609f351f16",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b6e0ccb8-5aaa-4079-b425-21d3e212b03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7b39fd-abee-4348-b48f-b795bc1f4c20",
        "cursor": {
          "ref": "0927c2ce-9d3f-49e5-9c22-f99810f17b26",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5085359e-4645-461f-b3a1-eaac8a557446"
        },
        "item": {
          "id": "6f7b39fd-abee-4348-b48f-b795bc1f4c20",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d51fae49-2cc1-4f13-b2f9-fc069b9770ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ec27f9-42e3-4140-b3e5-06f15face63a",
        "cursor": {
          "ref": "f72733bd-8706-4550-ad46-9858db1f7779",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d30fb593-4bd1-4dbd-bdde-0982ceaa6d10"
        },
        "item": {
          "id": "22ec27f9-42e3-4140-b3e5-06f15face63a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "47e13b5f-a0a0-4813-9a93-df4f204ce086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5f7db7-c1cf-4a70-8379-ca3154a95052",
        "cursor": {
          "ref": "fe2e050e-eec7-4f17-af15-fbe476685d4d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "661181e1-8fd5-4531-979a-6dc56c51e91f"
        },
        "item": {
          "id": "9a5f7db7-c1cf-4a70-8379-ca3154a95052",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1ae4e7d3-4224-45d9-a9a8-b1e3d6a0d991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a13ab8-3145-4315-984f-4bc1d1031b39",
        "cursor": {
          "ref": "8d6770a9-9ddd-4b02-94cd-4405b51a7c90",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "53a48ec1-9ff9-4628-892c-7623cc7547f0"
        },
        "item": {
          "id": "16a13ab8-3145-4315-984f-4bc1d1031b39",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6d0ea4f2-a878-4fb0-88f7-38e8d35c4188",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2e231173-1575-4eef-b268-494887addce8",
        "cursor": {
          "ref": "084a21db-e42a-498a-864b-9bcf04a54953",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "33e98214-d3c6-4ea4-8be3-5f76d9b44776"
        },
        "item": {
          "id": "2e231173-1575-4eef-b268-494887addce8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "92796115-256c-4dd1-bf0a-07f659c1c4bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1f7a38-45ba-44f9-adf3-0097c1118997",
        "cursor": {
          "ref": "d52a5a33-bcec-465f-8512-1544a8caf693",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "20a3a8e9-4be6-4a0d-8aa4-e72a15fad06e"
        },
        "item": {
          "id": "3c1f7a38-45ba-44f9-adf3-0097c1118997",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d179f13-4324-42bc-b98c-8badaeb71792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d602a037-4d91-4985-8344-ffffeb4f337a",
        "cursor": {
          "ref": "38f242dc-0621-4afb-af34-d66fcff4ebba",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e3289b4d-aba2-4cc1-ad8c-201a91527fb1"
        },
        "item": {
          "id": "d602a037-4d91-4985-8344-ffffeb4f337a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "90c305e1-2a3b-4966-b966-0f6aba15c97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2872789c-83c0-4f73-b406-6b5b460c52e2",
        "cursor": {
          "ref": "c0244ae2-3e59-4cbf-9a4c-e1ad58a2b527",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a8494af6-6c88-4448-90d3-322b9f16f45a"
        },
        "item": {
          "id": "2872789c-83c0-4f73-b406-6b5b460c52e2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1b8a4b9d-d9c1-4221-84a4-19f19adc5564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c72ba4a-2091-43bf-8a9d-40e04b456a2c",
        "cursor": {
          "ref": "b17cc949-380e-4e06-9bef-13b09a9100df",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cf70098a-b502-47c7-b148-e369f57bb784"
        },
        "item": {
          "id": "8c72ba4a-2091-43bf-8a9d-40e04b456a2c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d478ce10-f3a2-41bc-8d89-74e078a9897c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8005e43a-a762-451a-a93f-ccdd739612ce",
        "cursor": {
          "ref": "32b8b1f8-afce-44df-a7f4-b508d9da2ba8",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f862d805-2675-4c62-aa42-03f4f4bc71ea"
        },
        "item": {
          "id": "8005e43a-a762-451a-a93f-ccdd739612ce",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5419d8b4-b319-4f95-8afe-f6029928190f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2393887a-f955-4e6f-ab52-797b07a587d4",
        "cursor": {
          "ref": "afa6b370-daa5-4a23-a419-ccc53f2fc21d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "75099ccc-a03c-464d-aba6-914450c02d56"
        },
        "item": {
          "id": "2393887a-f955-4e6f-ab52-797b07a587d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "885f6409-0dd6-4366-a11b-1bb9524b13f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e47a94-aeb3-4245-b5f2-6fb9e80e0bff",
        "cursor": {
          "ref": "c1191fa4-bb3c-4de3-8e20-52903ba294ce",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "11c92298-23c7-44ce-840a-79f71761f04c"
        },
        "item": {
          "id": "24e47a94-aeb3-4245-b5f2-6fb9e80e0bff",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2b7a1cf3-0e73-4ca7-b3f1-dc2c6e7d4099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26da1732-3e16-42e2-b3d1-9f527a493104",
        "cursor": {
          "ref": "e136e837-4216-443a-8601-541e8bc1f0c7",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "87889e8c-5860-47b8-b073-7f1c6178e0c0"
        },
        "item": {
          "id": "26da1732-3e16-42e2-b3d1-9f527a493104",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d947d846-00f0-47f0-98a8-a9692deea008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcd824e-3977-4739-b8ac-83a3e714d0d3",
        "cursor": {
          "ref": "f13999c3-6c00-4813-ab08-97fce6954071",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4a98aeed-d8a3-4c9f-92ed-0eae5e1fdb5c"
        },
        "item": {
          "id": "2dcd824e-3977-4739-b8ac-83a3e714d0d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eec00e4e-df06-4c43-8ef6-f5834434e9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8c8eea-b939-4592-8940-3ed43e6bb940",
        "cursor": {
          "ref": "62ecc4c6-b6a2-4e31-818f-f8cdca45bb71",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c26625d0-4bc6-4988-a6d9-75b4e859f060"
        },
        "item": {
          "id": "df8c8eea-b939-4592-8940-3ed43e6bb940",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5578f95b-9e01-4c53-914a-db7bf1b4923c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942eea1c-d3f9-4328-b8c4-adbfee0aa680",
        "cursor": {
          "ref": "402dab0e-6a6a-4ed8-a0a4-a77166c4af7d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0dba5ed-5674-4fb2-863c-e2c4f94b36f6"
        },
        "item": {
          "id": "942eea1c-d3f9-4328-b8c4-adbfee0aa680",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "602f5fe1-53f4-48da-9919-36607576c065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79aced5e-63fb-45b9-bb9d-521f48a127a5",
        "cursor": {
          "ref": "94861d65-b294-4420-9a52-1604d5447900",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c8516630-9c72-4b8e-9f38-ebf8346d4264"
        },
        "item": {
          "id": "79aced5e-63fb-45b9-bb9d-521f48a127a5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "20e3d21c-8da3-4948-b7a8-a71843f6c7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf1ed1c-0883-4e78-a231-07e6d001c37f",
        "cursor": {
          "ref": "0d8dcb9f-6582-4b11-9e1c-8024a46cd04b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9e7e64f-d399-4c44-acad-8670ad1a99b2"
        },
        "item": {
          "id": "abf1ed1c-0883-4e78-a231-07e6d001c37f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c6c91b1c-4565-496f-9799-7ccf5e3fb387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a8c173-086f-4c28-9b39-8561f29e512e",
        "cursor": {
          "ref": "5a063814-1799-4338-bb13-0d8f8072e538",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e0afd292-28f7-4299-b8fe-21080d313542"
        },
        "item": {
          "id": "42a8c173-086f-4c28-9b39-8561f29e512e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8148adda-332a-40a7-a5b9-b8db07460760",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ecb28f06-a646-4a8a-8af7-a7dbb96bbd53",
        "cursor": {
          "ref": "aa07b50c-d1f1-411c-923c-cf64bec294e4",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8532a826-151f-4e45-a6f2-53361b8105ee"
        },
        "item": {
          "id": "ecb28f06-a646-4a8a-8af7-a7dbb96bbd53",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1e63081a-c70c-434a-8344-363af8644d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3b9e2e-a7d3-403c-955e-b3dfb17c6ce8",
        "cursor": {
          "ref": "15e0988f-bc72-4350-975d-3bd731d0842c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c2e69533-6944-489a-b992-fd04ff895d71"
        },
        "item": {
          "id": "6d3b9e2e-a7d3-403c-955e-b3dfb17c6ce8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1949bbab-b8a3-4c1e-93cf-6c1c1d005d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258adeab-0622-42a0-b480-d23dc4a835e3",
        "cursor": {
          "ref": "7e1a4b63-59e7-4e6c-b1cd-4470a43d1fc5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9c432e72-e111-4328-a2a6-90a832f82485"
        },
        "item": {
          "id": "258adeab-0622-42a0-b480-d23dc4a835e3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "abc8871a-a563-4850-bc4a-98ef2e86ef62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ce7cb5-daa6-487e-bde2-8dc30b62fd6a",
        "cursor": {
          "ref": "753a9fc9-2dcc-420c-8bb4-ddeaf864d41d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2fd3c82e-693f-4a87-8787-f8180f5842e7"
        },
        "item": {
          "id": "b0ce7cb5-daa6-487e-bde2-8dc30b62fd6a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d82d6b21-a244-4100-ae50-09a13dd1e4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9444b913-c679-4156-9aa6-0c0ca9f663b9",
        "cursor": {
          "ref": "caf50d3d-931d-469c-9402-994685c36bc5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b59fe80d-a06b-4a86-88fd-29cf3fdbb51a"
        },
        "item": {
          "id": "9444b913-c679-4156-9aa6-0c0ca9f663b9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b8a5e083-87e7-47dd-9a41-fed745de40d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e8a864-a2a6-4c1b-9a9b-f607ec4c75ba",
        "cursor": {
          "ref": "cfd0db0a-4b0c-4ca5-9093-a6d24b21eaa4",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d6ab5a08-d7b3-4bef-ab34-fbd8e610803d"
        },
        "item": {
          "id": "f7e8a864-a2a6-4c1b-9a9b-f607ec4c75ba",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dc26dc2a-fd6d-4709-8d91-7527bb7d2f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cffa93-5d9b-46e4-852d-16a8727d6966",
        "cursor": {
          "ref": "8e75cc4f-f8ae-42cf-ac3a-8f9c272a2084",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f8858340-42f0-4d83-9ec8-1c5d422f3aac"
        },
        "item": {
          "id": "c5cffa93-5d9b-46e4-852d-16a8727d6966",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bc28193b-350d-4a92-91c3-93e75143b46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04eb2733-3714-4a85-92fc-d6658075d93b",
        "cursor": {
          "ref": "359b95d3-b2fc-4ef9-a238-9a7bf4ed2cd1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "18c5dc20-76f3-42be-a0e0-42afe1fb0e01"
        },
        "item": {
          "id": "04eb2733-3714-4a85-92fc-d6658075d93b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4a084123-d34d-4ffd-9e7a-963ace22c299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0840e5-5369-42a2-a503-6a2848d7cd6a",
        "cursor": {
          "ref": "8799b17e-bffa-456c-b952-466a325ae1d9",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fc91e803-018c-4f86-b816-4fa210f87304"
        },
        "item": {
          "id": "9f0840e5-5369-42a2-a503-6a2848d7cd6a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6cb63ae6-e7fe-49f2-b8fc-3dae7bc777f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e815e3-2f76-407e-aded-18ddafbd08da",
        "cursor": {
          "ref": "84ad5104-3ec6-4e18-9390-9e5d6d7c48d1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "78a7b225-7e8d-4a12-adaf-1519a86afba2"
        },
        "item": {
          "id": "67e815e3-2f76-407e-aded-18ddafbd08da",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4559cc86-ba2a-401b-a721-bdd2be7bdce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f7e3c0-b0f9-4ec6-abd2-719312bbdd86",
        "cursor": {
          "ref": "6b4d0fdc-75b0-47be-ab5b-f34c9d9e4e56",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7dc1b9b1-b2c9-4fdd-91ae-7c69ea10d0ae"
        },
        "item": {
          "id": "53f7e3c0-b0f9-4ec6-abd2-719312bbdd86",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "01bfdc15-1eae-4368-86f4-8224d2265d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca126e4b-0eb4-48fe-b1f4-1fa3efb01c70",
        "cursor": {
          "ref": "16709e25-5795-4e8d-b216-14ad83b9377f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cb88b7d0-d598-4bc5-8b6b-9ed22be1f533"
        },
        "item": {
          "id": "ca126e4b-0eb4-48fe-b1f4-1fa3efb01c70",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c11e029-eae2-4303-aef0-e29557bcbd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3d06b4-a3c3-4146-8b8e-0bd8dd3edf15",
        "cursor": {
          "ref": "15f549c6-1b53-4f7f-a587-6e88c47e9d62",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f7f8d8e8-f8bb-4d7f-813c-41827fc27b3a"
        },
        "item": {
          "id": "5a3d06b4-a3c3-4146-8b8e-0bd8dd3edf15",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a7f9e420-ff4a-4d92-a273-a845afed6284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d3b8bb-7719-4b9f-a18c-d590235a5092",
        "cursor": {
          "ref": "6ce97f1b-c98f-4f51-9c99-83051b2699ae",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "daf8197b-e4fa-4689-a0f9-bbd5f527bb8b"
        },
        "item": {
          "id": "96d3b8bb-7719-4b9f-a18c-d590235a5092",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1ee233c7-2dcf-4672-bc8c-08102578c9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68eb6b2-19d5-4f0f-9596-1048e422c61e",
        "cursor": {
          "ref": "4f065f41-9ded-4009-8283-836925376696",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "268757bd-11b2-46f7-aeaf-6445c5ce96b2"
        },
        "item": {
          "id": "c68eb6b2-19d5-4f0f-9596-1048e422c61e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8d98de6a-6dd7-4c31-b7a2-4df90a729bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1effb4-c57a-4d75-9eb8-b5638a0dd97f",
        "cursor": {
          "ref": "9aabd57f-35eb-49f1-8b2f-6de104241da3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fa3763e1-3b73-4aa2-ba94-467ac72a8c64"
        },
        "item": {
          "id": "1a1effb4-c57a-4d75-9eb8-b5638a0dd97f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6e2d9358-1cb0-44f2-903e-a395f73a0005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3273148-c9ef-4c1f-871e-75e39ec71b89",
        "cursor": {
          "ref": "5781a944-9e0b-4420-a33d-efa695a9141a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a0c062d8-e6cb-4c63-aaeb-0c44bc091de2"
        },
        "item": {
          "id": "f3273148-c9ef-4c1f-871e-75e39ec71b89",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "11f8c262-2149-4e03-bde3-0a8da2d13976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4163d022-9e67-400f-80d1-4412095c6c15",
        "cursor": {
          "ref": "b9c42b95-ac45-4537-8521-eee66749710a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c13e668a-31aa-4aec-b611-787342d6d617"
        },
        "item": {
          "id": "4163d022-9e67-400f-80d1-4412095c6c15",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "96ce4028-151d-4234-9957-9ddac6d6fddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afdad29-b09d-44b0-8994-dacb191f4b19",
        "cursor": {
          "ref": "2358a88a-6e76-4b2d-b1b3-39016cc2fc70",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8848a77d-f8e3-4620-bd7d-de0cd2b28590"
        },
        "item": {
          "id": "0afdad29-b09d-44b0-8994-dacb191f4b19",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "82ee901e-17c6-49d8-9441-73c00e1cc65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d516e5cb-aa59-4fe3-8ecd-6187af68542c",
        "cursor": {
          "ref": "45a192fc-38ab-4568-ac45-2378db30ca8f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "528924e8-3855-4740-9386-b1e36a1dc717"
        },
        "item": {
          "id": "d516e5cb-aa59-4fe3-8ecd-6187af68542c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "26a71acf-8605-45d1-a7ca-64a0ff00bbb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b795b0-0c58-4c6c-a7ef-7779acb85370",
        "cursor": {
          "ref": "781d9c22-93b5-4715-94fb-4bfe9eed5d70",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b2872fbc-4171-474c-97eb-c9b2a392a032"
        },
        "item": {
          "id": "e8b795b0-0c58-4c6c-a7ef-7779acb85370",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "07da7b39-d32b-47ed-a527-3f543f782b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780a46e0-e04f-4fc2-ba71-fb3c4a883797",
        "cursor": {
          "ref": "333a6b6e-7bce-4551-abcb-65dc4cc35b96",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "00b323da-881a-453d-b343-2ac7c21a67d2"
        },
        "item": {
          "id": "780a46e0-e04f-4fc2-ba71-fb3c4a883797",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9c6bdb7d-e625-4d00-a010-e4b16f7112f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e83683-efea-46a3-a255-d0ce89c108b3",
        "cursor": {
          "ref": "82021df1-64fe-4ed8-aad0-dde24d992029",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6472d285-c62e-46ce-aaa8-71d1aae99ecf"
        },
        "item": {
          "id": "16e83683-efea-46a3-a255-d0ce89c108b3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "476682ab-8fe7-47a6-8eb2-78bed3d55ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1278dd6-544a-4e0f-a05c-9be103c4ff11",
        "cursor": {
          "ref": "7675fca9-c8fe-4c42-a773-a260ace9fcd6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8ccbd5ac-8c70-474b-a81d-5d890f125fe3"
        },
        "item": {
          "id": "a1278dd6-544a-4e0f-a05c-9be103c4ff11",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b654a980-4455-4768-91c1-f627f72c6abf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b643d4-7a79-4ce9-80d5-6b4491f4d814",
        "cursor": {
          "ref": "7dfd9802-1968-499c-9815-a9b91f3b0fb0",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9e3591de-f47f-4845-9d55-4238f79d2d00"
        },
        "item": {
          "id": "47b643d4-7a79-4ce9-80d5-6b4491f4d814",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6a00146d-1d16-4c1a-9bd4-2d9088942915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe6e5da-d394-482a-b3ad-35773d6d6eb3",
        "cursor": {
          "ref": "b3dbe15a-69d5-48dd-b49d-2e29181d6449",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1f7e1a02-b685-4daf-90ad-190724e6a230"
        },
        "item": {
          "id": "ffe6e5da-d394-482a-b3ad-35773d6d6eb3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3142dc31-6bec-4469-a142-f12b061c4c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084f9551-93e6-4544-913a-c90d706960d6",
        "cursor": {
          "ref": "47ea651d-068e-4663-af1b-5623e02e1616",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "745aa554-7f8b-4c0a-a8f7-611a2c44df2d"
        },
        "item": {
          "id": "084f9551-93e6-4544-913a-c90d706960d6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a883fd34-db71-479e-a691-d4d15a8e4bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d781146b-1248-4078-ac94-54d4fcd718f4",
        "cursor": {
          "ref": "3d0aba32-afc3-4b96-b079-dccbd42c8163",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1286fd9d-6b40-4c84-92ab-06b4b23e0b3b"
        },
        "item": {
          "id": "d781146b-1248-4078-ac94-54d4fcd718f4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b249d4bb-d9f5-46cb-878b-7290cddd7815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9665914-b768-4ca8-833e-6d659fbcecf9",
        "cursor": {
          "ref": "888cd5af-088e-4a5e-ab09-7d6f3b97de1f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dffda935-4685-4671-bc99-6dd7ca9fb3a0"
        },
        "item": {
          "id": "a9665914-b768-4ca8-833e-6d659fbcecf9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e3bb9dd6-df5c-4379-9e56-6fb609341157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3205684f-5d60-42e8-8bc7-e761ee1cea44",
        "cursor": {
          "ref": "39c3e263-b79f-4794-9ca3-015ec7298cd7",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7b322590-ce33-4c77-98a9-eb658407057b"
        },
        "item": {
          "id": "3205684f-5d60-42e8-8bc7-e761ee1cea44",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7035521e-8c84-4ce4-b5e4-af8714be2256",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "2e5dfc86-cde0-4da4-bd3b-99ed851c0542",
        "cursor": {
          "ref": "f680bbb8-4b9b-484e-a496-906b84c943d9",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8061c049-05ed-44bf-991e-9bcd418c6b0e"
        },
        "item": {
          "id": "2e5dfc86-cde0-4da4-bd3b-99ed851c0542",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f6988704-dc83-4cb2-987d-fed8ca85dccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec47f219-a5b2-44c3-864c-230de10dbbc3",
        "cursor": {
          "ref": "acb37256-2330-416a-a43c-079c9aa817c9",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f3cd89a6-aa0b-450e-8f47-fef0eec1b907"
        },
        "item": {
          "id": "ec47f219-a5b2-44c3-864c-230de10dbbc3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d8eb877a-63da-44ea-a5fd-95dd94b714ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c465bece-3fce-4f68-8978-a69ef3224544",
        "cursor": {
          "ref": "53db3380-e75d-4ec8-974a-cba2713aa6a4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ba04ca40-55ce-4e29-99dd-ea9e39435414"
        },
        "item": {
          "id": "c465bece-3fce-4f68-8978-a69ef3224544",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e74d23c4-6de4-474e-bdf0-19b4b55fa61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c1ae65-7134-4da5-b204-a95cb334c70c",
        "cursor": {
          "ref": "05255e35-2d28-419c-842a-9845898b58cb",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9ba7b600-d872-4b5a-92b7-e0882cf19b8a"
        },
        "item": {
          "id": "a8c1ae65-7134-4da5-b204-a95cb334c70c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6e5f6f55-b7aa-4fcf-b158-b1002e665e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e8af6d-24a2-4fae-b4c9-a8696c5d5201",
        "cursor": {
          "ref": "76a19027-b842-4065-9726-871c159ff8a4",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "43b952f8-337a-45f4-81e1-a97493feb2ce"
        },
        "item": {
          "id": "38e8af6d-24a2-4fae-b4c9-a8696c5d5201",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0c860815-ed7d-480f-8f3e-f23c5be56443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a54d23d-702f-41f9-984b-d5bd642a2afc",
        "cursor": {
          "ref": "200d035a-f9eb-4641-a895-b093e4dc2d28",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "234bbe4d-5e14-4b69-bbb3-24ccecac269d"
        },
        "item": {
          "id": "8a54d23d-702f-41f9-984b-d5bd642a2afc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c34029a2-e882-418b-aade-a15a48692c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f075a575-dfb8-45ab-b9af-c1085a6fd7ea",
        "cursor": {
          "ref": "fd933df1-0013-49cd-bf3f-8753b6c76b45",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "570d34ea-09b1-4399-9377-b969d990e56a"
        },
        "item": {
          "id": "f075a575-dfb8-45ab-b9af-c1085a6fd7ea",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9506f8dc-7855-45af-90d4-5c4e309f6bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1990ed4-b718-4aab-9f86-49fd8a26f429",
        "cursor": {
          "ref": "b09e597b-ce30-40a7-bc6f-1deef774363f",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fc1150b3-830d-4486-b376-6aec43780a79"
        },
        "item": {
          "id": "a1990ed4-b718-4aab-9f86-49fd8a26f429",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "82fa716d-ef1c-4f9e-b831-1626021bd66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad8939c-53be-42ff-bbdd-dd8689276dc1",
        "cursor": {
          "ref": "3b85fb77-c48f-4526-a34a-dbefed83fb49",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "db536e6b-4e9c-4777-bebd-0de7de7a706c"
        },
        "item": {
          "id": "7ad8939c-53be-42ff-bbdd-dd8689276dc1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e10dd3c6-cbaa-48ba-a477-ac76d535ed7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f86e46d-f7d0-491f-a0cf-42bf9aae9975",
        "cursor": {
          "ref": "cecb2694-490a-4221-a469-e9a13963f90c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "dedd7f4c-3cf1-4ff7-bd00-b04607e4685b"
        },
        "item": {
          "id": "9f86e46d-f7d0-491f-a0cf-42bf9aae9975",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "65e872c6-0d80-4408-b293-67dc23a3bf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e71d25-981e-49f9-9b2d-b27536f43361",
        "cursor": {
          "ref": "64705956-4561-4075-8075-fbcd7fa836e8",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5d700058-76f8-4b19-af78-c3d7eae4ce9b"
        },
        "item": {
          "id": "05e71d25-981e-49f9-9b2d-b27536f43361",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b6d22454-10a7-410f-8784-1c8fb4919077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66dd2a1-a5cd-463c-bc66-c53653452f55",
        "cursor": {
          "ref": "3d7dfd5a-3a13-4a09-a70d-1a9453e6adda",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dd02ea1f-e073-4329-8681-f21da613f8cc"
        },
        "item": {
          "id": "b66dd2a1-a5cd-463c-bc66-c53653452f55",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "695a5219-8f3e-48c3-b694-2a7e6602cb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2917699b-f963-4255-99b6-65a8d551f6cf",
        "cursor": {
          "ref": "0622abd3-860e-418e-b7cc-89fc0dd52538",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5f8efeda-078d-43ce-b30d-061a2414f06f"
        },
        "item": {
          "id": "2917699b-f963-4255-99b6-65a8d551f6cf",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f5eb955c-7138-4c2f-ac25-8c6fe3571114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0767f168-d195-4db5-8f5e-7a63f901d877",
        "cursor": {
          "ref": "b2ae90af-d3f4-459e-bf95-30133f14cd1c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dfe51274-1f4a-4fb0-8d36-d8074f8d8452"
        },
        "item": {
          "id": "0767f168-d195-4db5-8f5e-7a63f901d877",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "01f0e669-ce3d-4620-a29c-c08d76e34956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302fc0ae-c870-405a-a6bd-75f1e6cf44d2",
        "cursor": {
          "ref": "7d79d6ca-2501-4aef-ab9c-6e4b50aa732b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "04f38397-b295-42f0-a40f-737dda77a0ef"
        },
        "item": {
          "id": "302fc0ae-c870-405a-a6bd-75f1e6cf44d2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "889cbcb2-cb99-456e-9315-d7938c56447b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5ba40a-acea-4939-b473-3be006be3b8b",
        "cursor": {
          "ref": "353715b0-436e-46b2-b0b3-e62829300008",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c64064cc-f5ea-4a06-a115-a667618f0f18"
        },
        "item": {
          "id": "6e5ba40a-acea-4939-b473-3be006be3b8b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2a6a36be-4699-49a1-bedf-0494a54acbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdeb795-3acd-469f-9663-4cf5b1a63183",
        "cursor": {
          "ref": "5dad4680-050b-4057-a64a-08bd77cd576b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "42b9bc0f-53e2-415c-9a7f-b04d2964ea49"
        },
        "item": {
          "id": "ebdeb795-3acd-469f-9663-4cf5b1a63183",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fdc8a9cd-cafd-44e4-a735-2b8bd9623352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84532d38-6c9d-4a21-975a-3343b33ad7f5",
        "cursor": {
          "ref": "43b08480-fa33-4469-9592-112ddce0fb83",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f3fadfba-3f43-4da5-ab4c-34acd7b3234e"
        },
        "item": {
          "id": "84532d38-6c9d-4a21-975a-3343b33ad7f5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a13842c-ffe3-47fe-ac49-69fe45bab598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3705b95f-5eeb-4a17-b126-14613c399379",
        "cursor": {
          "ref": "23bfb650-0fc7-4806-889e-37acd2294e85",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "84d42a41-7425-4210-9949-d4eb9d2ddbe7"
        },
        "item": {
          "id": "3705b95f-5eeb-4a17-b126-14613c399379",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8a0ba7aa-2b9c-4c19-9ad8-fe1eb1629023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e4b650-dec2-4b73-a84b-d12432e79197",
        "cursor": {
          "ref": "2ee3b94e-3f29-4227-a5fb-528f99b08c03",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d8a71725-0c40-478d-9651-5f479480875f"
        },
        "item": {
          "id": "30e4b650-dec2-4b73-a84b-d12432e79197",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c4f0255f-d970-48db-b127-64eb0bfd6f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac144b2d-8f93-4dd7-8ed6-0262c5b78c60",
        "cursor": {
          "ref": "f15147a1-051b-41ba-a19f-d49d793ae89a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "564544b1-4f6f-4a0d-a691-280d174079a8"
        },
        "item": {
          "id": "ac144b2d-8f93-4dd7-8ed6-0262c5b78c60",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "02ed348e-b420-4692-b0e6-d32f78f53066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c15c188-f30e-4205-9cf6-a68230154b7c",
        "cursor": {
          "ref": "98a81d9c-67bb-4d65-b715-67d76e43caf1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4928a51f-8f81-49fe-b215-e96df49e1e25"
        },
        "item": {
          "id": "6c15c188-f30e-4205-9cf6-a68230154b7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ab67de0-ae63-4970-a712-2eca1f87d860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88afac85-8a1f-497b-bea1-54ef41d8df7e",
        "cursor": {
          "ref": "ee74d088-3e48-43e9-9758-9fd56399f7fd",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e6b1b6a9-e2e0-4a0f-9290-151435d33167"
        },
        "item": {
          "id": "88afac85-8a1f-497b-bea1-54ef41d8df7e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "68cc3411-8e07-47e6-9678-1b23060c3d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1a074a-3cdc-4800-8998-160faf19bf7d",
        "cursor": {
          "ref": "8b33b42b-0e2d-4a7a-af55-bd5dd4204d76",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "181c805c-951b-41c7-9f29-31807041b16b"
        },
        "item": {
          "id": "cf1a074a-3cdc-4800-8998-160faf19bf7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7afcebc5-85f5-49b7-9f6f-7a01d89a0a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d61007-b504-4489-8888-e7ba7ae93663",
        "cursor": {
          "ref": "b6ad6fd7-ee50-4216-99f0-f1517d8bcc94",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "34941a9a-e3d1-4ba6-9a86-55ddba071eb9"
        },
        "item": {
          "id": "a0d61007-b504-4489-8888-e7ba7ae93663",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bd02c1e6-b686-4afa-b3c8-621572a735ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef53572-3832-4867-bb99-779012189af7",
        "cursor": {
          "ref": "a0ab512d-25bd-4c0d-8686-80e28d525fd4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5293e6df-2851-459e-bb6c-d14fcb01dd67"
        },
        "item": {
          "id": "9ef53572-3832-4867-bb99-779012189af7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "eac7c13e-4d9d-47b9-a256-ed9c6aabd825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13433349-e12b-47ae-93fd-b50d2ebe4554",
        "cursor": {
          "ref": "968c6ba6-c559-4247-905f-43eabce0d91f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "79d7cb13-ad48-4886-81b0-fe9cce93cda9"
        },
        "item": {
          "id": "13433349-e12b-47ae-93fd-b50d2ebe4554",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4c48d5a3-3c5e-4c83-b367-f7e8d3cb30da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7888a2bb-2d71-476a-87c2-3cd6fe35e29d",
        "cursor": {
          "ref": "01bd0e86-1920-46aa-970f-a01d29aa8359",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "05314877-333a-453e-8fd9-05ef14aa2c97"
        },
        "item": {
          "id": "7888a2bb-2d71-476a-87c2-3cd6fe35e29d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "670ce73d-5764-433c-b262-f580037aeb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5aa6409-c044-40b1-9515-3d7f7c25effa",
        "cursor": {
          "ref": "3e897d52-2a5a-49e2-b290-e304dff41ffd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2bd46c8a-d3f8-4a2c-a6a1-6050d421adae"
        },
        "item": {
          "id": "e5aa6409-c044-40b1-9515-3d7f7c25effa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9b04e708-5921-4d64-b55c-d05b556c6451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38a3092-d9af-4b5a-8a28-07de2500a281",
        "cursor": {
          "ref": "35b27700-a816-4b4b-aa8e-63d7a409d4d1",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e5bbdd42-e863-4600-b82e-fbae8d7bb90a"
        },
        "item": {
          "id": "a38a3092-d9af-4b5a-8a28-07de2500a281",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4e85efce-9c84-4bb7-8161-4cf0871c3a15",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7b3a07a3-dd26-4c97-9892-2fe3bd1a2b66",
        "cursor": {
          "ref": "f032e401-bcb0-4038-9170-5713015bc3d2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d5fcef59-d023-44a0-8939-76cea67b28fb"
        },
        "item": {
          "id": "7b3a07a3-dd26-4c97-9892-2fe3bd1a2b66",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ece1b225-5c12-4b34-8b49-aef193ee402d",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "72fd2196-1d4e-43a1-9790-ed9c1c4bf76f",
        "cursor": {
          "ref": "44cabe7c-01d5-4596-b933-55ad742abe32",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c85c1bb3-3d92-4822-8d29-4b0100595e13"
        },
        "item": {
          "id": "72fd2196-1d4e-43a1-9790-ed9c1c4bf76f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0cf1b04e-8853-4f07-88ef-453096f3fb8d",
          "status": "OK",
          "code": 200,
          "responseTime": 229,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d08495f9-ef82-46e0-8104-537401f50532",
        "cursor": {
          "ref": "d852acde-371f-469f-9a90-49991fa32920",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "75c78cec-508d-49bc-9ace-0efc80c77592"
        },
        "item": {
          "id": "d08495f9-ef82-46e0-8104-537401f50532",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "addf93ad-1e07-4df5-a8e5-df71b8644ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d4588c-a1c8-4177-acaa-1770cd02af6f",
        "cursor": {
          "ref": "2e4f2a61-9a7c-4aed-b7c4-ed0ac16851da",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dafbee23-52de-4544-a7a7-b8c37a6344d6"
        },
        "item": {
          "id": "69d4588c-a1c8-4177-acaa-1770cd02af6f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "da31fcf1-aa80-47c5-a290-9e19212cd893",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "74e03226-90a7-46d5-9ee6-08b01f2335c8",
        "cursor": {
          "ref": "27a799a3-cedd-43bf-ba84-7a1ca9563e6b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b359dd47-f248-400d-8071-0d27d22a369a"
        },
        "item": {
          "id": "74e03226-90a7-46d5-9ee6-08b01f2335c8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "50e4d597-451e-4406-bc8a-09bb1fa73b37",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "78d43a04-7fc4-4860-97ce-c791d6d07208",
        "cursor": {
          "ref": "5c761b95-7656-46b1-939c-21ca35a38154",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b88b1587-8537-42ea-917a-276363206ac8"
        },
        "item": {
          "id": "78d43a04-7fc4-4860-97ce-c791d6d07208",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fc0fafcc-d900-4871-ab18-4d1512b6b0ad",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f10a4c4d-dc40-48bf-8507-5e7627581455",
        "cursor": {
          "ref": "1c3d739e-c501-4f78-bd5e-2be7c38c7dcc",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dd446f75-a053-4f92-8be4-b0dcb0c27c98"
        },
        "item": {
          "id": "f10a4c4d-dc40-48bf-8507-5e7627581455",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "58a873f2-ecf6-49d4-b4d7-8d6940340b1b",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "282ab559-bb4f-4206-a094-7382e14b3500",
        "cursor": {
          "ref": "9579982d-0dbf-4564-8783-36593973897b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "92a1cb57-b1ae-49a7-a2b4-bddf6303dc6e"
        },
        "item": {
          "id": "282ab559-bb4f-4206-a094-7382e14b3500",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9e2328bc-9fe1-4485-903c-aa69f459252b",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e5acc937-dfe4-45dc-bd41-d17e1279a233",
        "cursor": {
          "ref": "652beba5-683e-438e-b3ba-9faa1bb50c4a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e4f0eda0-1e55-4ba3-b9dc-6b746c402a81"
        },
        "item": {
          "id": "e5acc937-dfe4-45dc-bd41-d17e1279a233",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d1ecf57a-ece1-433f-9261-32afb41bc945",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ee675332-50ca-4d61-9ad6-e7ed36fc36f1",
        "cursor": {
          "ref": "9059db7e-5a4f-4680-98bf-e654e26486e3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0c03d9ff-58fb-4c63-a597-4c64d70e0744"
        },
        "item": {
          "id": "ee675332-50ca-4d61-9ad6-e7ed36fc36f1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "86d26e22-7f33-476f-8c56-48c48f234cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d2339a-a809-434e-849b-5e39d5740d0e",
        "cursor": {
          "ref": "9b3b41a0-54f1-44df-b19e-85d03a7916b6",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a13b79f6-9acb-491d-be70-ed3d19c31565"
        },
        "item": {
          "id": "66d2339a-a809-434e-849b-5e39d5740d0e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e9bae111-8f59-4909-8b6d-e5d3a64c3b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b712fe-1c97-4781-9a8b-70c7684a07a5",
        "cursor": {
          "ref": "5af94b5a-bbba-41cd-a34b-6a8227cd9cb6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2dc7ba14-c3f5-48bb-b86f-42bc15d50559"
        },
        "item": {
          "id": "10b712fe-1c97-4781-9a8b-70c7684a07a5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7b5c3a3-868e-40af-b4ac-04f1e500bceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbe233e-1e18-4e28-8a24-c3d30341f515",
        "cursor": {
          "ref": "27f96a1c-ebbf-486d-a66e-749392dd7b3d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "976d676d-93d5-4010-a8bf-2181a950d745"
        },
        "item": {
          "id": "afbe233e-1e18-4e28-8a24-c3d30341f515",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cc7dec5c-bfaf-41c4-92ba-eef1877cabf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55863f5-f771-4b4c-9b20-6430dafa43bf",
        "cursor": {
          "ref": "bcc2aff7-111d-4b74-91bf-5d9aeba6d23c",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e3c5b93e-df12-4a5a-8bc9-27db2370c2ee"
        },
        "item": {
          "id": "d55863f5-f771-4b4c-9b20-6430dafa43bf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8474721a-b9c4-4ad2-a821-ff7f1ddf2a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2161d396-eaa0-423b-8877-242937ca3043",
        "cursor": {
          "ref": "721a5072-1586-4f45-b1ae-9f5c834c0fa5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6addf873-ddb0-47c3-bbc3-0e7d59235118"
        },
        "item": {
          "id": "2161d396-eaa0-423b-8877-242937ca3043",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "23edc3d3-d4c3-4084-a72f-cc68259ddb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6a776d-2f11-4a6d-a30b-f5fe6c5176b1",
        "cursor": {
          "ref": "5657a8a2-7eed-49af-99b9-1e1ed3c93e04",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7486ed92-9218-4395-accf-b794e9b67f65"
        },
        "item": {
          "id": "0b6a776d-2f11-4a6d-a30b-f5fe6c5176b1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5bc622e4-c7c6-4c73-b65e-9d7d5abc40f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c46ec3-2f35-4389-a808-b467238e0b9f",
        "cursor": {
          "ref": "d78edac0-addf-45ea-84cc-84f9fc409ab9",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "71427aec-fefa-4f08-badd-4df59edb5046"
        },
        "item": {
          "id": "53c46ec3-2f35-4389-a808-b467238e0b9f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "46f34f76-99a3-4224-8ea4-1d9f2e7beddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726cf919-4268-43c7-968e-35dc4cfb9c36",
        "cursor": {
          "ref": "39892b50-9570-4eee-bfb2-c8fbfdb49a10",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "07b4e1a0-621f-4202-83b1-0fbad25da58e"
        },
        "item": {
          "id": "726cf919-4268-43c7-968e-35dc4cfb9c36",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "20b0ae9d-9b25-4946-a32e-e55305397a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec817efa-021a-452c-b208-79e396fcc2e2",
        "cursor": {
          "ref": "d559b583-c5dd-49de-851b-4cdfb406904b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a78958ba-51d3-42d8-b01c-83c360a77db4"
        },
        "item": {
          "id": "ec817efa-021a-452c-b208-79e396fcc2e2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1f892e25-5263-4228-9a16-7b1d6af79803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f04a9338-0ef7-4ef6-bf90-7fbea27166ab",
        "cursor": {
          "ref": "299988a3-60d0-42ee-aebe-fa037b9e891b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f4002bae-7335-4b15-8005-127103bc116a"
        },
        "item": {
          "id": "f04a9338-0ef7-4ef6-bf90-7fbea27166ab",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f0a3ba33-fc46-4902-a935-557e1e80d59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b47ece-29ad-491d-b54f-7e7017605542",
        "cursor": {
          "ref": "780345d9-d549-4b66-bd3e-17f317c2200f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "80021d64-2da2-4414-b6e9-6c4af892649c"
        },
        "item": {
          "id": "92b47ece-29ad-491d-b54f-7e7017605542",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f778566f-1c57-49e5-9dad-f22f6ed0fc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c0949b-f66c-4da3-9465-8e8bb42859ba",
        "cursor": {
          "ref": "ccb04d11-9a59-466d-a889-174ebe33b9f2",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "623b6637-0472-4d89-8993-110d55282b1b"
        },
        "item": {
          "id": "a9c0949b-f66c-4da3-9465-8e8bb42859ba",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f87c9060-8fc7-467d-a828-897fa9764c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8328386-ee90-4350-86c1-c493cb7e4bfc",
        "cursor": {
          "ref": "9c15e41b-8604-4e93-ac54-d298dac5edc5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6529d104-dc32-4d81-99ee-4212bbec450c"
        },
        "item": {
          "id": "e8328386-ee90-4350-86c1-c493cb7e4bfc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f852eb2d-8d17-4cff-ac06-c6a22a219f40",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b0751511-3faf-4b66-95a0-c21e0eb01478",
        "cursor": {
          "ref": "0f1b6fcb-459c-4912-8456-38c411e6f06c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "18d9881a-6f34-444b-bc97-fe808233cf3f"
        },
        "item": {
          "id": "b0751511-3faf-4b66-95a0-c21e0eb01478",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fe23f8b1-0f60-451e-a7a0-23a23abd05c4",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8102634b-3924-4caa-b437-99dfc2d7a579",
        "cursor": {
          "ref": "7ef9a890-f8ca-4250-82e7-21621827a872",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "36ae90aa-b9f5-4f02-837a-2c496545a0a2"
        },
        "item": {
          "id": "8102634b-3924-4caa-b437-99dfc2d7a579",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ff69f3e0-04d5-4945-977e-b81af16ca4e9",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d40d3f3b-7bbd-47a5-bfd7-124479874c8c",
        "cursor": {
          "ref": "2a8ac2e9-b9f7-480a-9298-2e6d0ac7048e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1a68d4b0-332f-4f42-b9b3-d19b6b9ae4bd"
        },
        "item": {
          "id": "d40d3f3b-7bbd-47a5-bfd7-124479874c8c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b0d0c50c-ed84-44f7-8d96-b64408937c5f",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5499c309-5d9e-4981-9cb4-395538b6868e",
        "cursor": {
          "ref": "9dd9df26-90e7-455e-b05a-70eadada04c0",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "afd47653-5f72-44b4-9116-0d9f42589b95"
        },
        "item": {
          "id": "5499c309-5d9e-4981-9cb4-395538b6868e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8ca607d3-7818-4d89-9206-9ee3125dd64e",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3559564f-2b1f-468e-a46a-5f25e24c1550",
        "cursor": {
          "ref": "729131ad-5ffa-442c-b91c-e259ed180516",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "19669a29-4321-4fc3-9f56-5a9592e68bc7"
        },
        "item": {
          "id": "3559564f-2b1f-468e-a46a-5f25e24c1550",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "36f5fd03-5047-4740-9adc-aa2d0194a8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0226b825-f675-4771-ac59-f43b8fb5dc8f",
        "cursor": {
          "ref": "b0c36c06-2cd7-4cc4-a176-b176a62539e8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5dd84538-cb48-426a-b888-0e6258c4991b"
        },
        "item": {
          "id": "0226b825-f675-4771-ac59-f43b8fb5dc8f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7dc7fccc-7c66-4af5-a432-5004a41395af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdd0e42-e1a5-420c-bf43-e56a7972afb4",
        "cursor": {
          "ref": "fb156d15-8a28-4fc2-b4c7-1e621fd9319b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "129b6ba4-d6ca-4b76-886d-64c4e8ca3790"
        },
        "item": {
          "id": "0cdd0e42-e1a5-420c-bf43-e56a7972afb4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b4d039af-20f5-48c3-b564-ef06df56a269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e72676a-c4a4-4ad2-9230-ada6e35946fe",
        "cursor": {
          "ref": "aa412589-aae5-4b6c-8085-37c08376709a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "228b4076-8480-43f7-b026-2d6fba9aa436"
        },
        "item": {
          "id": "8e72676a-c4a4-4ad2-9230-ada6e35946fe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4e37fcf6-022e-4a0d-9f22-64596e936886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c303de-7f34-4ffb-b04a-3e73b33c90fd",
        "cursor": {
          "ref": "bb02935b-0279-4580-8a45-0672a38b2674",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "76a385b8-4c39-46e1-951e-c58d89d01fa0"
        },
        "item": {
          "id": "75c303de-7f34-4ffb-b04a-3e73b33c90fd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d190049e-7f27-4593-bcdb-0befb4e99b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902fd4a7-c6a5-4945-9fa0-4a636571daee",
        "cursor": {
          "ref": "c88fa264-7406-49da-9587-a8007dd9e798",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3b262973-a9c2-449d-9187-835f0307cce5"
        },
        "item": {
          "id": "902fd4a7-c6a5-4945-9fa0-4a636571daee",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cd1dda37-eb55-4c13-84b5-c97b4113d9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c5e9a9-bcf8-43da-bf2f-3b7fb9578c9c",
        "cursor": {
          "ref": "bb20c119-86da-4fe8-8e96-0b246d7b74bb",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "70a3a902-5d1b-429c-9f39-98e655b127fb"
        },
        "item": {
          "id": "d5c5e9a9-bcf8-43da-bf2f-3b7fb9578c9c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1104ddc2-4326-43aa-a28a-f97ee90288f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bf00ce-27f5-499f-a83f-839e7b07b372",
        "cursor": {
          "ref": "94442381-8189-41cf-92d5-47ab3e86221e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ab90c140-e0ca-414a-bf3d-f38c7a26b7af"
        },
        "item": {
          "id": "d8bf00ce-27f5-499f-a83f-839e7b07b372",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3fa93c00-3f88-45b6-8d45-74b4cff13235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fe24d0-63d6-484a-890a-f187ebfb893d",
        "cursor": {
          "ref": "f1a342e5-4f19-4c24-adfc-2b7008091913",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c7162f7e-d028-4634-8050-a5496785ce3d"
        },
        "item": {
          "id": "e6fe24d0-63d6-484a-890a-f187ebfb893d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "78fffde4-b8d5-480e-9637-0fd2c2959cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65acae21-598c-4ec0-9653-c0f535fff416",
        "cursor": {
          "ref": "2feb13b7-2ca2-47e9-987f-31a40259dbee",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d0744264-2fac-402b-8ded-431b7090ec33"
        },
        "item": {
          "id": "65acae21-598c-4ec0-9653-c0f535fff416",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d0b02686-dca4-4120-80e6-e58d312001fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5386f87b-c8df-4960-970f-5a66e122bd31",
        "cursor": {
          "ref": "cfc3555d-2b25-4a4a-a0b7-03576275a143",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c329c06d-3099-4221-8ba4-5b9e10f3db00"
        },
        "item": {
          "id": "5386f87b-c8df-4960-970f-5a66e122bd31",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "23706d3e-e12e-4f17-8e24-cbc40a2df658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded4c230-35aa-465b-b9c8-4065385aea80",
        "cursor": {
          "ref": "7697cb82-0c2b-4ecb-b633-7c29b5ee03cf",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6d7b5ed4-9d9f-4e1a-af48-fb1181130764"
        },
        "item": {
          "id": "ded4c230-35aa-465b-b9c8-4065385aea80",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "091955f2-b5b1-4901-8469-cf4fbecdddd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7c6b24-0d17-4f05-8505-1a3c23827335",
        "cursor": {
          "ref": "cea34a43-07cf-4703-84bc-ed1c8fdd5676",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ea485212-2436-4afc-8777-079a8bded4e9"
        },
        "item": {
          "id": "0a7c6b24-0d17-4f05-8505-1a3c23827335",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "06a4dab6-1c17-4bf8-ae5d-1e9ad04e16bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66272a8-7266-4c1f-90e2-e3cf37955331",
        "cursor": {
          "ref": "67b39975-8e45-421a-ad44-c9291c5bca7f",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6278a052-450f-4024-a906-bc03d08c3a7c"
        },
        "item": {
          "id": "b66272a8-7266-4c1f-90e2-e3cf37955331",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "084fe800-0034-47ac-b3d2-6e95361648b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b62643-b554-4ffc-af90-1f245571a7c6",
        "cursor": {
          "ref": "edbf062f-4359-4ce1-8755-cb685b6c5423",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "1abf1d31-8542-4343-aad2-f68fb6a623e6"
        },
        "item": {
          "id": "91b62643-b554-4ffc-af90-1f245571a7c6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bfc0efba-eb19-485b-9c3f-1dc627edcd6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f480c15f-c845-430d-826e-eadeb9d1148a",
        "cursor": {
          "ref": "84f68a5a-00e3-4421-b1cc-ce835f19fb5a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ea4a6601-2081-4e0b-a666-c7729ed2f17b"
        },
        "item": {
          "id": "f480c15f-c845-430d-826e-eadeb9d1148a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3f40b1c6-e07a-48c5-9ded-6c52e660ad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58c1497-287c-4086-8795-9eb5326021db",
        "cursor": {
          "ref": "c619ca2f-96af-4435-8169-caa9c025178c",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "82ec2183-c2c5-4897-9274-539186483509"
        },
        "item": {
          "id": "e58c1497-287c-4086-8795-9eb5326021db",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2d816c55-b65b-40f7-88d3-1467f6017435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03366656-00fd-4dfb-934a-e9fc2a6cc434",
        "cursor": {
          "ref": "aed8043d-1fc9-4491-a25b-44787f3637b1",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3a2a3dc4-134a-4f69-acd9-a1102ddafbd2"
        },
        "item": {
          "id": "03366656-00fd-4dfb-934a-e9fc2a6cc434",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "12400be9-7d70-4eee-88bd-c988c26b1ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccfad0b-4371-43e3-813f-623298e4a5ee",
        "cursor": {
          "ref": "9f0d3d01-0f42-4115-b099-d8922ea1a6ac",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0c32b29c-1a81-4721-ad8b-86899e1a5bf8"
        },
        "item": {
          "id": "3ccfad0b-4371-43e3-813f-623298e4a5ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e768373c-02cf-4636-bfda-a0690d062bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339d31d7-eaa9-498c-87c9-ec18df6e4a5a",
        "cursor": {
          "ref": "18591398-2b90-4045-a281-58d8da756c2a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "97d84f2a-46b3-4a11-9e7b-70e204151f78"
        },
        "item": {
          "id": "339d31d7-eaa9-498c-87c9-ec18df6e4a5a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b0d07e15-29c6-4e1b-8c55-e4104c995461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499d37eb-2677-4302-aaa2-40af0e51d9fe",
        "cursor": {
          "ref": "371a0d39-8224-4423-9a05-666b29ef52b1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "bc2239a5-a823-4dd3-8c81-b327d998e8da"
        },
        "item": {
          "id": "499d37eb-2677-4302-aaa2-40af0e51d9fe",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d479b16c-4e67-41be-af72-dd367e25e6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2762c413-d67e-444a-a7e5-df060f66579d",
        "cursor": {
          "ref": "59b5e34c-4ebd-4cb4-babb-6506ea9c04a6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "47d3c967-4e3b-400c-8e92-35eae268a1e0"
        },
        "item": {
          "id": "2762c413-d67e-444a-a7e5-df060f66579d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6bc2a560-03fe-48f9-a191-09f2aa779c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0751594-bd00-4fc2-98ea-2151d6bd3a0e",
        "cursor": {
          "ref": "877980fc-f13e-46bf-8cc4-41609f95be17",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a9f77e99-2c24-4984-8e0f-b298af770f3b"
        },
        "item": {
          "id": "f0751594-bd00-4fc2-98ea-2151d6bd3a0e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0e4870d6-3b54-4d1f-ae65-74379e8c3aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60688e58-c95e-416f-90b2-878573c8ef69",
        "cursor": {
          "ref": "a28f5c97-3ef0-44a2-9008-46e5000a4689",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f74eb6f7-7406-468f-8f42-7c82cb79f116"
        },
        "item": {
          "id": "60688e58-c95e-416f-90b2-878573c8ef69",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7150f717-9a86-47f4-9a4d-da35364b3f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7a63dc-a478-49a1-aea0-25b51070c369",
        "cursor": {
          "ref": "c4f7386a-e6bd-4159-ab7b-3be8b0bf71a2",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2d7029ba-3714-4828-b14b-ad39eb597af1"
        },
        "item": {
          "id": "de7a63dc-a478-49a1-aea0-25b51070c369",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "942989f2-f01c-4ce6-9ff9-8d5eb3c6c186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2847b9-bce6-4dad-9e1b-e8d36a47164a",
        "cursor": {
          "ref": "d6d30873-dee0-4da1-9b03-f099f0386c91",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "814bcc35-ad12-494c-8231-7b875d331ee6"
        },
        "item": {
          "id": "4b2847b9-bce6-4dad-9e1b-e8d36a47164a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a531ac50-28b7-4200-b396-4b8aad78210e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb40b559-85ec-4aab-9af9-33b850c77e67",
        "cursor": {
          "ref": "e7eacbf3-6df4-4574-ae7a-731433dd560c",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5dd21c3f-c991-46ce-b00a-0f6a296d48b0"
        },
        "item": {
          "id": "cb40b559-85ec-4aab-9af9-33b850c77e67",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4d6e852e-9dcb-4c62-b437-1a0853f2f001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7712dd-fca2-435f-9e47-bfc92f13da23",
        "cursor": {
          "ref": "4a20e94e-0e89-45ad-9874-e355bf73ce67",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3ee6777d-364f-44ad-b6d0-1c248338617d"
        },
        "item": {
          "id": "ec7712dd-fca2-435f-9e47-bfc92f13da23",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "114eafcb-a592-493b-9db8-e2a4d3b09df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6885ba5-a6d7-4541-94d2-4b5706598db7",
        "cursor": {
          "ref": "be3e21f7-1ddc-492b-b7ad-cbfa99a7c05d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "84bfbc4d-43b9-4318-9899-a87409190d35"
        },
        "item": {
          "id": "c6885ba5-a6d7-4541-94d2-4b5706598db7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ed18e78c-364a-4ae2-8f94-1f1600ad0bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babdccef-5930-4abb-b4f9-2d9a144f7ffd",
        "cursor": {
          "ref": "148fbb31-4eec-424c-9808-a4077f8bea79",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "38a5a0ed-b113-43ff-98a9-8a4860f2d98d"
        },
        "item": {
          "id": "babdccef-5930-4abb-b4f9-2d9a144f7ffd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ed768ed5-6916-4aef-bd71-f4389e73cd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7063be-e5a5-4ecc-bd7e-8305ee0c3865",
        "cursor": {
          "ref": "07d29f39-7c57-4113-a926-53aef5a10ab8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6047987a-659f-4510-b8b2-8828a3645c0b"
        },
        "item": {
          "id": "7b7063be-e5a5-4ecc-bd7e-8305ee0c3865",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5e55c8c9-1b49-4a4c-834b-9dd62779c876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67a0fbf-f858-462c-a3a9-31504ab7df13",
        "cursor": {
          "ref": "b4f891bd-0da8-4321-a228-81e1f9f2ff78",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "95505a5e-7764-4611-9b6f-48991d21b3dc"
        },
        "item": {
          "id": "e67a0fbf-f858-462c-a3a9-31504ab7df13",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ef5d75fa-20e4-4d2b-9f99-000f725fd998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e310f8f6-cf6c-4b9a-b8a7-cb0fb8b4c4f3",
        "cursor": {
          "ref": "55d82d57-fa1e-4a16-a770-3e937d43be46",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0b346433-d346-4c5d-bc4e-75acb2413f25"
        },
        "item": {
          "id": "e310f8f6-cf6c-4b9a-b8a7-cb0fb8b4c4f3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "af74c433-82eb-4e56-8dcf-1078f473bd1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fefb4d-8c26-41ee-9a2d-118f3ee415b2",
        "cursor": {
          "ref": "6e6683c9-fe31-478b-bacc-1c9bac11688e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "601d8f42-7c1e-4cb8-919f-a0489e82d618"
        },
        "item": {
          "id": "09fefb4d-8c26-41ee-9a2d-118f3ee415b2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "95851143-78ec-4ad7-a9e1-a09c29b53dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c57175-9196-4e3c-98cd-fe64c4ef996d",
        "cursor": {
          "ref": "69635584-dbaa-498c-a490-a062bb7a6780",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5c667fd0-7111-4508-b937-7dd17788c788"
        },
        "item": {
          "id": "50c57175-9196-4e3c-98cd-fe64c4ef996d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e62c3dce-bbe7-4032-a24e-6e64f8987c15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a007938-80b1-4364-8841-f3c1213735ac",
        "cursor": {
          "ref": "d3afb551-8cd0-47fc-b2e6-eae1f25e325d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b2021292-e7ec-49f0-ae28-9cc182edc88f"
        },
        "item": {
          "id": "1a007938-80b1-4364-8841-f3c1213735ac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "39432af6-a326-4f63-bde4-e58b3456ee37",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "027fe49f-f871-4915-ac61-fdb0a963d8ea",
        "cursor": {
          "ref": "0887dc12-5ec0-42d7-9ee8-8bb153d804b7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "da1da736-f367-49fd-8483-86ac584f7afe"
        },
        "item": {
          "id": "027fe49f-f871-4915-ac61-fdb0a963d8ea",
          "name": "credentials_verify"
        },
        "response": {
          "id": "41f70c1d-80d7-4182-9c1d-7ae5ca7113bf",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d47178a-45de-4732-9fb6-84c559fa5ff1",
        "cursor": {
          "ref": "8918fa5c-d341-4743-9b8c-8c39b0c335ad",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e4ac84a5-91da-4c4f-9900-22832bae2941"
        },
        "item": {
          "id": "7d47178a-45de-4732-9fb6-84c559fa5ff1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b8a70a79-bbe8-4e7d-bde5-b0ec8ac5eba5",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fc0ecb-f08f-4cc4-a5a8-3194721c3a8c",
        "cursor": {
          "ref": "700da8d4-9d7e-4ba0-b146-dad6f4bdbe41",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ea416c3-6e82-4413-9142-0aac15e07118"
        },
        "item": {
          "id": "25fc0ecb-f08f-4cc4-a5a8-3194721c3a8c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5d7a638e-bdba-444b-a44c-35a35047dcd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fc0ecb-f08f-4cc4-a5a8-3194721c3a8c",
        "cursor": {
          "ref": "700da8d4-9d7e-4ba0-b146-dad6f4bdbe41",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ea416c3-6e82-4413-9142-0aac15e07118"
        },
        "item": {
          "id": "25fc0ecb-f08f-4cc4-a5a8-3194721c3a8c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5d7a638e-bdba-444b-a44c-35a35047dcd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c5fab4-2a32-48e6-be58-7539a05e7669",
        "cursor": {
          "ref": "52154f7e-af87-4f98-a993-389c2a319d19",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "43945a8b-a751-4868-888b-0eb2269f53b0"
        },
        "item": {
          "id": "40c5fab4-2a32-48e6-be58-7539a05e7669",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ea881f51-85c8-45a1-af3c-35f473d50817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7617e0a0-2916-4f55-a661-74a980598d2b",
        "cursor": {
          "ref": "df4ade77-60f4-4474-87f3-d201911a5160",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "536a4706-21e6-466b-89e8-8fb49112a83e"
        },
        "item": {
          "id": "7617e0a0-2916-4f55-a661-74a980598d2b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ef1b9de4-6275-4af3-9030-94ab63957708",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}