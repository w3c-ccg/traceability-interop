{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a4f1ebc8-790a-4edb-8a29-dda6b699be1a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4468c463-fdd0-4711-975d-34a52b9d66d4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ad60e42-fedb-496a-984a-974ed09cc16b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "77463d7c-1099-4499-b081-67f36a5bfa4a"
                }
              }
            ]
          },
          {
            "id": "c6697179-2c26-4651-8fbc-d21bcc6e255a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a65ba173-f8ad-43a9-9dae-fe902792a54b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8307d26-2d94-446f-b340-81c023a8c22e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "16100bff-8a55-4741-86e4-17decda2a4a3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6567d36b-d667-4941-9208-924fe6e80ff0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9dc8a90-a50a-437a-9400-b116953b3c40",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d1e74b0-8fdc-4d36-ae20-144fe9f19de0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee5ac871-2914-4b17-8943-5a09aa79bd98"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4832064-8125-45dc-9656-0c4794a1260a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18718ddd-7d43-4570-95be-8402d8eb47ad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21d67746-892c-4469-972f-65584e4da16f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7865a28-2f5e-4bf2-87f8-df25d867a9b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee76b3b7-9573-4480-b613-341329525009",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f49be3b4-879c-4f2e-9e2e-7d5a51758282"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2abe433-f98e-446f-8a05-23a9ce5aa12b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f255de66-1c30-4c87-9ff2-a637472b91f4"
            }
          }
        ]
      },
      {
        "id": "9babe608-fb49-4a07-a9da-e08ed04ac0ba",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e9dd61d7-8ff6-4d35-9225-012cc63c3a23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9595a05f-cc03-4cec-9b21-842f8dd589f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "34461f3a-76a3-499d-af5b-5a9e3c5e4a3a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2977ab1-6b59-486a-a199-3ee0581efe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89b64438-8596-464b-8e1a-371b31b8f996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebb5446-bb0d-4d46-8661-391655874a39",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8877e2-41c0-4bf7-8c3e-a2ad300fac82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c24ddfcf-e13e-4e9d-a08a-d3ea7ac46b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bc8916-d127-4c13-83e0-97f95ba53bc4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1087aad1-e30f-4195-8f54-74dd567bbfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b739b32b-b3dc-4cc1-97b9-ff7c62414cd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98e8bc34-8012-4e1b-b3e3-c6b19d74762d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7eb823b-35b7-40b1-9175-cc904ebe61f9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510f0ef6-a85d-419e-8682-bae2298ceec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dcc71cd-65ce-4dda-b5f2-cc386e02a5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aab2bc5-2539-4591-87c7-e6369e355aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b750ecb5-9272-4a04-b57e-bccba70a0472"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec68fb1c-c50e-49d6-a2de-3e0a4569763f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63c4ae05-ef4a-4a67-847b-ca0f67a57d78",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c758c7e9-3715-46ae-bcf5-48cb264a8dac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b9b4d240-54a8-47dd-bf40-3ae1a77587a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a46550d5-4d26-470e-a447-208cfb3ba32e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "835c03ce-f6ce-4e8c-afed-87a5fefb650e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5526f05c-1bb2-46cc-9087-1d527b411971",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b510d79-ae5b-4b31-9916-b4a23839cacc"
            }
          }
        ]
      },
      {
        "id": "bd7ead11-ac5f-4de3-813e-3f9bf13c8130",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c67efd09-5db3-41a1-9c0a-6c54f25d1611",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cdf67f5-417e-40bb-855e-cab057b5a1e9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "247138f5-e4a3-4b8b-bb6d-66db1e08316d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370ce16a-05fe-4c08-9ce8-92fb4a80d8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91269c48-bd4a-48de-a4e6-6844b187b0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc7a1c8-86ab-4edd-8a6c-d0eb5c9aac4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "115b0994-f3cb-4b57-a0c9-70dd99dd839b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07e8b36-1ed1-4970-8a72-56606887b92f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132a7ab-4dbc-4aa6-9329-3b8aaa1014fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb597ad0-d412-4844-807c-f7463ea3f272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382b3eb3-5ace-4fef-b914-f5b01cd8db95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "653a210d-fa5a-4982-8f3e-9d067794a3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc49ba6-66ca-4484-8afb-b5df74315605",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec3ad7c-0617-4f3d-b5c4-6552f3bd3191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a058bad8-8255-4517-9216-71424335a1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b198d4-a343-43c7-9d05-59728422c26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acaaacea-bfe0-429b-9738-21dbb5a73533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7072899-c4b8-4349-a18c-446baa1797d8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bef7178-4c58-4a7b-a9c9-cea5be4ede95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e85b95a-0503-4801-b680-e984703926d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e46df6-afbe-4e48-bcd3-45d37103a480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0649a2c-428b-4b9e-a3ce-013010b30d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c58ced2-89d8-4b25-8b04-3f3cecb7fa05",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d88bc3-7fb3-4415-81fb-4ad7d0123743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78640d2d-1dbe-4c11-817d-0e1b87c86380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a6e7c7-411c-4d72-88f4-777ac6e58f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d914399-55e9-488c-8353-31b74326a26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5c3d12-ef38-4d20-bcc3-c8f069bcc5a4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0788c89e-fede-42bd-a798-2487772f599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7513cd7-3899-4b4b-a1f1-bd51d232332a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2876cd-54a7-45da-8275-98df8400d3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8efd7fea-e27a-4936-9649-25a20f39f7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63156e91-7667-4c80-9e76-585d942301d1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfb4f77-0da3-4287-9ebd-696c1676c9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9866d67-18f4-4767-9e9d-b2712316bc1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b355a6-5514-446e-84ab-2633b2324b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "010b2e17-5438-4752-84a5-701c95a7000b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3ed6b-94ba-472c-92f7-920a176c5a1c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9789c3-3e1c-42f2-af09-8600e5914302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb5c1074-6732-4e32-9691-fb742609e169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151bbb6c-a48b-430a-af5b-fced297c79e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cac73568-7b32-4ea7-b8b4-8342c70c6dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6076341f-8d8d-41da-ad27-f91b05eec805",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610c18ef-acf2-4140-bff2-4b3ca52e01cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cece12-db30-4efa-be39-427a80c72819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fc93fb-f003-4ea5-91b5-fb01ea238351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31654eb7-d030-4934-a5db-2acc9b16d284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deff252f-e971-4f45-99eb-87a30eedecb9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ba9df9-e89e-4115-bdb2-feb053e4a74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84b3482-1f55-47b3-a536-cdf2cef57c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee98a772-b493-4447-b7c7-92e51147e552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4abf2ed-c2e9-4234-94b5-1e5492fe7ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b5345d-6047-49de-b3b9-df96dbfb0cca",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4009c0-8d3c-419e-a7a4-0b7b2b755799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6e4a2f-ae9f-4452-b592-7306283fa4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1d1cf4-b602-4e1d-b51a-094e5fcfb236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1582dc59-15e2-49cd-8868-338bfc60759a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6154a02a-dabe-4f9c-bc9c-88cbd468e2cb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9f9f90-9245-47b8-815f-7dc42524da0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fce5a86-904b-4715-9a24-f5dca8d6c276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11d1980-fc98-4045-ad12-30ff0f8fa93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4c715f3-c827-47a9-bc9e-d7759ae4ee64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94cb3e9-4163-4e1f-8c73-19d4f70e22a8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bbebb5-e11a-44dd-a561-efb2c81f0dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec09818e-81be-4945-8126-7327f0e1a84c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053c6fe6-9650-41bb-9c30-4988b6e19bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77b858f1-3d49-4ae0-a400-4d60b2613a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9203ce-bf14-4750-b2a9-dccb3623b9df",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff9bea3-e4a2-4284-ac84-70bdf70f5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbc7ef7-6943-47f1-ab41-56b0309f9e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98fd760-0168-43ba-a397-bb8ad935f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd36cd06-408d-49fb-9451-9307c5838f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d026b4-5660-43d1-befa-9e1a16b36d54",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11997143-78ba-4d8a-849b-33c4bef753b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba94be35-1536-47fe-ae37-121a0aaebf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15776ce6-96c6-4cbe-90a0-9e8abd1e6467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b66f48f1-e7b9-4fca-ab91-db5bc6a8cce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91607eac-57ab-4809-b555-382edf14a558",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7c4ec3-47fd-4f60-9626-c8850add9b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cb0079-9028-462e-8cc3-b6df2600f78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f44322e-28b4-48d6-88f3-5ab58cf8e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33fb5a05-62a7-4635-a545-659fe362ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95123ef-a815-4497-97d3-8cb79c73d21a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2b03b0-d4b3-4980-8e58-eda93e7b5a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818dfde4-f1d9-4e99-b642-fd8b75e93b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cddcb87-6513-47ba-82b2-01b419ab9c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc7b9b2f-327f-4f1f-9acf-170d871ceb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3b617f-f078-4a4c-86ff-80c009e3a342",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f92675-63a9-46ef-86ba-422d1c02f6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95682694-36e4-4549-a20a-73d92c5788d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b770627e-f7d0-4339-a9a4-33656126b49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d0f1ec-24f2-4cbf-a2f2-a8886924ec84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d47f50-18dd-41ea-a29b-60e0b34b03d7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f98d98-7307-4bb4-bfb1-fda6e50c9e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8b858-c1ec-4b85-92a2-107fa77c6c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db71623-5d53-4a3e-8ded-a1a13b5bc17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10304222-4c51-440e-ac80-c1af95098072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a65e18a-f963-4054-968d-3aa951645552",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792fdbe2-540c-4f8a-a3cb-e169635cabcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bb8282-9236-490f-8e41-381b73704e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a764ae2-9559-4db1-9758-d3640c04f009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "083aad2f-3ed6-427c-bb81-7e8e6b23b30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f06663a-7457-4a98-a649-fbaee27d1a93",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c0a633-9995-4ed7-8756-e0b82619cca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6bd278-057d-414a-ab75-5000ecdf33b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09adeddd-6ce8-4aaa-bba7-cabc6bc57a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "066709e4-fa2e-41a8-a320-5f7cde79a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd40061b-2570-4211-bf22-6e4b89562f17",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6140c2-2471-47b8-94fe-681d7a218782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fd6804-e906-4510-bb72-aa95d2ded3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554475c6-5d3d-4fa5-bb6a-c93f551712b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0714dc-35da-4d19-8244-91377264e0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a3801a-bb2a-49dd-8df3-f2f800d38960",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42e21df-15ab-448f-b049-fb94e36fb94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efee96a-3968-4adc-b6e3-0c6032bc85de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e116cc-57ed-4513-a84e-3ef8acb90518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "887a2399-3ab4-4e20-8d0d-d4beeac5ba51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ecb474-d4da-4bb1-ab03-9052f5f628fa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9417c457-2a80-47d1-964f-da8bce86ef14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6b642f-c6c0-4500-bf8c-856115dfbd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0348fa1a-665a-4e3c-a100-7b5dc1b57890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dad744c5-6d18-448f-b1c0-095e684612b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5fc737-2445-4a20-a086-05fbe96a68ca",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462b313b-f696-4fac-8cf9-39d38a14a5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945a7996-b812-4775-8bd0-447aeb0e4912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf1d60b-79c4-4c5e-acd4-e924153ddf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a6b651-e7ff-40db-9aeb-882164fb93d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdfeaa8-6c32-4854-9acb-11c84f7447c6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4aea30a-55ed-4d71-a726-32875cc1bc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639e194a-8a39-47cc-af62-f69f41158ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5f3c0a-ce42-46c7-94c1-3e9423a24cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e340a242-053d-47b8-9bf7-66e52fc88991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c95f5c3-6935-46ea-8241-cb88287f49fe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f7d009-8113-4273-be87-69d877a7bd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4892996-6ca0-444b-8ae3-d7c5a45e17bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2be970-705e-40f6-8d96-fcd8a7fb2881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a13ae7b6-2324-4d47-a86a-34299de08a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a19af1-0cd5-45fe-bc9a-537982224206",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dbc839-ae6c-43f7-988b-16ea5054362c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8212b97b-5262-4666-917c-fe668d7aca97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e320162-cb43-4f39-a4db-ed6b74922410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "016b0afb-b89d-49fd-929a-b8b9c873d4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d7b086-219c-460b-8237-5dde7bca5dc2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b566cf-cd2c-4067-8baa-493208c75ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426334bc-0ed8-4f20-8072-03b8ae7b52ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e306644c-d721-47e7-a827-3c65d7c7ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3c71cc-2d47-4e58-bf28-5d20971a785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd37729-4d96-43c9-b9d5-d781dd46de11",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e804321b-87c7-4016-a13f-7a8c88eb1ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764c46e2-085b-45d8-94b3-83d4e6816331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f3d57a-cacb-420b-859e-5b30bae00dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "668bf9a9-0c1f-4b17-b1ac-57aab1d3966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a75ef6-302b-477c-b7b3-fc31bdbd1be5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9934b0-d89b-4505-8c98-a6d1a2dc2375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e72e71-f801-420d-af4b-5bb4458f8b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4471b1-26a5-4531-ae55-0d4c2f5510d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8693d5-f5fb-4b89-856f-24b864474904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c7c896-c6d1-4948-b416-8110dbf9e8fb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5883a5f5-3589-4d7e-9614-91368959127a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa740125-abfa-4ad1-b735-6e3ad2117ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fb61ee-5a28-4d80-a345-531f31f5e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bca5d526-0e85-4e50-ac5a-0e8fe942fef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45af5c6-bfee-4553-acd6-dc1c072d1c29",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1aa6617-a9a0-4ef0-8014-eb973f857491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f38eb8-9938-484d-b6dd-e0549ab8f6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b77037-b65b-4bb7-8e2f-775224a25969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77002871-d20d-4c4c-9e46-d483e6ce86ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a019c2-9687-435e-956c-dcde7826e4d1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca14af7c-89bd-44fe-bab7-f4329a15ac67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8544560a-c3c6-424d-be5e-4881808a4f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58c5042-f1cd-481e-8cab-74c29a5eb066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b7d6dd-b63d-4781-89c9-dda9161eda06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cc7408-4e97-4266-a398-64376b6f7462",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f248be-476f-4e39-a113-db967c231fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf3bce3-32bb-4d67-a37b-c47a57d9a772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1cc841-d41e-48bd-9b61-f20a41933dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "14e7f92d-1da5-44e5-90e3-40fa17fae881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ed6705-cb61-4a64-a54f-d28aab6dad96",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404c3b19-01ce-4caf-8ee4-9ddb6e586d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6bffba8-aa6e-4d51-9dd5-0b82cd6c00df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3287abc-4cae-4c3d-a883-64c2399c7817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7631fbb4-88d3-46f4-8137-afadfa2fd0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d4bba9-3cf3-4ccf-a9fd-40716796d577",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb252ad8-2341-46a9-99f4-f44a85d10a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6145df5-a1a0-41dc-997d-73c79a87d09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5204b3f5-c7a3-47b3-8509-2bef4ae2df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff31fce-307f-47c5-8907-853fe20867ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f237c21f-a221-4bcb-af64-f56ce0a051c7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc33bbdb-4c7b-46cc-ba8e-aa9c1429f43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30828ce-0b5c-46db-a50c-1d678ca60ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f8fff2-a9a4-4c60-b01d-4e25ac87fe77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9801632e-ca6e-4010-8d34-51d5aef4a8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e78a828-2a1f-42ba-a57a-b094833121a8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c91ca46-a052-4b63-a1e5-acda507f8654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f561f003-fc77-43ef-98a3-05473f683e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b24f5a-e0c9-4170-affe-ee64dbe203a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "276350c8-6ff8-4261-8c7e-5ea3c7f26ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8953cb8-fc86-4e14-9e3a-498ca13eb69d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d31365b-14b7-41b9-846c-523bf9085627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f46936-f865-4adb-8217-22f29e473ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47951080-ab47-4446-ab3f-234657b4ab94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e81f4c57-eade-41cc-b593-715731396c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0177eb-3258-4e81-b585-6d3a61b91bbd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cab6a9-057c-4e99-8b05-9f59182931f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409f5385-9f11-4afb-8d2b-477db7d324ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8861028-90a2-46a3-9e19-8dc81a5d1b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db50509c-921e-470e-b172-a616537beff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99de7826-ae5f-47a4-8fa7-d2e048cf3b05",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816f7e58-b358-436a-84ad-4abf5d040a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3908ea2-119e-454e-8123-d9e821856776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77205519-0f0d-4dab-ac39-04eb41baad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3951b11f-ae46-4767-a62d-8aee73bdfc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc58369-4a84-4df7-a367-6412c2aa3a35",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861f92ca-9345-4912-a483-8bd07bf9abe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f218e398-bdda-4bf9-9aba-2b10e4f6d937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f23905-3f30-4206-84dc-edab540797c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "45c56d23-4fc8-4849-a4a8-ed93472bcb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47f6d43-45c8-4beb-91d0-a320cb3fafaf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a4094-62ef-4e49-8a20-2d02ba598fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02712a1f-ec86-45b1-94e0-62ef73a1bc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28556bc5-0926-4871-843e-2dfad6913905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2c6f2c-3b40-4081-aed2-7775d8142122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf930a51-df56-44a7-b5fb-27745029e6ec",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a04bd8-d165-4a84-b42a-01dc7a720144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e93899f-6380-442c-b4e5-c748b1afa905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad436fd-2750-4dfd-9f61-85d5742aa774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5c294e-12dd-4387-8a49-3ed570207d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317ec779-e5ad-44d8-adc1-af78ab2ae926",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19d551f-5c49-41b2-a624-a4dc1fe279e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a27ef8d-5c71-4d57-a862-1585e53fda4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63fa77c-68c0-418c-95cd-dec5f4a241ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8c6ee6-ba21-437d-8e90-67de49d0be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6380a4-26b7-4aaf-9503-79986c1fb185",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6846efb6-23b9-436f-a408-e297c13222f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7990f4c1-6a1b-430b-a14e-12cf2e268094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0f6c60-d6bd-4544-8dac-f756e9f7323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e74516-454a-4a39-bfdb-61cdb7bb5a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734bd639-410d-4596-8f78-3719b038060c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4201357a-c2f5-4be6-ab3d-a52b9c13a936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04a959f-3307-4b17-baf6-ad9be4a048ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c402a8-f6d0-423a-af20-7b88212a90b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fbfe907-fe8e-4178-bf25-c0767cc03e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f1d9b7-d50d-433d-9937-dbaf2f0ef98f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec03a7c-d3a7-4a60-8b58-6dcc5cc18a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa5ea32-e391-40ea-ad5a-16759bc92dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dc69a1-8f11-4eaf-9a5f-470b50c20808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8634343a-bd8e-4c4a-9a94-931a8d28876e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45326478-3fdc-4738-8585-33a9c6550b49",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca74174c-3cca-4c92-92db-ca249753ba36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826ef5e1-cf62-41e2-a234-063631c5b48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820247a4-9211-4f45-a2f4-257739735a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cfbdc1-6303-4d5e-a106-407939ed403d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b61acc-ccdf-479a-9c06-25e79aad6101",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093c79c2-cc05-4e3b-9548-08393dbeab6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4930d9fa-2cbe-4040-ba01-aa36105aabb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e30c089-4769-4607-bb0f-3fef84599aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2cb256-42c4-4158-8376-040bef9a5d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8a238f-cb76-42b1-a4f9-01ab570c24fa",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "061846c3-36dd-4832-a535-60626fef3dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629b7348-1130-47b6-8cc4-d6e87e503bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a8732c-18c1-44f9-b9f3-8bf54bc0b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b97f2e91-1c80-4673-9961-c68188bbf42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f4a15c-87f4-4abf-b1fd-5e4baa388245",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb75a6e-7fe9-46d6-b9bc-d25da3965ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0b79ad-a7a9-4a39-8f0d-735460ae3dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2424fcc-c893-4fdc-9398-492e0e23b9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d72817-0ca4-4a67-afa6-6a6043c10993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cf6a62-53ae-4370-bd86-cb20e1fcee5d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2420be4-9f25-44bf-9a14-1bb72582f3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9743dd36-28ab-4e68-b0f8-00d24921243e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cc5f01-501c-4eaa-a93f-ee7ca3f5afc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e410d29-5cd9-4b2b-909d-9f1b40aefdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1acfd9-a48d-42f4-b09a-7c9988aa398b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58209adf-c2f2-455d-b200-f27e67976654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb0cfe0-8cab-4ecb-b842-74bfdc222395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975fa1df-3277-4797-9bd2-fbe855a5352d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f52f6e18-98b5-4558-9df7-808b97eab046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596e42b4-c30f-4e62-ba57-805dc6089920",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80cdb76-2b8c-4404-b58d-65e473fc1c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad9368e-ad32-43ab-b605-4a35a3039a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7626927b-ae37-4c02-9048-1b6b80997062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "888b102d-60d3-4b31-be2a-894d187a899d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2ef9cf-7c9b-45e2-ba2e-6b32b6aac178",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2978768d-357a-4435-8008-b8934a705259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95f8774-b699-4b37-81ae-dca0c1e6d377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3226567-9a2d-4368-b6ea-49c7d3fbc4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "417868b0-e3d5-40a5-bad9-ad932c22128f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cbd1ef-c696-41d7-8f2d-ca6fdbe7339d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946811fb-c4e9-4adb-ad3d-d6b3b043a4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17ee655-dd1e-4800-976e-bdb6ed4ae0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41439ecb-2b0f-458e-979e-fa18442ce28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "952ce2ac-83cb-44f8-a0d9-84eaa0edb590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8477146a-8e8d-4394-95c2-567718961c6a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18493e24-3e33-4a23-a03a-841604be1e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45d91b4-f27e-4526-9bcb-e065c8736626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eb5b56-81fe-4d1b-b03c-6cf6675aba6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c2c1ca-4c3f-41dc-9668-e2e238d7215d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1962e5-7cc4-4e02-bedd-3f3a893de86d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2fbe3c-b9e7-46f1-9523-9ae3cde97659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8258e6ca-0200-4363-b6ad-9b4358070a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0ab94d-fb62-4b59-afc9-613c15194ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "115a89af-9e6d-4e2f-b6bd-227e1767644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f267d0-30e1-484a-98a2-8a27b363ec05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eaef839-e409-47ce-9f0f-1b662e75a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c54d8f-2419-4ad4-b1f3-992705f6d795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9450ed-42a5-45e2-b85b-edce91a78df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "550a1978-5e7e-49b8-8de4-ffdf44884a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f95dfb5-2f89-48cb-807e-065fe9ef8beb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6444f555-36a1-46b7-b0b7-eab19c1498a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd68ebc-aaf9-4fe4-95e0-6f1c83f5a2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba3f68b-8007-44bf-ad11-4873a6b6ef2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c875c9-8d1a-4a2f-a668-e7d86d732f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4f6e97-4f6e-4f5c-a785-10d4e41fc686",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cd4513-8b5b-4b8a-90a2-9588dcbd2f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdf764b-15af-4cb3-a67f-6c0b1aa533b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fe3916-633e-4c24-b9b3-b4d4136be6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "669c4906-424a-49a8-9165-8fb9cdb7cd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c406be-a860-4a6d-9fc3-5951ecde265a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc027461-5634-4a1a-a634-25384b37e9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a99fb1-4b7f-4674-81b4-694e0bf28045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ffb2a2-1e97-4f72-bfe1-2422d4087211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85ddc60d-255d-49b0-899c-8a03aa2b29b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410d6039-1a82-4521-83e3-cc14e951c3c2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e6504c-9fe4-41d2-ac87-1fb025c7e6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f8334a-d5b8-4ccd-a7a2-fff36aa34995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f837a2f-e9fb-4a06-b308-5f3692d3ffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c481be-08ca-4798-b975-62f10bd89a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61340a07-9f36-4116-9879-8610b9e2dda5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba72fad-1bee-4b8e-abe8-41fd336fa895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea2924e-d3fc-4712-8d3d-7703d151b859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bfd4b1-f133-431c-a914-34ba45f50afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8daa6e2-1d7b-4f41-9317-cb00f1ae3f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b3103f-bf68-4c49-b9c3-b97f2712a9e0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad44ba8-011a-4847-9e1e-6d93f0d21cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8330c516-0c2f-47d8-81fe-75f8b0e00dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643f023-3eff-4211-ba07-15dcd7ba2f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e1831e-0e4a-4c2e-bef4-93378bd85063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cae944-683b-41b8-a42f-7426d7b75966",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329871a8-5de7-4150-af58-0fc8d099796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21369bf2-5aa2-4688-8cba-9eed0c430edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a88a7f0-8c3c-4074-80f8-670a4c98ce31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e32c24e-8ed5-4487-a6d7-3ddb8ce6c897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9118e3d9-547e-4ed8-9170-bf21f32cc95b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0315b-95c0-4caa-ae52-b12bf31d6a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307e68d6-35a8-490a-b4f6-b1f68554fb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cfc68d-354e-444d-ab10-8e1a0d808179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1ad1c1-e31d-4f8e-a317-756308ac6c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4830f04-d5e6-4596-84ea-09365ccb6542",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b851b9cd-f93a-4fde-aefc-679dd947b31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7729d3c6-b434-45a7-800a-0b666f0b9849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a907af01-4296-4535-a6b8-473fd961f1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ad0913-084f-4aa5-94b9-7fd0532826ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10e495d-590d-42e7-a4ac-b7aa31f7a7ce",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab82b2d-febf-474c-bedd-3debdfeda6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c491659-908a-4f2a-a340-f9141bad6bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29776106-bd5f-45c3-888f-26405b2b7062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4a502a-cb49-4d29-918b-5512e5f35af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026ee960-578d-4f78-9bce-7f4576e94f5c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c1ce64-6c61-4839-b3bb-1e485a32cb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3db449-5c6c-43d5-8f07-ccae20bd501f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e4518f-2b0b-48b8-b2aa-5cf3a4659940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "062dcfcf-d2db-42f6-b75b-89715a4ed4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ed917f-675b-4b3a-9180-f0e91d7680c3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2000218f-25fa-4198-8fbd-9e2300cd7f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40d9b71-8d1f-496d-b325-8c3e0e3f220c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd0bc7c-ed78-4cdf-a47a-df68a7b26756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25696bac-d68c-4084-aaf7-51c884220abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e7ba39-f2b9-4ddc-b553-5bbfbf5d1df2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2886fa6c-24ad-4bf2-931b-dec28a109e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94ad16b-5522-4f83-a2a0-6da52300537d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a28e67-f99e-4c7b-862f-c6fda901aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57424b06-6d12-40b2-90d4-7ad5826df40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac0423b-750a-480c-aa7f-9116a77d7681",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ac11d9-f5d8-45b3-b97c-c506ae98a7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0687d9d-317e-4a87-9d8a-5126ad8b6708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020a6812-842c-46c0-a225-72093b8166f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cececec-ad07-4c0f-ae2a-2e5b5e2cf114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd66219-82b5-43e7-84ba-1ee2c20e9a3f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0cabc3-0d32-41e6-8c2c-8515fb060caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e3a533-eb58-46ec-b40f-846796e87f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1417da4-6428-45e6-b8c0-ea7cde3c6806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd9cf7a-257c-4327-8ff3-7cfd494357ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8871d8-3f73-4577-82c1-3f271a7ce9a1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491a1bf2-75ea-4a7e-a52c-eca127c8dc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0b7dda-dc6b-4710-973c-2fb1fe2e04f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26fbb54-c2e3-435b-afdc-486a1baeae8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f635f0a-bc30-497d-944f-18b7d7fe562e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2cacba-fbf4-4cd8-9783-575fc1d02ffc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead07a50-b915-4db0-ba10-fc5af2e8e2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c25149-6cd0-47db-ba21-fb1c803602a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9102984-8f8f-43d5-a540-2fe1fbb22cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "162256c5-1468-4db4-91b4-c7f104d0c74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3409d4a2-8037-411b-9bcc-c64eb56a4aa8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "510c3f19-109f-49ab-9d43-a86811378908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50bd37a-3395-4a94-92df-7c033c176fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f88179-2ec9-472c-866a-ef5ab1aed582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c992c91c-3efa-4775-bb6a-1d5f8bd941d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a25344c-fe34-4a57-8f07-f22a04218463",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c15e1a-ba01-4791-9d16-5daa625af9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95934789-b134-48af-b5a8-00d066fb51db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d417e951-d671-4498-b9ae-bf1292259319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f1ec8a-4079-446e-8560-16cd15b687c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab6af41-b048-4793-b1a6-18bb6c7fe5ac",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1770b8-d6d5-44d0-9319-c3af66e95fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe3e575-2b3b-42ae-bc97-6d120d2df515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf3e6cf-20e5-40bc-a8a8-6078470a696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de941ba1-e9e7-4839-867a-bf5fa7fc1229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0322784-77b3-4765-aefd-1985bba4c371",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a857487-fe7f-42f6-873e-217084e2afcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1b2e10-6ccc-45ff-a93b-7137c945d958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0079fae4-3c89-493a-9833-5b2f34876c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94747d9b-02b3-4767-8799-7bf78d8054ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb92de3-7db9-4e0e-a670-f4a9833a1123",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbb2e72-49ab-439c-9064-18522f30daee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc5d17f-1977-4abb-93a7-c02dab0ad455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef83e41-6eec-46a4-af48-4bb312ef5ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1028b4b5-cc3d-4353-9d31-d693782c9dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb7ab52-2448-4949-8a9c-7a5fe80cceb6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b8d117-d6df-437b-a4d9-0deaac65b97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6a9b7f-1f33-4c9e-8029-8dac492331bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f025338-3056-4e0e-bd30-0ff1a63d9e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fee075f1-29da-4a44-9a0e-7914bbbd4e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625406fa-7318-47f9-8ff9-bca1e0dbbbcb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653cd14c-1172-44d5-8117-62589c49420d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3257024-e696-44ea-a831-05c6eb5e4145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e502a2f-9f4f-41c6-a857-163ed71e6d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "225ffc34-4a27-4da8-bee6-d0d75581dc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a275580e-4b86-4d94-b7aa-c1bda669380e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bc3183-cd73-46fb-ba1c-1107eded90f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cc6398-5b7d-4669-9913-85fa287e5204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9056ebb6-89b2-4ea8-98ed-ff3050b904ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a86084d-bde4-4789-b547-f4e72eb87972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad49a48-18f7-4b8a-94ad-79be803ad65b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103a2232-a321-4575-85ba-1cbc1178e73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3333e613-5966-4a73-9088-30739a2c2d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60130b8c-4036-486b-aba7-4ec19b2dc068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "946e7b0d-c05b-4f31-9e51-3def09da5865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddd4deb-0e55-4803-a005-aa67c467efe1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b3883e-c145-4553-97bc-592fcc2c5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c045f399-f214-43ee-a730-127290ac37dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2231e706-949b-4199-9e49-7d4c01027698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e53e7be6-735b-4f33-8dfc-eded4a7d3edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7259942b-cded-4f34-bf18-78f9f1fabce7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6228c812-a1de-497f-bf24-25534ecebd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9af870b-9844-4cc8-bb88-3c208000b9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60129c36-dc31-48b8-aa5f-270c51356854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9aace90-ae46-4cbf-9a0c-71cd2023e01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa71ae25-72de-42f3-a131-8a8ef9585e1e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a399e65-8973-42e2-abee-d14dd13b0cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58339683-a9d3-4a90-bee8-711ee5376e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349a6511-78ab-482c-8783-c91ea3091252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9468acc-6253-4189-b667-40fe50e2da27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba5e16a-2a61-4992-9b2f-057c4b67b88c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1d1af6-1726-4b81-80bc-d00867406a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bded380f-63f2-4f8c-ace9-b7b0d6ec575a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c858149-b23e-42e3-bf07-17968d6d794b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7959bc8c-51a8-483a-b61a-595dd2eebab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0790a036-e442-49e1-90fa-eb96a1a0b13c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad49db99-de97-4d44-8585-98e46c091c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0e882fed-fae2-42d9-afb9-0ddd4639c722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c72d7db-40a0-4554-9617-dee6ce697f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8db2258-017c-422c-ae52-88a7ca5e75a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "895385ec-6ffa-4e1b-a8e4-a3a2064420eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc8c29d0-10c5-4add-b4a5-4f46d81b5b0b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc6dff6-f204-44c1-aa1b-85557e563612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b2eee90-b3f9-47e7-ab29-5d62444ccc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52147ac-d1fb-4272-85df-af940c19427a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37349d38-7601-4a88-8e47-040dfae7a949"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b291c4e2-8b6c-4b09-8113-09f3694d3d0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "424b3764-c047-4544-9f9e-fb1c77195582"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c29d030-998a-40f6-aa47-bef165176544",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc32c734-2a3e-4c81-a751-cf5fd504b23b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3f59f21-0994-4d65-badb-c0e27a2262d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b96002e-62fa-4c07-bb79-69d313fa1349"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4520188c-d5a3-46e7-bf71-4dc6204f8b8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d479f22-d662-4b9d-8654-29dd33656865"
                }
              }
            ]
          },
          {
            "id": "2f40b152-a3c3-4a14-8385-91a93c051b83",
            "name": "Positive Testing",
            "item": [
              {
                "id": "076d4b9b-ab98-4608-81a8-0c0580a75aac",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "01dd43c2-3dbe-4aee-b8ac-e7c0e7a1ba7f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40740040-4d19-4765-9aef-72279bc10506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7baefe14-2eec-42fb-9a61-9bc9b4b1f417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3963f98-aaa6-4201-96a0-80e106011224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486cf4b0-9807-47e2-94fa-510d409f7a5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "960d0260-6f23-4633-92a0-5768ffea85a6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4769282-58c0-4e6c-9429-f080022f568d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "949282c8-a489-4f1c-b54d-0c8e6944211b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adef98bf-0a8f-4782-bbf8-2a24e94b41f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "31574dc5-920c-4aa6-9c8a-2c0d47d6c04b"
                    }
                  }
                ]
              },
              {
                "id": "9994f059-f598-48d0-8a59-529e05edf302",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "094aeb0b-8644-4396-9433-773d0ef6e774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40ce49f5-7d4d-4b1a-87e1-27255d2de332"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4716be3-517d-47a4-9239-cee2b62f2a47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6962571d-cb34-4b2f-a24c-016faa1c4ff6"
                    }
                  }
                ]
              },
              {
                "id": "45b03580-adfc-4ceb-8338-d4f75516a2d3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "349f0d32-cac9-4a2f-b50b-c70c23c589f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7ccd3b7-8f53-4f7d-970b-477d66fae11c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32943a7f-a471-4293-ba42-f7f40630ff3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5c66acba-2bd7-4348-811d-c4047f7ecf5d"
                    }
                  }
                ]
              },
              {
                "id": "32c38747-b678-4a49-9cb4-d68358eba78e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "839e3033-9e4a-4465-ab68-33f6c2f4f1f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2103b8d-4fa5-4aac-b69b-3f39c2d89a6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8f928d-02a3-491b-90cd-9260f55877cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "eb5dc2ce-6788-43eb-ac33-758b246202e2"
                    }
                  }
                ]
              },
              {
                "id": "238ed39c-b091-4d38-8799-90a1441ed0cc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa4fdefa-23fb-4d7e-948f-1d584f782420",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cbf52c6-63fb-4917-bde4-feda42223cc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0508aae5-170d-4d4b-8bc4-29398be9031f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2408217a-ee85-4732-846c-1c787b627617"
                    }
                  }
                ]
              },
              {
                "id": "e2303bc2-4859-4374-a32c-91c877882236",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af24352c-4937-405b-a2db-2344fb1d7529",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fb7761d-e6cb-4c2d-ab16-9a0af5a97346"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "012f45c6-d763-4e45-aec0-632afd42aaca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4b773762-0897-403f-bcff-519999d408bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d759580c-d69f-459d-91ec-34799ad73c30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6633d3e1-83b7-4610-adb7-9a54a773d399"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fc30df75-3c29-4ca1-9269-b03bdd6c4505",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "458725eb-13bd-4922-b978-a8a998726e43"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69e970de-464b-4e60-844f-cf9b5a284116",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a2fd006f-8031-4315-8989-749d5c77ecde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59800ba8-fdc9-4fb9-a52d-1c19a532c47d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "954616cf-9933-4081-badd-58cd3908b8eb"
            }
          }
        ]
      },
      {
        "id": "92b0c714-9d44-4361-8bd3-515b28726e2c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d0ac3420-1b8b-4610-9e87-0f7f228e9d87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57129271-03ac-4be4-a890-b55c4e12c055",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "63e15652-06dc-4640-831e-efea3dbd4681",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b2a274-bbcd-4f25-99b9-2dccd8e1c9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f2e9c9-5d8e-48be-b72a-bf6c82794c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49d3cda-f546-4bd8-81d0-9271d9de2b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "917f9c7a-9ec6-422d-b80e-331851976755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077b2a0a-fdff-440e-b811-3d24f92307b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4633588e-9015-4ede-a126-e8b007bf9ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db4590fd-7c80-43c5-a8b3-e65489028a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff44772-a339-4908-a240-8287f92c67b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d394e57-90da-4236-ab30-31dad9705af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cc75c8-4ee5-4f89-92d7-93325a099151",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b69b0ba-8c88-4379-92e4-b710ad7f4612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49aa8ee-3e86-4992-aeb8-83d926848f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b0161d-2522-499d-9e91-f5d18d8bff0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aa6c91-3b9d-4e33-9d73-791026b78cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08ea6eb-d067-4841-94a1-cde1c4c50b5a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b93f12-87e3-47e0-90d4-664b1bcfcd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3412cdec-b671-4b05-987f-4f03d349e314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15ff943-6855-497f-8527-e24ff3759694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0928e46c-81e1-448c-8620-7a5b92ff4ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c036eef9-b772-479c-a120-27ff46f14474",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3312a6e-a372-4d88-8641-9fb75db334ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e587200a-b492-4a6f-8ccb-e49c568da6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d2d39-701b-4444-b0d8-bedcc71b334b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9a7958-a925-41cc-97eb-011e8f2802a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdacdd1-c225-41ef-890f-e820eb8f9899",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c358d8c-4e00-43bb-8873-86a9380e1441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecf7037-d1cc-42f1-bdb3-1c1ee6137ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bc772e-77a6-4e36-9198-f9f938d78970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "298fd7be-f441-48c2-928e-2ba94ebf6a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fee8bdf-d740-49e2-9847-5547eb7a5c01",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d0a6fc-a9a4-4abb-8d4b-a1088496db5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215c51df-e8f8-4277-98bb-38b26ca2266d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e933a817-6440-4591-a1d4-1bb937fbac67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc74e74-730f-4e95-9567-dca447f113c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262c133c-5208-4e38-9d06-92b7ee47ed9d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185f2f44-05c9-4bea-9de7-629a575487fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eadb232-1cbb-4bcf-bc5e-31e7015529c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f26c9c-ca2f-4e1e-ae26-7fcbcc864acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfd8c87-f06a-4ca8-a117-8569f5fa3bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb26671-d18c-48e7-8bc3-75bbb5c5acb9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138198ea-e2fd-45a7-9cc5-bfab14df6d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799f1d24-771f-4aad-891d-be52af4e49b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572702c0-f94d-47f9-9a4b-94359b34e267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "147a1a6e-d2b8-49b6-a5a8-9137ad111b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff8afc6-ffc3-46a3-b77e-40f740341486",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25632d4-4acc-488b-8f0f-48ffe55de4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb9c55c-5d89-4bcb-a263-de38e9c27d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deaed567-6a0e-4ace-b9d2-e4bc24d77e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cea7caa-5f70-48b8-bb4d-7eacefc5585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784bc832-2f39-4c53-83a1-35d3d4416a1e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3768e79f-76b0-4215-bfec-36e5e276f8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8591c0b8-4d6b-4074-9863-da54319ece48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767a7a6d-f458-4b90-b79e-91454fa672b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "de20417e-57fa-4753-acdc-992667e591b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca17835c-f39a-40e1-9d21-51a218018056",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7ba13-9a4a-44fd-aca7-0c61c3162fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680f407d-f832-40b6-acdc-79ce73d46cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d98bd1-e2a7-42e6-a03a-0014c1f458dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5be5eae9-e94e-4480-9e28-9b369d3714eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed985070-c95b-47a5-83bc-973a531be274",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd27e73-5939-45c2-8a12-01e21a852bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77288252-0562-4d67-b419-543dc49b74d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b863f9-d842-49b8-92d6-93696636f14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b27bcfb-00b2-403f-b4ca-9999f55df777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b725c59b-b2c1-416e-a9af-0381283d0948",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d9bf4b-9146-4f31-9387-04d12acf8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3206f1c7-51c0-4a4b-908d-498b86fbaa5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676e1d0a-804c-4e75-97c8-13230984b539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "40de422a-40f6-4d5f-aae2-cbc810b4e50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08a6caa-252b-42b3-97ce-7dbf8e1cc84b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6828528d-4607-432e-9fcf-e281d70c54b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2814ff00-6444-40ee-a828-ea1184d23e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6226435-46fe-407a-91b9-fd62ba07532d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f018415-4d9f-4135-a35a-3fb0cf0a2202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1808c64f-2807-48dc-be4f-9f1e4e22117a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9715952-dd6b-4167-9bfa-1710490e4166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15557f6a-4077-43e3-98e0-1ae706d2fa37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28dcbbc-0026-4810-a322-cddc01b0874e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a753ff9f-2548-4325-8ad2-a58097bef078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98562931-3927-4838-8d9c-57a87d352820",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b405182-10a8-4274-b656-fe362b7adae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09ebb86-1236-4a08-b958-1bb11237a1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14825a9-521d-425a-b72e-ec48ac21488b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07b7b05-96e5-48d2-aa0f-e8425f33c7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcc394b-6859-4bba-a282-3cc69770ef00",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985ecee8-554d-4c52-a697-74f8bd85f240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db8f795-bfac-4a29-affd-6bd1980d321d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ca4354-351b-47e5-a684-de9b60771d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5b618f-192f-4ed5-b7f4-aac6a59be394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6a0377-1343-4e09-92da-20d84800bd34",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73577cf-c45d-404e-998b-8bf6c5942777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0362c0d-3df8-440c-88fa-0479724422da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeb53fb-2a72-4682-94f2-2b9f6fb4ee76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f358ebc-fbd3-4f3b-bf20-8d989d0d6743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cfc08e-9e2e-45dc-ac8b-3d48837c39bb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c0a7ba-d384-4d22-9f7f-4b98179af561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab98cc7-48a9-4871-b5c6-1e984db74cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609ddbb2-080c-4f1c-845a-fdf7ab1aa0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e037b03-7cce-48b0-8265-e86b092325e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8300cba9-642e-4b72-8b30-ddeed4c6a1dd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12aa203-2f4f-43dc-8f21-0da5a8d6ed18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13efa41-3e5a-4787-bd16-7078ff6b41c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3cea81-42f0-4708-aa16-2c5b56dbe713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "758a59d5-efcb-45c4-93f1-c36bbe9c6a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296fcb59-21dc-4bde-a046-a925960fdbbe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ac55f3-b088-4162-a6de-b7627e63dd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27166990-ed4f-4eb7-81ba-b60575d403bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7511250d-1a25-4c8b-b581-25ef2e41a0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8db97a0-0072-40bf-a4b6-91c2648ae18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cd3533-a851-43c2-b831-928a911b1591",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2590842f-0e9a-4b09-bf3a-019bcfb62037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90f3071-8b96-42ed-a51a-2789ebb677d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f690617f-99b8-4c27-9d55-6d0a21ddcdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c437bac-3784-4f85-adf3-34aaee9e87bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd81dc5-afa8-458d-a0b5-bbeee503dca6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f29217d-7923-4221-9426-a64ceb7a4171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864239d7-dd3f-4e83-972c-d74b5876e956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116834eb-6ce5-402b-a15f-c707b1b3ea29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23c27934-6870-4cf7-9793-d4276f757c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4235ec93-08b4-4d5f-90d8-9c683fbb744a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df5a2d5-b560-4921-ac3e-487dea292cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219856cf-e945-4137-bdd5-474e6d51af40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b4dda-68c7-4a0e-8415-6630595ceba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d71f00a-afa6-449f-a872-8dac8c8de37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560b065e-1dee-4b9a-830f-0238f098cd2e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a48689-3dbe-4963-beaf-88078ec2cb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b94b741-1f72-474d-943c-1bde70280fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461818ae-3b83-457a-987f-23cef15d3339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d734d8-a4e9-4175-ac14-195e935e6c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6114b8d1-ed41-4df9-8665-a341bd23c7b9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613f85c5-a7fd-46ff-aa39-3eea40eca4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b50b4b0-ce8d-4bac-a601-425f33d04899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff365b4b-6920-48ca-8eb6-2ded445fc822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb6f428-0d28-4e52-a324-b4b2227f5998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6138e027-5bd2-4b31-bfb0-4f4a2aaaa1e2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b11ae81-822b-45ab-a4c5-bb3f6b21d37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2a988d-f1ae-4f79-8fb5-bb13e9c3d5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc5aeee-c981-487d-9281-98306df9926d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea30217-4584-4d45-86f2-40c920db81e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a98b07e-059b-46f8-baa0-883b2fff3ef5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5d846c-d49a-4654-93eb-d0bd8eb61490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed68a26-1172-46f1-afb5-2b609a2de871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199a0527-9a95-44fd-9e7a-73cdff196fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4759da28-5db5-433d-ac02-e43098030d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62211cdb-12a4-4c52-b199-9d3b0da9633f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef283c8-afee-42f5-bc5c-f4780e74b1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b737070-b318-42bd-8279-14bd86d0512e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d9a97a-d6c1-458a-9fd7-cebb8c57b596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73cd9c18-6290-4dcf-962f-a5b7c31b0165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e37f30c-4579-4a69-ad78-4a16a3901b15",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d8f141-782e-4930-bab0-5bcf056f433a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c05e4ba-a374-4e0f-ae18-519295f96e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42564624-d104-4e90-ad85-5e5c07ffd4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "383e0e81-4847-403b-aaa5-e45f55126a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b87c532-44ac-4883-bcd8-1768f5bff2f7",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566683a8-a92f-45a3-ad20-ecb0c8eff6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab5e2de-a743-4228-98a5-c5ceb777a8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6101ae68-1feb-427f-a6cd-a625401f53a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9020d04e-1d00-41e5-9eba-396507e30dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b224beb7-04db-4520-93ae-55e95b3cca99",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394afdfe-f79a-4287-8162-6fd06390cdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d1151f-64c5-4a88-a44e-5da0e1201290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6861d0-c7d0-4051-a71e-996803f9c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190f45b9-6bb3-47a1-beb7-4db71c517005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdddf01-05fe-4044-8d6c-6933910ca41c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf093e37-0974-40fa-89fb-499cb5d3dfc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95c53bf-ac0b-48a8-9063-142de1034b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701f838-e469-4f70-b8e6-4b26f41b5641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3144cb-9c13-4fb6-8dd1-ae3a0d049740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded25e77-fec4-44ea-bb18-fbf153a8a567",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa266ad-44da-4db9-b039-2c35d616eabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a409f6c8-1677-46b2-b2b5-8103a70974d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50eef3a-4da8-4c28-9f69-a2bf2a8a3d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4e018c-6d1d-4214-89c7-348e8aaafd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edccb093-d29f-49dc-bf6b-9ae64593bd64",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192e3fd7-6c88-4b69-9219-1cc3eac5f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9b98de-e676-4589-96fe-bfbc42f6aa0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782b018f-cff1-4771-a8d7-38cda04a92c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16242b12-6747-4314-8428-845996438d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c48f524-f0fe-47da-a738-9441e14c5f83",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e844cf2a-e03d-46f7-9a8c-d5cb15b862e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698560cf-65b3-4f42-9e22-648781b481f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a0bf1a-ca11-4bf6-b6b8-f6409e469b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2ec662-5e02-4681-a81a-51258247ebe5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0483768d-93cc-47ce-acf8-2f5065c96bf8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bbe3296-2061-46ce-915b-312bc16d5009",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07702e1c-5157-4196-9552-a6290d7d08f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8bea52e6-6914-4123-ac9e-420b6d9f1b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b919f04-4023-467c-9197-39b273acee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a8a6a6-fbd4-4f73-8ae0-b221039a542d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4410896-ee7b-4fd2-8c72-d47daa3ea53d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75fd5e4a-7d5e-47e3-9816-99072205b709"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bc0adc4-ee6a-40da-bbf4-8e9c17cb1766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af96b1c7-4fe1-403a-901c-c6b752fc6fe4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26074009-f0ce-476d-8f6e-524308eb5a85",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4caf9954-c838-4e23-ba89-8f7729d70952"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59586ea1-c0cc-4028-af14-cf992bdebaa0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b668ffc4-18e0-4cd8-9088-cd9be6576e20"
            }
          }
        ]
      },
      {
        "id": "2c4712b3-494b-49ec-aa3a-59ecc27b2ae4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e1b15406-2286-49bd-a787-0e3c47bee5d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "87209518-2308-4c77-86d8-59110bc632e3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf41c192-cf3e-4b3b-8e61-b86f84524f06",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458eb66d-731a-472f-96a0-5206be597f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b87ab48-30c0-4187-a361-413c062c1795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae9d87c-d557-42b2-80b6-60b6bde5311d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b29d50-e394-4392-b752-880050fc7f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48a407a-a7b1-46f0-9093-dd4206d0148f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b8a5f8-8527-44d9-b6e1-55381b2d05f4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cae3d2-5193-47ec-b19e-5d2055483fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f75f79-e432-458c-adff-9c329f0ff904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6726ae5c-f5bb-4a16-a74e-10cf6ca9fcd7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3332567a-62ff-4061-8db5-82565882da9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db723df6-d696-4cbd-971a-c117d2caa13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef0cb51-830c-426d-aff3-9ecd03b42406",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c16850-a85d-4f4d-9037-9d0c86251090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec17d31-fb74-4f6f-bd94-811dfe6ec8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b2b1cc-4ae4-41b4-9b4b-f55aff2042ed",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a465b47-235b-4567-a907-0116538256b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2815887-b6f7-4a22-857d-236f4e523c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a3d2d0-e3dc-4154-88a4-92129890d017",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d637d6d6-d1f9-4b44-b552-a5ed10c43999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d6fc5a-6412-42a3-8273-e61887bd122c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f57de1-d808-4d2f-bf41-1e4948b682cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f8b383-974e-4344-8db7-ca3c9d8b85fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916bb411-7154-40ae-8aad-6fb0b6074e60",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f40615b-2b7f-4c2d-a7c1-288352022611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6bd817f-8ff0-4a44-b985-92646ef84dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b656d1c0-4ab4-4a80-9a0f-45e5c5417633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a09bd98-997f-403e-8bc2-60d4a937af9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ee49d3-b116-435a-b5dd-38be256e9739",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a909b51-c6db-4b18-8d8a-cec9d154d6ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d701d246-a956-4995-962f-29e084140d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a284337-4d12-4574-a4b5-8851e577bd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11394895-b130-4803-aa4c-c2779e7bcf01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e4c3b9-f033-4f4e-bc50-255c9b1fa092",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155c5334-b204-4c8d-9d1a-eecc7b4ed56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5fa1553-7712-4b30-bb9f-05f94e161f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abf720a-3fb1-40ca-92c4-dcdacd8de040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02312bf3-4384-46ec-9a87-1924333e5876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278d6b66-904b-4545-b8e6-9af63dabf70e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea40560-bf1c-4443-90b6-c85c2ee2eb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5617280b-bbd2-44d1-8567-90793947add7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51825d8-c7d3-4656-b10b-da71c1d65d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667af37e-4606-4b89-8d8f-7972b024d9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2135867d-119f-4eed-9290-7ad9396b4244",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33829e9-203d-4817-857e-5cd3f35dd3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184bf50a-0346-4fd7-8a7b-5991e8897123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b38e0ca-6ddc-4a28-b799-eb876340a032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2723243a-dabf-4cfe-b6d0-be012f921060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee06b6d-6022-4e4e-8a40-9a16e039d1e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc32064c-025e-44dd-97cf-4c798746f641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5dfdb0-d33e-466c-8db6-08d40c4abe63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f5e569-f719-4a32-b394-6d925b895fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99efc0c-09b2-496d-a472-d32acd75f29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccc66f1-c09c-4ca3-9ece-b635b0e967e4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d48e77-9a2b-4279-9124-87a3bffb9693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed2b392f-2300-4214-b39c-e4881b699080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae702eab-19ab-4c43-80fa-3e4fc741a2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d317451-1c2b-4784-adc5-c6d5fba65c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a147efc2-0910-4fb5-9568-79c5694f4eea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a563bb-ec76-4659-ba5e-8b43617f8e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "872a3251-1fbe-427b-9754-bb376f42e641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee60e6c-bed1-4719-b530-dd7289912723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bf326e-450f-4311-923e-cfce15cb5cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af8a910-9000-4270-b73b-f7b6769655b3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d3cd96-fcce-43e9-bc98-3e5a91642e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936854a3-f747-424e-bec8-3c027076d4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75f51ff-ec89-4945-9062-bb4dbe8ffdf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c052ea4-7d84-4409-94e1-54aaa4eb2d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc337941-ae39-4ef4-91d1-f6013eed7c09",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea1a2fb-73b7-43a8-ab2a-3b567470b44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670cdc79-7ff6-4c43-876a-42e461c81e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc91e25-02a5-4a8b-9dff-89ef1db49d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b2ee70-5eb0-4d91-a18c-fe09a8ebd3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f03a42c-c3fa-4e27-a7dd-30c74fdb0696",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65ff7b4-7a71-4a3b-8a5e-caa10a14c255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5872cc3-1584-4f36-800d-d466167a0775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7818ec-e274-45b9-b193-c9c3692e19b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbca5eb3-890f-48ff-9825-082e4c302b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08247c3c-ed21-4eb1-8b42-8738086b1370",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca8667c-7d8c-4d71-b1ee-c0a600014026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3460e57e-b0e7-46f9-a87f-6ff2cb94e769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be0b361-a361-4214-8d5d-90056fd7a184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0929749-224b-46d8-b4d1-2778623cfe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9926d9-1011-4418-a7d0-2f95f9ef3b8d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b20cbc-194b-4494-b02c-09f68b934b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8c7ea0-4aa1-4d8d-8af4-d0f18ee8925d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca1877a-3e9d-4557-a617-3cd31fb7c38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc0b76c-3fcb-40c1-9de0-342d6cafc6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464d9204-eee8-4691-a136-8c2f87d16edb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0f4093-e8e8-496b-ba71-a86550bbb5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77a1577-bd51-4e70-8536-3ce838e27ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a955bd85-166f-4b8e-b75b-fe307348aa0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b72660f-f43e-4664-ac84-1f74cd09fb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9e743b-1dc7-4833-91dc-7bb1ccf5a3db",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b50910-4c7d-42a9-88cd-726da41e3c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3c6bf7-b3db-49fc-8450-bc2a73c5dfcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bb4f7c-adcb-412f-bbd5-1b844232a444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd499fed-4542-4a47-91fd-c17ebeae88b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb95d0f-e276-4d52-b0bb-765d7e22c02d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c4b009-0b12-4bac-be5a-89838097ace6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c07b561-f170-43a1-b41f-9bb07ec69a1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3682927-e914-4fad-9176-2b6c5b1e485d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd43fd4-7f3b-443f-a38a-4cbb2f7be008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05923879-3fc6-43a1-97fd-5211dc3400ac",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7629f992-0680-40fa-beda-acc573c99b3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51edff6-9ac1-4081-8f3f-394d5f1e50cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b783d2ab-60f2-44e0-bb8d-31054df89c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f801c095-4140-4c18-85cc-f850f6327f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4c775d-0628-4764-b266-bdf20b4a8428",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb601fb-9c2a-4e26-aef0-4baec6021d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59d180b9-9e29-4020-ba45-4220abb7c21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b04339e-159c-4191-a1f5-fec7ccb480cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbb9959-71c6-4dc5-be8b-b115051eb45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb145733-9c0a-4121-a037-7b2624be75e3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b3fda9-c99e-4fdf-a48d-897361dca3ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e495d57b-8963-4167-abf9-20842b41d62f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c776089f-6f20-47af-8e8e-9f45a7e88f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826b6f0f-2430-48c2-95a8-c69973ca4c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19e3aef-b0f5-492f-b585-7b3c60e247e6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebab30b-ea0c-4e76-bac8-b75a3f938e62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81bddaaa-ca17-48e7-95af-aef08b4e189b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bad2fd-9849-479d-af3d-a3f529bc30a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8ef610-2930-4d22-96d9-3a2d9e539cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9eeed65-7dc8-4c25-a3dc-5488c703826d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28e05c8-2ebd-4cee-9091-8c4d75f97e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd2dc4b-e110-400e-a51d-fa1bbf80852a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d457aac4-25d8-4a94-9de9-74797a0d7769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c650af5-66d5-4d07-8ae0-f7d2b6ef3cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b9bd3f-2031-4e9d-9569-a79d177f6f84",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1512c902-eca1-489e-8950-ee1c83de67d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40ef6533-cbcb-4486-af1c-61227ed4c108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de178d2-2c3f-4092-92a7-7435df3b152c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b12dfd-f347-4c58-9706-da9a75b38657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6db340-94b6-4ede-9986-a68811a36bde",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824a7f85-0fca-4904-ae72-57a1aa103a11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede78a7c-3f87-4c6c-aea1-43f478e00f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215ed734-86b8-453b-ac95-519b10e022a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a7b99d-4b09-45c5-af3d-f10221c595ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26017d1a-cc61-41a9-86ad-68a17c759b74",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827d12de-3a75-4729-9e84-6f6676e6ce8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "769376d1-af4a-4890-ba66-d6fc342936de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe1989f-997d-4262-a1ee-f8a235017e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1c6f1e-4fa5-45a5-a259-e03a953df9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76c5456-35ae-4ecb-8db7-7adeaaf78024",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbde3d8d-66d6-4297-ba2d-ffb4b97b3493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aabb831-c199-43d0-8aab-af2a175d0ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfed0887-624a-4900-9925-53657745996c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fdb788-3b34-4d35-b25b-480f4bf0a6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5fecdd-04ec-4eb2-b238-87f3aef8b9ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37122f5a-3196-4487-9d02-e1cf27468515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e6d4b0-3df2-4845-98f3-c819cfb0fa3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f84e2d-9456-40af-a319-6e38959c07ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b310fff8-13e5-4767-9073-19b9ee3639df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b8d6ed-6e55-44fe-9f06-22b9d6a163ba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80a2a98-e689-4af3-bdd9-b709a6d63de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c9d51e8-14c7-4cfb-b9e8-d1fddd8f7fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297ef04e-985d-4c54-a562-d7cec55b2b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7457cd9-faf3-4fb8-b911-40af5a1d00c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a952e5-5b7d-47c0-b005-428e6f6eb5d4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c47f99-4a42-4840-96b4-1de3d810e7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caae9043-7c15-4f45-8566-2c7582542a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05366f4-91ca-4e21-a9c0-b0e7dd222eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777545b9-ba4e-4f75-960c-4d68a90ab218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c3db3d-f215-40c0-ab7e-8a6a1ebe768f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d6d938-9c4b-41cd-85aa-3f5b5fd5ecae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4a142b-bbfd-4237-95bc-4dc2ce7f9a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069f3d79-5a98-4b04-99aa-b9ab034a53f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098a600c-bbf8-4421-8b89-a00b026c5497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6146175e-2792-47e6-b48a-b87d723cc694",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27f80d3-847a-4442-bee2-043899d9ef20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f5f4a2-ef5d-4d47-aec7-1aea53ba64de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefc21d2-01b5-4a82-b76b-8b4718238013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49728054-8a9f-4827-aa10-5644f3561611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbe784a-56c1-4ae1-b833-f1e7d5135893",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884ff775-4db7-4db8-ae4e-e915a99ee1b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bce38c-1731-4f22-b0a2-46b6d8b81d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56c5d2d-34ca-44b8-b780-0f7a38769359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfab5ccd-2005-43ce-8ff7-d77430c1da4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8978d04f-0f70-40bf-9767-59a8f34923e2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edce8c05-c204-4548-8abc-c5579c101474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848c5fc3-7a04-4c8f-be73-337164dcb6de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea90cba-2ed9-4e8a-bf4b-d4a4eaf567d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a3320a-4b50-418b-9bfd-db34a025dd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15400fc-5786-4e5b-b192-4a704ff09cf7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e58dba9-4fe2-4aa0-92d7-abb1a4780b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43144d43-4d35-4282-9034-faa2a907e203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6542c283-5c9d-420f-8b10-a7f94667edd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59dac0b-3aee-4d0e-8146-4251b3cb1ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b117a05-3c9d-4d57-ac30-7cb32edf32dd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79526155-dd09-4034-910a-34c20bfb4325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5842e9-c2f1-4281-b334-5fd8f36bdc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7acb607-26ec-4740-acc9-0658cd61c12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b743a5d-5f65-40bf-ab7c-4e5c0c5be006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47329568-15f8-421b-9e0b-eb9b6e102169",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f469b5-1870-4822-90c4-ae17fe52b062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cdedd9-a59f-40af-b86f-438e8b9758e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33953b0-83df-42f5-83ad-70b985e57dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afbb87a-66ce-4086-98bc-db5aee1242ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9336af7f-2b0b-499b-aaea-b2d2a83c7aee",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72476d9c-9342-48c7-95d1-f28dbc70eb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bb02f3-ef0b-4ff6-9464-aacd961ff96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c968db-3e7e-4cae-98e4-756086b9292f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403f690e-ea34-4bf7-99f2-824ae31cd57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf739389-f7fa-4c45-92f8-57f7b70027d6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c894cdd-273b-44ab-a4b9-47f2c0f69757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4714e3c-c1f0-4b93-90f2-5b01d34cfb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dfe5a0-cd25-41b5-abb9-ee3e85faf156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322baeca-c5ae-4b98-aa95-ff1de3346642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71437b4-942e-4569-bccb-4a4027fd8e3b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2135df4-8653-4ee5-b4b7-2e1f1d371efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e7ceed-012c-40fd-9ce9-342b794c352f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae95bfb-0f24-4eb7-b6c9-53966efba6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6282d3f5-0f29-44fe-818b-04eb82661358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ed8db5-a830-4dff-9438-47904a2f15b0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e7e8b6-5339-409f-9b74-6165f1ff0ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80f0471-bf76-4b02-a249-78721d6cd6b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447aaa3-daf9-4e32-a78f-174fa7f09d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf17d6bf-aa67-4820-8c4b-d5977ee59e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a086ee80-6783-488a-92f6-207e3aab8e05",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22477837-8c4b-4705-913f-dba476bcc6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a93f5e-923c-42fb-adba-9ed866003b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9f7efc-5f01-46c0-a4ab-f10d7ffbdcf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d17cc0-28a1-470e-9386-0b09d7e460a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3e1113-2a1d-4e39-aa1c-b3221516c26b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc458656-9c73-40be-8976-ec7e6469a3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72eab2f0-6594-4bf9-ad02-89d72bccecdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf57f4ce-17bd-4bbc-a4c8-6d1a0692634c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bf9d13-1291-42f3-b27e-7f92bc68922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78c2ee1-d5f6-4b50-8dac-08ab8362adbd",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e70374-e516-4972-b744-7b4ae1baf36b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06300967-79b4-46ab-b020-7befb3d3e964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b899e7cc-f778-4f70-b244-1a8194177dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ba9bf9-5013-4a2f-b912-013d4bb7daec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef5ea37-fac3-4c2c-96ca-109787a2c364",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678e5b14-5542-4d9a-9fc0-1d181656d288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad8e091-2d13-447a-bf46-d5950f3a313d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a93490f-13ed-439e-87ce-febc171ad881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9decef78-5e46-4a5a-9fd4-dbf01ffa0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed46e1c-1ace-48b1-a1ce-8d75cfb762b0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6055f52a-f81c-4131-908e-353e65f596a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06642bbd-a866-4136-8b64-b4a166ffbfcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af0c865-1287-44ba-8274-399de6028bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbcf7d50-b83c-4fda-99fb-a191a1814264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebed5cb7-7b42-4375-8fde-45a200e848e8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d647ae7-3300-4b1e-b035-d435f91883dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec746a8-6c7b-4d67-bbfc-f19b42e2c83c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb40661-a33c-4f0b-be13-f92cf3d7e6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c21d91e-fada-4bb8-90da-03bcaa6392f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0213c9b-d186-4a37-90d7-18ded149b235",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b428c30a-e862-496c-adaa-ce1a1f550642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f415fbb-aa63-4246-92c8-93bf59d2b7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1736955-b58d-42a8-8e21-83dba28e58c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ea773d-0e76-497e-a0c2-dff3506e07cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7475a7-0bdf-4e1b-95ad-ff66c323c558",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30bc47f-6891-4c37-9d55-4e453808b9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72c2ea9-1368-4f51-a252-b10adffceffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd5abbb-cc6b-42f0-8fb7-08ae42e30ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945906e1-a3e6-40fa-9a2f-3ecf7c2d3af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440e8deb-985a-4ea5-bb82-13160646a0f1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6f1ec1-1736-468d-8135-9152940e7575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d653da2-3cfd-4415-b1be-f1d40259de43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2c2bdd-8adf-4c58-bd09-0c79621bee51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f3e5fa-1c0e-47c5-8ee9-3b183f1795d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afe3364-ffe5-43b0-97c0-7104d0a8a40c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb07013e-4fe1-4538-bfe9-5aa72742ef22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fe681f-9c2e-4dd0-9138-4fafbf91ef2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623b3a81-37ac-49dd-8687-13bf354c37b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6091b997-47d1-4972-b52d-a5e77eb18bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a321394-1291-4be5-824b-e8cd84e15760",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deda236a-589c-4489-920c-7bb2d3f877d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a4e038-bdc7-485e-8285-c86de40725a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c22553-985b-46c8-a404-1b120a1a26ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ded8c7-a112-4b73-b1ac-f23527d21fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9680a5e-c3a5-40a7-90b7-863005548fc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aead03c-f08d-4d61-a0a7-de08e29cdae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e3d1ed-3286-4d57-9360-60baf7a667cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e784af7-9f18-4430-9c02-2d6b9be2a0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed36d49-973c-44e7-bd5d-5c2d8a782c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1996cc70-de5e-4922-976b-fa17991d6741",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b0d2a7-363a-402b-8d13-cbd0bcddc721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0c996e-091b-416d-b9dc-edb7197a597c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d594de43-fba3-40a6-a8b4-8d30abdcd647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b78a7b-b2c2-43db-968f-dc30c75ce9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670a73f5-64cf-48fb-888c-b5ecd9bc4b41",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adab7b9c-233d-479a-b414-7d12f849a4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab35167-2e49-4475-93de-dc8f4204e094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fb99b3-73a6-4e13-9cf4-1927dbef482f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717341c5-0fcb-4f0b-afe0-bb39044f6c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd2d15f-b3ba-4a64-98d4-897175f3f53f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0d57e2-b4e7-4f23-84ca-915898625a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a124eccc-edcc-4e29-b70d-620f802b142d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8588f-d51d-4c2a-ae2c-c06e7e17547a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b26017-a30d-4b75-a7ce-e8c236768274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d92d49-23c1-468b-9e90-0da198cfbe8a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3d517c-4dba-478f-869e-8f92fc3503b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85b1016f-9f24-4b81-a829-f64126a6bbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6477e7b2-21f0-42a6-bc4f-4c171cbad246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f17f2d9-4f10-44a8-b664-c2d0dd3ba9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085e7a8d-9632-4894-a024-19421591f93a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcde8a9-f3ac-4519-a54f-666fc8aed34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75a3078-b6f6-47ed-aaae-d1fadaecee97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e851757-e49c-4eda-9ad2-676bf392ae70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2deb99-ff56-4257-b87d-72b68d8c5276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68768f9-570e-4e86-8726-f698439e0d59",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cd82b5-c17a-40c9-a112-52d4b81ea11f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "177c889c-0c98-4a10-a779-97ac8dc8e873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cf0de5-eca9-4f04-b640-eca0c0e4a4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1ff058-1e7f-46ee-901e-84b5e8da0eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172adaa7-6cd8-40cb-b0e0-fc49ca89fcdc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0c12ae-3d00-4f65-bf7e-764d17ae960c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7f0cf02-5d89-4084-868c-9d930fc65d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "478604d2-ba48-45b3-86be-a08b607d0172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf9f828-23c1-4af3-a407-2c27b748a39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9dc5fb-3044-48e3-b048-74f7a8e03732",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7e2733-9c9d-4071-9132-5900e9c19017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f65a50d7-856e-4a36-8692-4dded47e650f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcb9f99-de08-4e70-bff2-9aa6b314e237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2985254a-cf12-4fd4-9520-d2d233fefac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97a84ef-2623-4ddf-8b48-76fa70372945",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5d2a90-5c60-4c0f-9904-8e690cdf1df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a99f106a-d745-4f02-8b06-3fad5d1a926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa39d6e3-03c1-4c3e-9f52-abee6489fb0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89820a62-5929-43e0-a8d4-f5ba393d5db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dae67d-d355-41c4-8f5c-aefb87a328f6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef7dcaf-0689-4141-8f01-19b06d0a9d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "090befd2-53e9-47ad-8d09-b8440844d4ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73321508-5e2c-4d4f-bc78-6ca5152284f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dd7b17-bb63-4f17-a782-a73a26fad88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde0a3bf-6d9c-45a1-9c1a-36824abad34d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e051141-f9dd-437b-b408-03fe36b5a203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1785ac81-b263-4cae-8f9e-1c0224739a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a3a2e9-3480-47b4-b81a-728b362432e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61fe91e-6061-45db-8331-25a9b978f1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafa6579-5066-4a9f-b50a-cae2a2bae55a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00288eb-4988-4d86-ba4a-a9e899023f3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "959a79be-bbcf-4f31-b47d-bacd12acff97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f153de8-a55c-4190-a35b-c36859682da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48563869-d42d-4455-912b-ca10eb897a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15eeaa93-18e2-4e82-85eb-180bc0eb7613",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f92dd8f-14d5-43be-b2d3-de77ca8893fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a06f2c23-2ca5-4ef9-ab42-6f9d616dade2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ae823e-dfec-4143-a1ea-c9592140b08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27ae071-bed6-496b-9cbb-3fdf5a89c159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb55887-dc75-43cd-8c65-ee98dd711dd3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7ce404-5347-4280-a55a-8e690be1c2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14b48ec8-9e13-4345-b73c-88cd00ca9f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0ecea9-ce8b-47d9-b81a-1c45dec0e512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97634afa-df3c-4940-94da-0c2a47cb63bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c8d589-eaf1-4eaf-8ad7-a44a4e5c38ff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d098e4-698b-4228-8b43-b9673ab227e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae49fb38-6dec-49de-a31b-0281ec434f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195d9b30-7a25-4bff-ba2e-9f53b04c5199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cb1564-8bb1-412c-8804-546b7586523f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4af65ea-151a-4008-b92d-c74076606c73",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9e99b6-e33a-4939-a098-a64782ce55b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9bbf91d-45f0-48a0-b13d-6b635af5a82f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb85c60-fd71-4c6b-8924-1305456551a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c65263e-a043-4ab9-b3ca-a5e3b87aa32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75add59-08c6-40f5-b5c5-955a30949b1e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906b7758-4edc-44e4-962c-77b1339b96c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c9cb762-5605-4a71-b86c-3537019b2969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e04120-48c7-48c4-8b74-19a4792b0287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740f1dfa-902d-4cf7-9bc5-2a4372a1d330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923db35c-9f16-4f7b-905a-07d332011e52",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8d8e99-9f44-46a1-85db-1e30f9c22c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ec6414-899c-44a9-9b6c-b70b2ecc56b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b6935c-9bf1-428f-add7-e1b0173de00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9fd120-8140-42e9-b291-9319e0f0a4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b5bdf6-a478-42e3-b922-d232571ac743",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5219f562-87b3-41c1-af6e-295b020bc8d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16a66dfb-6137-4da9-aa17-68fd80f50ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec70d8-0e58-47ae-be19-351f794664ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b33820-36f6-4cf1-9b60-080b0063f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0937f98-05ee-4b66-99ad-b64bffb7a2b0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227f6d74-8bb6-48e9-8d9c-9a19e0bdb75f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4835ea58-2d5c-4aa5-8486-aa332ba5b89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b964433-b2da-4c36-a1a8-d8810a10616b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb35b942-9e5d-44de-9275-f865a9ed16e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0a5c63-93bf-4b93-be83-387b52b81c91",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d279eb3-bb44-4e4f-a9cc-8c40ad1b237c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95880767-b7e6-45bd-a954-062ae57b53c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbd59a2-8e35-4ee8-b59a-6e284bb1c022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "321ab5fa-cb4b-438f-99d8-e0ff33d05205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7142a6-822c-42ee-8f0c-96a2a4b62f0f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a686a-e0fe-47ca-8bec-140c3c6379d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8394437d-7814-4447-bc13-ea7f8e3d852a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e09c82-9381-4e3d-8c0e-698dffc5dcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eddd2d2-c8d2-4f7b-afdc-3c11cc9ec170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8e27d6-0fec-4339-83c1-2b269c1e44b8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c76171-bcd9-4115-94c4-514255edf2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dc4a4f3-6df9-40fc-ba18-d01d0c0e4dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f147c348-03f3-4163-8d76-afd51d4c4804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ba9420-e3e6-45e6-887d-b52a009e66d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeae9f96-e786-4476-bc62-67e1fb7e5b04",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c97f0c0-9154-4da2-9523-cbd200f94b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7c3e39-9722-43c0-a6a2-f0e4960c5ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c4887-c74f-417a-b853-515c0efc8260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9408b63d-4d89-4838-b460-dbb14cb107ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3d1ca0-9ddb-4aa6-93d1-ea23e22dc2b3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006fcef2-09f1-44e1-935b-a9bb740fc643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d844a4-f886-4d4a-bbd6-0a7a1de48182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0891f668-b813-4b36-af89-692d3759dbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c238884e-b259-47a4-9d25-536d28b78755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868b4df9-cdf9-4912-ad7f-0fd20e93002a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d518c4-e874-4004-8660-a32a677d1493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2edc99c5-155a-4f43-8321-60ce5ede6ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef506092-18f7-4e8e-acc8-93cac88383b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b01e67e-ea92-46be-b4f1-2519e189b9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ba9965-cfe8-4e0b-bf6d-edace22cdb5c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba446da-bb1e-4c49-b0b1-24b95317ec06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3631a0de-20b9-42f9-ad8a-3f061174e911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4512a97-2959-410a-b3ca-deac80bdf12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0768f8b-5313-4feb-8e9c-10b555e29d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30701d86-0058-4030-a106-a42c92d4817d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c24cf6-6fa7-48e2-834e-62c291a7570c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89be4aa1-7838-4e7e-88d2-cd7b6ec0fe81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcb13e6-cabe-41cd-af31-aa7eff12aa71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de1e387-759c-47ce-a0bf-b763ec0a4483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad69af4-bf95-4fea-8648-12d1b6ba8aa3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af7a6b4-6da8-4601-873f-ad12fa272385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d351caf-f675-49bf-94ee-d30f6391e958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43be738-fe39-4e60-bf37-b4eec3e1c3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a001f9-bfd8-4d03-9d97-22898d09adc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d51999-a216-41b1-a219-09b9229591c6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c115cb-0ecf-4d05-9253-5969de989654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4330f558-e6ce-4e6f-84c2-91728b77b1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428f7837-d252-46a7-a465-730ac981b8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829cee58-9246-45fe-b4b4-cc7c6f0d8a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dd982c-da5d-461b-871b-589314c03154",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eff03d-684d-425f-b48b-314b716091a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6921e5f6-59a9-4fd1-97e6-7912dcf4c2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86710d0e-db38-4466-9589-51fd7b8182b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab6a001-e54c-4da5-93cf-da874af8779d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c79c467-4944-4075-9120-49af80f19072",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d090142-a2c7-4ba7-9dda-5d5738d2899f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d456bbb2-26dc-4087-8721-c6b3c9ce4838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eacdfa-451b-4c5c-a802-0ead4f9d2d11",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747189b0-b965-4823-a967-32dce9b73bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82471420-1dc7-4f12-ae90-b8f8010c3045",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06076dca-03e3-4ebe-8354-6171eeb77d62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679211ff-6539-4ad3-bc5a-f7e8aca781c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef84557-a948-4b7a-8cef-5d8b7d9bc5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddef54e9-1fce-4403-bc75-d0abc74409d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd945730-52bd-43ce-be7c-3863ccd43158",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9d4a8f-fbd3-4623-84bd-fb55cf7a9744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a4bb2a-652b-423d-9b23-13c6b1ea7f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2109bfc0-9a87-4f0c-ac20-fe18b961dd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3443ddd4-2b94-4591-bd26-fc9a5c9ea966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43021b35-e3e1-4873-9a4e-6ddcdef11f8c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4683875b-1452-4160-bcbd-98e57b525012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2582d8e-7a8e-4ba0-9664-42972750511b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9a43dd-13f6-4f26-b569-60438c65173b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08181fa9-c82d-4dac-abd8-d6341f5ed110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72eb11de-ca5d-4164-84b2-78cbceda1d8d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3330cd1-2fd4-4a07-b460-e4cfddaf9901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9217975c-fada-47b6-a25f-3c20ff3ad8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8a1a73-cb87-47df-8283-664694376b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b09019d-4205-4b7d-9858-e370fa5c73dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e504ad9-c6f6-4d69-81e1-eeb7ac3ed8dd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbdde3c-00af-4869-b635-ef5042db6739",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07870be-a32d-460e-8a00-fd089cada23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba587c4-4bf3-4057-89a4-7ee82ee27c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f5da9f4-dc6d-4f38-9300-63b3d9a701e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c69d01f-1a4e-4f69-ad52-8a75ac3b02f0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7361dd9-4549-4c7d-babc-92f7442d0766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "debee3b7-cbdc-46f7-866d-46e5c6878db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1559d887-082e-4717-948c-81691e83a6ab",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd88d04-95e7-4719-95f5-86c74acca7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9057e93-1db9-4686-a3d3-fdf5b8b2a3b3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6611ecab-8e2b-406e-81e9-8f24c02c8410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83eabaf-c71b-4c82-9f36-4791e0a6e7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59bba1f1-827b-499f-b296-96dd06206555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e607ce10-24ae-4386-aafd-204b9962c926"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1efabd3-08f8-49df-ae7b-5ace55308b9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ec92f2a-111e-4ee3-9f1d-21a481aedf42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5557142d-e0ba-4a79-a83b-7e88bcdaf328",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "214e0429-278a-4271-8ddc-af9a5a2f8c3a"
                    }
                  }
                ]
              },
              {
                "id": "42860ce5-350b-4fd9-8eb3-4f4ddb075994",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c92c87f2-6f83-4870-a15e-bab193500ba7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84d1a57-fc60-4b51-8a45-f7c4452d2ac3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c6bbc98f-fe5e-4035-8819-a7ffcd1cb08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00d9935-cdd5-4617-9e6f-af63f9815fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d6d71ce-209c-4eee-a888-f95d5d946555"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9644d49-ac0b-4e01-92be-3b440abbf581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0647fdd2-3090-4188-adf2-611a462f7fa1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acf56416-b7dc-4138-a504-5625819cc3a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61285fa5-b322-4b42-98c6-fc38c01771a8"
                    }
                  }
                ]
              },
              {
                "id": "6ce84c50-95f2-41ee-874b-3afc5754df13",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c186ed20-f38c-45ed-83cb-9bd9d2509dc0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a22ee6-af0b-431f-ab99-265282e4f80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2f8b4c15-d3a4-4ba2-a601-3529d8562c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a5eafe-1cea-4356-8fc7-d112f1fa1732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bba8cb-f297-431a-9681-50880d14afbc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d790bcaa-1410-4452-9ca3-4fc193537b6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da8fd290-a5ff-4c32-b2de-77be3d365583",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d0d7293-db3c-4eac-88b7-2f2cda4feef1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e7b9df51-a0ed-4bdd-a852-c12e8bc5b845"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "699cdc5a-3288-4671-ae48-359c3b2c422d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec6f2a40-3f76-4ddd-bfa2-ec9f5ae81edf"
                    }
                  }
                ]
              },
              {
                "id": "06600f61-6618-4e0e-abf1-bc25ae24101a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d07d0096-f322-4256-81f9-fd84204426ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a61b1de8-92fd-47b3-a37d-a16b1a9a3163"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "671fdd4e-25bf-4f1a-bb7b-8cf147b01386",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db47d3c7-5bde-4f96-890a-6b1d5b03755d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdbb3bea-fa03-4e5f-95ba-aa18d28adea2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cca16b82-e717-4f98-bfa7-bec3f5975981"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "881f6412-0a7a-432f-9e09-32576f150f1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "050dd7e3-ce13-4fe1-bfc7-b5ba3785079b"
            }
          }
        ]
      },
      {
        "id": "9a66fe9b-c81a-4401-b533-1c83d7b5cb3b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1ae80d85-acb3-486a-9172-c61777f0c6b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1193e63a-4f52-4bff-a63a-6698d6478837",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51c09e54-cea7-42d1-8de2-f87f6aae2039",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc396b67-687f-4e7d-b4dd-88c7288c1a1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45164794-4d33-44f5-a873-342bf419e178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01150ba1-a19f-497f-8031-01fc1ea20621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49e1d960-4508-450a-96ba-eae2baea7950"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c2b4dfd-d134-4fad-91d4-91c8acef38a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "519a449c-38b7-4f2f-a7af-b4fdd53dca8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2eb26436-a65c-4e21-be3e-d666cb33b779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6f1db5a-2485-470a-97e9-7f5643b08eb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "243ddbd4-8d93-44d9-a576-62a9cea15208",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5565fd0f-d52c-48b9-8cba-90a943b2b76c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20220b49-7607-4b0f-87ba-d9404017a416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95f8a95a-d0bc-41ba-bfbe-b4606e311dd9"
            }
          }
        ]
      },
      {
        "id": "894e488e-0062-4b3b-9158-8036132c6827",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8d1f5e8f-69d0-4c01-8d75-b27836fa8d75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a175c72f-4fe4-47fe-a6a1-333998c0170b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "416d290e-e18e-40e1-84ab-c22ece24c657",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9079d5f3-02c5-424e-be22-36548f0779e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0f8ff69-515e-4b36-8606-b5298fe85704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea3d40b-f09c-49d0-8f8d-deac7f551249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e1acf98-01a3-4104-ae30-0cea843f9c69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b7d3d64-145d-413f-88e0-40a37d099572",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa779f6f-ef71-4e58-bbf8-007436aa1161"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a79f658-5413-4155-aec1-5015c4435282",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce7c5907-aaa1-4742-a962-a9777306fa09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9aba513c-7efa-480b-bb93-2ac61a2691ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9e7ed124-6cbf-4971-97f4-94907c492bd3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90eedaff-782f-468e-939a-e189aa2231e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90106612-2029-44c4-8e69-6898c81e67a9"
            }
          }
        ]
      },
      {
        "id": "bfdeea4e-d34e-416a-b5ef-6996e77da578",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "62f18c53-a2e5-45b6-b2f4-c56855eb67f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed2b5e0a-0cf2-4b28-8984-41877cfc125e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75461d8b-70aa-4714-bd19-6ad414d3d413",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be385b-019c-4e06-92c3-e54e75cf9108",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f56e28c4-a615-480e-b7f8-e8cc205b33c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aea658-1a9e-4fa5-b21e-4965b298b7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eb6b22c-9fc8-4d4f-843b-467b04066a68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "112ac784-4089-44f6-bcee-dd780aab2efd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdcc54a7-a188-4051-a592-93e82ac960ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed200a3d-21b1-49a3-a052-5ef17cc9fab6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61365ca4-d22e-4d09-8bb9-9e121f0c9928"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "962d1d5f-3b17-4015-82ee-b229da3d7e19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "41044f73-d76d-4479-936b-b7d9aa59f4a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "477a620e-f7ac-4102-9a8e-3028eea27a4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86bcc3c3-22d5-4400-af74-8ded9dd2d12d"
            }
          }
        ]
      },
      {
        "id": "ca542a32-2d55-487c-b8a5-19204cde4900",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ad21611-9756-4f5d-a606-8c60d0d17dd5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b058ad7-12e4-4281-bf65-39e7a47661a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d785d9d6-8983-4275-ad7c-a43d0189f631",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0b2c763-44bc-42da-b197-83d6e6500a53",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a93db630-8af6-435a-af80-0b01d16fa084",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 115.218253968254,
      "responseMin": 6,
      "responseMax": 723,
      "responseSd": 80.20749371315017,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713314100890,
      "completed": 1713314138595
    },
    "executions": [
      {
        "id": "4468c463-fdd0-4711-975d-34a52b9d66d4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2bd6e1e2-ab0e-4f5f-8ebc-3203f7950d51",
          "httpRequestId": "d4f2ab91-69f2-4b1c-8301-b51540ac2faa"
        },
        "item": {
          "id": "4468c463-fdd0-4711-975d-34a52b9d66d4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "78b71d31-a0d2-4ec5-95bc-6c6a11f2e48f",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "c6697179-2c26-4651-8fbc-d21bcc6e255a",
        "cursor": {
          "ref": "8364adae-c295-48fb-ac16-828f121ec909",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "96dd0118-f731-486e-beef-a342d5a6b954"
        },
        "item": {
          "id": "c6697179-2c26-4651-8fbc-d21bcc6e255a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ae369a4a-553b-4999-a0fa-1bdb923c979b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b9dc8a90-a50a-437a-9400-b116953b3c40",
        "cursor": {
          "ref": "d45b716c-f055-4f0d-8696-5bb9b284111d",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d68e1e5c-fe9f-49ef-99b8-ab7e731392f0"
        },
        "item": {
          "id": "b9dc8a90-a50a-437a-9400-b116953b3c40",
          "name": "did_json"
        },
        "response": {
          "id": "f100394d-4f71-43ba-88d0-45fbec37508a",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34461f3a-76a3-499d-af5b-5a9e3c5e4a3a",
        "cursor": {
          "ref": "ba2bb146-c28d-43f9-b926-cc5290f54e03",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ccb095a4-cdfa-405a-b23c-5d3bc6d239da"
        },
        "item": {
          "id": "34461f3a-76a3-499d-af5b-5a9e3c5e4a3a",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c53e13d-675d-4ab9-b20d-8e1c3d88116a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34461f3a-76a3-499d-af5b-5a9e3c5e4a3a",
        "cursor": {
          "ref": "ba2bb146-c28d-43f9-b926-cc5290f54e03",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ccb095a4-cdfa-405a-b23c-5d3bc6d239da"
        },
        "item": {
          "id": "34461f3a-76a3-499d-af5b-5a9e3c5e4a3a",
          "name": "did:invalid"
        },
        "response": {
          "id": "9c53e13d-675d-4ab9-b20d-8e1c3d88116a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebb5446-bb0d-4d46-8661-391655874a39",
        "cursor": {
          "ref": "9b4ec4ae-3b75-48d8-bdb1-f09eb069673c",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ed9f3d68-3698-44ec-a69d-8d7e8a80e3c4"
        },
        "item": {
          "id": "4ebb5446-bb0d-4d46-8661-391655874a39",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8cb445c6-21b2-4881-bf13-398c63550705",
          "status": "Not Found",
          "code": 404,
          "responseTime": 169,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bc8916-d127-4c13-83e0-97f95ba53bc4",
        "cursor": {
          "ref": "56ed48f6-bc15-4dc2-bf42-861570ee4ff7",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42da7ab7-925d-4353-b81a-2d90e35ee3ef"
        },
        "item": {
          "id": "00bc8916-d127-4c13-83e0-97f95ba53bc4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f4e6dd1f-1d59-42d6-b021-560e0abcb8cb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7eb823b-35b7-40b1-9175-cc904ebe61f9",
        "cursor": {
          "ref": "93d0f334-4fca-4158-b6a5-07324a64ade1",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "74f9a11a-410e-42ca-900d-fe05eb5923ca"
        },
        "item": {
          "id": "f7eb823b-35b7-40b1-9175-cc904ebe61f9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0a56990f-1d6c-4848-87bf-54f75902dad5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c4ae05-ef4a-4a67-847b-ca0f67a57d78",
        "cursor": {
          "ref": "3a522cd6-06f8-4744-b43d-ae140c5933d1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b034d0e5-e6be-40ef-af41-5037b6155cba"
        },
        "item": {
          "id": "63c4ae05-ef4a-4a67-847b-ca0f67a57d78",
          "name": "identifiers"
        },
        "response": {
          "id": "10740377-2173-4859-973e-d35b8e2adedd",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247138f5-e4a3-4b8b-bb6d-66db1e08316d",
        "cursor": {
          "ref": "82b6f064-a9ef-437b-941e-7ce26c5688a3",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7ee1c0a7-87ec-40b4-9630-88263c72471e"
        },
        "item": {
          "id": "247138f5-e4a3-4b8b-bb6d-66db1e08316d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01b75da9-410a-4651-b169-e90ad83f3634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07e8b36-1ed1-4970-8a72-56606887b92f",
        "cursor": {
          "ref": "5239ad91-b5a0-4ce4-9645-3d8ec7b58a8e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "37f3d565-2766-4879-9cd6-8e3635aaf7b9"
        },
        "item": {
          "id": "e07e8b36-1ed1-4970-8a72-56606887b92f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1f741959-44e0-480e-885e-7c32daa37e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc49ba6-66ca-4484-8afb-b5df74315605",
        "cursor": {
          "ref": "15d91245-954a-4aa6-86c3-a13cdf6a445b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3cc2bc98-c066-4091-b416-7e4838f1e648"
        },
        "item": {
          "id": "1fc49ba6-66ca-4484-8afb-b5df74315605",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ea0928ab-0cd6-4d47-a871-d8eca5151c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7072899-c4b8-4349-a18c-446baa1797d8",
        "cursor": {
          "ref": "4ace946a-24b0-4273-8048-b43ecbde63d4",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7bf0b70f-faf5-4ff6-9e76-ab5dfbfb3ebc"
        },
        "item": {
          "id": "e7072899-c4b8-4349-a18c-446baa1797d8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "926086bf-98b6-4288-9b75-cfb766e21eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c58ced2-89d8-4b25-8b04-3f3cecb7fa05",
        "cursor": {
          "ref": "3064443d-166b-40e9-b45f-e81ee671bcc0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9fdfe2bc-2a9f-4ee0-8e12-6f7518fa7db4"
        },
        "item": {
          "id": "9c58ced2-89d8-4b25-8b04-3f3cecb7fa05",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8710b510-31db-42cb-b5f5-bd41b5ffb199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5c3d12-ef38-4d20-bcc3-c8f069bcc5a4",
        "cursor": {
          "ref": "069ddb8b-856a-4096-b839-cf826388c78d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d300d2f2-844e-4f68-a717-6913c4b2e227"
        },
        "item": {
          "id": "fb5c3d12-ef38-4d20-bcc3-c8f069bcc5a4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "796891c3-d548-4d86-a525-a1159dfd884e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63156e91-7667-4c80-9e76-585d942301d1",
        "cursor": {
          "ref": "1ede004d-2d90-45c0-9355-bc8689fb9852",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bbe64b1b-cc21-4020-9b0b-df1e808200a0"
        },
        "item": {
          "id": "63156e91-7667-4c80-9e76-585d942301d1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "81ba9a2a-4ef6-4ca6-ae93-da5113df413e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3ed6b-94ba-472c-92f7-920a176c5a1c",
        "cursor": {
          "ref": "9a2f0422-c4df-42ab-98bf-edba750fe923",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3242ee92-9b1b-4952-a56e-bdb14636d880"
        },
        "item": {
          "id": "d2b3ed6b-94ba-472c-92f7-920a176c5a1c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "84dfbb3f-e72e-44d1-ae47-028bed116712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6076341f-8d8d-41da-ad27-f91b05eec805",
        "cursor": {
          "ref": "d65bb2c9-0006-499f-bc7c-095d1c2c6c86",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "79693b0e-3f38-48ae-b559-c6d927565eca"
        },
        "item": {
          "id": "6076341f-8d8d-41da-ad27-f91b05eec805",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0b570a75-feaa-4bce-975a-0b23b94432ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deff252f-e971-4f45-99eb-87a30eedecb9",
        "cursor": {
          "ref": "bc82f87f-095c-4ec1-9252-6ebc751304b9",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0943a25c-02cb-48b0-b396-3210573cbcfc"
        },
        "item": {
          "id": "deff252f-e971-4f45-99eb-87a30eedecb9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7d4b0b5c-30ce-48a4-ad63-47a40aa93090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b5345d-6047-49de-b3b9-df96dbfb0cca",
        "cursor": {
          "ref": "c9fb7d8f-c7b7-43b4-9bf4-228bad515c91",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "69a1ba53-815d-4c3a-87be-590b609e7fad"
        },
        "item": {
          "id": "08b5345d-6047-49de-b3b9-df96dbfb0cca",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0bb8461e-be2e-4022-a5ae-29b9ee7ff600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6154a02a-dabe-4f9c-bc9c-88cbd468e2cb",
        "cursor": {
          "ref": "cace0295-9c8a-40e0-b007-115aae64d125",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "01e33bfd-e496-4c0e-a9d8-dc4a3e37dfe8"
        },
        "item": {
          "id": "6154a02a-dabe-4f9c-bc9c-88cbd468e2cb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9ba51d61-89f4-45d0-8880-7e6678edb87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94cb3e9-4163-4e1f-8c73-19d4f70e22a8",
        "cursor": {
          "ref": "ab06b8d7-06ac-43fa-965a-311c3a7a7c07",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b1eb79be-bf6c-4644-937c-f8bbc027ac14"
        },
        "item": {
          "id": "c94cb3e9-4163-4e1f-8c73-19d4f70e22a8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "56f46759-bc1d-4df8-b5a6-2cd07bbfd788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9203ce-bf14-4750-b2a9-dccb3623b9df",
        "cursor": {
          "ref": "7bfcaeaf-254c-4cc1-bc21-1acb0a8abfc9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9d931761-8842-4e71-b9a2-77fb9f82f035"
        },
        "item": {
          "id": "fd9203ce-bf14-4750-b2a9-dccb3623b9df",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "50a35b80-5b25-4800-950e-b62b2fe7ec0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d026b4-5660-43d1-befa-9e1a16b36d54",
        "cursor": {
          "ref": "f20e7882-a5e7-46dc-9474-66f37895f875",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "44863e01-27af-460c-9c68-bb13714a4e31"
        },
        "item": {
          "id": "71d026b4-5660-43d1-befa-9e1a16b36d54",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a89c9bfe-8a93-459a-8e41-e770add4e3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91607eac-57ab-4809-b555-382edf14a558",
        "cursor": {
          "ref": "183abc17-8c19-4b5b-9342-153bcf547916",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "11aa5f72-4f8a-455e-8ec7-374983f7c38b"
        },
        "item": {
          "id": "91607eac-57ab-4809-b555-382edf14a558",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "afaa87ca-a73d-4a55-bd51-1bc80e061dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95123ef-a815-4497-97d3-8cb79c73d21a",
        "cursor": {
          "ref": "0a08a47a-61f4-4526-b82c-5e0650098b67",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8c9b7696-b31e-49d6-9992-75dc962f065f"
        },
        "item": {
          "id": "b95123ef-a815-4497-97d3-8cb79c73d21a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "98079135-2145-4b8e-978c-71fe757b718a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3b617f-f078-4a4c-86ff-80c009e3a342",
        "cursor": {
          "ref": "63e70e70-b671-449b-9fde-569695bab4ff",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7eeb505c-d26b-4cd5-a1b9-b049b8a00d98"
        },
        "item": {
          "id": "ef3b617f-f078-4a4c-86ff-80c009e3a342",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d3cb157e-892a-4356-ba44-33e29fc0145c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d47f50-18dd-41ea-a29b-60e0b34b03d7",
        "cursor": {
          "ref": "27ee52d2-33c0-4d54-a45e-560ee703b6b0",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dd58196d-fa07-43ac-a481-843596ddf5a5"
        },
        "item": {
          "id": "b0d47f50-18dd-41ea-a29b-60e0b34b03d7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1a740eac-cc1d-4490-8a9b-61ba8d0a6ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a65e18a-f963-4054-968d-3aa951645552",
        "cursor": {
          "ref": "8fb1c1c0-c62f-4ea1-aa9e-e3acb260ab23",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "43c505dd-3ec5-4614-a1aa-d4e4c1e739e7"
        },
        "item": {
          "id": "3a65e18a-f963-4054-968d-3aa951645552",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6c94eb86-7354-40d4-8f26-7ed28d8dd6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f06663a-7457-4a98-a649-fbaee27d1a93",
        "cursor": {
          "ref": "1e8c1cf3-c54b-4da4-93bb-e49f9be2947e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0d0358b5-cb52-4c5e-b089-4ba24f79f472"
        },
        "item": {
          "id": "0f06663a-7457-4a98-a649-fbaee27d1a93",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d5515c59-36da-4db3-a48d-e70798874053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd40061b-2570-4211-bf22-6e4b89562f17",
        "cursor": {
          "ref": "871accfe-052b-40f0-95f4-74036f36c29e",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2c7b7743-201f-47b8-8f79-717512f4e7a0"
        },
        "item": {
          "id": "fd40061b-2570-4211-bf22-6e4b89562f17",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a1afc618-9529-4330-ad43-a1aa041f57e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a3801a-bb2a-49dd-8df3-f2f800d38960",
        "cursor": {
          "ref": "93a7624d-e20b-4af8-abfd-58e1cf6f3293",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a3e4c157-cb05-4679-888f-bfc42b733841"
        },
        "item": {
          "id": "c2a3801a-bb2a-49dd-8df3-f2f800d38960",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a62ced28-06e2-4901-818f-fc9f1a96db5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ecb474-d4da-4bb1-ab03-9052f5f628fa",
        "cursor": {
          "ref": "fcd1f619-d156-4326-b154-03901dae13cc",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "45ce6f20-c516-468b-ba4d-d53030b5e86a"
        },
        "item": {
          "id": "26ecb474-d4da-4bb1-ab03-9052f5f628fa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4b1795e3-344e-416e-a2a7-3836887f8180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5fc737-2445-4a20-a086-05fbe96a68ca",
        "cursor": {
          "ref": "b2022731-5578-446f-afb0-a28d59d630cf",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "36d6048f-bca9-4b10-807e-d35372fb55ca"
        },
        "item": {
          "id": "2f5fc737-2445-4a20-a086-05fbe96a68ca",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7dd1d56f-0dcd-428d-b42b-b0640ae09bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdfeaa8-6c32-4854-9acb-11c84f7447c6",
        "cursor": {
          "ref": "2aff50cd-bb52-40a4-9b57-985cbe000406",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4582c101-5dd4-4cd4-a443-981945c5bfd2"
        },
        "item": {
          "id": "bfdfeaa8-6c32-4854-9acb-11c84f7447c6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "90f0e530-f7c3-4042-a816-00fd4f37fd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c95f5c3-6935-46ea-8241-cb88287f49fe",
        "cursor": {
          "ref": "3ac02db6-acd3-4771-b897-cd220336b561",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d90908d0-02e6-407c-a3d3-7a3f996131ac"
        },
        "item": {
          "id": "0c95f5c3-6935-46ea-8241-cb88287f49fe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "324a06a4-cc8c-4e69-85e1-4ae0b6d71bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a19af1-0cd5-45fe-bc9a-537982224206",
        "cursor": {
          "ref": "95b01e93-c8dd-4a1a-ba8d-53305a1940fe",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bed3d277-d794-4823-a727-3dc51955b861"
        },
        "item": {
          "id": "08a19af1-0cd5-45fe-bc9a-537982224206",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "354479b2-b7ef-4c79-a85b-83b2db01c11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d7b086-219c-460b-8237-5dde7bca5dc2",
        "cursor": {
          "ref": "22d9bcca-9bb7-4fd4-91f9-cea0a3c46ca9",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "414a0db4-e560-4f0a-ae62-f007752b6fd9"
        },
        "item": {
          "id": "00d7b086-219c-460b-8237-5dde7bca5dc2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3379706b-ae3c-4a4b-8393-b9fb54def6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd37729-4d96-43c9-b9d5-d781dd46de11",
        "cursor": {
          "ref": "d073790d-b791-45d8-9f6f-567d4a48577c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e85ce409-7c24-4660-9816-48de0434a1d0"
        },
        "item": {
          "id": "6fd37729-4d96-43c9-b9d5-d781dd46de11",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e5da52b9-ebfb-49d1-9a58-fa1efc5b046d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a75ef6-302b-477c-b7b3-fc31bdbd1be5",
        "cursor": {
          "ref": "265b1e64-87d4-4189-b765-6c549039f71b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "31877bfb-a4c5-4799-86bb-b5625033d6a7"
        },
        "item": {
          "id": "e6a75ef6-302b-477c-b7b3-fc31bdbd1be5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5288f3db-6cbd-40dd-a87b-7a156a23e3f7",
          "status": "Created",
          "code": 201,
          "responseTime": 723,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "61c7c896-c6d1-4948-b416-8110dbf9e8fb",
        "cursor": {
          "ref": "0dfe74bb-f795-472d-8f8e-089ecbd0ae98",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f83036ac-2502-4cb0-ba3c-09aaafa77fe5"
        },
        "item": {
          "id": "61c7c896-c6d1-4948-b416-8110dbf9e8fb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fb5297c5-7be5-42fd-843d-5f9fc8182468",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f45af5c6-bfee-4553-acd6-dc1c072d1c29",
        "cursor": {
          "ref": "434e9c2f-4e9b-4aca-aa56-80ab6f0e8ec0",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "796d191e-966d-4b00-a55a-8874a5c3daab"
        },
        "item": {
          "id": "f45af5c6-bfee-4553-acd6-dc1c072d1c29",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c20da3c6-6b4d-4ec2-ae58-c01ce244885c",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "65a019c2-9687-435e-956c-dcde7826e4d1",
        "cursor": {
          "ref": "d426f664-add8-4a99-97f7-4eb513948594",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8447a44c-2239-4b4b-bd11-4644a1d2a21d"
        },
        "item": {
          "id": "65a019c2-9687-435e-956c-dcde7826e4d1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6280e92a-f9e9-4ece-9dcb-f86790354611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cc7408-4e97-4266-a398-64376b6f7462",
        "cursor": {
          "ref": "839240d7-af32-4aad-bca7-37c124582a4a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "adaeec7b-9716-4194-a95b-252ba5bb01ed"
        },
        "item": {
          "id": "56cc7408-4e97-4266-a398-64376b6f7462",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "202a95e8-f78e-4841-8979-4b60f717896c",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c0ed6705-cb61-4a64-a54f-d28aab6dad96",
        "cursor": {
          "ref": "b1cd7a34-b2d1-4ae7-9261-63c62e566b6c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de0ae8dd-562d-4643-9cb2-bdb9146fb184"
        },
        "item": {
          "id": "c0ed6705-cb61-4a64-a54f-d28aab6dad96",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5165896b-5d24-4402-bd37-e5cb8c5cf44a",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "38d4bba9-3cf3-4ccf-a9fd-40716796d577",
        "cursor": {
          "ref": "9d7a268f-50de-4ed9-accc-c686980b4ccc",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "13ddecb9-89c1-4b08-a1cf-ffc3271bac0b"
        },
        "item": {
          "id": "38d4bba9-3cf3-4ccf-a9fd-40716796d577",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2bf8cea6-26f0-4977-8755-c80c8c68317d",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f237c21f-a221-4bcb-af64-f56ce0a051c7",
        "cursor": {
          "ref": "a7fd9202-1337-4865-808a-cd830829dcc2",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c8d814ee-2ec7-4d36-8e6e-97921f3ecfea"
        },
        "item": {
          "id": "f237c21f-a221-4bcb-af64-f56ce0a051c7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5cefcddc-9789-4281-815a-684e7578f30b",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6e78a828-2a1f-42ba-a57a-b094833121a8",
        "cursor": {
          "ref": "deeb75df-cf37-4ffa-bedb-df36236beaf5",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9bded09c-f4e2-4b19-9c0c-9cc7c6a1aa82"
        },
        "item": {
          "id": "6e78a828-2a1f-42ba-a57a-b094833121a8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f4b4dfcd-72ce-4a7d-9695-1b92346a46ec",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b8953cb8-fc86-4e14-9e3a-498ca13eb69d",
        "cursor": {
          "ref": "0da57d55-341a-486d-a63e-1da19fef22ba",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bec2c34f-8b34-4d4f-ad4a-9a951b932b6a"
        },
        "item": {
          "id": "b8953cb8-fc86-4e14-9e3a-498ca13eb69d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "da43c5fc-9974-423f-be5b-2ca3156386d8",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ea0177eb-3258-4e81-b585-6d3a61b91bbd",
        "cursor": {
          "ref": "8d0ec226-9240-42f5-a489-a8786cb333df",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f2ff8093-f4a9-4570-9cee-9673dba26147"
        },
        "item": {
          "id": "ea0177eb-3258-4e81-b585-6d3a61b91bbd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "682572ce-c7b8-4234-938b-509633be84f7",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "99de7826-ae5f-47a4-8fa7-d2e048cf3b05",
        "cursor": {
          "ref": "f926e3c1-fb67-4f87-a196-cc0421e4c50c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "13b22172-7d31-4d2b-bcab-f61fcbcba2a2"
        },
        "item": {
          "id": "99de7826-ae5f-47a4-8fa7-d2e048cf3b05",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6cf08ab3-9fb3-44f2-b561-3bf7a320ea00",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9cc58369-4a84-4df7-a367-6412c2aa3a35",
        "cursor": {
          "ref": "255bc593-6d88-40ce-99e5-c1d353286e98",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "90da9b4f-55fe-4a8e-a435-04dc69f84658"
        },
        "item": {
          "id": "9cc58369-4a84-4df7-a367-6412c2aa3a35",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fcb81edd-7ce6-4f8c-a616-b5afbc49bc69",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e47f6d43-45c8-4beb-91d0-a320cb3fafaf",
        "cursor": {
          "ref": "d011748a-3ccd-4866-97c4-2844175819c7",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3bc6b738-af52-4476-8da6-597812c0d90f"
        },
        "item": {
          "id": "e47f6d43-45c8-4beb-91d0-a320cb3fafaf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "404f4011-732f-41a2-9ee8-46f3a0fcf945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf930a51-df56-44a7-b5fb-27745029e6ec",
        "cursor": {
          "ref": "d6607a74-b78d-458c-9e82-a1918b6f84c1",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "459e161d-0c38-41f0-bcff-88bb679c4acc"
        },
        "item": {
          "id": "cf930a51-df56-44a7-b5fb-27745029e6ec",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "010be407-c674-4e66-b2d7-509be436d277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317ec779-e5ad-44d8-adc1-af78ab2ae926",
        "cursor": {
          "ref": "cd5f43b1-9e63-4d7f-948e-88df5d5981a0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "15be3337-0df8-4e5b-b412-109b58a00559"
        },
        "item": {
          "id": "317ec779-e5ad-44d8-adc1-af78ab2ae926",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1d4c6a51-dda7-4856-9558-9fc075c50409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6380a4-26b7-4aaf-9503-79986c1fb185",
        "cursor": {
          "ref": "65eb2a3c-f1c6-494b-8c7b-9c49be086039",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5f8b73ec-3b4a-4fdc-b0ae-400a9defa106"
        },
        "item": {
          "id": "6f6380a4-26b7-4aaf-9503-79986c1fb185",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "83322e0e-4c91-45be-a2b6-376a2cc057ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734bd639-410d-4596-8f78-3719b038060c",
        "cursor": {
          "ref": "83f275e7-1581-4c46-ad86-50d939c0e780",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "df90680b-7b9b-41ba-97f7-50a0e4f9ed10"
        },
        "item": {
          "id": "734bd639-410d-4596-8f78-3719b038060c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "de529c87-5863-4b86-8afe-9dc6f0889897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f1d9b7-d50d-433d-9937-dbaf2f0ef98f",
        "cursor": {
          "ref": "83b9db99-693f-4a9d-90ae-98648da20931",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d1fc6563-4d6f-4fdd-9b2a-8cc86838de8c"
        },
        "item": {
          "id": "66f1d9b7-d50d-433d-9937-dbaf2f0ef98f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e31dcf2c-19bf-407c-8106-2c39cbb99a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45326478-3fdc-4738-8585-33a9c6550b49",
        "cursor": {
          "ref": "48f39512-168f-4f9a-9abc-76b0aa98bf13",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d3ac3906-534b-4f7e-98d1-35b7dd982bda"
        },
        "item": {
          "id": "45326478-3fdc-4738-8585-33a9c6550b49",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6ca8f795-61e9-427e-9156-08301e797349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b61acc-ccdf-479a-9c06-25e79aad6101",
        "cursor": {
          "ref": "291a0ce2-66fe-4564-a11c-d17d698aaddb",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d9ad2f92-1a55-4465-8198-a087b39cf2b7"
        },
        "item": {
          "id": "a8b61acc-ccdf-479a-9c06-25e79aad6101",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "285c225b-e915-4632-beb3-3a80476ca4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8a238f-cb76-42b1-a4f9-01ab570c24fa",
        "cursor": {
          "ref": "420fb6d1-2985-40ff-a7df-0767846bb297",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "39ab21e2-fdfd-46ab-8b2d-dbb258bc391d"
        },
        "item": {
          "id": "2e8a238f-cb76-42b1-a4f9-01ab570c24fa",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3440b989-0f6c-40c1-bf45-c6cf24e6b8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f4a15c-87f4-4abf-b1fd-5e4baa388245",
        "cursor": {
          "ref": "6c8f9215-a7a0-4189-97e8-a4ed865d6e47",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a752121e-b488-4146-97f6-7cb5b103545d"
        },
        "item": {
          "id": "93f4a15c-87f4-4abf-b1fd-5e4baa388245",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "73e51460-3e69-4fab-8149-715f7a23249e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cf6a62-53ae-4370-bd86-cb20e1fcee5d",
        "cursor": {
          "ref": "113fc4b7-b84d-495d-b87b-204aeb41b09b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e3319a8e-4d66-42eb-9cd0-06f823bb0daa"
        },
        "item": {
          "id": "52cf6a62-53ae-4370-bd86-cb20e1fcee5d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "15cc288c-1815-492d-9877-1ffd723b725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1acfd9-a48d-42f4-b09a-7c9988aa398b",
        "cursor": {
          "ref": "a83f6232-cd95-456a-8c56-e809f03c59ce",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c04d5f93-27cd-4d78-942f-6acde70a1b6e"
        },
        "item": {
          "id": "fc1acfd9-a48d-42f4-b09a-7c9988aa398b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5b130845-14c3-4560-a7b7-12aaf373984f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596e42b4-c30f-4e62-ba57-805dc6089920",
        "cursor": {
          "ref": "0b8b9742-0fe9-4c43-988e-7a13b1475ee8",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1ffbe931-bf17-42b6-88f4-dc5a8f47a78a"
        },
        "item": {
          "id": "596e42b4-c30f-4e62-ba57-805dc6089920",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7b0a932a-5f5e-49b8-a198-ddd76c44e26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2ef9cf-7c9b-45e2-ba2e-6b32b6aac178",
        "cursor": {
          "ref": "ccdfa6af-ec4b-4dce-919e-bb5b09e7a278",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c1cf2c26-d997-4faf-b233-4da423938880"
        },
        "item": {
          "id": "dd2ef9cf-7c9b-45e2-ba2e-6b32b6aac178",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8f5e77ea-47bb-4f00-bde7-48933234437f",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c0cbd1ef-c696-41d7-8f2d-ca6fdbe7339d",
        "cursor": {
          "ref": "0d314ff9-f62c-433e-a4da-f6a7e56bc360",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "26387b9d-80c8-4ac5-bd5f-07a7fc193fdb"
        },
        "item": {
          "id": "c0cbd1ef-c696-41d7-8f2d-ca6fdbe7339d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9696db6e-c73f-47ad-a89e-f2989615664d",
          "status": "Created",
          "code": 201,
          "responseTime": 420,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8477146a-8e8d-4394-95c2-567718961c6a",
        "cursor": {
          "ref": "81b23910-f2e4-43dd-8299-ca919d4928a4",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a829269c-c3f1-4202-84cd-ad789330650b"
        },
        "item": {
          "id": "8477146a-8e8d-4394-95c2-567718961c6a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "81704783-216d-4ba8-b114-197061a5d16d",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8d1962e5-7cc4-4e02-bedd-3f3a893de86d",
        "cursor": {
          "ref": "c8f841f7-8cec-47e8-a13e-68486aa1d9fe",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "088c916c-8266-46fb-bbf2-bb5d3b9ac86b"
        },
        "item": {
          "id": "8d1962e5-7cc4-4e02-bedd-3f3a893de86d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5ffc8cf7-54e5-469a-b511-54875b55160d",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "92f267d0-30e1-484a-98a2-8a27b363ec05",
        "cursor": {
          "ref": "7c74d406-2522-4e8c-9a44-7092f1383a5f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5892af3c-dacf-4aa6-8ffe-6e40c7ddad63"
        },
        "item": {
          "id": "92f267d0-30e1-484a-98a2-8a27b363ec05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1c7e8259-3e81-4dc8-a120-5486e6a188ca",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3f95dfb5-2f89-48cb-807e-065fe9ef8beb",
        "cursor": {
          "ref": "25ce7221-2a21-4915-aecb-eccb4f069a07",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9b60755f-757e-47e1-aae7-e1c517b0985e"
        },
        "item": {
          "id": "3f95dfb5-2f89-48cb-807e-065fe9ef8beb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5dc40577-63e6-47c2-a668-a598afa4eb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4f6e97-4f6e-4f5c-a785-10d4e41fc686",
        "cursor": {
          "ref": "07d33f11-43f8-467d-a456-86430af2d030",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bd8dbff7-6642-4791-9979-5bf8abf55d5c"
        },
        "item": {
          "id": "cd4f6e97-4f6e-4f5c-a785-10d4e41fc686",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2ebde596-f6eb-4ce5-84e1-33b8db0d9d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c406be-a860-4a6d-9fc3-5951ecde265a",
        "cursor": {
          "ref": "2e966a06-980c-469d-a243-15def6ed7e3b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aa069bba-4a01-4cdd-8f34-6a27ed34daad"
        },
        "item": {
          "id": "22c406be-a860-4a6d-9fc3-5951ecde265a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "38b42b56-23e4-49d1-9898-2c44f0c30c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410d6039-1a82-4521-83e3-cc14e951c3c2",
        "cursor": {
          "ref": "0b4e8887-0d86-4d0c-9876-d2662369c2d9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "38f758d7-85aa-4782-92c7-1e45fa28eb18"
        },
        "item": {
          "id": "410d6039-1a82-4521-83e3-cc14e951c3c2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0f0b4481-6cab-47be-80e2-c295075924a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61340a07-9f36-4116-9879-8610b9e2dda5",
        "cursor": {
          "ref": "6e844421-cee6-4a93-95c4-c916122ee8d6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "138f1df5-f8b8-453e-ba1f-f8ed8c4b6fe6"
        },
        "item": {
          "id": "61340a07-9f36-4116-9879-8610b9e2dda5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "499bd72a-1edd-43f1-881b-77f54f15d8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b3103f-bf68-4c49-b9c3-b97f2712a9e0",
        "cursor": {
          "ref": "1fe09e87-6fe6-4a2d-9bd5-fc07491381c1",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "22f1bf53-eed9-4b75-a2db-28ddd180c6b1"
        },
        "item": {
          "id": "36b3103f-bf68-4c49-b9c3-b97f2712a9e0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "644a4ab9-5e27-4cb6-85cf-5ed1c25d94de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cae944-683b-41b8-a42f-7426d7b75966",
        "cursor": {
          "ref": "eab4a3b8-7668-437e-af16-7a4335b714b3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2072ca80-84d2-4387-8679-78f2ca9d930c"
        },
        "item": {
          "id": "e8cae944-683b-41b8-a42f-7426d7b75966",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c64317a9-3f1a-4799-9c24-3e110e883b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9118e3d9-547e-4ed8-9170-bf21f32cc95b",
        "cursor": {
          "ref": "7fad76b5-415e-4acc-85f7-a6ab6305a01c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9d207299-3025-45f7-8686-ebacd5fed66d"
        },
        "item": {
          "id": "9118e3d9-547e-4ed8-9170-bf21f32cc95b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "da37c213-bca8-42ba-b8a3-2a03e82db464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4830f04-d5e6-4596-84ea-09365ccb6542",
        "cursor": {
          "ref": "a5bf0315-34b6-4cab-aa7f-d9cc06cd1c59",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "84df021a-7c34-4051-bb1c-69c1b1d10536"
        },
        "item": {
          "id": "a4830f04-d5e6-4596-84ea-09365ccb6542",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d668b282-a1fb-4964-958d-6aa995967ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10e495d-590d-42e7-a4ac-b7aa31f7a7ce",
        "cursor": {
          "ref": "4be867ff-69af-4cf5-8699-b5d53903a99d",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7f51a59d-6da3-471d-baf1-7442b04ff642"
        },
        "item": {
          "id": "f10e495d-590d-42e7-a4ac-b7aa31f7a7ce",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "13442b5b-a156-41f3-9d0b-cf2dd5735fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026ee960-578d-4f78-9bce-7f4576e94f5c",
        "cursor": {
          "ref": "33ea32ef-7706-4dd6-9356-a63fa5b5143a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "48dd6f53-9ab1-4574-b41e-d328202a1059"
        },
        "item": {
          "id": "026ee960-578d-4f78-9bce-7f4576e94f5c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4acaae81-a4d0-4027-bc59-21789298e1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ed917f-675b-4b3a-9180-f0e91d7680c3",
        "cursor": {
          "ref": "b5f45aec-fdde-4e44-be4a-5ae20eb5af40",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5f331ecf-da55-445b-aaeb-8ac7679ff89d"
        },
        "item": {
          "id": "94ed917f-675b-4b3a-9180-f0e91d7680c3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "75c26152-30a2-4f70-ad56-c319f36fed8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e7ba39-f2b9-4ddc-b553-5bbfbf5d1df2",
        "cursor": {
          "ref": "d421c3d1-da91-42d6-94db-5c89ffe973ec",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6e6695a2-366b-4a13-b07d-89cd0225f19a"
        },
        "item": {
          "id": "d3e7ba39-f2b9-4ddc-b553-5bbfbf5d1df2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3040d392-3dcd-4cf2-a768-d0d92756c5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac0423b-750a-480c-aa7f-9116a77d7681",
        "cursor": {
          "ref": "d296299c-afe5-433a-975c-6e647230d20f",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f701f0e5-c72c-4b8c-862a-3e1fd61ded30"
        },
        "item": {
          "id": "6ac0423b-750a-480c-aa7f-9116a77d7681",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d932bad9-5e8a-49f8-a655-9c719a582d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd66219-82b5-43e7-84ba-1ee2c20e9a3f",
        "cursor": {
          "ref": "3363e367-1c52-44c7-a03c-6aa416bf6589",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ed7a4c0f-dc81-4545-a9d2-77b315b7224e"
        },
        "item": {
          "id": "edd66219-82b5-43e7-84ba-1ee2c20e9a3f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0566e3e2-850d-4b5d-81d4-095aaa02d9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8871d8-3f73-4577-82c1-3f271a7ce9a1",
        "cursor": {
          "ref": "f4bf7fd9-3df4-4901-a8aa-93bdf7e6e0ae",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "94bb12b6-518f-47c9-a518-6f10c20b424d"
        },
        "item": {
          "id": "ea8871d8-3f73-4577-82c1-3f271a7ce9a1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "535d0e16-1001-4feb-9f20-8d92cc3f0425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2cacba-fbf4-4cd8-9783-575fc1d02ffc",
        "cursor": {
          "ref": "9e23538f-58b5-4bae-9215-68ce9207400a",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "43cbab3e-0d2f-434b-9187-4ff3c0ec471c"
        },
        "item": {
          "id": "dc2cacba-fbf4-4cd8-9783-575fc1d02ffc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "932d84a9-6b3f-412c-a19c-dfeb17578d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3409d4a2-8037-411b-9bcc-c64eb56a4aa8",
        "cursor": {
          "ref": "258ac0b6-7531-43af-85d2-bb6e6b07361b",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6028b940-5bd7-4eb7-9b2d-cb634275443e"
        },
        "item": {
          "id": "3409d4a2-8037-411b-9bcc-c64eb56a4aa8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "642eaec4-3d62-48a8-94b9-a8f8fd42733a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a25344c-fe34-4a57-8f07-f22a04218463",
        "cursor": {
          "ref": "136c09f6-057a-4564-9ba6-6968d1c9f26c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8ddab8b3-ddca-4476-a9ad-0709c480caee"
        },
        "item": {
          "id": "1a25344c-fe34-4a57-8f07-f22a04218463",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f0beca3b-7387-4460-81fd-05d5f0fe037e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab6af41-b048-4793-b1a6-18bb6c7fe5ac",
        "cursor": {
          "ref": "3e7fe1fe-eb1f-4a1f-b48d-20e3f2af40ce",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6fddc32-5c79-4ddb-acb6-ae8b3a1ab1db"
        },
        "item": {
          "id": "9ab6af41-b048-4793-b1a6-18bb6c7fe5ac",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3caa00f9-3e37-4256-a625-891fbafaa471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0322784-77b3-4765-aefd-1985bba4c371",
        "cursor": {
          "ref": "20f03cde-dd5f-417f-9c40-ffe712261dd6",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "77db5a21-76e4-45b8-b4d6-46486de896dd"
        },
        "item": {
          "id": "b0322784-77b3-4765-aefd-1985bba4c371",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e4106aba-74c5-443b-ad24-fa1bca367100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb92de3-7db9-4e0e-a670-f4a9833a1123",
        "cursor": {
          "ref": "ee30fb6a-a07c-45f1-94a4-0d280e642c7a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cad5c178-02df-48e1-b250-7b319afed641"
        },
        "item": {
          "id": "6eb92de3-7db9-4e0e-a670-f4a9833a1123",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bd441f57-3ad0-4f43-853f-343ddcbd0f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb7ab52-2448-4949-8a9c-7a5fe80cceb6",
        "cursor": {
          "ref": "b00eba5b-ada2-4bc7-91bd-4ac9fe4db5e5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a2925f61-2868-4d91-bf2d-3ab820468a42"
        },
        "item": {
          "id": "0bb7ab52-2448-4949-8a9c-7a5fe80cceb6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d2ffa2b2-9115-4a1d-be09-d6a721a8e8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625406fa-7318-47f9-8ff9-bca1e0dbbbcb",
        "cursor": {
          "ref": "696ca469-5e51-45f7-9639-0987b8ecc649",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d2039a84-8f50-4650-b61a-4156529cf090"
        },
        "item": {
          "id": "625406fa-7318-47f9-8ff9-bca1e0dbbbcb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b9a53ce9-512e-4e49-96a6-de8bd9e5a43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a275580e-4b86-4d94-b7aa-c1bda669380e",
        "cursor": {
          "ref": "c9f9d154-7f42-4f30-8ba2-f2844943c87e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "382f20a4-15d0-4783-9a28-849ce54268f2"
        },
        "item": {
          "id": "a275580e-4b86-4d94-b7aa-c1bda669380e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a1a33df0-ad5c-472c-b680-8e982145b20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad49a48-18f7-4b8a-94ad-79be803ad65b",
        "cursor": {
          "ref": "ac179b0e-b59b-43b8-826f-5ef01a444645",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f4dd5d50-8d64-4e4b-b0be-daf50cc354e5"
        },
        "item": {
          "id": "0ad49a48-18f7-4b8a-94ad-79be803ad65b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ca1f6283-889c-469d-a8bc-a22d71988375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddd4deb-0e55-4803-a005-aa67c467efe1",
        "cursor": {
          "ref": "ce650629-827a-4179-bbcd-637dc29ba3c2",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "db71ff45-9fe4-4ec2-903e-cef857edae2e"
        },
        "item": {
          "id": "bddd4deb-0e55-4803-a005-aa67c467efe1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "160f5bcc-f22a-48f4-9338-ee0e0fefcf53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7259942b-cded-4f34-bf18-78f9f1fabce7",
        "cursor": {
          "ref": "b74c392d-e440-4a3d-8255-b998a3ce8696",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "aa6116f6-4c06-4868-b4fe-9869eb386673"
        },
        "item": {
          "id": "7259942b-cded-4f34-bf18-78f9f1fabce7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "914d538d-2701-4f10-a474-c2689df9a6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa71ae25-72de-42f3-a131-8a8ef9585e1e",
        "cursor": {
          "ref": "f50b2c4a-1d3e-4a3e-9a33-a484b83b19ee",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9ff76468-de71-43ef-8c5d-65536bc181a3"
        },
        "item": {
          "id": "fa71ae25-72de-42f3-a131-8a8ef9585e1e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0632ab43-3c50-4204-ad2c-eca6242f2e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba5e16a-2a61-4992-9b2f-057c4b67b88c",
        "cursor": {
          "ref": "ceadb168-0fa0-4aa3-92a7-3cbdc6b74b37",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cc47ca98-6272-412d-97f9-974edb14362e"
        },
        "item": {
          "id": "bba5e16a-2a61-4992-9b2f-057c4b67b88c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "09fa6e9c-5c5d-4880-94a6-41657ee5278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0790a036-e442-49e1-90fa-eb96a1a0b13c",
        "cursor": {
          "ref": "d757aadc-1b41-4404-b377-b9c070fc9ecd",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d96b7f06-f427-4beb-8942-ae15c00166ba"
        },
        "item": {
          "id": "0790a036-e442-49e1-90fa-eb96a1a0b13c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1d89c07b-24ea-4af3-89c4-bcb84607c895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8c29d0-10c5-4add-b4a5-4f46d81b5b0b",
        "cursor": {
          "ref": "5a68b941-cc6c-44d1-989b-cef2f1899727",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "48309647-22ad-4187-93e4-2f0a7b42a1f9"
        },
        "item": {
          "id": "fc8c29d0-10c5-4add-b4a5-4f46d81b5b0b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cba77ab8-a79a-4a7e-92d1-432e5d80c357",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dd43c2-3dbe-4aee-b8ac-e7c0e7a1ba7f",
        "cursor": {
          "ref": "b8153ed7-8a3e-4d27-b345-6fc775c5093c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "495b747f-c9a0-4296-b7d4-265b46e81800"
        },
        "item": {
          "id": "01dd43c2-3dbe-4aee-b8ac-e7c0e7a1ba7f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "57a19fa8-e239-4628-b7df-fa8c98de7a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "960d0260-6f23-4633-92a0-5768ffea85a6",
        "cursor": {
          "ref": "ee32e025-6d11-4220-95ea-f4f72623ea20",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "852b1a67-45a5-4d5f-af6c-5c0b88bacd2e"
        },
        "item": {
          "id": "960d0260-6f23-4633-92a0-5768ffea85a6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "08fcc464-2dea-4039-8248-49e0f27e752d",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9994f059-f598-48d0-8a59-529e05edf302",
        "cursor": {
          "ref": "c72a664e-5521-4108-aac9-297ecdfdba99",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cea1bd22-f1e1-4bbb-9051-0c036d84ed5d"
        },
        "item": {
          "id": "9994f059-f598-48d0-8a59-529e05edf302",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "218ca1f6-45db-426a-b3de-703bd64b2123",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b03580-adfc-4ceb-8338-d4f75516a2d3",
        "cursor": {
          "ref": "14191fa1-0ea9-4070-9892-2134958702db",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8b695b62-2167-4fc0-8d43-506578bb448e"
        },
        "item": {
          "id": "45b03580-adfc-4ceb-8338-d4f75516a2d3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "87c127a6-995e-4945-8334-e5183fbddbac",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c38747-b678-4a49-9cb4-d68358eba78e",
        "cursor": {
          "ref": "2da16a40-ed3c-4f81-b5a1-9a58b105ab80",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a2ffe6f9-9d05-4c5b-a361-a118a02ea18f"
        },
        "item": {
          "id": "32c38747-b678-4a49-9cb4-d68358eba78e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "43be0182-1f42-426b-9b20-19d069bfadbc",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "238ed39c-b091-4d38-8799-90a1441ed0cc",
        "cursor": {
          "ref": "b88e9317-3703-4d98-8c88-ef0c582a6d1c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9943501b-54e7-4093-8a18-6f31470e2120"
        },
        "item": {
          "id": "238ed39c-b091-4d38-8799-90a1441ed0cc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cf13fba5-247c-4867-9900-7197ce9a8feb",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-17T00:35:20.210Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-17T00:35:20.210Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e2303bc2-4859-4374-a32c-91c877882236",
        "cursor": {
          "ref": "6a4c20c1-0c5a-4374-a21e-5eb2065e5c7c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d46d7ab3-3687-45bc-9a89-1f6064853d1a"
        },
        "item": {
          "id": "e2303bc2-4859-4374-a32c-91c877882236",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c84134ec-1177-45d6-ab3c-50ed4c936a77",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e15652-06dc-4640-831e-efea3dbd4681",
        "cursor": {
          "ref": "96ef91e6-88c4-4760-9091-a4408d1f5070",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "885fc738-8a3a-4e4e-b2c3-2d06d7b35179"
        },
        "item": {
          "id": "63e15652-06dc-4640-831e-efea3dbd4681",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2cf08abc-44cf-4c35-bb20-98543c2309cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077b2a0a-fdff-440e-b811-3d24f92307b0",
        "cursor": {
          "ref": "a236a7c2-2b8b-4604-bebf-45617249adac",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "78a4a03e-bb18-4a11-a217-266091d5178b"
        },
        "item": {
          "id": "077b2a0a-fdff-440e-b811-3d24f92307b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7a68dd71-ac35-42dc-8414-2d84ea512cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cc75c8-4ee5-4f89-92d7-93325a099151",
        "cursor": {
          "ref": "790f1cca-751a-47a1-ba18-d15b4839d0c7",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cf8f8f68-d9c1-4943-9e1b-1c5cca113229"
        },
        "item": {
          "id": "22cc75c8-4ee5-4f89-92d7-93325a099151",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f3a907f0-1e69-4779-a5a6-dcf608c9b544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08ea6eb-d067-4841-94a1-cde1c4c50b5a",
        "cursor": {
          "ref": "4ed7e56e-34de-4b03-b669-b87e34b247f0",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3eea009c-e28d-43ea-be63-65533a49099b"
        },
        "item": {
          "id": "c08ea6eb-d067-4841-94a1-cde1c4c50b5a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "61ca168a-4ea5-451d-aa0c-1faec41b7718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c036eef9-b772-479c-a120-27ff46f14474",
        "cursor": {
          "ref": "5b532c70-c06f-4c53-9f4a-121427583e02",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a650b73e-f432-4172-9a5c-33ceb38059dd"
        },
        "item": {
          "id": "c036eef9-b772-479c-a120-27ff46f14474",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c2ba1e6b-8bd7-4e48-8df6-55aa182846eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdacdd1-c225-41ef-890f-e820eb8f9899",
        "cursor": {
          "ref": "044db2e3-7cb9-43dd-b0da-4f706cab9529",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ccd6e32b-de4f-4d74-af2a-645fac1144dc"
        },
        "item": {
          "id": "3cdacdd1-c225-41ef-890f-e820eb8f9899",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d13f039-9d9a-473a-b236-992223f62461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fee8bdf-d740-49e2-9847-5547eb7a5c01",
        "cursor": {
          "ref": "f077af4a-6ceb-49fe-b1ca-51863d122fb9",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ee597e83-565d-475c-92f0-f078b3eab9a3"
        },
        "item": {
          "id": "9fee8bdf-d740-49e2-9847-5547eb7a5c01",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0a0dd0e8-7e20-490e-9bfd-e6a8809f41b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262c133c-5208-4e38-9d06-92b7ee47ed9d",
        "cursor": {
          "ref": "5860c6f5-ecf8-4ec1-a6c4-43c48c998106",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "58f8457a-9163-41fd-96ed-ec29970e9185"
        },
        "item": {
          "id": "262c133c-5208-4e38-9d06-92b7ee47ed9d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d9a537b8-2a14-4432-867e-30e6ae88a90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb26671-d18c-48e7-8bc3-75bbb5c5acb9",
        "cursor": {
          "ref": "22440fd8-aa1f-42ba-938e-edbba98dbfb1",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9f115f69-c6fc-419e-9e9c-878b82b8e3a7"
        },
        "item": {
          "id": "bcb26671-d18c-48e7-8bc3-75bbb5c5acb9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "920b8a11-3f67-4b33-87d0-f20d5d9de41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff8afc6-ffc3-46a3-b77e-40f740341486",
        "cursor": {
          "ref": "e9076311-9609-43c2-b615-72a9a0a8de3f",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e5c5a632-e911-42eb-a374-c242ed62086a"
        },
        "item": {
          "id": "fff8afc6-ffc3-46a3-b77e-40f740341486",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "12c76ab5-18d9-4944-b0d2-d7af102b129b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784bc832-2f39-4c53-83a1-35d3d4416a1e",
        "cursor": {
          "ref": "c1b5bcc4-964c-4407-8d7d-761f27e928d5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4e7821ab-b612-445c-9709-30dac3eb6db2"
        },
        "item": {
          "id": "784bc832-2f39-4c53-83a1-35d3d4416a1e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ef3a7da9-dd6b-4595-85e0-01abe45b28b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca17835c-f39a-40e1-9d21-51a218018056",
        "cursor": {
          "ref": "4d83a1a3-90b5-4ab9-8360-8a7f89f2c7f1",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "14399ec8-1848-43e5-91d9-deb1d643565a"
        },
        "item": {
          "id": "ca17835c-f39a-40e1-9d21-51a218018056",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0c54314a-f426-4ae3-b004-dbb4d732a039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed985070-c95b-47a5-83bc-973a531be274",
        "cursor": {
          "ref": "af79c7b5-d653-4fac-b3c4-c2e6e34ae428",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a9182af5-032a-4400-8957-16f2c53eb1fa"
        },
        "item": {
          "id": "ed985070-c95b-47a5-83bc-973a531be274",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80ec4c38-6ce2-49c8-a31d-a8d4d27e5e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b725c59b-b2c1-416e-a9af-0381283d0948",
        "cursor": {
          "ref": "3bbcbc0a-017d-4504-80fb-2c43522af1d5",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "76272c03-88a7-4577-8568-ab2efb961cfa"
        },
        "item": {
          "id": "b725c59b-b2c1-416e-a9af-0381283d0948",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "05114f4e-5a9e-4888-ba4f-8f7c5fe36e87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 140,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e08a6caa-252b-42b3-97ce-7dbf8e1cc84b",
        "cursor": {
          "ref": "da593907-e824-4192-bec4-d6b477c667e9",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "880f6551-4977-414e-b045-1df3959b2e36"
        },
        "item": {
          "id": "e08a6caa-252b-42b3-97ce-7dbf8e1cc84b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "66fd252d-a8bb-4099-9217-f05494eeddf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1808c64f-2807-48dc-be4f-9f1e4e22117a",
        "cursor": {
          "ref": "f08ef70d-72ed-4d92-9349-37a3ba834a54",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "43dd1222-26df-4179-9dcc-960e9a357511"
        },
        "item": {
          "id": "1808c64f-2807-48dc-be4f-9f1e4e22117a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6245348b-b94a-451e-b6e8-4d60b44792e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98562931-3927-4838-8d9c-57a87d352820",
        "cursor": {
          "ref": "dc67c49f-47a0-430e-b8c8-11b1fd7ce7cb",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f761a170-a922-421b-a06e-8f50417d5e74"
        },
        "item": {
          "id": "98562931-3927-4838-8d9c-57a87d352820",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5c2750aa-cf25-4cc6-8434-e76245e48286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcc394b-6859-4bba-a282-3cc69770ef00",
        "cursor": {
          "ref": "b826361c-1fb4-428e-b957-ff5da1faaf0b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5f276347-3582-4e91-8350-b25522d06300"
        },
        "item": {
          "id": "dfcc394b-6859-4bba-a282-3cc69770ef00",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b19cbb69-701e-415c-ba1c-93ddcc19fed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6a0377-1343-4e09-92da-20d84800bd34",
        "cursor": {
          "ref": "a07f8b2a-364b-42e6-b5a6-794f4c556f0b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f25f8318-ca69-415d-a98c-530674945a89"
        },
        "item": {
          "id": "9c6a0377-1343-4e09-92da-20d84800bd34",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4b6ced97-1336-445e-bcad-6e94cdc63bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cfc08e-9e2e-45dc-ac8b-3d48837c39bb",
        "cursor": {
          "ref": "f8f5c6a6-4928-45b0-8e6e-7c7da3c3586c",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "100c200d-5b5b-4091-9577-883c69b38426"
        },
        "item": {
          "id": "e4cfc08e-9e2e-45dc-ac8b-3d48837c39bb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2206e3a7-6051-4ef0-9317-323d1461c64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8300cba9-642e-4b72-8b30-ddeed4c6a1dd",
        "cursor": {
          "ref": "da2a32c6-02ad-43a1-a938-6cf8bfebd21c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "58e6b50d-69bd-48f6-8cc9-252b63d50c10"
        },
        "item": {
          "id": "8300cba9-642e-4b72-8b30-ddeed4c6a1dd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f55e98e6-1829-49b2-9c41-53f5a52ae211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296fcb59-21dc-4bde-a046-a925960fdbbe",
        "cursor": {
          "ref": "8c3ae0a3-9c6a-4c84-af8c-775687932218",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c119c51c-d5a3-42b7-a43d-d33ce957e1fe"
        },
        "item": {
          "id": "296fcb59-21dc-4bde-a046-a925960fdbbe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ed5429a-42e9-4d14-9043-862ac5e24edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cd3533-a851-43c2-b831-928a911b1591",
        "cursor": {
          "ref": "bc50d5f9-930d-4c3b-aac4-4d75a922319f",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "26dc92e6-3f28-4869-aa57-5cdbd52ed233"
        },
        "item": {
          "id": "52cd3533-a851-43c2-b831-928a911b1591",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9a450fc4-57bd-4323-8176-3af782e4a4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd81dc5-afa8-458d-a0b5-bbeee503dca6",
        "cursor": {
          "ref": "45701dc4-fe5b-4fc7-b1e5-4a52eae74186",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "52419eb4-4e26-4c6b-8dd4-4e8c58298c7d"
        },
        "item": {
          "id": "4bd81dc5-afa8-458d-a0b5-bbeee503dca6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4936b01a-014b-418c-ad5b-f8237ef10c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4235ec93-08b4-4d5f-90d8-9c683fbb744a",
        "cursor": {
          "ref": "2707250a-c386-4802-98ec-418acd458292",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b8e2e877-464d-4eba-9600-5e06998872b1"
        },
        "item": {
          "id": "4235ec93-08b4-4d5f-90d8-9c683fbb744a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8240c3f9-b6db-42e1-b95d-eeb529009420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560b065e-1dee-4b9a-830f-0238f098cd2e",
        "cursor": {
          "ref": "ba75f5a2-6b90-4325-a399-48d9239e435a",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4915de23-529a-4e37-8623-8106b84444cd"
        },
        "item": {
          "id": "560b065e-1dee-4b9a-830f-0238f098cd2e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "41e68879-888f-4ad1-9436-8a0c8d405c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6114b8d1-ed41-4df9-8665-a341bd23c7b9",
        "cursor": {
          "ref": "8ee28b94-eaac-4822-b522-f73b10fd87b2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3ff41c5b-2b48-4a8c-a238-5e033caae98b"
        },
        "item": {
          "id": "6114b8d1-ed41-4df9-8665-a341bd23c7b9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2954f91a-5842-4d4e-9835-31555a7d3ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6138e027-5bd2-4b31-bfb0-4f4a2aaaa1e2",
        "cursor": {
          "ref": "84425047-dbae-4b16-9ca9-6f03d8adce44",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f7bcff4b-b103-4f18-9bd4-29056e0cc93c"
        },
        "item": {
          "id": "6138e027-5bd2-4b31-bfb0-4f4a2aaaa1e2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7b103cfd-6754-4c0a-a5d0-bc447f27fc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a98b07e-059b-46f8-baa0-883b2fff3ef5",
        "cursor": {
          "ref": "c17e77f6-0637-4b57-aca0-fc497507ab55",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "35e3649a-bc1b-41ae-a307-604b1a9b90be"
        },
        "item": {
          "id": "3a98b07e-059b-46f8-baa0-883b2fff3ef5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5d4cabcd-031e-4091-a319-8bfc0b662b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62211cdb-12a4-4c52-b199-9d3b0da9633f",
        "cursor": {
          "ref": "c6f428df-5811-4dbc-b82b-a4adb3d47463",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "245de479-7526-4436-a68f-3c10d0dca148"
        },
        "item": {
          "id": "62211cdb-12a4-4c52-b199-9d3b0da9633f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cd629b37-d5aa-4273-b9f4-20bbd3efcdd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e37f30c-4579-4a69-ad78-4a16a3901b15",
        "cursor": {
          "ref": "deece4bf-6406-41c9-ad4c-422175a17538",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "124d89d4-e900-485d-9b31-ddb4d2364106"
        },
        "item": {
          "id": "4e37f30c-4579-4a69-ad78-4a16a3901b15",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2972c642-b98e-45d1-9ff9-04a01b57c48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b87c532-44ac-4883-bcd8-1768f5bff2f7",
        "cursor": {
          "ref": "82ab1db3-f541-489d-8268-c28ffaaacafc",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "03ccb2de-8b83-429e-8545-ce4dcc080513"
        },
        "item": {
          "id": "0b87c532-44ac-4883-bcd8-1768f5bff2f7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8baeb8c6-3b85-43c0-b3a6-69cc457df4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b224beb7-04db-4520-93ae-55e95b3cca99",
        "cursor": {
          "ref": "7c5abdc5-a4da-469f-83e1-131757edb3b6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bb01f9e5-8017-47bd-946e-c8c5fd9302af"
        },
        "item": {
          "id": "b224beb7-04db-4520-93ae-55e95b3cca99",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5e373823-0a38-4b2d-b8c8-703169e2e351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdddf01-05fe-4044-8d6c-6933910ca41c",
        "cursor": {
          "ref": "5b40d212-0172-4425-8592-3142a4c7715d",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8b088570-5153-447f-bf3f-43c28618356f"
        },
        "item": {
          "id": "7fdddf01-05fe-4044-8d6c-6933910ca41c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "db6a004e-21c9-4972-9112-9ee61f5d1cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded25e77-fec4-44ea-bb18-fbf153a8a567",
        "cursor": {
          "ref": "7b5cb25b-15db-4635-9b50-00ed34c4aa58",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4a9e7315-2d3c-4558-a570-1d892eb79010"
        },
        "item": {
          "id": "ded25e77-fec4-44ea-bb18-fbf153a8a567",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b735fe3f-a799-4fee-9ca5-72f14d8c7a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edccb093-d29f-49dc-bf6b-9ae64593bd64",
        "cursor": {
          "ref": "598a8212-5716-46b9-9c0a-1c7de6dbe02e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a657bb40-c605-4ebd-b2e2-9d60004a2167"
        },
        "item": {
          "id": "edccb093-d29f-49dc-bf6b-9ae64593bd64",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f0639389-7674-4a86-b878-d6a8e7b37aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c48f524-f0fe-47da-a738-9441e14c5f83",
        "cursor": {
          "ref": "4d310075-6566-4bdc-9dcd-d8b0657b61ae",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6c4d3352-831d-4955-b155-cf7c2265bfbc"
        },
        "item": {
          "id": "2c48f524-f0fe-47da-a738-9441e14c5f83",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0712150b-7ecc-4038-8134-cab4990ffce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbe3296-2061-46ce-915b-312bc16d5009",
        "cursor": {
          "ref": "1991cd26-ba46-48a9-9742-be1a6d195f33",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "175ec2fb-c9e5-4a4f-972d-6d006d56a610"
        },
        "item": {
          "id": "1bbe3296-2061-46ce-915b-312bc16d5009",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cb04200a-e1ce-4d5f-8de7-52ca9d8c842a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf41c192-cf3e-4b3b-8e61-b86f84524f06",
        "cursor": {
          "ref": "47d0ae18-a6d7-4710-9565-11ad5e7959b5",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a5d17216-9305-4590-a44d-830b496ab43a"
        },
        "item": {
          "id": "cf41c192-cf3e-4b3b-8e61-b86f84524f06",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d134f1a-2c2a-4f4b-b2f6-25100af48da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae9d87c-d557-42b2-80b6-60b6bde5311d",
        "cursor": {
          "ref": "b6d70062-5044-4b09-9d6c-ff74a8e9586e",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5fbe7ea0-c23c-49f9-a5f5-3e43a10fdfdf"
        },
        "item": {
          "id": "7ae9d87c-d557-42b2-80b6-60b6bde5311d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77e44600-fd4b-4429-929d-cacbe1c33a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b8a5f8-8527-44d9-b6e1-55381b2d05f4",
        "cursor": {
          "ref": "e42ab2d6-77d8-44bf-9ed8-ef564f2414c3",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d6ab7961-6032-4b09-b54a-52f20ee4c144"
        },
        "item": {
          "id": "32b8a5f8-8527-44d9-b6e1-55381b2d05f4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a7bde0de-7a52-492a-8ecf-3fbce20ffcd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6726ae5c-f5bb-4a16-a74e-10cf6ca9fcd7",
        "cursor": {
          "ref": "0c070b64-49b3-41cd-87af-d2b27ab41d32",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4712ecac-5b85-45cb-9736-74fb34f14cec"
        },
        "item": {
          "id": "6726ae5c-f5bb-4a16-a74e-10cf6ca9fcd7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "21bda552-20a2-473c-ab8a-c04652f14845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef0cb51-830c-426d-aff3-9ecd03b42406",
        "cursor": {
          "ref": "e70605ba-cd03-4e47-9561-1b83b219800f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "15c22b3c-d382-4ecb-94f6-0cd28423e177"
        },
        "item": {
          "id": "5ef0cb51-830c-426d-aff3-9ecd03b42406",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6fe2e3f8-0d6c-48c9-b002-75b7aafa5b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b2b1cc-4ae4-41b4-9b4b-f55aff2042ed",
        "cursor": {
          "ref": "d55a931d-d715-4aa3-8023-219af7e55e4b",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7899fe63-70fe-4b05-ad26-1ed37ca5ddd9"
        },
        "item": {
          "id": "50b2b1cc-4ae4-41b4-9b4b-f55aff2042ed",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bb6364b1-8bf0-4fe9-89c9-839d2b0660db",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "72a3d2d0-e3dc-4154-88a4-92129890d017",
        "cursor": {
          "ref": "6719f182-56c8-4493-a3de-15ecdfa057ed",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1ffde624-38fb-4f12-806c-699a3b774805"
        },
        "item": {
          "id": "72a3d2d0-e3dc-4154-88a4-92129890d017",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eec1546e-82d6-430b-b6ec-f66784d6ba7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916bb411-7154-40ae-8aad-6fb0b6074e60",
        "cursor": {
          "ref": "573bd5ee-ff7d-442d-82f4-c848f284cb77",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0dd46fa2-1110-4ec9-8f5e-15f837e7af34"
        },
        "item": {
          "id": "916bb411-7154-40ae-8aad-6fb0b6074e60",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fd95f9ae-4188-4000-b161-37e41ed6ab7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ee49d3-b116-435a-b5dd-38be256e9739",
        "cursor": {
          "ref": "43c0f2cd-ee70-4488-aca0-0c0fe5ce5ae9",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d45b1dbe-82a2-45b6-bf82-c4d613cff6ee"
        },
        "item": {
          "id": "97ee49d3-b116-435a-b5dd-38be256e9739",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3bd6c5c7-8fa9-4d5f-b290-7b7d5e992ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e4c3b9-f033-4f4e-bc50-255c9b1fa092",
        "cursor": {
          "ref": "3d78278b-92b6-4c43-ada5-8d6d0dfdc895",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5cca8973-a00e-45ec-bbb5-8bf994324bb9"
        },
        "item": {
          "id": "d4e4c3b9-f033-4f4e-bc50-255c9b1fa092",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "df84a6db-77eb-4998-b6a1-4f12595a66bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278d6b66-904b-4545-b8e6-9af63dabf70e",
        "cursor": {
          "ref": "58583d44-e996-45b5-a137-bfe7b821a3f9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "899f3b32-5bb3-46b6-963b-70e390952b9e"
        },
        "item": {
          "id": "278d6b66-904b-4545-b8e6-9af63dabf70e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "75d35234-522b-44b0-9bcb-43904080c71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2135867d-119f-4eed-9290-7ad9396b4244",
        "cursor": {
          "ref": "21f5228c-bc5d-41ab-a519-622b4db1c7c5",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0066998c-43bb-4a40-9bca-7331b0fe5e10"
        },
        "item": {
          "id": "2135867d-119f-4eed-9290-7ad9396b4244",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ef557d9-ace0-4e45-985f-ffc32757c0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee06b6d-6022-4e4e-8a40-9a16e039d1e5",
        "cursor": {
          "ref": "24b6955b-c4a3-4f0c-ad07-42f09c927b6d",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6b069aff-e8c8-4e49-88c9-1d5800bbe7f3"
        },
        "item": {
          "id": "3ee06b6d-6022-4e4e-8a40-9a16e039d1e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6791d841-a46e-4765-a6d6-0b9bb8c920bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccc66f1-c09c-4ca3-9ece-b635b0e967e4",
        "cursor": {
          "ref": "35ac4579-7aae-4a9f-b1f2-684a7ccba59c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6d514d2a-f760-47f8-8494-9df4e8b28ff5"
        },
        "item": {
          "id": "8ccc66f1-c09c-4ca3-9ece-b635b0e967e4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "44a1123c-41c7-44f8-bca7-b7e6f81bee68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a147efc2-0910-4fb5-9568-79c5694f4eea",
        "cursor": {
          "ref": "34547e58-f0d7-4341-be80-8ef1819b37ef",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e53464ed-1664-4b5a-93dd-27c433dfaa26"
        },
        "item": {
          "id": "a147efc2-0910-4fb5-9568-79c5694f4eea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "84880576-f8ad-4256-9b4b-7bd33d2f7e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af8a910-9000-4270-b73b-f7b6769655b3",
        "cursor": {
          "ref": "521be690-c7b6-4d7f-8ff7-d9ad827e9d6d",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cecc7a9b-23c7-4208-bdad-d4eebc36378c"
        },
        "item": {
          "id": "6af8a910-9000-4270-b73b-f7b6769655b3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4587f07a-2db3-45c1-9429-e5659f38106c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc337941-ae39-4ef4-91d1-f6013eed7c09",
        "cursor": {
          "ref": "62b9a389-535e-4e56-865c-83925bf56e2e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7f27ccfd-242a-4240-937d-599d2324032f"
        },
        "item": {
          "id": "fc337941-ae39-4ef4-91d1-f6013eed7c09",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4255c198-c986-40c1-9d29-a94663be295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f03a42c-c3fa-4e27-a7dd-30c74fdb0696",
        "cursor": {
          "ref": "b06b5ec3-9020-443e-9a65-9c5230aa575c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "06c3e2e6-1ee5-46e2-8070-78f460026b81"
        },
        "item": {
          "id": "3f03a42c-c3fa-4e27-a7dd-30c74fdb0696",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7d2d7d8c-6a3a-4937-873e-8c01e02ca426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08247c3c-ed21-4eb1-8b42-8738086b1370",
        "cursor": {
          "ref": "35a6e322-2550-4e9c-ab09-fcb7dacca438",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2f89d242-d7a8-44e6-a310-62ee731c712d"
        },
        "item": {
          "id": "08247c3c-ed21-4eb1-8b42-8738086b1370",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fbaaaa9c-92b9-4ceb-ab6b-7996a7dd1938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9926d9-1011-4418-a7d0-2f95f9ef3b8d",
        "cursor": {
          "ref": "0601269b-ce91-4a57-900d-6adfba2ec1af",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "487b52dd-a526-4277-96c6-8dd258ccfc39"
        },
        "item": {
          "id": "0b9926d9-1011-4418-a7d0-2f95f9ef3b8d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7c0f2f41-87de-488a-bcf0-a9b5e0a35e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464d9204-eee8-4691-a136-8c2f87d16edb",
        "cursor": {
          "ref": "95a46329-c658-4e0a-a0af-f204c8b9f087",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "658d597d-d32b-4b72-a863-92da42937d12"
        },
        "item": {
          "id": "464d9204-eee8-4691-a136-8c2f87d16edb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "32534bba-80b5-494b-8298-aa9ccca7d29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9e743b-1dc7-4833-91dc-7bb1ccf5a3db",
        "cursor": {
          "ref": "45687a95-bf80-4b2b-a3ea-b730adb1cf2f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d0305fa5-e024-41b3-92ca-87737a54cd4f"
        },
        "item": {
          "id": "fd9e743b-1dc7-4833-91dc-7bb1ccf5a3db",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1f21ad31-4080-4f08-94a3-830b402380d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb95d0f-e276-4d52-b0bb-765d7e22c02d",
        "cursor": {
          "ref": "3618ec4a-d4dd-44e3-acf6-fd5edb25c8bd",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "32a0ab0e-ce9e-4e9a-9950-84fedeae45a9"
        },
        "item": {
          "id": "5fb95d0f-e276-4d52-b0bb-765d7e22c02d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0ae8a537-8604-4434-8ede-f4cb3a407c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05923879-3fc6-43a1-97fd-5211dc3400ac",
        "cursor": {
          "ref": "cdef8be7-4d90-4e44-a96f-7d0dbe61c9f9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4395c48d-858b-4a86-a906-593422f32ba6"
        },
        "item": {
          "id": "05923879-3fc6-43a1-97fd-5211dc3400ac",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8950f2ed-6f27-4dde-865e-0d7561f0822a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4c775d-0628-4764-b266-bdf20b4a8428",
        "cursor": {
          "ref": "e091c3b9-cc2d-4c21-b5fa-5c03781a3471",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "232e843d-d90c-44a5-a956-f2997f2f4d8c"
        },
        "item": {
          "id": "ca4c775d-0628-4764-b266-bdf20b4a8428",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "71147f62-4d5d-4b8f-aa7c-a1938755feba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb145733-9c0a-4121-a037-7b2624be75e3",
        "cursor": {
          "ref": "688dffcb-c4d5-4d16-840d-cbac641a54bd",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ccc6e27c-2b90-464b-a2f2-5f044af863d5"
        },
        "item": {
          "id": "fb145733-9c0a-4121-a037-7b2624be75e3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f44412d7-2bae-4c11-a962-dde6bc5c69b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19e3aef-b0f5-492f-b585-7b3c60e247e6",
        "cursor": {
          "ref": "798791ed-5b0e-4348-a84b-32f44de684b8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "69b3ad35-d831-4f2d-a54a-f421a250ec8c"
        },
        "item": {
          "id": "a19e3aef-b0f5-492f-b585-7b3c60e247e6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9f317a9e-172f-4c75-bdf0-3ddcdea7c174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9eeed65-7dc8-4c25-a3dc-5488c703826d",
        "cursor": {
          "ref": "e623060f-83ac-413b-b1c8-e936027f6ba8",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dafc774a-d27b-47a7-bf09-2ce45e85044d"
        },
        "item": {
          "id": "f9eeed65-7dc8-4c25-a3dc-5488c703826d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6027c27d-a95a-44fa-838b-e361cc86a2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b9bd3f-2031-4e9d-9569-a79d177f6f84",
        "cursor": {
          "ref": "824525ea-d34f-46e4-9934-737d9b58490d",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f503893f-3117-4bf3-b5e6-840356228380"
        },
        "item": {
          "id": "a0b9bd3f-2031-4e9d-9569-a79d177f6f84",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b53d49bb-2d5e-4628-9042-6eba78bc2524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6db340-94b6-4ede-9986-a68811a36bde",
        "cursor": {
          "ref": "e4b72685-abb1-46b2-b339-142265a585fa",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "302939f8-99b1-467a-9ac9-0b6c6e8d3089"
        },
        "item": {
          "id": "fe6db340-94b6-4ede-9986-a68811a36bde",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d7b4aba7-bca9-4150-87fe-083471403fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26017d1a-cc61-41a9-86ad-68a17c759b74",
        "cursor": {
          "ref": "ef3488c2-3bcb-4e81-802b-cc85b20766d7",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d9a8529a-8ea9-4a3d-93d3-5c509ce224d0"
        },
        "item": {
          "id": "26017d1a-cc61-41a9-86ad-68a17c759b74",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "241ad2c5-f724-4eb3-b009-5439652bb2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76c5456-35ae-4ecb-8db7-7adeaaf78024",
        "cursor": {
          "ref": "bbad7def-7ff5-4afd-9b09-55ba1a4e08a3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e3f44657-7203-47e6-9df5-5c12aac919a8"
        },
        "item": {
          "id": "a76c5456-35ae-4ecb-8db7-7adeaaf78024",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b388d9cd-7011-4aa1-a84b-f95285cadc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5fecdd-04ec-4eb2-b238-87f3aef8b9ca",
        "cursor": {
          "ref": "0d839a70-5af8-4004-ad17-236af2c1bcce",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3769eae8-a62c-4d35-8f8e-ee73c2c52337"
        },
        "item": {
          "id": "5c5fecdd-04ec-4eb2-b238-87f3aef8b9ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2125c476-896f-4e2a-997d-b769facfb6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b8d6ed-6e55-44fe-9f06-22b9d6a163ba",
        "cursor": {
          "ref": "f82e1c61-14da-4dad-a357-9b905b1cdc84",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "50c7c9c1-23e2-4f77-b2a9-f4b2c5077f8e"
        },
        "item": {
          "id": "e3b8d6ed-6e55-44fe-9f06-22b9d6a163ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b7043aa2-ff73-411f-a50a-3793c3f5c121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a952e5-5b7d-47c0-b005-428e6f6eb5d4",
        "cursor": {
          "ref": "cf97a258-6d4b-47b4-80d4-d02fbac911bc",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "72b34c0b-637a-4d31-9bbb-5a76232481cf"
        },
        "item": {
          "id": "d8a952e5-5b7d-47c0-b005-428e6f6eb5d4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f7c0fe96-4b44-4685-a717-784eb56676bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c3db3d-f215-40c0-ab7e-8a6a1ebe768f",
        "cursor": {
          "ref": "96aa6e1f-e3a2-4bd6-9e93-5367b1f66d3c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "030bca0e-1038-453b-af94-97691391abe7"
        },
        "item": {
          "id": "b1c3db3d-f215-40c0-ab7e-8a6a1ebe768f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0c397340-d319-4213-b862-74a7005a5131",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "6146175e-2792-47e6-b48a-b87d723cc694",
        "cursor": {
          "ref": "638877a2-2e99-4dff-a417-f88cf8b92292",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c75d7446-2d5b-4dcb-b2a2-f0ef333b645b"
        },
        "item": {
          "id": "6146175e-2792-47e6-b48a-b87d723cc694",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ed668580-f3d6-42b0-b1be-2cbc4f28eb9a",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9fbe784a-56c1-4ae1-b833-f1e7d5135893",
        "cursor": {
          "ref": "df152175-5432-47ef-b9dd-f23051dfc624",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "26bcf971-d775-4a2e-acbb-79cc193a34d5"
        },
        "item": {
          "id": "9fbe784a-56c1-4ae1-b833-f1e7d5135893",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7a8fc22e-2493-458a-828a-b17f3758ef0f",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8978d04f-0f70-40bf-9767-59a8f34923e2",
        "cursor": {
          "ref": "0faabb33-35b3-4370-bc10-50a5d8af60f5",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "46b31719-8e52-439c-8720-873bac106a20"
        },
        "item": {
          "id": "8978d04f-0f70-40bf-9767-59a8f34923e2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "df017b93-b3ec-4704-bce6-36fd66762c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15400fc-5786-4e5b-b192-4a704ff09cf7",
        "cursor": {
          "ref": "c0668257-9393-458c-9a0c-ba09c4c9793d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2fee3ee8-b7ee-4ddf-9eea-ceeeafc8a84e"
        },
        "item": {
          "id": "e15400fc-5786-4e5b-b192-4a704ff09cf7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5094cd2b-2564-4f52-be02-41e7054eee15",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4b117a05-3c9d-4d57-ac30-7cb32edf32dd",
        "cursor": {
          "ref": "a2ae78f3-0483-48c4-9a1b-b42069fb526d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a849ed11-b8bc-4da4-ad84-ce7c4a174cda"
        },
        "item": {
          "id": "4b117a05-3c9d-4d57-ac30-7cb32edf32dd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3a7f65b9-3b1c-4916-9289-e47b928ee4b9",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "47329568-15f8-421b-9e0b-eb9b6e102169",
        "cursor": {
          "ref": "73c3c28b-d451-4218-a2cd-371d263650ed",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3619e31b-586b-4a4f-92c0-e762a3d0c487"
        },
        "item": {
          "id": "47329568-15f8-421b-9e0b-eb9b6e102169",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fedd0f08-9471-46fd-83fb-f5ba8b1638d6",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9336af7f-2b0b-499b-aaea-b2d2a83c7aee",
        "cursor": {
          "ref": "4bea5f6d-1fac-455b-895a-c8aa04f5e8ae",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "acc9d58c-a0df-438d-94d3-18055b802121"
        },
        "item": {
          "id": "9336af7f-2b0b-499b-aaea-b2d2a83c7aee",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "af88ad38-0752-4336-80b8-721c4c95d309",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cf739389-f7fa-4c45-92f8-57f7b70027d6",
        "cursor": {
          "ref": "c83c1fb3-b6b1-4c66-8b43-a7a2ee78a013",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "61f18743-f0c3-4e3f-a8d5-c771023c5fe0"
        },
        "item": {
          "id": "cf739389-f7fa-4c45-92f8-57f7b70027d6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4e8a26e3-063b-4c34-b4db-9ccb5e85feb7",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e71437b4-942e-4569-bccb-4a4027fd8e3b",
        "cursor": {
          "ref": "57de213c-63b2-4d5f-8711-271890c23b84",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d3bd73b0-991a-45fd-88fb-822536a1fae2"
        },
        "item": {
          "id": "e71437b4-942e-4569-bccb-4a4027fd8e3b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "388de4e6-d5cc-46d2-98ad-12055a81b455",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a8ed8db5-a830-4dff-9438-47904a2f15b0",
        "cursor": {
          "ref": "dd6478af-ec6c-4c25-85b3-be51788d33d9",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "746f730b-d9c3-4b76-a775-23a3bbaee807"
        },
        "item": {
          "id": "a8ed8db5-a830-4dff-9438-47904a2f15b0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "28477879-0111-4b51-b588-290dc5cc7722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a086ee80-6783-488a-92f6-207e3aab8e05",
        "cursor": {
          "ref": "6fb933fa-4d2a-4c2f-908b-945c4ba42fff",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4509bebc-f644-435e-a0c4-f12a8e86f942"
        },
        "item": {
          "id": "a086ee80-6783-488a-92f6-207e3aab8e05",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "afcd431d-dd1b-49c8-99e4-9bc396a0a57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3e1113-2a1d-4e39-aa1c-b3221516c26b",
        "cursor": {
          "ref": "157858f5-5c9d-4cd9-80af-6fae39184e19",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8e28ac77-1223-4146-ada6-d873320752b3"
        },
        "item": {
          "id": "2f3e1113-2a1d-4e39-aa1c-b3221516c26b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c5a634f5-7186-4604-bd5d-a9adf42ac8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78c2ee1-d5f6-4b50-8dac-08ab8362adbd",
        "cursor": {
          "ref": "a016638e-3af4-472a-abb2-0012d457583f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "563ee869-f86f-4bda-8b9a-3372cc3aa209"
        },
        "item": {
          "id": "f78c2ee1-d5f6-4b50-8dac-08ab8362adbd",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "469cccc8-3e66-4df8-9e42-dd90d892ffb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef5ea37-fac3-4c2c-96ca-109787a2c364",
        "cursor": {
          "ref": "669e1672-40a4-435c-9a76-50b520d5df2c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5370df13-90f6-4289-bde8-b37ef685e8fe"
        },
        "item": {
          "id": "0ef5ea37-fac3-4c2c-96ca-109787a2c364",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f01a5d94-6b96-4ce9-83ce-bd0c0591dca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed46e1c-1ace-48b1-a1ce-8d75cfb762b0",
        "cursor": {
          "ref": "2b0f4108-2cac-490f-9fac-b4801a73ebd9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "faccd5ca-6e44-4032-a610-488b944b6a18"
        },
        "item": {
          "id": "eed46e1c-1ace-48b1-a1ce-8d75cfb762b0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e2c753a2-f5f6-4177-87e4-61988b1ffc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebed5cb7-7b42-4375-8fde-45a200e848e8",
        "cursor": {
          "ref": "114f2bc2-097a-4b30-a60b-53fe4ce6cd64",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7cecbb90-eae5-40b3-9aff-9def24a7e959"
        },
        "item": {
          "id": "ebed5cb7-7b42-4375-8fde-45a200e848e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9d490e33-fa34-4962-8dc6-96c1a5ac27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0213c9b-d186-4a37-90d7-18ded149b235",
        "cursor": {
          "ref": "f83f4021-35d0-4d99-b757-372cf400fce2",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f47205a4-ed0f-4e78-8b61-63b16d435682"
        },
        "item": {
          "id": "f0213c9b-d186-4a37-90d7-18ded149b235",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "189b331f-3a8e-4ff2-ba34-f59125f3b5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7475a7-0bdf-4e1b-95ad-ff66c323c558",
        "cursor": {
          "ref": "b63c784a-5d7f-4323-b5c5-c24a9b7dcee0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4b312007-b1f1-4114-8e31-bb0dfff9e65f"
        },
        "item": {
          "id": "fa7475a7-0bdf-4e1b-95ad-ff66c323c558",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "014b35df-2a26-4afc-9e80-56ca2fd47685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440e8deb-985a-4ea5-bb82-13160646a0f1",
        "cursor": {
          "ref": "f49f6f82-ae32-4ce2-b8ff-cbd18110c4e9",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d864edc0-af33-466b-b6d7-e6e6c00739c4"
        },
        "item": {
          "id": "440e8deb-985a-4ea5-bb82-13160646a0f1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4c2e1576-eaf2-4664-8aab-1eaf65c6c20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afe3364-ffe5-43b0-97c0-7104d0a8a40c",
        "cursor": {
          "ref": "8ea34627-f157-4b12-b686-93cfbff01444",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8c0d6f4e-a816-41a7-bdf4-07f1bb073168"
        },
        "item": {
          "id": "3afe3364-ffe5-43b0-97c0-7104d0a8a40c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cbd7bba7-7557-46bd-86e5-80f438477151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a321394-1291-4be5-824b-e8cd84e15760",
        "cursor": {
          "ref": "f322431c-6a34-4752-bc51-45f0541ea861",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5ff14f3c-31bf-42a6-91fe-004828ad52a3"
        },
        "item": {
          "id": "1a321394-1291-4be5-824b-e8cd84e15760",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "98dcea58-c30a-4a5e-9b59-55032de2c961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9680a5e-c3a5-40a7-90b7-863005548fc5",
        "cursor": {
          "ref": "15d15291-58f5-488b-9f3f-90a6e31b98e6",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "736bfc49-01ea-4597-bf8a-51b8e0bbd80d"
        },
        "item": {
          "id": "a9680a5e-c3a5-40a7-90b7-863005548fc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b968c1e0-f9ad-447c-a406-1d62353bc158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1996cc70-de5e-4922-976b-fa17991d6741",
        "cursor": {
          "ref": "e7d46ad5-cadd-4836-b02c-3dd846c82f1d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ee020193-6a8f-4c38-84fc-774922e6ed01"
        },
        "item": {
          "id": "1996cc70-de5e-4922-976b-fa17991d6741",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a9d3126e-1192-4566-8c74-71353c21a434",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "670a73f5-64cf-48fb-888c-b5ecd9bc4b41",
        "cursor": {
          "ref": "c018e89e-c046-4d5b-872e-bf5fbcc4e738",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "23599511-1e3f-4492-b28b-18253f8d060c"
        },
        "item": {
          "id": "670a73f5-64cf-48fb-888c-b5ecd9bc4b41",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bf139312-8aa3-4637-9a12-02501264e7f2",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "2fd2d15f-b3ba-4a64-98d4-897175f3f53f",
        "cursor": {
          "ref": "d029979c-7a8b-4f34-90c4-d35871ad570e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5494aed6-2f97-48e9-94ab-9b64c6aacc7a"
        },
        "item": {
          "id": "2fd2d15f-b3ba-4a64-98d4-897175f3f53f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1e741caa-0850-478e-bbd0-d72a07c193e0",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "06d92d49-23c1-468b-9e90-0da198cfbe8a",
        "cursor": {
          "ref": "56b4924c-5eb9-492b-81de-4aa22d330cdd",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "22a12d8e-e17d-4836-baa1-6926f29c9600"
        },
        "item": {
          "id": "06d92d49-23c1-468b-9e90-0da198cfbe8a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "077d173e-460d-4b50-b25e-6d121eecf7c4",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "085e7a8d-9632-4894-a024-19421591f93a",
        "cursor": {
          "ref": "edbd608e-7334-45db-88ba-40e572e69899",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f76bcfb7-7a62-4c7d-bb6e-40759f0a0bc6"
        },
        "item": {
          "id": "085e7a8d-9632-4894-a024-19421591f93a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "30c8e07a-890b-4808-acff-8d6295f0e558",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b68768f9-570e-4e86-8726-f698439e0d59",
        "cursor": {
          "ref": "350785e5-7530-497a-937a-f05177ffb692",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "686f9488-fab1-4249-9eee-0b999909b1bb"
        },
        "item": {
          "id": "b68768f9-570e-4e86-8726-f698439e0d59",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b1984637-3288-44cd-8cc2-b51b59a3a5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172adaa7-6cd8-40cb-b0e0-fc49ca89fcdc",
        "cursor": {
          "ref": "130ebdc5-b341-4e13-b685-531174752486",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "35438269-5cc5-4e47-bffe-7dbfe27a7469"
        },
        "item": {
          "id": "172adaa7-6cd8-40cb-b0e0-fc49ca89fcdc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c63a0b79-444f-4e2e-8aec-2cd3e9f76d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9dc5fb-3044-48e3-b048-74f7a8e03732",
        "cursor": {
          "ref": "62d17b14-f68e-4aed-9407-b373b4f12d6a",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e4b40a7f-5b4d-49a1-a131-9981328c1e9f"
        },
        "item": {
          "id": "3b9dc5fb-3044-48e3-b048-74f7a8e03732",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "73369ae6-0eb6-4eb8-9ac0-9a10f40ec506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97a84ef-2623-4ddf-8b48-76fa70372945",
        "cursor": {
          "ref": "09dab429-9075-4e4a-9c7c-738e1bc7167e",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c9ab5fa2-d058-4c64-9444-341f89768913"
        },
        "item": {
          "id": "c97a84ef-2623-4ddf-8b48-76fa70372945",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e7dba265-e6b3-4446-8990-4a3775a29b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dae67d-d355-41c4-8f5c-aefb87a328f6",
        "cursor": {
          "ref": "abdef903-3063-4d45-b7be-2a7c14cbcc83",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "19f58903-347f-4571-bfca-a679c872ff29"
        },
        "item": {
          "id": "66dae67d-d355-41c4-8f5c-aefb87a328f6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "da22ba80-00eb-49e2-9d84-e5be57a026e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde0a3bf-6d9c-45a1-9c1a-36824abad34d",
        "cursor": {
          "ref": "0cfee9c2-5c1d-48d9-aa14-ab205b4bde24",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "81c06666-b56c-40ab-bd3c-008dbb390422"
        },
        "item": {
          "id": "fde0a3bf-6d9c-45a1-9c1a-36824abad34d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f09bfb6d-84a4-49b5-a05b-9caa0ef8978a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafa6579-5066-4a9f-b50a-cae2a2bae55a",
        "cursor": {
          "ref": "cc4c218f-151d-411b-93f4-99ec2f9d659c",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a5e5fe87-6b3e-4af3-8d80-b2978f907b08"
        },
        "item": {
          "id": "eafa6579-5066-4a9f-b50a-cae2a2bae55a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "46610e50-91e8-4bba-a5ed-6b6069a660d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15eeaa93-18e2-4e82-85eb-180bc0eb7613",
        "cursor": {
          "ref": "33e2de56-5ac0-44be-b40f-f9faff137073",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "776a0264-68a0-4a73-b118-2cfb39d83690"
        },
        "item": {
          "id": "15eeaa93-18e2-4e82-85eb-180bc0eb7613",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "edf7c0a4-bda2-49ce-a459-fdd95b1cfeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb55887-dc75-43cd-8c65-ee98dd711dd3",
        "cursor": {
          "ref": "f78b3ce5-e7d4-460f-831a-bbc9945ff8ea",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f6e23d45-ae49-4e46-9b98-059846166cc0"
        },
        "item": {
          "id": "edb55887-dc75-43cd-8c65-ee98dd711dd3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5abef90b-35d0-4295-8c33-7398e176578c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c8d589-eaf1-4eaf-8ad7-a44a4e5c38ff",
        "cursor": {
          "ref": "2202652c-f0e5-4bb7-a455-fa99b23c0ad1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0e3d05d7-5746-48ab-b246-4b674dd924f1"
        },
        "item": {
          "id": "d5c8d589-eaf1-4eaf-8ad7-a44a4e5c38ff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c26e2666-7eff-4a38-b83e-69ff0b32753d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4af65ea-151a-4008-b92d-c74076606c73",
        "cursor": {
          "ref": "3d6da68c-4352-4610-a668-f87e95afcf4c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "42f5b1f4-4ef5-4b7a-b934-6a5d6f4020f7"
        },
        "item": {
          "id": "d4af65ea-151a-4008-b92d-c74076606c73",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a3224ec2-dd5a-4d72-9c5a-1095157e6970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75add59-08c6-40f5-b5c5-955a30949b1e",
        "cursor": {
          "ref": "e4f81293-bf3d-4b28-bce5-6cf227528131",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "afda2aad-93e6-4baa-ac01-d52d49ef8ceb"
        },
        "item": {
          "id": "f75add59-08c6-40f5-b5c5-955a30949b1e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "87b4d5da-1459-4f8c-909e-7f3904dec156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923db35c-9f16-4f7b-905a-07d332011e52",
        "cursor": {
          "ref": "42b4253a-36ac-4dd5-91a2-62fc9ebcd48e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dc40c4fe-07d2-4bda-b1f5-bb0019b2f3ea"
        },
        "item": {
          "id": "923db35c-9f16-4f7b-905a-07d332011e52",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aff3b82b-2b6e-4ddc-b971-f5eeaf83950b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b5bdf6-a478-42e3-b922-d232571ac743",
        "cursor": {
          "ref": "8a378b1e-9379-4fa2-b181-b49fcedd1f78",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ee89724d-bd61-4b2d-a2ff-eec9bad88847"
        },
        "item": {
          "id": "61b5bdf6-a478-42e3-b922-d232571ac743",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f4c9554e-5759-48b9-aad4-8ec685b2719e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0937f98-05ee-4b66-99ad-b64bffb7a2b0",
        "cursor": {
          "ref": "35127322-9a75-42db-a6d8-3a2c9bbefbad",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "272cb0e5-bf07-4b6f-b947-67151f2d568a"
        },
        "item": {
          "id": "c0937f98-05ee-4b66-99ad-b64bffb7a2b0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "004f7453-2533-440e-8679-8dc497df4ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0a5c63-93bf-4b93-be83-387b52b81c91",
        "cursor": {
          "ref": "11567ff0-5a9b-4d42-87ee-55dcd237530c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1851c50e-bb49-4a7a-b177-ef0dd7d64d26"
        },
        "item": {
          "id": "8b0a5c63-93bf-4b93-be83-387b52b81c91",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1c5dcd7b-24b4-44b4-be22-23e29a9043f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7142a6-822c-42ee-8f0c-96a2a4b62f0f",
        "cursor": {
          "ref": "349b01d6-241a-44f5-8ed6-fee1c6af0658",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1b6201ac-9aa5-4e3a-94f2-8c6c33b9d440"
        },
        "item": {
          "id": "2f7142a6-822c-42ee-8f0c-96a2a4b62f0f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1770c346-3cb5-4e2b-b0f4-e254633586c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8e27d6-0fec-4339-83c1-2b269c1e44b8",
        "cursor": {
          "ref": "da22b1fb-b5fe-4428-9bc1-cb5593a869ae",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "15368667-1e19-4ab0-82bf-f36fc4048975"
        },
        "item": {
          "id": "7e8e27d6-0fec-4339-83c1-2b269c1e44b8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b02f206d-d9af-4bbc-a782-1ac8f50e8eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeae9f96-e786-4476-bc62-67e1fb7e5b04",
        "cursor": {
          "ref": "f3ce2332-ff55-4a75-8c66-3240e919c12b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4ff12d8d-4676-48f1-add7-c4f2b96d36f2"
        },
        "item": {
          "id": "eeae9f96-e786-4476-bc62-67e1fb7e5b04",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4d002017-d9a6-4673-8d96-d7c773262ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3d1ca0-9ddb-4aa6-93d1-ea23e22dc2b3",
        "cursor": {
          "ref": "46d0e4a4-97c6-4447-8567-96b9f56ebed5",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "39769e66-6b98-4437-870b-c16d05769a7b"
        },
        "item": {
          "id": "ac3d1ca0-9ddb-4aa6-93d1-ea23e22dc2b3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dc40654b-b0cb-412a-83d7-e56f05630247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868b4df9-cdf9-4912-ad7f-0fd20e93002a",
        "cursor": {
          "ref": "f441016b-53a5-4c37-b4e5-aa2f7e461196",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e4ba16a3-228b-4cda-a804-23bbf767475d"
        },
        "item": {
          "id": "868b4df9-cdf9-4912-ad7f-0fd20e93002a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bf4aeaa9-5396-4af2-8b17-9a8ac41bc181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ba9965-cfe8-4e0b-bf6d-edace22cdb5c",
        "cursor": {
          "ref": "d340fadf-23e8-40b1-b8c7-e0480ba0cae5",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f969a595-b4e2-4d06-bd4c-4cf60ab6cdc7"
        },
        "item": {
          "id": "c6ba9965-cfe8-4e0b-bf6d-edace22cdb5c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d80e4314-fd09-4366-ae4f-b36ec86bd460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30701d86-0058-4030-a106-a42c92d4817d",
        "cursor": {
          "ref": "2842a359-1cab-457c-a9da-7470dbd2b8ad",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3acd8c7e-84ce-47f4-ba76-649aa85a1edc"
        },
        "item": {
          "id": "30701d86-0058-4030-a106-a42c92d4817d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dc418336-a223-4b70-8b8d-8fd6fb901784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad69af4-bf95-4fea-8648-12d1b6ba8aa3",
        "cursor": {
          "ref": "fc573f9f-d649-46f3-a08d-30cab166a46c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5c948e78-4225-4810-8713-840c36b20f2a"
        },
        "item": {
          "id": "cad69af4-bf95-4fea-8648-12d1b6ba8aa3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0b74142f-7db1-45fd-99b6-e717c5e05c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d51999-a216-41b1-a219-09b9229591c6",
        "cursor": {
          "ref": "766bc4d4-b291-49ec-a402-3ad0fe15965d",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7e1608cc-b601-4503-a814-df2a81798e51"
        },
        "item": {
          "id": "43d51999-a216-41b1-a219-09b9229591c6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d8d707d7-e100-405c-ac97-12c183720dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dd982c-da5d-461b-871b-589314c03154",
        "cursor": {
          "ref": "695c83eb-0a0d-44af-a19a-9b2ac048e790",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "44eec1a7-fc38-4131-9784-7df843ce4af9"
        },
        "item": {
          "id": "67dd982c-da5d-461b-871b-589314c03154",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dd03d52c-56b3-46ee-855c-b09012c75467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c79c467-4944-4075-9120-49af80f19072",
        "cursor": {
          "ref": "88f54d15-bce7-47cd-9957-e3682ad8d8fd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a58be591-9c2c-4ef0-9c38-6e499512822e"
        },
        "item": {
          "id": "3c79c467-4944-4075-9120-49af80f19072",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e1a0a554-0135-4638-81fb-d3d91b06433b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82471420-1dc7-4f12-ae90-b8f8010c3045",
        "cursor": {
          "ref": "82a678e2-ca89-47fc-a2a2-af44a006b23b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1dca8e1-74ec-4ba7-a75c-41074e78d2b8"
        },
        "item": {
          "id": "82471420-1dc7-4f12-ae90-b8f8010c3045",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d02e9654-2118-4e0a-bbf7-aa31d24e5499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd945730-52bd-43ce-be7c-3863ccd43158",
        "cursor": {
          "ref": "d7080351-808e-44a2-838b-7796e6c7c268",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "258b22f9-3deb-4806-99ef-b161fffc6365"
        },
        "item": {
          "id": "bd945730-52bd-43ce-be7c-3863ccd43158",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "26ccb968-1f02-473b-bb27-d2cb0f99304a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43021b35-e3e1-4873-9a4e-6ddcdef11f8c",
        "cursor": {
          "ref": "8872bcd6-f4f8-4cae-9fb0-87c9a5e1ec7d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8285ec5d-78a4-49a1-9c9e-2662b932459a"
        },
        "item": {
          "id": "43021b35-e3e1-4873-9a4e-6ddcdef11f8c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "67d88e71-d34a-4f7c-8361-af3df8fdba18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eb11de-ca5d-4164-84b2-78cbceda1d8d",
        "cursor": {
          "ref": "987f1fc5-64d8-461d-8e7e-3333601b6849",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9629a627-5bd0-4f5f-bdbe-828cd50be612"
        },
        "item": {
          "id": "72eb11de-ca5d-4164-84b2-78cbceda1d8d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "59f55fb4-d04d-4ae0-bee3-7867b216388b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e504ad9-c6f6-4d69-81e1-eeb7ac3ed8dd",
        "cursor": {
          "ref": "e155bd1d-8f35-40e0-8250-6226445b787c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a1b92f04-95f7-4114-8370-77cc8978b443"
        },
        "item": {
          "id": "5e504ad9-c6f6-4d69-81e1-eeb7ac3ed8dd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "60a03455-0ce4-4974-b6de-e68b522f26de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c69d01f-1a4e-4f69-ad52-8a75ac3b02f0",
        "cursor": {
          "ref": "c9ccfc00-983f-4c44-8062-59804ca6ea31",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "96797879-a51a-4896-b069-67152804294b"
        },
        "item": {
          "id": "2c69d01f-1a4e-4f69-ad52-8a75ac3b02f0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9489b6df-19df-4e13-a041-d6ded774cea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9057e93-1db9-4686-a3d3-fdf5b8b2a3b3",
        "cursor": {
          "ref": "5c867379-d6cc-42d8-b32b-b3d923483b22",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "feefba18-e9fb-4c3e-95f4-5fb075eed686"
        },
        "item": {
          "id": "f9057e93-1db9-4686-a3d3-fdf5b8b2a3b3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ae22697d-27a8-4d2c-ae03-ec172601c58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92c87f2-6f83-4870-a15e-bab193500ba7",
        "cursor": {
          "ref": "38fee680-62a4-4b00-9d74-8f79db8c5016",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4c33044a-2636-420f-b0f2-80dcf1a2e90e"
        },
        "item": {
          "id": "c92c87f2-6f83-4870-a15e-bab193500ba7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7d903310-85dc-4c16-9b63-3ca5da523597",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c186ed20-f38c-45ed-83cb-9bd9d2509dc0",
        "cursor": {
          "ref": "e825d341-71bf-4234-833b-cdd9d81128c9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d538bd3a-491e-4a69-810c-73993638dee7"
        },
        "item": {
          "id": "c186ed20-f38c-45ed-83cb-9bd9d2509dc0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fcd0a103-ab94-4b4c-b2dc-da7ff73337bd",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "da8fd290-a5ff-4c32-b2de-77be3d365583",
        "cursor": {
          "ref": "ced46bab-b1c8-4a9e-b825-36d0792407fb",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "840816a1-5ce7-4b32-b859-7ee45cf5302d"
        },
        "item": {
          "id": "da8fd290-a5ff-4c32-b2de-77be3d365583",
          "name": "credentials_verify"
        },
        "response": {
          "id": "664c42ee-ffd1-4900-96a9-9f073fa667ee",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "06600f61-6618-4e0e-abf1-bc25ae24101a",
        "cursor": {
          "ref": "c55e91ac-c1b9-4ca0-ad68-db96db4af878",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4366a7a4-f50c-4398-baa0-f2f2567e3e09"
        },
        "item": {
          "id": "06600f61-6618-4e0e-abf1-bc25ae24101a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2a889d8f-d354-4f5a-835b-397a3cc1a03f",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c09e54-cea7-42d1-8de2-f87f6aae2039",
        "cursor": {
          "ref": "d8608013-03db-4462-bf04-f4160da74322",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21225102-7c39-4954-9499-e84a6d6d3692"
        },
        "item": {
          "id": "51c09e54-cea7-42d1-8de2-f87f6aae2039",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7739fa7-6638-4b2c-8853-3be774b107af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c09e54-cea7-42d1-8de2-f87f6aae2039",
        "cursor": {
          "ref": "d8608013-03db-4462-bf04-f4160da74322",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "21225102-7c39-4954-9499-e84a6d6d3692"
        },
        "item": {
          "id": "51c09e54-cea7-42d1-8de2-f87f6aae2039",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f7739fa7-6638-4b2c-8853-3be774b107af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416d290e-e18e-40e1-84ab-c22ece24c657",
        "cursor": {
          "ref": "fd6c4fdf-e4fc-4451-bb06-90f239dc2074",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d60b1bc0-0122-43c4-b937-4657476a964a"
        },
        "item": {
          "id": "416d290e-e18e-40e1-84ab-c22ece24c657",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4f900f0f-b86f-4dd4-baa5-189e031f1186",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75461d8b-70aa-4714-bd19-6ad414d3d413",
        "cursor": {
          "ref": "628af4fa-e1c8-43de-b397-744bd0d84ac5",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "82b6ed9c-7079-4274-a7c0-3881f7512136"
        },
        "item": {
          "id": "75461d8b-70aa-4714-bd19-6ad414d3d413",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "13757176-064a-4a4d-9744-b47089cbc4dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}