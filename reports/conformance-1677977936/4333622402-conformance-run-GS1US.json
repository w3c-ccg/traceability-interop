{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "66142d66-eb83-4680-ba57-166a414a21f4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6e9f1007-4991-4700-bcd4-973e7ce9c473",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ae05f8d-fe9a-4333-86a5-ec814abe2ab3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "259e3136-5f50-487c-8774-75c6ee048420"
                }
              }
            ]
          },
          {
            "id": "cddb2cf8-e4c6-44c1-aa70-cdb0159cdab0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b321220d-9d9f-4281-9ec1-7b30fd170ced",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9eee4dae-f0a1-4985-a14a-d301e54f3036"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9387c7eb-659b-4122-8bf0-52085aa7c55f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a8711b99-b28d-41a5-818a-83a143f2d1cf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22515ddb-75fa-45f3-b555-f11959cfee6a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "241bffef-53ce-452e-a9fa-f0f1b396984c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da217561-7e70-47eb-b368-deafbcc50394"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b0aa55eb-52f6-48ae-9c84-b7d270d96928",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69856106-b878-4bbc-b648-78a73901ad18"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74c3e744-16af-4cd6-9a0d-4d87e384889c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd9c37e5-81a5-4415-b955-08dcd819bc89"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c378158d-3a26-47a2-b9da-9cdf51fe866d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "522e3276-d5b9-4bca-b553-0d7ab5594df9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02c89dd-a065-4f6a-a3ec-ce75687f3bea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41fc99e3-6ac1-4ec7-ad0e-6f60e38aed35"
            }
          }
        ]
      },
      {
        "id": "8920d722-eb80-4b5a-a3ee-4e0bf11ef3a4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e00ea2bb-246d-4d77-9fd5-05793eb72a37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11149980-2910-43ef-a03c-e1d5fe0b9a4b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba8396a9-03eb-47e9-9627-5b76751104d8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596e08f3-010b-4e46-ba1a-311eed64a82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "196b9da0-2a32-4757-b3bc-2acfacd16aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47b88f1-2e3c-4948-aeeb-bd8afe1f6330",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8bfcb6-59ac-4b19-9c4a-d1240f2c99ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1308a3df-d462-454d-b1cb-83a5fbc6c3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdbaaac-cc8d-4fe5-9e68-cb593e85da41",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae17165d-b271-4a14-8f84-1f8c700911ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0837370-ee95-47d3-a00a-047bbb128c5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f047cdea-bbde-487f-8d82-40584576e850",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3aac084-7ddf-4e13-aa9c-ea513f51acf3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85bcc47-be45-40b7-b7c6-0b3d53be9400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eaa5760-d39d-4e05-ba23-d547cc62e4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7581187-6630-4758-9e22-ae7d6b70ace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe84595-e894-41fe-b6e3-9d5c4da1f231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a99b0c1-dddb-4a73-bbc9-c77a5faf83db",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4648d79d-83dd-4be5-bbb6-5bcfb2436169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef077021-31a1-43f4-8c06-ec46d85bbf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5178aab2-fc3e-4614-bb47-dbffcef6f20f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "93928305-586a-447f-9dc6-d76008e972d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5e54655-d93d-4900-aa24-dbbb7f45703b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d676c760-f7b4-4fd2-8457-c2960e40a81d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aaf08ac-4212-4b1b-a0e8-94e8cc058d31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8dc966c6-951f-4b75-bc0c-ba34cff8413d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "621f0df9-86b0-4e22-9655-8af0204345d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5199c046-7243-4e59-99db-620b02c16681"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fdf60dd9-7d98-40f0-b791-e9fd4650064b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a3787d7-3609-41f8-9920-66d5e82d9a0a"
            }
          }
        ]
      },
      {
        "id": "327be1a8-1554-46d7-b686-8d508e77a56e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "00516cfd-c4f5-4c3b-8d36-4bdfe92626c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e36d488b-c7fb-40d4-927f-6f41f9838196",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bcb1d88d-5450-4317-b73f-0a048bcd9022",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6f798c-b19c-4e68-8ba4-efde5f3fdde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3057c1b3-dd3e-4727-8d30-760f1e94cec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0fffba-304c-40c2-a30c-56b1d04ae739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89d7a3ee-8c7a-4eb7-b596-542a744da2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc21be0-24e7-4539-8986-b1a997307817",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f250323-9de5-4661-b947-8a20f1b556c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf932ac0-1b10-4e83-b4c5-a94655755dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd76678f-44fe-448b-b08d-3a1caab87ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "435ec70a-7422-44bd-b8a5-d901eb7bf86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088d518a-c750-42ba-91d0-27dcdd563702",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a685f0c-1f92-4849-a4fc-2b2afaad1b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb10c5cf-2380-4fa4-bc5a-426473201428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c51fbd-bb6c-4c9c-8f2a-32f538a0283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5619dce-e0eb-40e2-b3c7-ba39f1087d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5c7bf2-7830-496f-baca-5fc35aad95ae",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e86c79-d117-475c-8903-0b10df1bcf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d312dc34-8567-44a5-be13-7c9ad86ac15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a268596-94e0-4652-8162-1fbe25a1ed2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2399707-2339-4dbe-b65b-53da203fad1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9de3d3-ae33-49d7-a251-a17b56dd014a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa5c175-2d1a-4f6c-a04d-f393c7f2b670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b92175b-eb1a-46d5-a730-eea27492c262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7be67f-3b83-4035-bcee-60dabcf83a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76fc6a76-6c4e-4a21-94e6-c89dfd27fd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74435338-61c7-430d-94cd-633b7ed71fbd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0876cf32-6bd5-4195-b32b-43d91914fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb98506-a4a8-4da5-bfe8-034d59b76420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf9f9e1-cd08-47a8-9180-fd490999be16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f1acf37-6af1-4226-96af-9555badf9812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a2f497-8943-4a64-aaf0-9f1fd7607ec3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bbda5b-7cca-4c59-b033-1e371933e84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4637f5-1c88-41de-8981-bd7d84caac0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed57d9-5b37-4749-a912-03a94ac5b6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35541ee0-a979-4c51-a91a-af96ee86fbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49c62f3-b56b-4cc3-be49-1884382dbd43",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59488c84-ae5d-4f08-acc6-c4641642c3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d1d2a3-dea9-42b7-b470-e5ce882c904d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75819a15-6600-4afb-b07e-186a37249f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f22f33f5-7739-454d-9760-2ded65dc894f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d767ed-06d8-478c-b503-7ff79ccb3f19",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38f733b-4a19-45e0-ab38-0128c45dc358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb96099-8038-48e7-a9e7-1da4a5a1e971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824bc042-200b-4f86-a702-18dd49c0f996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b1804e3-e2ec-436d-8290-21820f276d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ff875a-e281-4d91-9609-be2d0c2b3130",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c84d21-f1e2-4ea8-8ca1-d6f65cd87784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9efc02e-f296-431e-b631-adcd0c5312e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecc4010-1ae5-40d1-961b-72adf3fdc622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21e59f48-ef48-48d5-8386-b94d613fd9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5016b1a-b11c-463c-9431-03ddbf17fe16",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c5179-5cae-4aff-9026-a5917200969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48358361-4bea-4694-93e5-ab98ad7f0015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833168f-1e01-41e0-84a7-895214ac111a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a0a49f3-15fc-4c16-bdb1-211cdd0ed4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8d936c-8d40-4c58-95e1-6e4f0bd75990",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edb7800-3054-4d63-b499-6425b99be93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96810da2-0e92-4d0e-8188-f4d9739b93c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65850878-1db9-4ee3-9d3d-72299dde56a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ceaa6037-49e6-4bda-8934-dd3449a55f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e6089e-1651-4033-ba82-92dca01a9890",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0376391-1a96-4c1f-8ca9-75b63c1f3120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d098ad2-a379-4118-88e0-d898ddbd59c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0661e3e2-5a33-4672-8924-b73bdc281b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2ab6bdd-d39f-47e6-b8d6-d804978c2882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed74dc9-7a9b-4bd0-9a68-add0180f00c0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621074f8-5022-4acb-8cff-b551c9ca0a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2c88a0-e7fd-4737-937a-d79922686e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4031fad0-46b5-4961-b16f-0ec17667d537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4472c86a-18c2-4216-b505-9ead0a6f76c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7dfcac-30fc-48a7-ae96-2343dece5718",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050914a2-f315-4496-a848-329a370e7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a758d3a5-4351-469b-a923-fd98c952a7ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b6bf8b-8772-498c-bde4-d8e66ca6c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8cbf490-1120-42b1-8e2b-59ddfe809585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2eea1bb-29da-41d6-b67a-6db76ee19bee",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0faa5c-6c8d-4dbc-9ddd-6000222eb583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f8f2c3-51e6-43c1-9dbc-1eaa0474655d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445d745a-bda6-4e5d-ae99-c10960592ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9ae2c92-0b97-41cc-b797-98725917540f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43403b64-8b99-42bc-a02c-5e29a730b977",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8676f90e-6095-4a76-b23f-b552a5a8bc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e6bfb3-803c-4609-acf7-042dc2132119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1076c20-5a60-4059-9ca2-d6b8cc07ebea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6c2c7e1-f290-45a8-8a50-59ffe1f5fc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6340a21f-d2d4-4742-9a8e-7c7648a8c5ca",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ff1daa-6139-46eb-ab36-025fcc724b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5137a23-64e2-47a8-9b7e-a76ea40b7022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6451ee-324f-4e4a-b706-d3f1e8a5ca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "85a68322-ebed-4c92-acc9-40c7c2327b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0417b5c4-899b-4861-8dea-13774666d280",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9824e0b3-acc8-4426-a3f2-3a0ecfa51cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15d5be4-476d-4a44-b184-15c781bf2971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b80481-5180-4554-86d6-e318e3078db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af7de081-35d7-4457-8191-4fc9a2bf4997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a18762-d81b-4d2e-94c1-2ec9df78d900",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcddb549-4845-43d8-b8d6-b0eb9f628776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775008a4-b671-47ee-9b4b-b84f91f9bf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8e3c1b-bee9-4d4a-a78a-68cccff6da7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73dcdedc-7266-4565-8abe-982c84326a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e62913-0996-4dbb-a68d-a9585f64efc6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f9606b-cc12-4d00-ad6f-38f91a37b07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1ea445-73dd-4192-ac4b-a62ca3107f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2ea4a9-1721-4628-a091-a2f1c0d3cee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cffe2967-c02b-4bbf-b968-f620f392065e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7776fe93-fa79-462e-b391-02ef30e1f673",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a9a256-a867-40d6-9128-fab5b2b2e58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e865d7-1c7c-4207-9340-7cd6347d4d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e16e38-f6de-4dbe-97d5-9b40d5b472e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb267299-b067-462c-8ff5-6ac4777818c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738f4082-724d-4075-a1ac-7de213a2964f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8e7ba1-59d3-4c74-8725-760062013f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7c775e-2a68-47e9-82db-32cfe680909a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a391a700-924a-40cc-80f7-ddbcb9bd2ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30349e1e-e986-43f8-8c4a-b3188486d66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18d0a6b-97c6-43a4-b8d1-5257cade719c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959210cf-d3f3-46ef-9187-f83ed8c5c987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "191ded85-2010-4f87-946d-10776c5bc034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bfff2b-6b56-4b6e-9da4-e88c608d8d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9161b131-135b-45ef-9032-88628ac8646b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76518e5-a24b-44a5-8ec5-3f51e47f4b67",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18130541-4f21-45c9-b0f3-a5887fa5bd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2e4961-f9b6-4c02-a60d-3c438e9bcc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ee226c-0072-4996-be4a-18bf6ee3b06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e98bd5c-297c-47b9-9d2b-7a6f2f049cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f682941a-4b20-4f62-8468-38ec5a9808cf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41adc62c-d5b4-46fc-9f65-bcb5318a0212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5981d72-9799-4d6e-b2cf-390884d17c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842d293a-035e-4302-83ed-3f48ca54ef1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9d6510-6fd9-4003-aeaf-e81c87396c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ae14e6-bbbf-4c9d-a3b6-a992b3dcc4e7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4267da0f-7ee2-47fe-af44-0fcd4d4c857e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95680876-73f8-4419-9438-e4d3b465cd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b572b269-e483-4e91-9612-8f82218b88d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d4c50a-3c11-4a5a-8160-649e679a49bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a92709-56e7-4911-8592-5bec3a47c13e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9523bf-573b-4d6b-a999-2925fc20abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e05f9b4-ec38-48f3-8d21-dc3539625b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0b3096-e5f0-4810-bdcc-0585a7e9d4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af593e69-6a7b-428e-99b2-4b553b904b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16d3e97-2ca8-4710-bc09-eddd1dd0b61d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af5897c-df9e-4c3c-be82-94edd5ea5f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea700a6-5c5b-446b-9d2c-22d1e63e3ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23442592-8651-472d-804f-810f805365bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a87377-3f37-4216-8fee-e78af1562264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a9bdd7-02c4-4800-8ed0-4fdbbfd2c55a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7225a40-cb8e-42a4-b657-5f8377fbfb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed32f90-2b53-469b-89cb-e7ef15b17858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ada601-3f88-42a1-92af-aab9addd2815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8675cb9b-e386-42e9-acc7-a6ede34e3ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ea0977-33dd-405f-9843-e13561ed8fa5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f26d7c-6435-4304-97da-327158ff10f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c525459-cca6-41a7-9ace-7d988e42d491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ca007b-28bd-441a-bbb9-8da016ef27d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1af92838-f79d-42a0-a15f-aebd0b767dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d0ca14-67ea-465e-af2d-e4f51b5947e8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af42338-d20c-47ca-8c00-466ec4880931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9359ae4-9ff3-4fdc-944a-117f5a247b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282c1101-bed6-49b9-a4f4-2b6b6e0b47f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c33ee924-f2d1-4ce5-8a8d-38fef200077c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4ba8a3-4fad-4c26-9901-42730eab29d4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdeaa501-7d1e-4a87-8c2a-53cadc490db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6d7a01-8c1e-478d-ae46-65792d37c052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d36449f-985b-401c-b02e-da16a41da588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d30b9df9-2d3c-4417-a628-4a25374fdef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0de8eb-4457-4ed0-a61e-60aba75547ec",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35dfd2b0-f1d8-400e-938c-0580fd58236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11f7b19-3b1d-4258-a3f6-68c786241133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553cbde7-305c-4078-9b26-724e9c00a057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e136c5f4-c826-4537-8e30-ae0d3b8f0828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2eb52d-a0ea-4f97-b4a7-49d1490e5580",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f67cfe-6dd5-4079-8ea6-c2ad137fe478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052b4287-643f-4c8a-a189-9b746f87dcde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170325d9-d722-4831-8685-6e61021eaef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d098514c-360c-4efb-9348-77390f5c24ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3b5462-9ad8-4852-a10d-9fac56f8aac9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90873c04-139b-4417-98f0-317f48f01c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9852718e-122f-40fd-a014-5b2738f01f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cb2c7e-be3c-4f03-b36a-7b39ec43f576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66fd1df7-dba2-4c52-9586-b3303df97f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb99e1eb-b9bd-4510-b3b6-2ebbbfc7f33c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f26d87a-7338-4379-b17a-4452cbe92acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090ff3d0-b007-4dae-9bce-061f1ad3e255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a9993e-3045-44c5-8feb-b74b69bd2564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc92bb18-19a3-44c7-9080-9df0c4f00b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f5255c-b81f-46b9-acb4-9844bf3357f6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36536cd5-979b-4544-8938-41440014c539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de840c4-479e-44f7-a462-f1eec80c27f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50123f7-28ad-4969-b1d9-74ec6ac7f21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "571ba07f-18d0-4bbd-b166-dcad39181ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937f535d-1a50-4beb-8b2a-76c967e5972c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a579307-12e7-4a3b-87b2-3ec17e045c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d3205b-321b-45ba-8dad-e981940a9514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7117d39-031c-43b0-add6-69bd4018d545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21759c0a-cb07-4e25-91d1-60636c290c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12954cfd-5414-42f7-a29b-693d0adfbdce",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83022966-554e-4994-850c-4c5823eeed8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350445f5-42e2-4411-b707-dbb9b46e9858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0e6d91-db6d-44c4-b81c-c671189d28a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4494b195-c81b-4cbe-851f-5513b8489fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fe773c-eec1-4a45-8131-981e505789d5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116122b9-c2ca-41da-907a-3dfb7ea83860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b80b74-e1c7-4614-8818-8152433d8095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ef20e7-944d-4952-bb0d-a136f13dd88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aabe12-9a73-40ea-96b0-2f589f9a541f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cb3914-b4a6-461c-970f-51bff746e589",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a12ab8f-004a-48ea-a77f-fb12c33b22e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04ed9e3-8daa-4541-8c62-42a4f8e29825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d6422a-aeb3-4186-8ca1-e140e10f0516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5be4b5-ebb1-467e-a677-a8056882b33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49536f0a-ab18-4809-8f9c-215d5fb1f986",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcc0e20-bbc9-491b-9a47-a73155358eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe96fdb8-d221-467c-a048-d2dbdb0415c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6d2329-c35a-444e-9b40-fdb16aa0bab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8486c00b-0e6e-4968-a224-78eca06a0170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bca393-54e4-4a15-9b12-cfe0e4fbf74f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29f6772-8a00-4c15-bc79-07a2c2ba657d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba85295f-99d7-4ad5-9d80-07b48068b683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f4f20b-fbc0-48ee-9a6b-4f968890fb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7930edbc-286d-4b97-a033-e8f41ac9d1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1426f196-d8aa-4139-8e9b-b1a97bb9f2d2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3100e4-831f-484a-9522-c12563778e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74308d51-1d2d-415e-85fb-cb6eb1383935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0601ba9d-70d4-4e17-aa22-d10eda0d988e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ccec2e-bec3-4f52-bcbd-dd748fafc4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950fe52b-845f-4309-b3e1-ffaa88b96be6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0675e5-8def-4a32-96ec-6b4b2ff03b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f389f6a-b1fe-4d88-96c6-6bb89831fb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8a7998-ea21-47b8-b49b-36749c8500a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39c851a9-d4ee-4a45-a4df-ed53b03aa115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5088f7-ebf9-4157-9c6e-086cbbebfde4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c82b6d1-6ab3-431f-9ceb-e71ed41d2d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054031aa-433b-445d-9e4e-665012312922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c219e861-8150-4a1d-82c6-5e41ca612d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b6288e-9d42-4193-8397-80aa9381f41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b5b645-2ed1-4837-8776-12a2f9cc19b3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1d5494-1f49-4a2d-b846-4f78a0008c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49761540-fd23-4b9a-a275-ddb98fa56700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a3552f-38bb-4bbc-b0af-ba3301b7d2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85ab186-fa8e-4bd8-abe8-02f71a4b72f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ffc967-16c3-4a23-95c3-2fa7c8d5a789",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ffe3e1-f13c-4b54-bbb6-3f424777c9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98fdc37-883f-492e-8a54-ba7b81db5626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ed80a7-3229-4d72-94d7-7c94bf2ae1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5e79d6-8792-4012-a1b9-8d226c5c8bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40a1ccd-d817-4735-9d69-4c47fbbf16d0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578b6cc3-4726-4229-bfaf-01bb4a6dc8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb2a90e-f7d8-4051-9d2b-b7d9347dc669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afa783d-3c4b-42a5-abdb-7c8d70b552c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa2de52-611c-4741-8729-54cb5f2c0f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa598e7f-bc57-457a-a170-93fca1a6057d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce57644b-079e-4360-8597-7d4416ae3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4624d1b9-0309-453b-8e5b-c9ad0cf4d8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a7aa26-27f9-4b26-bd1a-2ca2320ad740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d753b9b-db27-43a6-9041-1678d93c5cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d78f42f-729e-4c81-9933-6e97a14f9c0e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f611e97d-b45e-4da8-939e-6216d5e8636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e388ba-cb0c-475c-b4d6-2d9dbcaa259f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54857c9-9b20-4fb5-a3e2-a404168cc06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e78eba55-64c5-4b9b-b384-8f0b1ed55c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc77a0d-5f4f-474b-83d0-8b0b55c5a3c4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071d466c-0d17-46d1-91b3-cc28ffadbf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7771776e-2e5f-401f-b474-3714ce87f968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab97fd0-0ee4-49f9-b683-bffed8bf1a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "991b5507-54d7-4279-8f83-eadbbd20d529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2eda4de-b8c6-4d62-a28c-010d700927ab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb9c3ba-78ac-4db5-b8aa-21a2377192b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b59120-04f9-4175-b054-62bd65196373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa39a15-782d-4e06-b262-9278c4ac9a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3807c5b-f9f8-48d8-b00f-dafdc6544f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c507e8-860e-48b4-b8c7-86911a36d8c8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5edee9-5951-4c49-af9c-7a6cb65ab5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75069c3-8ae9-40ec-8ec8-f2f0d8d1d94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707ea94a-d21e-491c-bc5b-1e44261ba792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1122ff38-eafa-4d5a-9d50-65cc77aa131b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9a421f-10cc-464f-8554-0f5e43641ec3",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ca6b4b-8f11-410d-b4b0-54aaf301d8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12222ea-4638-4573-91c2-ff9ec0c9ff04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165cf237-5e31-484f-804b-d53d82450d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bc7292-c9fb-4715-ac5d-4e070fb4b2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d466345-a0f2-4eae-a15b-5b77db86a0ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3b37e3-05d7-471d-b25d-f40fc0e81288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa51712b-dc76-478f-bc63-68d4565a6b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bebaae6-08c2-4666-a0e6-1e66a26d917d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95f5f511-8474-47a3-b231-c2b4f3d72895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1fbbf1-ede9-43aa-9d23-35d4e495ca9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdbf922-9f49-4635-a1b7-411cd1d6c277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8a888c-2f23-47e5-bf30-4b46fbf71f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754ef6cb-4895-43ec-b65b-4e6d44228e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0af01a5d-6211-4a91-bfe3-84e08d14a4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ca63c0-5777-476f-8c0b-f23c4f81d4b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4770745-febd-4d03-9c28-23ad67acbd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f4f008-241e-46d6-a194-051a0b2b2622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02655551-d363-449a-9f35-b906ae66de6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15801fbe-b195-4ddd-b2b6-490b1230d387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a62fb9a-fa0f-4892-8ece-36103974ee10",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abad73c-c56c-47bb-b210-c824a4a96775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d307dd98-bca1-48a4-850e-4694cf76d36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77606d38-519e-4be2-82bb-45457cf7d7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69042154-3531-449d-9080-2a1c1f580965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ff6731-40a3-4115-be9f-4fbff9cd1df3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203b4984-2e66-47a3-8ef7-6985e1f4b137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a239e943-c7d4-44b5-a052-93f53a2d9faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9714af3d-5713-40f4-ac39-2c7e4b9816bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11aaaa8d-29ff-4155-a595-e8611431d932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0481f3bd-802e-4823-ac79-305ba339b73a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb405bae-a0fb-4e80-843f-1f143768264b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a5eff9-49f9-42df-bced-7b01ed0933e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da66aef0-428c-4072-8f63-a2a95ad39d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eccb051a-a78b-4ba8-9dae-bf8a64557ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f2dd0e-2bd4-4cc5-8f32-4dbc444182c9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb29dd24-7dd0-48ab-9077-2bd2e0461644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb150e8-32ca-4cfb-9263-876fea44f3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fe119a-1add-4a21-a200-6f744f0bbc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4524a91d-d0c5-41aa-a160-5db3dfb2c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10929ed4-261d-4bd2-b5d6-d3f3fe700b4d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fbf525-d9c6-441e-ace6-cb52dad7a508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8620195-04a1-4ce9-98f6-defa9c4fc690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a2fd19-76bc-4ef9-ba73-40eb1b8914fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd8a8b4-c98c-4027-b21b-8c4dc019cccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecb0d3e-fd75-48ca-a96f-caf0c62bfbf5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d714b9-e78c-4e3e-8e2c-a88d4646a657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0d081e-997e-4160-83fd-9ed6e8320c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4613ccc1-40d9-4833-b178-d7b4e3849ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a15deb8a-299f-4928-9f0f-b83314dd057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b715a81-b01a-4e8a-bc3f-143efe3de8bc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ff4ab8-6084-4134-90f2-414cfbf939e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d243a9-2bea-4910-8427-e9e03a72bb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559425dd-4c81-4c58-ac59-94cb95f19d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c92a0913-306e-4150-bba0-03423b8796d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e722428d-5d85-4646-96be-f1d0ccf095bd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fbc6ea-bc39-43dd-9857-57b39dddcf79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8336e47-c931-4f8f-b0d0-8a42b4f568c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a955b5ca-eca8-49c1-91e3-008522b1ebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2847a464-7b55-41de-b5fd-4c1d3609d8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9336e167-14b3-47df-bcef-c5c510ef2f05",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc0174e-1bde-436a-8e88-2149ec9489a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3d4000-4af2-4054-8a9a-75499cfd9111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3705f23d-0590-4473-b8d7-3dc212c4abad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0080cb1-e91a-4ad9-8fbe-3504b8e3c8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd0a5f9-b128-4b0c-873e-73446c0ec3a4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00c28a8-1912-4d83-91a2-9afa2053df7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc8f2e1-c493-4229-939a-6123909b3590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84cf351-0d52-4b30-968f-41191947765b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6267b2-f41f-4c70-937a-7b4bde1b585f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854d26f4-8e67-41e5-90c0-41c8c6dcdded",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaa08ed-62f5-4feb-8b2e-593b335dbf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f43d92-a264-4b13-ad32-2a83d2e999b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c9c10d-dfcf-4718-a63d-5f920122cef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a526d62-c1be-4c58-b3a2-9acadf2391a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89e4e7c-946a-4075-ae31-601c589a3d0d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c4cc44-d602-4b18-87d6-d2b31f7d7346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fca48f9-67a1-45c3-aac8-36a188877d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d239a80-9c01-4a2f-998d-ac68b17dd642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90303a54-f5dc-4a0e-bce7-8d8898014e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde66f6f-0a46-4cb0-837b-a1d97512c1be",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af763832-dcc0-49df-8fe4-70e1f048c04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1b16809-ac35-4aa7-a15f-4874734d87c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3dd9d9-72a1-48f0-90e2-898411396f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8977613e-700a-4756-9697-a71a8bc48c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d84f8c-fe47-497d-8f37-519880ce28ba",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2916601c-3982-4875-aa3d-e2b31482f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd32da9-2df7-4a45-8af9-feaca3db1caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc732596-15b7-436b-876d-8006b31f5249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74a3b725-30b4-4e80-93c1-8729ef10da3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf73e295-3557-43e4-ab84-aefc47fd9d1d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c8abe1-818a-4af0-891c-c20873e3a96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfc36ff-3a14-4c67-898b-68a120454486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b8234c-41ce-4169-8562-f395c7155ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09539382-e080-4de1-bdac-1c123dec3903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154a245e-cf86-4b56-ac3b-ac10797f8b4a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bab2b2-89c3-4de5-93ba-5d96a134dc8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e06ecd6-4247-4c2e-b111-59b7b4582a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bead6e-88fa-48c3-b2a9-13d031578646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43a96f90-3647-4225-a757-ea9a7bd2adc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702047ab-695e-4ce5-8bcf-c9bbf55139f7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e379b1-143b-4bae-ab27-27fe1859d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271225a4-6c3f-48f9-9e86-47b84efaa28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed16af1f-cb0e-40c4-8b4b-ea58f06c263a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4379c64-ee91-41ce-8ebb-9bb89b46a119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a28d8b-7ea5-4f1a-85a7-31ee2a7e912f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd40f43a-b8e5-4f0d-9314-6463538591c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20097e77-a558-4b09-9799-806047aa0039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe76a877-1e63-4717-8292-5a433e38cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7eddd18-15b3-45d8-b9dd-741b16478e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd442ae-6012-4e0c-94b1-b9473ebdd218",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cb5721-0679-4e2e-b0f2-e9e68dd561a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f3f3b3-9a6e-4428-a7ff-d91ca3c79254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c237cae-87d1-4d88-a0e3-b24704683290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18993010-da3f-4070-a836-26a902fc7dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f588819c-2e10-4b8e-a3d8-4f558a40b928",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8b7a5f-65b1-459e-b369-19e3cd0b4750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958a17ee-f8e4-4714-b601-e7aca80480ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5afa2b-5724-4285-9a8a-abf6a056b386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13f5fea5-daab-422a-a417-d913879537b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33c2d59-d03b-4abe-aa79-d04b5d528ece",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3ee05c-0fbd-4cad-82e1-35741a283493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d424606-f563-4ed8-afce-a9ed391b5fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83a192f-7fcf-4a77-974f-5598a9c5c948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3733124e-dfaf-4cb8-ac59-e900c8522076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd931bb-b1ed-4001-9738-539a30be2c34",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9be8ce-f3cc-4b6e-9167-0cd8e401e7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487d7236-caf4-4b26-b704-61e99f6ae6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690b27e1-68c9-4f0d-b415-dba0bdecea76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5042b88-3580-44d7-80a1-e4235b46d837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084bc12f-5d79-46e2-a547-9115b477fc88",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9432c35-4ebc-4431-bf68-812863c36804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7ac5a6-026c-4e27-849d-b66c8315392a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05edfe25-0e80-4958-b6d3-0f574de9aa84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d311bc-9873-415c-9acf-88dc41c85008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91d3af6-8427-4721-90b6-5105efb76aa5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc30b99-3bd1-46bd-b2fa-1816b4988295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e62df87-872b-44c9-90ec-a3ac32013c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1856e3c2-79e6-47a9-a0e3-6cc3f64cf7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c52c7b2-8641-4c51-b5af-1c904f33e785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598e1988-2bb1-44c6-ab22-20e03549bdc1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6a197a-dce7-47cd-ba68-4dd29234314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18688ed-ad81-4610-9adf-767ad9e1ad5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764c50c2-faab-4f30-9aec-09c0fa0fd21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cafc25a-baec-4088-9263-dd652c92e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974f2281-6bf3-4b1a-97c1-96530b3816cf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29d63ae-533a-40d6-b624-066bed1f69c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219ae413-dd47-4be7-812f-90021a775ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2298051b-847d-4483-b368-50087c6598f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73b16e40-a82d-44c3-a8ca-5b3dfc2da461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a8e995-ded5-4ae7-97cc-31779aa16e42",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca4fa9f-ba1b-4c1a-8313-d3882cc3cb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3d6629-f261-4bfb-b850-99b36dac0be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f08ec40-9583-4ee1-983c-783dd1868859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59291d4f-cb63-41b7-8f91-a7d326e37428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8013182-3a51-44c7-93ae-990bd4b84c0f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bf52d3-b083-480c-af0e-d92297a2dc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6db396-eb9b-4b3c-9e92-c699bb80843c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687c8b1c-2c86-464d-865a-e077401599bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ee9f76-8691-47a1-ada3-57f2e2a577f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dbd7ca-f316-4fac-a078-6714eca776b1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61286d4c-cbb0-4713-9499-db8b4991ac7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364ac2a8-a8f2-4cac-951c-68c66912561a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8277992-3eb7-4b26-8769-d4ce2f7e041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fec897d3-08d0-478e-9358-7f2c717d588c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c59a24-80e8-42e9-aea0-1242221ed896",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61529a6d-ff72-47e8-8467-80a985fc2b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd74646-7b20-4edd-8f5b-0000c191550c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bedf477-ab3a-44c2-a3b1-7774928818e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "89d4294b-7982-4453-8b20-f9d4b208986b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf47dd7-bea6-492c-86c0-d8e9de10fdcf",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48eb9991-dc0f-4198-ba21-91e45725295a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d646a8f-919d-463e-be1c-50af3abbb930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af129c6-6b35-480f-9bc5-5c44839db957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c529a66-2aa2-49c1-8abe-51226a0021eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be86b100-928c-4255-8042-fa28e11896e9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558fe3a1-29d4-4a22-8dd9-eba9f466c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9a1104-d6a1-4400-9f11-073afa4abec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5992790-1b4d-4a9f-8025-3ee49b90767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "92ac632a-0e7f-4508-baba-589d616fe572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a012d74a-ad69-4e40-bc95-51aac0ca55ef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed13e6d9-fe2a-4962-bd32-e11dde819a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5861b32a-a6f1-4d59-9522-c83340b7ca0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11150ceb-f150-4b80-9cf3-40cbb37b633a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "88cbe5a7-498f-4ffe-b566-ecffc9782e6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acf8aeac-5196-47a5-862a-b1cc33deccc3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a646b99e-f1ee-436d-8fc7-e6f5d0fe0a26",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c545a33e-a44d-4619-944e-aecfff349793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2196f1e-964e-474b-ba19-fb5fb19dcdfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06dde10-748d-4f58-8591-8d15bcdbb51a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "206de443-9e8c-43e4-93d6-5eb28d0e99a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44330ccf-eb0f-47e4-92ef-8a647e372a72",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1de892d-0b74-4c92-8bf3-d59a92f4fc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93969b40-244b-4d48-bfa2-b58b1e7e8dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d9a9e1-69a6-4b33-8662-606ed1514fa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e1d496-f8c6-40f8-86a3-43d062da27fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba3c1f3a-893f-46a2-b6f7-66ec3a4fb6bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21f6203d-dfee-4cbc-bc9c-7ef077db0f55"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44ccf719-94ed-4117-ac5e-31953c0d440c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a94fb954-6581-409f-8474-20d27395dd36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "642f7820-2969-4b99-8d88-76b670b406ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2425336a-8d5b-4f60-b95b-35cd198aefcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4e77233-bf47-42d3-a8d0-1b713bbf1d95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6670d726-c81a-45db-b27b-6562401c74c3"
                }
              }
            ]
          },
          {
            "id": "7a03be00-1bae-40aa-a304-8c0fcfcbacd8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "544bf7f1-f334-4d42-b303-7ad67d4c373b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84da9bdc-8afb-487b-aa8e-9a49f055fbe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "132b72ff-74fa-4489-8848-082efcffa0d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bda633ac-801d-4a93-ba3f-9f524049cfe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f506d63-3c06-4296-b95d-d7148b43b49c"
                    }
                  }
                ]
              },
              {
                "id": "a94df4fc-86a1-4d9d-8170-a56343a8ff6f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d7e2ef2-8274-45d7-a16c-bbac21c4df36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31e6f924-cc7c-4ce5-bdd0-ce397c27e8fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01fcc511-8c43-4f0e-adf1-60757895d2bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e2b8d4f-e35f-43a9-b5fe-ecb4bebf9b44"
                    }
                  }
                ]
              },
              {
                "id": "cd2e3f86-fb92-401e-90b3-8e4a3b7b651e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "402b1e0a-3d8c-486d-b4d0-02a7c5729a32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c7882a9-ab5c-440b-9069-9c10b3ffaa1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f0d2691-373e-4e76-ab8e-38fa3e5eaa14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "081e1ecf-b6d4-410b-8a72-da0252e29ad5"
                    }
                  }
                ]
              },
              {
                "id": "c43ee896-c943-4f09-aed1-d394c51d4706",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6716a92b-66ad-46c3-bb64-fade71102e6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac9eb863-ec81-490e-a396-81dbc4164294"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dd73b2a-18a9-4e85-9ba0-d802163580fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "61c8e4dd-6bb9-4c8a-91bb-a2ed252d04df"
                    }
                  }
                ]
              },
              {
                "id": "54f97d0a-f7fb-46b6-842a-06b86446e7d9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e962891-45f6-4d88-980a-23c10e99b205",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "028b1ca3-e4fd-46c5-9ee1-532722728557"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6a3b125-2559-4645-ae33-f0e845f34fde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57afb8e1-cbf9-4017-b8a1-5a4fcdd66228"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49523cb5-2a59-49c2-8aa7-8114d3a56cf4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8166b7d3-9f2e-4212-984b-60a9689fb0d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dae6645e-e60d-421c-8543-2a350085fcc6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c42ef81-fd8b-42b8-8552-ed5b08009b68"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34047ede-fb43-4ac3-83cc-102e8badf274",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "88921756-aa4b-43ae-bc76-8caabdfb4210"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98ed185e-1d36-48af-b895-62b0fdedcfbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ab612d6-aa22-4b18-9e8a-07c8c309bba6"
            }
          }
        ]
      },
      {
        "id": "2a57b488-9534-4e7a-abe6-8be6c320d648",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e720ec9d-2a85-4a9e-89a3-c67bf2536e5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "381239e8-aac0-46c6-81fb-a63610913b07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94fc8eeb-1c55-49f0-a331-4edf0aabbe08",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa83e46-b48f-4d5f-b49f-16756110de05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329f6928-4fd8-4354-91b6-7fd749ebc244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5df016c-ae06-468d-9e1c-afdc2e61fcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b99027-f2bd-4bc4-bba9-c7094e2166fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d23e070-5d4f-4d25-9430-dc85978ca191",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7c9fe7-d12f-4ca1-aadf-d360c28e0ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56102bbc-dd34-4a26-84cb-964a5b863358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d8c77d-ac98-4fd0-9b22-7dcf51562ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5258cdb-96f2-44ae-b5a8-e983b8b1df52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e80b746-51ad-4b77-b14f-4a6c59d1e58e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8b30a8-c1bf-45cd-82a6-8d7e4aa9eb52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad84cd-bdf7-4d6b-b93b-c32ba7fbd524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec40832-cef9-4b93-9c59-ffdf5dc20101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0e224f-8675-43c5-bdfd-58f153783d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2140abed-1962-4199-92bb-e49264942d2b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8ab62-e593-49c0-a2b6-2632fabf8af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b522c9ee-608a-4a3c-88e9-ac2ba0900b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a400ccc-0746-49e4-9208-8c4d073c434d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b32f809c-51d5-4ac0-bc6f-9ae77f2126c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7581fc-e3a2-429a-afc1-fd7bfa6de0f1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc89e8a5-2d2d-4f86-bce2-813c1ed6ef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ecb812e-7ae1-4c24-b0cd-d5433a842e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8de9f2-b94c-4c9a-af31-064b96a13d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f892b1-fb44-42f4-b07f-b238c8054bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854faec-f120-42bc-97b3-b17689c7f458",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2be127-2cbb-4fab-8575-10b317af1c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61656d4e-9dd6-47da-a220-0c2187a21f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5145c9f5-0171-4f93-a735-b2de49149f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17e673ab-d8db-4173-a7a5-6c94b1fac317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab824e07-a4e1-4511-9d26-d9b400c88708",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037ca837-cf9a-46da-ab0e-1c4af94bfe25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35559859-41b6-4b56-9e6b-57cda979bc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afe81b4-2d96-4c2a-a21c-c3feaa1418a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e38780bc-e7f2-4a9e-a71f-1f618ee73b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8f4380-73fa-4b15-a28e-1033caddcb49",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd7cde1-c629-4624-ba13-27d21f67faeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce446ad-0949-4a1d-b7ae-a47279a43f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7e27b9-3239-4279-901b-bfc300f7c84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1adac5bb-ea4b-4115-8cc1-056b1654d4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6234d50b-37a1-4e7b-b294-d016c9eada27",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6663ada4-5119-429b-868d-13438f380bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986400a3-e1b3-4386-a668-c187bc81b320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1ca94a-0fb1-48d3-a64f-a30150e9b76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7271d1e-a196-4c51-b32e-a571ca645d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d1c265-b344-4247-b827-7b1f2c4878b4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c026214-3445-4bb1-995e-f389c0319a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8864453-e2ee-41d9-b408-15d99a290793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3b6274-718a-4ce9-aa14-7b9a8a09aeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b16519ed-4f07-453c-aeef-2559334152a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55c7c8d-8536-41be-9eb2-9bcdc3f26de4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbc76ba-f349-4285-a95d-88cf1348a28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35894202-97ab-4aa7-8083-3d815af1c29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c617a469-9698-426b-a693-1582d85a8430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9ac03e-1f7e-48b5-b7c1-956b4519fc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e71b838-5458-499b-836a-7388ad09434f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d798dc-fed2-412a-87cc-b146cc22c114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589048e2-b0ef-4a84-82e2-2dacbd534915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79509010-a95e-461a-9027-93a030e0c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9437915-5eb2-4903-9714-f582c2879220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5ebca4-9798-4713-995a-ad47ca199d8a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cba89fd-e1c5-441a-9bdc-951ea9cfc13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e76353-02ee-4bea-b454-121e6b3ac38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f60783e-3062-415d-b61e-8b9b04b5b98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8add11f5-c916-4045-9463-96c90d51eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb53281-eec6-4b25-86fa-f4d2db0f504a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07af70c3-73f1-481d-a435-10a38bc86430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59195723-bbb6-45da-858f-a88592fb2178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fc11a6-47a7-409c-9ea1-4d55d5b5c5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "864f1c48-4800-4d50-b216-3549f50aac9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63cca48-998c-4438-b667-438b5bf8a804",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2de95af-e630-47ee-b88c-e1cd118dc522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba83368e-bc8a-4215-bb0f-63754458c307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28e51ff-4453-47f1-a12a-b03f3ec0d0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e78a903-2d5c-4e1a-8be9-2fbcabd4716e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afef955f-7c88-467d-80f6-3dee63a9d9f6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ec480d-736b-40fb-a97e-c89e680b98c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18fe6ff-1236-43a5-ba7f-443d4b5bcbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c720c0-a002-44d1-b88b-50a485d53106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cadabac3-893f-4dbd-95c4-c2a7fd93cb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff9f0fd-a855-463b-94ab-be0487831491",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee58793-3956-47b5-b351-698fad1b2096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbebe33a-5a07-46fc-80bc-36f179f3db85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cd3f82-91ce-4379-a9b2-dd0111d4a4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f454cfe-3833-4158-bbf1-bf70380b454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e3668a-f46e-48b1-8d6f-2fea18a1850f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab89065-0d14-4b54-81d6-63cecdc30774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab59db3-fb5e-4392-8982-55929f5f7210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274a9934-2b48-4d8f-a244-bc8825db56d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf8a47c-bab7-44ef-9f59-5935a6df286a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c480d5e0-7569-43b7-9bf3-a769ccf3e076",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f6934f-3f43-4669-a9b1-fdb36c477ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ce2822-0e1f-46cd-8b43-143e06b5f5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f8207d-3b66-453d-a8c3-c99264c1e6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efcdf367-aabf-4427-87ca-34d03cc3a877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f806e64-5e7b-4a6c-adb1-914d7ad8dedd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbede2a4-802b-45f5-8dfc-42053d6148d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69885c7-f900-438a-bb67-70a76fd45940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b09d573-9c0f-4457-958d-f06415b3ccd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7057e1be-2b7c-4b31-b372-fb504d972aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43209287-ce92-4e6f-99f3-bf0881b24e72",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240542e8-62a8-4ac6-a7ff-a59ba84c2cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d0a4b6-d21f-410e-9cfc-30b2dac4c412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50c70a1-4f74-4184-a6d4-396aba57d26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26549643-ed34-4061-acc6-4cc0a111299d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5848e38e-b7f6-41ff-b174-f47e0478a4c9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4bccb5-42cd-45fb-9e6a-1c85aa2b4257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01150d32-d320-4b7b-a743-468aa96afcad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bf8020-c655-4bef-8db6-d7117380cc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fe5d8e-a7fb-495e-bbb0-c1fa144db533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1356c63b-ca6f-4212-8334-8221dcb08c19",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0d153e-8585-4155-9f79-32c279b487b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb20d6bf-8f85-4a17-97db-3ffb1a10da1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5465c310-c9dc-4e2c-a635-aa6285845a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7422d792-f1a8-4683-a6db-7fab859d8fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4775a5-d946-4321-af0d-fb491ade796f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13172caf-fbea-4622-a24a-c68c7bc02fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b034fc4c-130b-4425-9e75-7660f39b8077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cbf3b0-29c0-4b4d-ad2a-97289bcfd2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0b303f-ed73-40f8-adc6-05ab3fa8af28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf2862e-92b4-4da2-8cfd-d3c29f123a92",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9a65fd-2ba3-424c-bdb8-885697b0e6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14569854-d4ea-4e50-9873-4dda532ed87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690312c2-7985-4230-9a96-99a7ad33f55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5aa9b92-4ce6-4fc3-86fd-304e913f636f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa2ae67-89eb-4f84-a607-dd13d1407510",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5385cd5-9379-4c4f-89e6-0f2861cc7b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10133bb-8f60-480a-9154-be811d67ce44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3853d738-6fbb-4d66-a95a-1a87dd23a825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b75b7418-3f26-4e34-ad2d-96dd87e9e44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cb52f8-fe7f-45df-9a36-1c4f4f5d4242",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485937a1-9577-4fbc-878d-6d58cfbbc88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534e080d-5423-45b8-8338-e5e05aa91804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f78543b-616d-407c-8993-02aae6f95c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d64b0d6-44b7-4dd6-b41d-e9c7814fae05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452c9371-4053-465d-9aeb-8d29f03f143e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e034f-5b9c-473b-99ea-a2f2926e6095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4995a5fd-89eb-45d3-bd04-93f233f07c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19458ff2-3290-4e1a-8cd7-bcad89d056e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65423579-4fb4-42da-9d88-98808935c20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6943dd4d-6ed7-435e-9e21-e1cd39b618c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba74b55-5da7-4a39-8280-ca255b40e717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda04840-b8c3-415e-9c03-800732863b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13eaf816-7eb9-4074-a02a-929bf2e31069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cad422-8b30-4c86-bc4a-192707a26eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505f7171-9490-4ba6-8fa9-7c07df856aaf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c44a37-6e62-482b-9c5b-dd8aebab3a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada28aad-e2f6-4dc6-9e3c-3d1dc448feb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5afdf4-9abd-4819-936c-8ad82dac6594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "944fa217-9989-421a-9124-9f0aab0ca8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6a8e3b-28f3-4fc1-a355-c7a5de3ad198",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f67a6c3-84c1-4d75-ba05-319bb2ffe340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3152bbcd-1a02-44bc-b03e-3d0576534383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8089d535-df29-449f-a919-681726f70c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9289efe8-56c0-481f-8571-1f6eb9361326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1288ce-f5dc-4a4f-891a-77a4663fa54d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f96bc4b-32c7-4f7a-8fb9-1ce7f8623f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10a819d-2546-4e02-a1e0-0add87d13d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2e163e-1f51-4b38-9383-1351a4529b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "728f0f36-1f3c-44a1-8d19-f751a7313cc9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ba08459-b597-43c2-a845-115c72773fd5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebe1079b-d42a-420c-b9b1-4a3755bbb1ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b6765e-df75-4e90-9009-d2b4ac1651de",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef2d217-8bc2-4cbc-9f82-b5cd52973e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5854ab8c-c205-42f5-938b-839130c33ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8502fce2-086a-4c9d-bde4-22ed5b8b5882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1440ee94-2288-484e-a336-eb31042666dd",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c47e05-5ef2-413e-ada6-84b96cd82383",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd5b027-68ea-46e1-b53c-10250435e2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760d5325-1323-4509-ae6b-d8bff39d0878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffea205b-2f48-4329-99c5-32cf218ab2f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "078039ca-745c-40ee-bb6a-3200f13f9646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "489b59bc-45d2-457a-a055-78be494507a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb19c084-6c87-44fc-928b-944b0b356964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10076448-75c8-4891-badd-1133a881b6e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0443b226-576b-4c85-8f2d-a3f75083846a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "332b382a-e7d7-4a04-ba4b-0449d597d63c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c06d071b-b349-4f45-aaa4-56655cb11317",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01d359f1-7e9e-40d2-ad4b-8def92b99fa8"
            }
          }
        ]
      },
      {
        "id": "696f3327-08ce-47f8-80ae-7f7725c68d9c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "39acadcf-cd6f-4136-9c44-a1a425a72d6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "374ac206-ec10-4a9a-9969-6f20bba537b8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ecd4df19-8020-43ef-905d-4c18ffb28b52",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5094d7f7-d835-4832-84a5-d24964a077a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d3fcfd-df1d-41cb-81c4-6366920edeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0189b6ed-0c5c-4089-955f-d48ec2582163",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560ebefc-10cf-46b7-8666-526c14c022a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47117cc9-4a34-4d62-bce8-8ba0083f9efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdac7fc7-1df1-48ff-a97b-8f1f672844c8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a1e00c-4eec-4a81-8859-3237ad61a137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a81b9ad-840d-49a5-990f-ac6ffeaceb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df991a41-72f4-407c-9738-4e18d5899c99",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410d8aee-a8db-4db1-a778-0f04a14e23ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e756c125-c112-4182-ae2f-1243a815466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2719e9c7-1c46-4d97-8628-135c38208728",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5160398-b1b9-42bc-8032-d9a4ea1ad713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1adfa9ad-5bc8-4c9b-80f0-cb3a7840676d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711e7dbb-69b4-4185-918d-04891ce7366d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79b9d7d-0881-4841-b2ec-ff74a7eb43b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef41f7d-2e8d-4ba2-a00b-20b0d63de926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce40aa8-2daf-4fa1-90a3-da03de9a3493",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa61ce5-6d19-4c41-a9d2-95772bcbcb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a726d006-a9a2-414c-ae85-d1ec9cb68bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4b3fb5-4cf9-45b2-a6a8-967b68ee0ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec6e86a-48a0-4922-8f4d-9f6f5cf565e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15061c88-c634-4464-8580-e650896ca3cb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87a6f05-fa1c-453d-b105-f0135b6b4210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f754e4a6-5479-4f00-a1b2-32384c8c19a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f369416-e356-4f8c-a2a3-147f587fa9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cb1cf1-cf24-460a-899c-3d4c565668e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efe808e-be00-48f0-9fc8-8d1b27d0548a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1925796-a55b-4d07-b138-345c47a49000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c42f3f7-6953-4059-8a21-9a6e84c2385f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6bad8b-1de3-4f02-bd64-a0d03b144fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6669ec-8ade-4178-b460-599b5f096207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4cc982-ec69-4bb0-9412-6bc7707c1e3e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3954df75-4e34-4fc5-a7d3-40f9acf19c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f28bc95c-f8f0-46ea-9bf9-10a93fbb7e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ddc221-690f-4332-bdbd-26e81f435794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ca2e4d-d18d-4dcf-8906-dbb6fd73a0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fa78b2-422b-4c1e-8825-be428d140005",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30efd92-049e-4031-bcc9-c599c8607edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae90e31a-d1eb-4271-9646-d64bbfe35ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bacc3c-628b-40cd-b452-afb5d3f34d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96cca1d2-7678-4fae-8293-7d9c4e392440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93824cb-1712-4296-928e-c5aff2df92d4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c93da2-8f4e-4612-9c49-e249ec2118ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c583e910-a73b-4868-81fb-548a09ebeabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81239985-2262-4851-bded-0ea22c98d43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e21093-8fe2-44c9-a0a4-49e9d8b32a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b08cf05-8923-42a7-a4a1-0939469e1a9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22fed39-23b4-42b2-97f5-ccee16c07a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0ba816-bd57-47a3-b1b7-30d3b3d04213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5b398e-aac5-48ce-aebe-b6acde1c58f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5356063-5006-4a3b-b925-ccb9912b4491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27e1987-21f6-4cbe-b214-1d7390579ce8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb353da3-88f9-4494-a626-827bfc88c4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91cb3cb6-e398-4329-8d0a-3a64c4b5939e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0956bfd-b94e-4368-8dc7-9b60c86ea401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0297b39-dd95-4347-ae4f-4c5a68befd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd53100f-ddc8-4a06-a258-ab08bc32bd95",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc96287f-37bf-48d2-b9ce-4a2e33882b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505515db-07d9-4aff-9928-5163f7318188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b07211-1bc2-48c3-94cd-223c231ffc76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3474e0f2-87b4-4aa8-99b4-31034f6b18e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665dd361-6a80-47cc-8cdc-54b69917b706",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1ffa85-c138-4b78-a428-41f4d3ce04f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71ed1140-8cd6-448c-a90d-21438b57403f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbcc5a4-f6db-4db0-8969-f1fca99499e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e87c782-f47a-429f-a791-4baffd4b0be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0babd6-021c-4bb4-9c28-0e11ec7434c8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c9b282-eb07-4d25-9863-65b4cb3cc287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14332323-8294-413b-8887-20ee090b3e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964143d6-a4b7-47cd-ab96-722c3e373443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1316a7a9-620d-412f-9d60-fe283fe11e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fd17aa-8aae-4fbf-838b-41f5e25a55fe",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68336d1-8bcb-4792-96f0-9546aa79fefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86bdca8-a0e2-4a8c-aae5-13833fa30258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a737097f-03ed-4dc3-b3a2-bc45500aa8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5264052-6554-47cf-9b31-c9a6316899d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8199b267-fe9a-475e-9431-7564c9f62dd1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87653e71-deb0-47d1-8b4d-f979024a6b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70a6d81-46e5-483d-8bbe-40a5e1b92f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be887ba2-998c-4ab0-916e-414eec0ef2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef4a1e8-e662-4e4e-948d-bba89dfe2aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d15e8a-f072-468d-9d81-6b5b578b8e96",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246db1a1-5af4-4a87-a137-8d7b80d7f083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8bf103-47d6-49d8-8365-58c9710c2605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3975e6c-1e0a-462a-997d-095d4de20da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e60e153-3be0-4929-aad9-328de6910b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2433a353-0235-4954-af47-f09677f761b8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2a629d-32a3-4f7b-a115-4bb9e9e302ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2667010b-8000-400b-8751-78101c4bd43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018dd896-f475-48ce-8707-98031f9625e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62eecfb6-3ab5-4550-b067-5ad7d0bada63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49561602-4448-4b5c-9fd0-0d0c0b069a25",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1e5a4c-8846-4697-9628-e4d36ba9bac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6079d710-8aab-4f8e-bf7e-1928583723e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04027b5b-d52d-4a86-ac4f-6e3156486ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfceec10-1256-460e-912d-e7aaff0e7d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df790a3-2cea-4c5c-926f-a9c7f37d16c6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e436b15a-2bf4-449c-ac6e-1a809dcda481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b4937b-d98f-4b83-974e-7e5a9c0eddde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a34db47-b21d-4ad1-9536-c1b16483d49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5aa30d6-25a3-4341-8d4d-597bbe96c1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d9b697-9798-440f-a540-54fc20bda376",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba115b3c-19c1-4866-b198-3b72d1d0341c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714a5d3c-dc70-4175-bd64-304e6d840bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc3aa0b-8224-4340-8492-3c8a32c49a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f00dead-15f9-4ac1-90d1-bb20caa5c9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e2c64c-64bc-4d4d-8e16-0f3c35ce8401",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be03194d-74db-40f7-80f6-49eb93c1000f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2afdd90-67b4-47e4-bda6-9d6c6eaf2f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d78ed0-9ec5-472d-a32d-bc2b90f9e6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecdc0e7-a8a0-4fcc-8542-8de96734b0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783d8cd3-9b58-40ef-afad-866c5f7fd833",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7d07f2-bfa6-4131-b2d4-a060d1cd695f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08ce92f9-585f-4dbb-8124-5a2dbd34132c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc60f60-095c-4f8b-b64e-689d1ab66736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c20a77-dec1-43ce-a31a-c30a08031671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d102cb68-7d12-44da-a306-76140b16dd47",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1a2f17-cdab-43e5-99e8-f4c01d9a113d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68066883-f1ac-497a-b0f1-7cd24cd4357e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af37fe2c-9128-4e7d-af76-05b13826f874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1eddc6-31da-4076-8f26-85a16d53dec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a741aaa-7b09-4b3b-852c-aa5ce5454bf0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a05faa3-20ca-4b51-9b25-484aa34cbef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a124dea-fe53-4f05-9700-39c1a2ee1a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3c3973-9030-4219-8214-4e05d59dfc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed95b17-ca9e-4bd2-98bd-aa0c590946c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf0ee34-8021-45a6-9532-055ea4710d5d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f795100-613e-4711-8624-11f49ae263e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d99aae9-822a-4555-8e6a-f7adbfd6bc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442f3cee-611e-40d5-813a-8db5d341c547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5230d408-a345-4a76-aa6d-af0eb6a77cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a045a4d0-a37b-4941-a635-f38abdb369bd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09cd437-be00-4a22-a0e6-104d1f06b563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1328f579-bf46-4d1e-8036-d9db587c3162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "747269fe-8f04-438c-bae9-15c4b2f404d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a53266-782a-440f-8751-7b58373e54f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d610fb-5c25-4e42-9708-e484df3807d9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda244c1-6b27-42cf-b012-cf133946bf7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80a5a454-bf9c-4dcf-99c7-1ba3ad26cd09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff28dc5-56b6-4e6d-a07d-3e3b1d814188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ad1121-9994-48fe-91e7-22252d2e54ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e27be81-06ad-4314-8e4d-fc5457d6e30a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824ab300-53af-4675-914c-a10255c138af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6186b486-a390-4cd6-8de2-ac39f5be33ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20e9a74-0d4c-49bc-bbca-bbb1eaf40330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae727ffe-2baf-4307-9575-d54c2bab67c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81a2cdd-97c4-40f3-90fb-a7c43ddb1d72",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c30f9a-dd6c-4584-885f-889fc3878839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80381ee0-75cc-452d-aa80-613ca2567604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ee82ab-6649-44e7-99c1-d68066a31818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e801b866-1a00-4322-8d0c-991acecd49d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca75d963-0b34-4c3d-af50-9a466fe64e7b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0502a0-a41d-4f57-b276-9ebc6893ad25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665a0563-157e-4caf-90ff-364ca82876dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1ea1b2-f10e-4f8a-a25d-b55c27e797f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3938d16-9c78-4466-98d6-20eae36808e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c47e6cc-140d-4338-8135-ffb494605ab0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e9ae54-78c3-456c-aeb8-47faf4c66ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f91157-4a4f-44cb-9b5e-43398c503460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ccb28b-0df4-4d4f-829b-81c1688af140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0a5d13-48a2-440f-9878-eea48b9ffa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742c15c3-8b0b-4973-9296-c9f2a2c15e36",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85592bd-a2d0-4fdd-b351-041d45789221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48765e07-5d9e-4e64-b4fa-992f69d087b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd7fe3e-8ab2-41b4-b4c9-52057c23bd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbb4a81-d7ba-4bf5-b1f7-cdb020a29b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2aa8d1-21e5-43cc-8977-10cfdcc0d1ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec59c3e-3907-4159-bf35-1d6d6684bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6833dacb-190b-4590-a196-a2e4adfd598a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e47d6f-5c9a-46b1-9623-4fc9d5e37f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1351c859-b957-47f8-ada8-a797e5fd65e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd38398-d319-492d-b356-fbf829c1d17f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf405fc-6348-4509-b11a-aaef00038edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb2a1c8-2819-4371-81e8-3bf14fda0fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea65e890-44b6-496b-98d0-3bf9654cedd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafd13c0-dfca-441c-badd-3b4c3ae936e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed65e29-212a-448a-a0a2-743abf489789",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03db8e39-81e9-47e3-819c-167e027314be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93da291-7218-4384-814b-1ad071aef360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d94ece-f7c8-4570-b86f-3a734a22672a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68da4a1-0cd8-4ca2-91bd-1c5dca7d8bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5559a710-0de5-4d92-9537-6c8df3572997",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d036c0-b697-4afc-a511-2b4d2600f11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ad95aa-0fad-4ba9-8f44-033bdd375df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac08562b-f677-4aa5-870c-6b8667025fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa0c341-0c92-4264-a47c-15797ee0aff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa3c03c-788d-4418-a07a-430d634c7415",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7c6488-4774-4a2b-84b9-6263da122f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623b8ba2-e34b-4c35-a35b-8942814982d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497ad26f-a480-4482-b799-1cc1605e331e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0005484-dce6-4c97-8b18-5f9ed313ea4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbbd6e3-86a7-484c-8760-8a37cd565328",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa7d892-9b42-4f75-bbe9-20baced55501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1a388e-f9d0-4162-9be4-308ebc70bfa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a29ec4-0c71-43ac-88d6-3ab1f386c972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891f5719-d593-46ae-9dcf-87b456ccccc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7b7c3e-eacf-4f39-966b-62394c242303",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c35611-19ad-4f23-bed0-5e3eafd88113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f569d65d-21bc-461d-bc0e-9952d0e804cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e363f617-72df-4850-932b-734833767653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe343f1-3050-48d6-9bf2-ae8c1abb4f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef76d235-d0fe-4f87-abef-1d8b3e33a258",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e88cf4-ca39-4988-a0ad-ef915a0801a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4be7be-f750-47b2-874e-683d2969a46c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50545f31-6fa1-458f-a269-d5f05ff75dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fe0496-d3ad-487d-9ce8-8818205b646e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd43c6ab-f910-4725-accd-bd875c16aa4d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079a95e2-b882-485f-837e-305c9d819867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789aac37-dccb-41bd-8698-bcc79beec091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6004184f-1646-4aa4-a851-1833966401d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18da3aa0-4c70-4082-825b-5cde8396b85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e3279b-8401-4eb2-8148-f0e0e2aa1dc5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359472ec-0fb7-423f-852d-e4f14bd0c5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715071e9-73f4-447b-88f1-4c5cc1a81779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398e6eb1-7dc9-4e01-960d-c74fccd0a793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5a8c2e-fb4a-40dd-bc68-def3e8866623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d8b689-f5ba-45ae-91f2-babf7a5ab6e0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79964c91-3354-48ec-a4c3-b45650ec657b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7b55f7-3227-4045-afdf-5b8e62dc728c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbae07a-5a61-499c-b11f-ac478c2dad65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51381941-48ac-4550-893c-cdd81c3f37fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e8ebb9-3c9c-4039-b1ef-6016ad9a8cf3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d020420-f4df-4ce7-a4ca-401df0be9503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29602ffc-5068-4053-9fa3-79984f4d7b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892c3f87-b1a2-4070-b9e1-09dd90e9fe0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cc8b2d-5a8d-4320-98d9-5e5091f4392a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c7b722-9b75-4771-b6d6-b214a5b0cf29",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf08c52-6ce9-4cd0-a1e5-d76ced06238a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4776f8-d01f-4070-8c95-97086db10c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9986c7-e025-4362-abfa-afdc02a23004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bc0cb7-cdf0-468e-b172-4f8d3327ff89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da948c73-5165-4bfe-9dc9-b91e482dba3d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855d5701-177a-4f6e-9082-a94e0a6fe01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ebe044-2446-4da3-9f9f-2b68b3994909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3cae23-bd6c-4268-88f6-946fa7335f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05327b9-c653-46b5-afe7-e5df8ebeac51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97587790-1dfa-45e8-a369-f99807ab425d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf055081-125a-4781-9971-3795b1e8523e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a120eb-c3ec-48a7-b98c-8297a89e9932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9279684-ce4b-4915-ab15-ee1f23193876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a42a069-4401-4630-b2aa-665582a981d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba03f4df-b7f7-46df-97e3-0855efc28872",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7757485-0fc7-48f1-bae5-ebc315e21c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86df8372-17ab-43e1-b7c0-9c259fd1520f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c051f07d-e300-4ee9-b75d-458f28a5b490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85defaa-43f9-4dc4-b7ec-b84b311275c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b0df45-6b19-4772-b7fd-ddfbd6aa0be8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6799e7-df8c-481d-87de-0af1764c770a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4872ee9-150a-4070-b589-fa9333e08f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500169df-20a8-4336-a4e4-cf6633b62424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6248cc-e514-40fb-89da-1e04302b144d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eea683-72c4-4fe9-b6fa-910c5d9dfac6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3a88bf-0cd5-4f5e-9b05-7bdb5ea269f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e34bf2-8d69-43ff-afd7-b6639225655c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b026ab3-806e-469d-86b9-e96a610a42aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9137bc3-e0ab-4960-91d6-6e24ef92b422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bf7b6d-68ff-4bc1-9c9c-3eac06fdb715",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7924239c-080c-419e-96af-82f441b16d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a57dcf7-1544-4bbd-b4a6-9462ff43157a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37503d22-6545-4388-881e-6b1be3ea993c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9962296d-1450-42e4-aa08-dc9d4f16775f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d53af5-fa33-4793-9dbf-51dd77b6c495",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb4b53c-d555-4369-a023-2111a8ece648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186a1e1e-8dc6-43d4-bcea-46d05a84e4a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3c81ab-6ab5-438f-b895-2d08c1e8b8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275320a2-8673-4bf5-b3cd-a951dfd8fba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed7dc2e-d58c-4506-91dc-b4cfc47ee0d7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956fdc57-43c6-4e79-8474-638dcb77fae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23b0ac1-cfe8-4e3b-9010-61c095b80ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b921b2-4507-4a53-aed8-0046d2c35393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0d6b74-7ae8-4b61-81f3-004737cb4fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfeeb96-1602-41a2-a595-ed628b446798",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7438e3d6-72f3-4a07-bef9-257df5d494b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613676a7-9770-4d2a-b94b-cd041407620f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a312dc-1962-4205-a6a9-299b2a6f104a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62031c0-11bf-44a0-bb0e-eda6c20dc0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b02f4a7-d51b-4d52-a875-28f8f69c82c9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2793218c-17cd-4120-8425-75990baf4a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefa97b4-387c-447d-833d-93f8f469a359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b9ba3d-9c09-486a-a162-3540e5ca5e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7ca9f3-c470-43cf-983c-836463ee722a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dfc157-22b6-499d-ac48-3106228cc7bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6971467d-528c-41e0-a146-b2b8c88d73f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b500878-337e-4a13-bb1c-fc93caabfbc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ee357b-4c3a-45c4-b410-07978299a709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d3303b-8e32-4655-a800-1a32c4243858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8d2a0a-0b2c-4711-b755-f0dd65c01eaf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02738014-7f6a-4b11-8b3b-55b8fea4fd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67288674-f81c-4045-bd42-419a5f69e05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772238c9-9901-44c7-a79e-ee5c075f5f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b396e8-c9b0-4a54-85b1-6a7058b8a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b09505-0692-444f-8b72-50a145080fc8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7bc7d1-d697-4df8-85fd-9420f9be851e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efc5462-6587-433b-801f-0fbc1ddfb9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbba3e3-6a97-497c-b5a7-43895bc5f6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b625f8-034e-4e3a-8176-44ad8781fbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd6b375-5d10-4670-adad-4a10f985d6ee",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65bf4ef-9498-4dc7-9cb6-06d069b41574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdc6be8-1508-4fdf-b8f7-8be90fdb9187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef217cb-5807-495f-99cc-812b3d6986d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0093a7-1e1a-4e0a-98d3-56694776c2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca025401-2141-49af-b67f-eb7e5f01a84a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea13e093-73f5-4295-89ab-224429a43c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e29838-3fc4-4fbd-8fb5-c5c297400bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8167cbdc-eba9-4cbd-894b-bd48a7fc036a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a39b07-0e27-437f-8f99-9646b6549bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64e6e3f-9610-4c90-9093-5d63ee4b4e12",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23881013-25ee-4c62-9e22-88eae961799b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27a3d85d-9fbe-4219-bc0e-a7437ef95cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81689a5-947c-4dcd-bda6-4f1d0a6d8bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d29efa-d7be-416e-a3a5-acf62967c4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a1a792-7edb-495c-b615-262ce4654dc9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a777b64a-d2ea-48b0-91cd-15636583ac29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b041815-ebe6-4b70-afd0-fe6c194f2da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e8b5b7-e5ce-410e-a084-5424307bf0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a52a5e-a392-4a7f-bbda-639da38813dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb264ff-9b11-47a6-876c-0fedf3800501",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8f753b-9f1d-433b-843a-8c4057b2b36b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a322e4e1-b441-4696-acd4-522c7655de59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12cc757-594d-4007-a9ae-2b9e99ea07d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba452673-421b-43c0-a499-f82150c9eaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d68031-5689-4471-ac00-af18e9d8a7c3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b105f6d1-6c60-478d-b3fb-07c89126a379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d403a363-c6e3-498f-94ee-13676661553e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51acadca-3e40-4dd1-bba8-f538c7bf3bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff63909-31ca-421c-863b-85bc5da52f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1779b329-6171-4dd0-97b4-a37023c575d8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15bb19f-5ae2-4389-a1f0-15f95dd7e28d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c9d196e-9d6d-4f2f-814c-c302cc5e824d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576f4d8b-e3d6-4cd7-a757-bfa7417a4d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e4ca12-27b3-4cca-af19-ceb8d2ba7eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61505604-d167-4e8c-9386-484a445a9e66",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f9f212-fe9e-4851-a93e-2a5ee56b6861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a73bcb5-3640-4cfb-afcc-304af4b6e900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1162c2-7e2a-475d-b442-d33fe70d392a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20667ecb-6147-4b2e-88ae-0029596d5495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d1363a-7eda-4f6d-97c9-96ab56cc1906",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f83511-d55c-4825-b6a8-dc4a760282f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b92441cd-2065-4cc1-a03b-43362fa5a2df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d39cc21-44a1-4661-8e90-2c7728139fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717bc676-3368-4a04-bd1e-d672e56652ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf098ed-ef15-41b0-bdb0-d9e2712364d8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196cc56e-09b4-42b0-9883-9b1e4210a6c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca7a86d-ec9a-44f2-a62b-7c2324b51d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92746ca1-ed5b-45a9-a246-a063c41f2d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea066a2-a821-4707-91f0-a0692bd3e3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c618bc4-a637-483a-9a13-2941ab4854ac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a58bd30-4573-4859-ab7d-cf07829e63ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a17e8abb-9bf5-4b29-8873-9bc616d0d71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616f660d-d8c9-4751-be95-6b21b2c62518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47e3194-dd47-47ac-8569-15d41f3993be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5566df-56b9-4144-b6d8-280349357f53",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63cf2a2-e4fb-45c7-9446-5d8ed5eb0154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c85ceb-797d-4d1d-bd82-1fd409414635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac94bcf-c3b2-48c3-b354-f2805ea495fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6969e7d0-302e-4fce-9286-f1fcace96b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2145aac4-d87c-4505-b0f3-065ee32b4aad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8177d8ec-7497-45ee-b56d-7b8ca274ce08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a72712b-86fa-4a2a-948b-8446a7fcead1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bce308-c828-41d4-9f5c-0e6140adb673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946ab6f8-3c89-486b-8c07-4ddec48318f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dfec68-dfcf-4b30-ae97-fac6371f4d8b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43bb90c-6a4e-4394-b166-0d4b6eb2a4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ebf582-814d-4d07-bb25-e3cd00d36cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235974f0-b081-4304-9973-100e4819a93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ec0667-7432-43f7-b9d9-202bd915ccaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5011b3f0-76f4-4592-929e-c6a74ddda991",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9737b268-15b7-49a0-936e-8902a6b72c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb096ab-bac4-455a-9322-7da5bf9a2aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391feead-ade1-473b-81e0-a515736dd81c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03dca2f-7f27-4c27-8ebe-d2ddc4c9aee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca91ec3-3f97-4a45-9eec-05e4dc27e23e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4f28dd-78ae-447a-b2ac-673989c37835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "709475a5-813c-476d-beb1-d240fda7c3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3b35c1-fd79-4224-957b-59e3f1b2b2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfa537f-e3c9-4155-b68c-49cca3d81d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28014cd0-b5fd-46a2-b92b-4a40e3011afd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683e5877-a10f-4733-bea0-337b8e861a09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "694e4f81-9cb1-4c2f-bac1-30bd2e5d0d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4ec620-6646-463e-8c73-4fb0937f50f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c5d41a-b47c-4432-8b0a-14596759540e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cc35a2-6a1f-4c40-9257-1eb30677b88c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e325fe-a102-4a04-98dc-b8d7d146c3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab29e72-470c-4469-a6b5-c0eb840721a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62407d3c-12e0-41d8-8dc7-ecf48a770cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878e29a0-80ed-4ce3-b79c-de482faeb7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55a664b-ca38-47e5-affa-3967896e0856",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c69f07-b72b-4b7e-b527-d8de55a737cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efea7980-2592-4fe7-be9b-d34784d5fa56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f656be5-bd3d-4f7b-9ee9-304118fbdb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe340f6-249f-4ac8-b621-db2f35df90d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22bfc7f-c1f9-4800-9d81-6dd56e502123",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d85d886-340e-4180-8a8b-be71a43473d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f548d64-b01d-4a4e-b9b0-550269205b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9bc1a6-9ede-4f3e-ba59-8cfbc1a994f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02338ed5-87f3-4dc0-ad98-991631c4787c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89654346-096b-42a4-9e94-126c9c0175e0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edd3066-bef9-4ddc-a685-91f24cfb36a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27ab5e4-dbc9-4815-aad0-63dd07d2b33b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf3aa4e-0cab-4860-a722-3c2880e82b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefaf40f-9102-452b-857e-9537b2928499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b1496e-5a3c-4f8b-bec8-55fd20d51c9c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c16dea4-dab8-4a9d-bace-4565246105c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53a06cdd-b4ee-4a9c-aaea-e79a384036cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db20bf5-30de-45df-bf04-db3eb26d916a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17725c78-c136-4ec2-b70d-b643727ea49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98163073-71b7-4451-a7eb-19d4c66109cc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17dda89-8616-4d41-ba25-22073a75dd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "818760a9-34e1-4b0d-9d7e-40b64779d46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e750e96f-0d55-4955-bddf-5092093f04e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755b61c0-4d79-4595-82f6-63401062cfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae1d337-027f-4fd5-9c3b-d3735403832d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6965de40-6921-4765-a2d0-9394d35eb612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80a8628-3645-4c40-8963-eb51384c385e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9029c9-2464-4efb-835a-0b95455e7187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a744c31a-8f2a-4d4e-849a-ca1e25c5167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b2e353-df15-48c2-be54-5f58e865603c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beba68b6-0451-4834-9984-f0d1194bae8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d637fa-17ae-4db0-950c-67f45e0e54a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8253c1f4-37fc-4761-8f18-d7af5476a5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b447032-a131-48fc-9770-04c2d0b29e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ce68c4-ce03-4d24-943f-2abdbd3d68b6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d594462f-2ead-4421-9b21-fef68e1030f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "426ab6d6-fbc4-4a13-a40c-84946e768b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e074e793-9a4e-4884-b0c0-a433044c3c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b62c5e-8bea-4bf2-a872-09de9b4f3021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2189caa4-049b-4cd4-b199-0203a39411d2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd371330-2bc6-4ea8-8cde-1639c8d4effd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3530abbc-1447-404d-84e4-98fd26e17093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ada63a-1bad-4dc1-a0c9-306a97a764d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f333100b-d203-44bd-9394-e58c81caad61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fba9cec-4ef5-44db-acf7-bfb749b5da34",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cec0dc2-7e55-4bbd-b739-e48493a2a233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4135c345-1c87-4d64-8b5b-a7a86d3621a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3a69de-e683-4b4e-9b3d-155a3482cade",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2dd272-8b0e-4470-8545-d5b22c777252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47e92ca-c771-47ab-9dfb-e1b696e0b229",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4952fb54-fe3d-44cb-8646-299c8db191b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cc7447f-8171-459d-9a13-aad97ae03293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ae4aa6-dadc-46f2-ab57-51ef3367c64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efde894-6cc6-48f7-945b-71bfa0ca2d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a97b75-ad04-4357-9aca-888b61a807e3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32193890-cc78-48ce-8b6e-a3488c2cfcd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0affbb56-a42d-42b8-aa91-e4a7e3d7ebdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae1e15c-df48-457f-8c22-cda20fca0511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcd4c40-a4a1-4b1b-ba78-fc43136c470f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7470c5-6432-4349-be1a-3ba4fcc51f70",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef30d556-48ea-42de-a589-aada4e00a8bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6a1901-976f-4799-8d46-496b9e277c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6814a1ee-b586-43db-87a8-3221c00b28d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad55256-405d-4472-9473-95e328b38f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2180f52-cde4-4f45-a4d1-546026c7ee94",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4959010f-7d5f-44e2-aed8-c917a0543047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb6c5720-c329-424f-98e4-19a546e9d5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6214d976-278b-4fc2-960f-d7838edae224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede0c373-a8b9-44d3-9888-1fa61c3cb1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4119cfac-380f-4d25-9671-02cb573b8787",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5a6b3d-c6e0-466c-b93b-d6474dcefa48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d535608-e035-426f-8ff3-d6e749bf1627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc05aa02-a8a1-4c13-9b7c-f5bac916a727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd328b9-8efe-4064-97bb-df0a11b9491a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5858eae8-e248-4cab-811e-a750240e2cd2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e7075c-9428-46dc-8830-87938fac4eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71d244a5-0597-46ca-9bca-0a7a8df8dc46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc649c2-2cec-4240-8ffc-6e430a3ff901",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4445af75-9e52-4aba-9f34-7eaae6fcaa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7d321c-ac02-4b6c-bfdf-dcb9e7052851",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abe3937-d2d0-42ad-b6e8-86c8d5aa665a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf23f1ab-c2a0-4fa1-b3a6-d2949d56947b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad305e1-19bf-4344-aa90-07d43a6725e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f4d959-d8bb-4ddc-b013-06c1eb60cc3d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71d3a3aa-9c72-4021-b072-0a5e6fe3fa12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa1f2cfe-9f11-4a6c-a04f-708ee873313b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ef2cfbf-fa40-41d2-a429-29e0934c1689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd4ac8f0-9fc7-4901-90d5-9468576dbfb6"
                    }
                  }
                ]
              },
              {
                "id": "4e5ec082-9c0a-45b9-88b5-d338c7e9b573",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d341894-3d5c-445a-bc8c-9a196681a61f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498926d4-26b1-4806-9e41-58e9771e2ed7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8c8815a1-bb22-40c1-9fc2-be3415056f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29a3f3f-5c93-4fde-8e42-3a01ac7bb98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "838d6f53-06a5-4345-a062-d5c20490b589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b813e5e-86d5-4c17-a63d-9b5729ee306f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a40db81-e9ae-4670-b7a3-187cb920237e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0db294f0-651a-4d30-a38a-a7bd2224a175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2838ef66-dd4f-4ab5-a8c8-3baaf3ccfce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da5c5271-40bc-4616-a6e4-a59814f5ae48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f0eb57b-9409-410e-80bd-f41a5e35e7ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e823e02c-8f23-4fc4-b404-0ba2655c8628"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "309f9684-9ddb-4444-a5e7-8c30236714df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4d8dce8-75ae-4149-b3f3-cdd4813990ae"
                    }
                  }
                ]
              },
              {
                "id": "82013d37-e2fa-40a1-9e47-1f801d1e5306",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ed297bc1-5393-49d6-84e4-095e4b64fb09",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1d2bb5-cb94-4f75-b0aa-5f321b2d0ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f3bb54e1-f998-4799-9750-6ffb15544ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7508609-3665-4a81-8868-c96dbde1f714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511bc520-bf06-4212-826e-f9819e96551e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a75c8218-0421-42d4-9bc6-22845e595cce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6dbcaf79-d80c-43c0-8f18-badf763e58b4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3448d619-4553-43ae-8cd0-76f7e36817fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f4f90c48-aa46-4350-abbb-b6f4ffd40742"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c381aff-7986-4ccf-b738-7343209ccd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d22bcbc-b24d-4ddf-bad5-7d16867db886"
                    }
                  }
                ]
              },
              {
                "id": "762936e4-9f1f-4828-b28e-7f736362f64a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaed8b49-eb90-4551-8ca0-a6530a01c1c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "10884639-8ea0-4933-aada-3c36e3a59438"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc236186-aaf6-4c12-9fc3-c24945b62928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f1a4a8a-2b7d-492b-bb4e-144c0c6e6acb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e398a96-b0cb-4515-a742-2f72f757ddbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "22c3b1a6-0a7e-44b7-b4cf-677b9f2226a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "549ab071-1c46-4238-9b6e-ce5c483e1c83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89c1a99d-47d2-4d2b-a585-75b38cfd92b9"
            }
          }
        ]
      },
      {
        "id": "1499156c-7b3a-4c0c-ba6b-c63009949ff2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5a38c39d-78ea-4929-9920-81ea0c26d385",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78fa1bae-5cd4-4efb-bad6-2abebe783a53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6291b5dd-c640-42d2-b5f1-f018ec949920",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "939c3edf-4ea3-449a-a560-786c63302ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18864f86-0a57-40ba-9382-00d3cbe1ffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15e64153-237a-4b28-b856-3d1a3c7c5b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b141184-aad2-479e-a3af-99fbaa7fd04c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de87f4cb-0c4d-4dc3-bd8e-52ccba4d5d5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f3e63c1-7c74-4849-b54e-ced0da11a625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb3f59d-caff-473f-bd9c-1b408cdaefd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54b6d8bb-e233-4a74-a1b9-0006a5d8eac5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26737ca5-a8cd-4f32-8565-fc1908774a0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ff4dc61-40be-4a83-9ff3-26486d20d1e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "776f333c-275d-4681-a65d-d972b0c9ab2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e987f322-9f17-4ca0-b9e1-57e854017971"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5efdd5c5-575c-44d7-9580-637722dc7f34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "45e7cb61-c534-4438-91b3-71cc4990a6af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "317b5ae4-583d-4c7a-9e21-5f6d396ffaa2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8645006b-d69f-48bf-be6e-35c92bf37fad"
            }
          }
        ]
      },
      {
        "id": "44f4be45-46cd-4511-bbd6-6455953abe18",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0a680941-7171-4776-9f74-981e2559f1df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4357d068-af1e-47f0-b518-0ea7f9acbad1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cce5eea9-2b25-4897-ab3b-4396cf8e5e44",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9549c1-2a8c-43a1-9b95-de10f9641c1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "811f4f73-dafd-44dd-84ad-3974e9dd8b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15258eb8-8707-4c94-8bb5-b455ef3bc2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68817b12-92e4-40d0-a3ae-11b01fdf61a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7b2454-cc75-43a4-b01f-24e8e11ba6b6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c507c8f-b448-4697-b7f2-a8e45cb05b56",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c24ec31d-1e85-43d3-8eeb-90bb2f5bb826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd59b53-5db2-4868-99e3-60f8a2cd8f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7203fb-883e-4100-a6ad-a73983f9bd85"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4527d014-5532-4a0a-8023-10cfc7bcc9d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b5904f3-43cf-4655-a5ba-2ef7a3c9ca75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfffdec3-128d-4fa7-a7ac-4456cacbff9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4526c053-592f-4df2-9492-9788f938b5e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b8cbd79-8828-45b3-a97a-4a810ead84ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e5ae02b0-7fb7-445f-9b74-15cf1a148cf4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79695067-3689-4244-825f-678e3a97a607",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "563cc697-af94-4d6f-93cf-75eebd6360f1"
            }
          }
        ]
      },
      {
        "id": "0989c1da-936f-4070-9dcd-999e590a0e0f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "33a3870a-042a-4d02-951d-9cb2c3dc1de4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb7f20a1-aa5c-4d07-b868-6b69d74e7653",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94849385-a71e-4742-a713-7c77a942b105",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd724315-2f01-409e-834a-59b018ccce60",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10a98f60-122e-40ac-8d42-8fc2cebfbfef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "838ce5ab-27a2-451b-b002-ab668625d33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fec7ce12-f6bc-4f92-869f-00e01326f4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf26b90a-7b3f-4ec4-9b02-a91ef603f2d8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba31511-5be5-424a-9838-ac27fb3588df",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "afb74aa6-d391-48e6-af66-d5e3745ec2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "836a69e0-3c34-4cba-b70c-9072efe55a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8b5c26a-bd74-420f-b4ec-018cec22bb9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8e2ae18-c375-4f97-b610-55f0b628bb82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1658e2ca-04ba-4154-8efc-18a2fee973cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c54b7376-ed8d-43f7-bd37-d047fe07ccb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aee660c-b00e-49d4-ab8e-7cc5067ec6eb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97ad70b8-2116-4030-b046-f076c3018f9f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f15de72-5a37-425e-bf9a-829e2e4c791b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c364936e-ecdb-471d-b0c2-1b9a2267d3c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb32c760-efb0-44a2-8ceb-35846e32ad34"
            }
          }
        ]
      },
      {
        "id": "fa94c497-6341-4a11-9fd7-57708b9cfd41",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3e2a42d-4425-41ff-97b3-240ae068c6b9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "781439a2-5f8c-44cb-a055-7291a672be08",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e64a567c-eea6-4885-a08c-1c2be1ffc047",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f72960b0-2e33-4377-add8-899c7cbc51aa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d0ffd84-40d4-4a54-a36b-85e26cce76d2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 333.61776061776055,
      "responseMin": 12,
      "responseMax": 8127,
      "responseSd": 1177.039590465163,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677977359831,
      "completed": 1677977457278
    },
    "executions": [
      {
        "id": "6e9f1007-4991-4700-bcd4-973e7ce9c473",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "444f0873-38a2-4214-bae0-9b0cd20f5ff1",
          "httpRequestId": "2d5842e6-6933-4469-99a7-bf083e56fe6a"
        },
        "item": {
          "id": "6e9f1007-4991-4700-bcd4-973e7ce9c473",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "06c5adbc-f129-4c26-a11b-62e5a173ad69",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 0
        }
      },
      {
        "id": "cddb2cf8-e4c6-44c1-aa70-cdb0159cdab0",
        "cursor": {
          "ref": "c51af4e2-a611-45ae-b379-b0833840e537",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "edce5794-b937-459d-9950-a09a79aa36b5"
        },
        "item": {
          "id": "cddb2cf8-e4c6-44c1-aa70-cdb0159cdab0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "48268290-4628-4af8-af35-6b7a2278c28f",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "22515ddb-75fa-45f3-b555-f11959cfee6a",
        "cursor": {
          "ref": "3ab9a5cc-a4a9-47b8-a1e0-592a2a02c658",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "89f6c05f-7444-42a4-b48a-335dcc0b1c56"
        },
        "item": {
          "id": "22515ddb-75fa-45f3-b555-f11959cfee6a",
          "name": "did_json"
        },
        "response": {
          "id": "3cc41488-f272-4f99-aa1b-7c319cd35db8",
          "status": "OK",
          "code": 200,
          "responseTime": 666,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8396a9-03eb-47e9-9627-5b76751104d8",
        "cursor": {
          "ref": "33a83252-5e8e-479f-a72b-02cc60f4f8e7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95491f53-4227-4471-bec6-6ac976fa659e"
        },
        "item": {
          "id": "ba8396a9-03eb-47e9-9627-5b76751104d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "04cf73e4-d66c-4e26-9c9e-d16e6ec0da6a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1008,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ba8396a9-03eb-47e9-9627-5b76751104d8",
        "cursor": {
          "ref": "33a83252-5e8e-479f-a72b-02cc60f4f8e7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "95491f53-4227-4471-bec6-6ac976fa659e"
        },
        "item": {
          "id": "ba8396a9-03eb-47e9-9627-5b76751104d8",
          "name": "did:invalid"
        },
        "response": {
          "id": "04cf73e4-d66c-4e26-9c9e-d16e6ec0da6a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1008,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d47b88f1-2e3c-4948-aeeb-bd8afe1f6330",
        "cursor": {
          "ref": "b534102e-f2f0-49dd-a72a-742a715a74d3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "81802328-bbca-476a-9212-27f847cf7713"
        },
        "item": {
          "id": "d47b88f1-2e3c-4948-aeeb-bd8afe1f6330",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0b5481ce-09d0-4695-8d40-bf53b16340ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdbaaac-cc8d-4fe5-9e68-cb593e85da41",
        "cursor": {
          "ref": "36d068f9-017b-4753-ba6b-76626fa7f9d5",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e9a83aae-b2ae-4aaf-bdec-26e6e13276d4"
        },
        "item": {
          "id": "9bdbaaac-cc8d-4fe5-9e68-cb593e85da41",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "039e418c-ba40-471d-83f0-4e90eaa2ab80",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3aac084-7ddf-4e13-aa9c-ea513f51acf3",
        "cursor": {
          "ref": "de45d82f-fc41-4f1b-84a1-ed9ce0adea75",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "025b393e-1d69-4a8f-a77e-5888b9395138"
        },
        "item": {
          "id": "f3aac084-7ddf-4e13-aa9c-ea513f51acf3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "11a3332c-66d7-4254-b979-e419657718a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8a99b0c1-dddb-4a73-bbc9-c77a5faf83db",
        "cursor": {
          "ref": "0ebd51a9-40c1-4e79-8990-c4f36bb9a4a1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2521c284-8a33-4131-8643-8011b87c2598"
        },
        "item": {
          "id": "8a99b0c1-dddb-4a73-bbc9-c77a5faf83db",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a7f27eba-a622-49b0-977f-321ff391e8ef",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8a99b0c1-dddb-4a73-bbc9-c77a5faf83db",
        "cursor": {
          "ref": "0ebd51a9-40c1-4e79-8990-c4f36bb9a4a1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2521c284-8a33-4131-8643-8011b87c2598"
        },
        "item": {
          "id": "8a99b0c1-dddb-4a73-bbc9-c77a5faf83db",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a7f27eba-a622-49b0-977f-321ff391e8ef",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d676c760-f7b4-4fd2-8457-c2960e40a81d",
        "cursor": {
          "ref": "3271e655-22c0-4045-8ce1-540706067d00",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f3df1374-d298-4687-80ff-de87703c937e"
        },
        "item": {
          "id": "d676c760-f7b4-4fd2-8457-c2960e40a81d",
          "name": "identifiers"
        },
        "response": {
          "id": "7a9cfd6a-80dd-4a57-8fa9-2a1185438f7e",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb1d88d-5450-4317-b73f-0a048bcd9022",
        "cursor": {
          "ref": "232c926b-08ea-4ad6-8318-44b5c333b4cb",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7bbc471e-d788-43c6-bb51-5d6d7bdabb74"
        },
        "item": {
          "id": "bcb1d88d-5450-4317-b73f-0a048bcd9022",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0e385260-7c2a-4a3b-8588-8bb3c7d9a02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb1d88d-5450-4317-b73f-0a048bcd9022",
        "cursor": {
          "ref": "232c926b-08ea-4ad6-8318-44b5c333b4cb",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7bbc471e-d788-43c6-bb51-5d6d7bdabb74"
        },
        "item": {
          "id": "bcb1d88d-5450-4317-b73f-0a048bcd9022",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "0e385260-7c2a-4a3b-8588-8bb3c7d9a02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc21be0-24e7-4539-8986-b1a997307817",
        "cursor": {
          "ref": "19b59296-5be6-4b9a-8458-01ce4888c26b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ecfd515a-f0e9-439f-baa7-fa951e32cb50"
        },
        "item": {
          "id": "8bc21be0-24e7-4539-8986-b1a997307817",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e3019b6d-410d-4066-b1e6-a742e5dd397c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088d518a-c750-42ba-91d0-27dcdd563702",
        "cursor": {
          "ref": "836ea1bb-f9e1-4b8b-999d-8137b1b52c23",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0f4781b6-0a02-48fe-95b5-e279fdd539bf"
        },
        "item": {
          "id": "088d518a-c750-42ba-91d0-27dcdd563702",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "131bc625-e90d-4619-b9b9-bc549bd9e42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5c7bf2-7830-496f-baca-5fc35aad95ae",
        "cursor": {
          "ref": "e6d839f3-6512-4489-a501-bfd9d8ba6363",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f62cbfd9-b407-4d6d-b42d-525a200a0cc9"
        },
        "item": {
          "id": "6a5c7bf2-7830-496f-baca-5fc35aad95ae",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4ee0a4b3-c363-4580-812e-671b1401eb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9de3d3-ae33-49d7-a251-a17b56dd014a",
        "cursor": {
          "ref": "b1c24956-c5f6-49ad-9aaf-7f6002951ac4",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf6ab12e-909d-45fc-bd93-f842e312de85"
        },
        "item": {
          "id": "2e9de3d3-ae33-49d7-a251-a17b56dd014a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "025e0317-3166-42d0-9fc6-264836c6161b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74435338-61c7-430d-94cd-633b7ed71fbd",
        "cursor": {
          "ref": "5d62e46e-a051-4822-b269-e647c91156e5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c79fba4d-3b78-4077-a0d4-daf4cb49f42d"
        },
        "item": {
          "id": "74435338-61c7-430d-94cd-633b7ed71fbd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b64bf9e0-6f41-4a43-b738-654554e3b681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a2f497-8943-4a64-aaf0-9f1fd7607ec3",
        "cursor": {
          "ref": "22582546-0874-4fe4-962a-d78cf9a07f9a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6a27422a-4713-42db-afa8-d3d1f560a965"
        },
        "item": {
          "id": "b6a2f497-8943-4a64-aaf0-9f1fd7607ec3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "27c5116d-cbfb-4635-9e57-4064902a0899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49c62f3-b56b-4cc3-be49-1884382dbd43",
        "cursor": {
          "ref": "82dcfca1-c5b5-4352-909f-8153a17cc369",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "70ac39ed-fc79-4c38-90a0-edfff1c3a63e"
        },
        "item": {
          "id": "a49c62f3-b56b-4cc3-be49-1884382dbd43",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8760f4a8-db6f-4de0-a69e-59ae30f625c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d767ed-06d8-478c-b503-7ff79ccb3f19",
        "cursor": {
          "ref": "b4d45200-3ddb-44a2-9441-ba8e60de8679",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "045d16e8-1dd5-4904-9c68-9dc03b9ffe73"
        },
        "item": {
          "id": "55d767ed-06d8-478c-b503-7ff79ccb3f19",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "aa849af0-6b28-48f1-bd66-c52fd28e3723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ff875a-e281-4d91-9609-be2d0c2b3130",
        "cursor": {
          "ref": "ca477313-6604-47be-9f84-39710b027df2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "62e6dbd4-42cf-47b0-bd60-f22bc594317a"
        },
        "item": {
          "id": "05ff875a-e281-4d91-9609-be2d0c2b3130",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ae1a0a79-4a8e-4f6d-9434-8c7f9ba6e4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5016b1a-b11c-463c-9431-03ddbf17fe16",
        "cursor": {
          "ref": "0ab20c87-dc49-44ec-9988-9f49053ad7ad",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2f927cf1-f263-4e41-9aa2-78da003f47cf"
        },
        "item": {
          "id": "f5016b1a-b11c-463c-9431-03ddbf17fe16",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ddce071b-fcb9-41b5-9e17-f22a8f960288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8d936c-8d40-4c58-95e1-6e4f0bd75990",
        "cursor": {
          "ref": "965b70cb-8985-4542-87f3-96cc4fbdd1df",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d54b2c26-e412-4662-a496-e997c6eb87eb"
        },
        "item": {
          "id": "ae8d936c-8d40-4c58-95e1-6e4f0bd75990",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "358c31e5-68b5-4466-b362-334cfa7546c0",
          "status": "Created",
          "code": 201,
          "responseTime": 620,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b7e6089e-1651-4033-ba82-92dca01a9890",
        "cursor": {
          "ref": "d3b9d6fb-4bb7-4f6e-9612-b35c1a2a7004",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5ac1c1dd-742a-46cc-93cb-6d01375e521a"
        },
        "item": {
          "id": "b7e6089e-1651-4033-ba82-92dca01a9890",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c5d9f735-315c-4233-802f-8b50b0dc5e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed74dc9-7a9b-4bd0-9a68-add0180f00c0",
        "cursor": {
          "ref": "1860a687-329c-4ba6-afee-75632168810f",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "27f7e516-1f45-4216-97d4-e8999fedd203"
        },
        "item": {
          "id": "eed74dc9-7a9b-4bd0-9a68-add0180f00c0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b028a909-cc1d-4649-b64b-0c88a0dd9448",
          "status": "Created",
          "code": 201,
          "responseTime": 5561,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8f7dfcac-30fc-48a7-ae96-2343dece5718",
        "cursor": {
          "ref": "0988b582-777e-40fe-846f-b0c6f0d646b4",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bcc54c32-b8bc-4864-afb0-698f0b3ec0d1"
        },
        "item": {
          "id": "8f7dfcac-30fc-48a7-ae96-2343dece5718",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "176d565f-0e1e-4bfa-8f54-0bd3770ea8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2eea1bb-29da-41d6-b67a-6db76ee19bee",
        "cursor": {
          "ref": "a6ecb656-dc0f-4f29-88ad-2ee456686104",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6c57536c-11a0-46a3-804a-13cffb3430a9"
        },
        "item": {
          "id": "a2eea1bb-29da-41d6-b67a-6db76ee19bee",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "52698eab-abe6-4c5a-a65e-dc40c260c235",
          "status": "Created",
          "code": 201,
          "responseTime": 6768,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "43403b64-8b99-42bc-a02c-5e29a730b977",
        "cursor": {
          "ref": "ef22bfea-da1b-4d1d-ad3d-0519fb361e9d",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d9dd0082-3fdb-4ccd-acaf-d8f46afd08c7"
        },
        "item": {
          "id": "43403b64-8b99-42bc-a02c-5e29a730b977",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ee3c71bb-457c-45af-8944-5d54902a8226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6340a21f-d2d4-4742-9a8e-7c7648a8c5ca",
        "cursor": {
          "ref": "75bf530c-a65c-4fce-a922-ae465b7064b2",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4d4c648a-4d0f-43e7-a70e-4de51132774e"
        },
        "item": {
          "id": "6340a21f-d2d4-4742-9a8e-7c7648a8c5ca",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f9c35dfe-5600-48cf-8033-c0a4265a085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0417b5c4-899b-4861-8dea-13774666d280",
        "cursor": {
          "ref": "5324e4b0-5ec1-4d42-9034-f7212a43d985",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3d26a0a7-b4a4-44ed-8fe4-1d49c2baa9ba"
        },
        "item": {
          "id": "0417b5c4-899b-4861-8dea-13774666d280",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ad59ca88-44ce-4e9e-bac4-605b05dc11ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a18762-d81b-4d2e-94c1-2ec9df78d900",
        "cursor": {
          "ref": "4f34fb2a-86ec-487a-859d-44dc04a86d8c",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6148dbc9-9a1c-4248-a51b-bb26cfe15f4a"
        },
        "item": {
          "id": "03a18762-d81b-4d2e-94c1-2ec9df78d900",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e182bf7c-aad1-4c3f-bb99-32f0d03262e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e62913-0996-4dbb-a68d-a9585f64efc6",
        "cursor": {
          "ref": "ceec0aae-b1c1-4553-afea-faf11dc14285",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bafbd4cc-2116-40aa-a7e8-6e957bc494d9"
        },
        "item": {
          "id": "c5e62913-0996-4dbb-a68d-a9585f64efc6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d33ffe98-f9c1-4f7c-871c-4d3125030587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7776fe93-fa79-462e-b391-02ef30e1f673",
        "cursor": {
          "ref": "d1850324-f566-4a29-9ce2-3695661d1080",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "020a3688-7147-444b-8276-1ea4075d5ad5"
        },
        "item": {
          "id": "7776fe93-fa79-462e-b391-02ef30e1f673",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4d779701-c117-4d08-b022-8081ca1cddb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738f4082-724d-4075-a1ac-7de213a2964f",
        "cursor": {
          "ref": "237f2151-79dd-4ca1-98f7-44e014e0a355",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0a150054-5027-4cf3-97e6-a44dc50411b4"
        },
        "item": {
          "id": "738f4082-724d-4075-a1ac-7de213a2964f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "303710aa-a73e-46c2-9f88-d21a97932604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18d0a6b-97c6-43a4-b8d1-5257cade719c",
        "cursor": {
          "ref": "5b18e3d8-c429-4354-b372-6bbe7c88af12",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "62a3530e-152b-4804-816f-0e7516ff34bf"
        },
        "item": {
          "id": "b18d0a6b-97c6-43a4-b8d1-5257cade719c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b373a7da-8a67-40f5-a206-ab7070966080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76518e5-a24b-44a5-8ec5-3f51e47f4b67",
        "cursor": {
          "ref": "8ddfd74e-53bc-4bee-a101-9b02ab9a2c12",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2d44e2a6-e4e2-464a-9b9d-d4f3d1794409"
        },
        "item": {
          "id": "b76518e5-a24b-44a5-8ec5-3f51e47f4b67",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9f6908f7-9f90-4ec7-8709-66e4eed34e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f682941a-4b20-4f62-8468-38ec5a9808cf",
        "cursor": {
          "ref": "5214da44-a87f-4672-8bcd-f6d8125411aa",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "05d4ba3b-3b1a-44f9-b8f2-2c5f27989934"
        },
        "item": {
          "id": "f682941a-4b20-4f62-8468-38ec5a9808cf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a1c1a892-cf90-49dd-ba66-60ffc83c4fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ae14e6-bbbf-4c9d-a3b6-a992b3dcc4e7",
        "cursor": {
          "ref": "29a6f350-504a-42c7-a6bc-a2dbb8e6cfb4",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f392cf21-3cb7-49cf-bac3-008b1bc0c667"
        },
        "item": {
          "id": "51ae14e6-bbbf-4c9d-a3b6-a992b3dcc4e7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "99414c6a-948a-4fbe-8578-9c78af71c79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a92709-56e7-4911-8592-5bec3a47c13e",
        "cursor": {
          "ref": "cc7cfa68-9089-468d-a13f-724da1cc66ea",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "13b6d03d-edd8-457d-aac1-cb2692787873"
        },
        "item": {
          "id": "16a92709-56e7-4911-8592-5bec3a47c13e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "460bf3f6-a043-465b-ad8f-f2e6ca8a47fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16d3e97-2ca8-4710-bc09-eddd1dd0b61d",
        "cursor": {
          "ref": "cc2d4929-fd27-493f-b5c7-1cef1c675ed1",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d5ab7127-62ad-41d0-b907-d850d63a4994"
        },
        "item": {
          "id": "a16d3e97-2ca8-4710-bc09-eddd1dd0b61d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "596564a6-d939-46be-9a4a-7ce74af9a509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a9bdd7-02c4-4800-8ed0-4fdbbfd2c55a",
        "cursor": {
          "ref": "24f5ecf1-3e34-4d0c-9eb7-383bb737e922",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "06016bff-a456-436d-a4ef-fe60bf71699c"
        },
        "item": {
          "id": "38a9bdd7-02c4-4800-8ed0-4fdbbfd2c55a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "52afaadf-c159-49e1-8c93-91643eb716e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ea0977-33dd-405f-9843-e13561ed8fa5",
        "cursor": {
          "ref": "69414702-ee5c-4466-8092-5e1757fe899c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a620ccd3-be90-4959-b4f0-7bc5e9776b3f"
        },
        "item": {
          "id": "b5ea0977-33dd-405f-9843-e13561ed8fa5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "54beefb8-6eed-47e0-aca5-fdc2c5037a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d0ca14-67ea-465e-af2d-e4f51b5947e8",
        "cursor": {
          "ref": "c83bed22-f2aa-49a3-8d58-f64e72007874",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "31839226-c9b0-4b80-be53-004e914a0130"
        },
        "item": {
          "id": "86d0ca14-67ea-465e-af2d-e4f51b5947e8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "728ea2dd-9523-4a5a-ae49-d502be9cb63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4ba8a3-4fad-4c26-9901-42730eab29d4",
        "cursor": {
          "ref": "d55b44e0-29b8-4527-89a0-137fc1b9d213",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f2d09090-4ed7-4d26-a2aa-088d201abb9d"
        },
        "item": {
          "id": "9d4ba8a3-4fad-4c26-9901-42730eab29d4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "98c7ba5f-6744-4810-b716-15404afbeb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0de8eb-4457-4ed0-a61e-60aba75547ec",
        "cursor": {
          "ref": "935a41e6-b0aa-45e5-a434-5277ab67272d",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bf6a5fc6-aa64-4eb5-a1c5-0a9d529ad4cf"
        },
        "item": {
          "id": "2b0de8eb-4457-4ed0-a61e-60aba75547ec",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bba727cf-9262-483b-96ad-56aeeec6ee87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2eb52d-a0ea-4f97-b4a7-49d1490e5580",
        "cursor": {
          "ref": "19b75178-4d0a-42d9-b5ec-d4d557072f6e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "844c2c66-54ea-4fb2-9e09-be779539d6c1"
        },
        "item": {
          "id": "fb2eb52d-a0ea-4f97-b4a7-49d1490e5580",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d628d3eb-a6e0-4792-994d-993319b4322d",
          "status": "Created",
          "code": 201,
          "responseTime": 7190,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3e3b5462-9ad8-4852-a10d-9fac56f8aac9",
        "cursor": {
          "ref": "91b32864-6b78-4658-8358-07009d17b60c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7260385f-8bc6-4410-a298-2ced9be38ed5"
        },
        "item": {
          "id": "3e3b5462-9ad8-4852-a10d-9fac56f8aac9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7e1e0c45-22c8-4a41-a1c0-b266ab17ef8b",
          "status": "Created",
          "code": 201,
          "responseTime": 3018,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fb99e1eb-b9bd-4510-b3b6-2ebbbfc7f33c",
        "cursor": {
          "ref": "9b352aec-fe86-4430-95dd-8e1c8db51c13",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4d4ffd90-3331-4ea6-9d59-d920708b1f7d"
        },
        "item": {
          "id": "fb99e1eb-b9bd-4510-b3b6-2ebbbfc7f33c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "91daff4b-2019-468a-8c44-2d55f5c1ea31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f5255c-b81f-46b9-acb4-9844bf3357f6",
        "cursor": {
          "ref": "6464666c-6197-4702-8f1e-dcd5e8b6e70f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "65f6996b-f366-41d0-9d20-f7e90fb5dfad"
        },
        "item": {
          "id": "e7f5255c-b81f-46b9-acb4-9844bf3357f6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "651b658b-f478-4e92-91d5-4587d33714b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937f535d-1a50-4beb-8b2a-76c967e5972c",
        "cursor": {
          "ref": "162949f0-aa12-4504-8340-ee8967923e5a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9acf6419-e7eb-4fad-88d9-640e7e7c676f"
        },
        "item": {
          "id": "937f535d-1a50-4beb-8b2a-76c967e5972c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0f3715bb-0d41-4ada-be3c-05ebf96f3615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12954cfd-5414-42f7-a29b-693d0adfbdce",
        "cursor": {
          "ref": "cd60e73c-beb6-4fce-b61a-1b12edf7067b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e3db49f5-c817-4333-92fd-26bd0372129a"
        },
        "item": {
          "id": "12954cfd-5414-42f7-a29b-693d0adfbdce",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8ec0e1af-20b0-40ad-b4d2-ca9d02ea8acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fe773c-eec1-4a45-8131-981e505789d5",
        "cursor": {
          "ref": "f87c2760-6a0a-4ef8-8706-8fb14d33f8f6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d7271dd9-8024-4574-b6cb-68af578d27f6"
        },
        "item": {
          "id": "15fe773c-eec1-4a45-8131-981e505789d5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6582da72-16be-4bd6-a300-8cff8bcd3209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cb3914-b4a6-461c-970f-51bff746e589",
        "cursor": {
          "ref": "ca50880e-3b2e-4606-bf9e-e44c7473080a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1c8c7396-cb42-43a2-a3a3-3b92d883799a"
        },
        "item": {
          "id": "54cb3914-b4a6-461c-970f-51bff746e589",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b1bea69f-132f-461d-a8fd-9e7f0ab1be11",
          "status": "Created",
          "code": 201,
          "responseTime": 2453,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "49536f0a-ab18-4809-8f9c-215d5fb1f986",
        "cursor": {
          "ref": "0db7694d-f386-40ce-8a52-382ad4c85013",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "839bb3a4-5bc2-4528-98e5-c6d9c272d0cb"
        },
        "item": {
          "id": "49536f0a-ab18-4809-8f9c-215d5fb1f986",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "95e2e47d-90ec-4673-bee7-8aacc2cc35bf",
          "status": "Created",
          "code": 201,
          "responseTime": 2468,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "35bca393-54e4-4a15-9b12-cfe0e4fbf74f",
        "cursor": {
          "ref": "8537312b-fced-4be4-8684-9fd7c0df9f73",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e3c387ff-3472-48b4-aef8-58199e4689cf"
        },
        "item": {
          "id": "35bca393-54e4-4a15-9b12-cfe0e4fbf74f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cef4e3ec-26a4-40fd-9aa3-4a7e258e32ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2442,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1426f196-d8aa-4139-8e9b-b1a97bb9f2d2",
        "cursor": {
          "ref": "d59be63c-3522-4776-b727-e3830be7111e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "da17ba01-1a49-4a40-a5b5-16ecacc83f82"
        },
        "item": {
          "id": "1426f196-d8aa-4139-8e9b-b1a97bb9f2d2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "70936d12-dda6-425c-aed1-740ed7d9a27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950fe52b-845f-4309-b3e1-ffaa88b96be6",
        "cursor": {
          "ref": "d96f3da9-d8d6-44ca-8366-5bb233808bcb",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b840ea0d-7710-4443-ab5c-312aee7b9755"
        },
        "item": {
          "id": "950fe52b-845f-4309-b3e1-ffaa88b96be6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a958d700-e77e-492d-920f-5486731c647c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5088f7-ebf9-4157-9c6e-086cbbebfde4",
        "cursor": {
          "ref": "dc7f129d-eba1-4895-b16f-4fd469ebe6ee",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f815792b-93de-4f5f-b377-bc0c7b20ad36"
        },
        "item": {
          "id": "aa5088f7-ebf9-4157-9c6e-086cbbebfde4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6c562586-5df4-4977-9e45-8f0cc974f4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b5b645-2ed1-4837-8776-12a2f9cc19b3",
        "cursor": {
          "ref": "9229f8b9-8950-4cde-b05c-a7bcbed666c7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b7a17533-1d10-48c9-91e3-1e494a4d9462"
        },
        "item": {
          "id": "63b5b645-2ed1-4837-8776-12a2f9cc19b3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5ffce30a-cbd3-4106-a6be-2d53a15fe002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ffc967-16c3-4a23-95c3-2fa7c8d5a789",
        "cursor": {
          "ref": "186f94eb-6010-4083-aff9-a5789f5608f8",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ea6b80a9-00f1-4da4-aefc-af65f2ce8123"
        },
        "item": {
          "id": "a6ffc967-16c3-4a23-95c3-2fa7c8d5a789",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "16ed6e9a-8ae8-4a99-b464-5e0263c24ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40a1ccd-d817-4735-9d69-4c47fbbf16d0",
        "cursor": {
          "ref": "20d35a11-e91c-467f-8f48-fc2433ce13f0",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ebda4950-9ecd-4414-a3bb-1e17df4a1df4"
        },
        "item": {
          "id": "f40a1ccd-d817-4735-9d69-4c47fbbf16d0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0e97ca15-eb7e-41c1-b4bb-c7b78e36c80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa598e7f-bc57-457a-a170-93fca1a6057d",
        "cursor": {
          "ref": "357c64be-fe40-4e5a-bbd5-27e07a4cfec9",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "31473cfe-6ee7-4720-add5-f8e0c2f4e1b5"
        },
        "item": {
          "id": "fa598e7f-bc57-457a-a170-93fca1a6057d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7445ba7f-c85f-47a3-bbad-349db80c1ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d78f42f-729e-4c81-9933-6e97a14f9c0e",
        "cursor": {
          "ref": "d266448d-2f56-4a06-b421-05c670083eb6",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "39cc753b-cd71-4e42-a5fe-78a99bf5034a"
        },
        "item": {
          "id": "0d78f42f-729e-4c81-9933-6e97a14f9c0e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a0dc7e7a-58d7-4c39-848c-0ca3ac94b607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc77a0d-5f4f-474b-83d0-8b0b55c5a3c4",
        "cursor": {
          "ref": "55c5a662-02ad-4887-b8f8-704d02e5afdc",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8a9ea115-2be3-4cea-9bbf-2f67967319f5"
        },
        "item": {
          "id": "3fc77a0d-5f4f-474b-83d0-8b0b55c5a3c4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b226373c-c6dc-463b-ab80-4c51ae778007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2eda4de-b8c6-4d62-a28c-010d700927ab",
        "cursor": {
          "ref": "edf9b8ee-b375-4f74-969f-baa348f36782",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e4f4004b-c02f-49e6-93e4-1ffc46ded07f"
        },
        "item": {
          "id": "f2eda4de-b8c6-4d62-a28c-010d700927ab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ca557e41-4a2f-4e7f-adaa-190e882bb04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c507e8-860e-48b4-b8c7-86911a36d8c8",
        "cursor": {
          "ref": "2b29ebaf-91ec-4afe-abeb-5be7efa0c26d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f9913446-0a07-438d-88f4-c49797b313d5"
        },
        "item": {
          "id": "23c507e8-860e-48b4-b8c7-86911a36d8c8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5341f844-07f8-49bb-adaf-ce500502b022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9a421f-10cc-464f-8554-0f5e43641ec3",
        "cursor": {
          "ref": "2a151cbc-39c0-4984-bfe4-c53c57499d0b",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "73759d00-7fd6-45e5-966f-6152b7e4fa9f"
        },
        "item": {
          "id": "2e9a421f-10cc-464f-8554-0f5e43641ec3",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "28788ce7-750b-4fc5-9058-b568eb74c1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d466345-a0f2-4eae-a15b-5b77db86a0ba",
        "cursor": {
          "ref": "2194854b-0ebe-4b7a-840c-743d13c1d0a4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "04573b79-4584-4e16-b59b-7b5fe032b790"
        },
        "item": {
          "id": "1d466345-a0f2-4eae-a15b-5b77db86a0ba",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cc7b0539-815b-4700-a421-b02274b70bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1fbbf1-ede9-43aa-9d23-35d4e495ca9f",
        "cursor": {
          "ref": "fb8b1b68-c71e-4908-ba8b-699eb304cd19",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "05b1a485-41df-479f-abd0-7467e8c9b9a6"
        },
        "item": {
          "id": "9c1fbbf1-ede9-43aa-9d23-35d4e495ca9f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d83d183b-c5f4-4100-b786-0f2464003dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ca63c0-5777-476f-8c0b-f23c4f81d4b9",
        "cursor": {
          "ref": "e210e290-1cc7-41fc-a184-8455a0ee4c03",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "89f9e3ae-5948-4080-b2b6-5f1fe9cc8535"
        },
        "item": {
          "id": "d1ca63c0-5777-476f-8c0b-f23c4f81d4b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7c4871a9-cb13-4e83-b58f-4a5259df781b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a62fb9a-fa0f-4892-8ece-36103974ee10",
        "cursor": {
          "ref": "c9c1ba13-7f0b-4aa6-aee1-129638b1f940",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6e6b8031-e8d4-4012-bee6-0cf27b184830"
        },
        "item": {
          "id": "5a62fb9a-fa0f-4892-8ece-36103974ee10",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ec54160e-eb39-422f-9c65-fa056affac7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ff6731-40a3-4115-be9f-4fbff9cd1df3",
        "cursor": {
          "ref": "2d0bb02a-a20a-44ea-8483-f11d26c525e2",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fd7919d3-5011-435a-bbf0-2fd6d16a9a9a"
        },
        "item": {
          "id": "a3ff6731-40a3-4115-be9f-4fbff9cd1df3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "09b37659-4087-4b9d-afd8-13e47c631656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0481f3bd-802e-4823-ac79-305ba339b73a",
        "cursor": {
          "ref": "0980c499-dac2-45ac-9002-b956818e3803",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ca5044a1-5a3f-41f2-85c5-17afbc093a24"
        },
        "item": {
          "id": "0481f3bd-802e-4823-ac79-305ba339b73a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3ceef912-a797-44fa-a463-3d6c588281c9",
          "status": "Created",
          "code": 201,
          "responseTime": 4462,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "79f2dd0e-2bd4-4cc5-8f32-4dbc444182c9",
        "cursor": {
          "ref": "1a4c33f1-7d70-43f1-984b-bf608b376162",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "256e1745-04c5-45f9-9bf3-52b810dfc453"
        },
        "item": {
          "id": "79f2dd0e-2bd4-4cc5-8f32-4dbc444182c9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3b8a8c7d-c269-4e02-bb85-a441a13e7084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10929ed4-261d-4bd2-b5d6-d3f3fe700b4d",
        "cursor": {
          "ref": "abfa270e-91c3-4369-b4a0-49172bb31072",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dc531d83-227e-4eba-9145-f952fa5975e2"
        },
        "item": {
          "id": "10929ed4-261d-4bd2-b5d6-d3f3fe700b4d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0e289f2d-b25e-42f6-be7b-aec658c28a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecb0d3e-fd75-48ca-a96f-caf0c62bfbf5",
        "cursor": {
          "ref": "20822615-14eb-4032-88a3-325ce54cc209",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ef6eb023-b5ed-4ff2-a3b3-4eb41db0a126"
        },
        "item": {
          "id": "8ecb0d3e-fd75-48ca-a96f-caf0c62bfbf5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "95239595-45f8-4c44-ace3-f891cda7e8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b715a81-b01a-4e8a-bc3f-143efe3de8bc",
        "cursor": {
          "ref": "1dcfbfb2-7985-43e7-b45c-0ed72c84be83",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e6a8c20f-cdd5-4740-ac12-0dcc26c81cca"
        },
        "item": {
          "id": "0b715a81-b01a-4e8a-bc3f-143efe3de8bc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6e030d8b-786d-4c8a-84a6-f3501cf6dffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e722428d-5d85-4646-96be-f1d0ccf095bd",
        "cursor": {
          "ref": "31e2b2a1-8e44-419d-82c7-223346aca463",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ed11e0e7-c973-4c7a-9692-ca3a713e24e3"
        },
        "item": {
          "id": "e722428d-5d85-4646-96be-f1d0ccf095bd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "15edee80-e110-4d63-b9a4-550b2039c87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9336e167-14b3-47df-bcef-c5c510ef2f05",
        "cursor": {
          "ref": "9fe53882-b5a6-4bad-8e34-dd2cb8684b81",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d466dfc7-86c6-405a-9e42-f9afdd81b92e"
        },
        "item": {
          "id": "9336e167-14b3-47df-bcef-c5c510ef2f05",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "23e2feb4-a1d4-42eb-9987-4056b7e4f36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd0a5f9-b128-4b0c-873e-73446c0ec3a4",
        "cursor": {
          "ref": "90bbc42a-0427-43d1-8020-e0fc47ecf183",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6e49ae20-434c-405c-b6ba-e4da240dfb53"
        },
        "item": {
          "id": "7bd0a5f9-b128-4b0c-873e-73446c0ec3a4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7e4381c8-c7ab-45e4-a051-58383f307314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854d26f4-8e67-41e5-90c0-41c8c6dcdded",
        "cursor": {
          "ref": "93d12d82-68a3-41cb-8919-ce29659a4fa3",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d39b14ce-fc0a-4be4-9307-dc8153e5fc8d"
        },
        "item": {
          "id": "854d26f4-8e67-41e5-90c0-41c8c6dcdded",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "76fbff44-9dd1-4f98-a900-6158937df486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89e4e7c-946a-4075-ae31-601c589a3d0d",
        "cursor": {
          "ref": "cefba6c5-2288-4f09-b47e-65488d9e166e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1f25a5b9-8800-438b-95f1-f565f77b4be4"
        },
        "item": {
          "id": "c89e4e7c-946a-4075-ae31-601c589a3d0d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dd11a891-a186-4b67-91c6-607d9eac46e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde66f6f-0a46-4cb0-837b-a1d97512c1be",
        "cursor": {
          "ref": "c7fa81e8-e459-4318-b13e-9a3bf4327017",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "34b5933c-dc60-4ab2-b533-cc005f5c7b1c"
        },
        "item": {
          "id": "dde66f6f-0a46-4cb0-837b-a1d97512c1be",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b98ac99f-89ed-4cd3-83bc-baf8a0b822db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d84f8c-fe47-497d-8f37-519880ce28ba",
        "cursor": {
          "ref": "67f658d8-1a00-41ca-9b61-066f578c44f7",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "23cfb5bd-100b-4589-858f-d46fd9b16a1b"
        },
        "item": {
          "id": "63d84f8c-fe47-497d-8f37-519880ce28ba",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "584bfcfb-bd5e-43fb-a270-c460f2ce1322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf73e295-3557-43e4-ab84-aefc47fd9d1d",
        "cursor": {
          "ref": "da0a5ea5-7099-46e1-9d24-89e2bf3b0b9e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "78e19bae-9197-40f9-9c67-e232f5bbc25c"
        },
        "item": {
          "id": "cf73e295-3557-43e4-ab84-aefc47fd9d1d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ab6db26c-8686-430e-a9c6-9b51be5edb2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154a245e-cf86-4b56-ac3b-ac10797f8b4a",
        "cursor": {
          "ref": "423a5ff8-574f-4ab0-b5e0-0ed65f68d2b0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "28eaaea9-2b38-4e18-a29d-6a44b6035cda"
        },
        "item": {
          "id": "154a245e-cf86-4b56-ac3b-ac10797f8b4a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "22560fc8-6d06-4e4d-98ce-00a49d7018ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702047ab-695e-4ce5-8bcf-c9bbf55139f7",
        "cursor": {
          "ref": "16f2a05b-e8d5-4267-bd7d-2c2137ea6e46",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5afafb5e-da2d-43e0-9f80-0f99ecad6d86"
        },
        "item": {
          "id": "702047ab-695e-4ce5-8bcf-c9bbf55139f7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fb365d6d-357b-4f3a-b872-4750176950e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a28d8b-7ea5-4f1a-85a7-31ee2a7e912f",
        "cursor": {
          "ref": "816a8902-bc60-4978-a4d3-c5858384db56",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7d874211-aa9e-4d43-be1b-609737dd5db4"
        },
        "item": {
          "id": "a8a28d8b-7ea5-4f1a-85a7-31ee2a7e912f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e899352-5782-45c4-bf97-a8e6f679ec15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd442ae-6012-4e0c-94b1-b9473ebdd218",
        "cursor": {
          "ref": "87e3446c-e7dd-4cc5-9844-7dda1defac7d",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a340b2ef-7e7b-480f-8a56-26dbf44f2fae"
        },
        "item": {
          "id": "ecd442ae-6012-4e0c-94b1-b9473ebdd218",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "97fa9293-4508-4a60-8b3c-03e7597887a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f588819c-2e10-4b8e-a3d8-4f558a40b928",
        "cursor": {
          "ref": "927ad0ce-f728-4975-be5d-06fca9e13079",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bce21100-c9e6-4330-be95-67fff68ff8ab"
        },
        "item": {
          "id": "f588819c-2e10-4b8e-a3d8-4f558a40b928",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "53eb0b6a-5cec-4477-a3bd-97b7151eb10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33c2d59-d03b-4abe-aa79-d04b5d528ece",
        "cursor": {
          "ref": "9dedcb7f-06d0-4854-a283-419fe6188c4f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dd47396c-902c-488f-b583-2af4a93fdf6a"
        },
        "item": {
          "id": "c33c2d59-d03b-4abe-aa79-d04b5d528ece",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e4a1e3c1-a455-4028-a0c9-3d5942e5cf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd931bb-b1ed-4001-9738-539a30be2c34",
        "cursor": {
          "ref": "2fe36369-a2ca-47e7-9b9d-7b6d0166be5d",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fb298b73-260f-4c2e-b2bd-2c8d44f303bc"
        },
        "item": {
          "id": "6dd931bb-b1ed-4001-9738-539a30be2c34",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ca19788b-69c8-422f-a6c3-c20603919134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084bc12f-5d79-46e2-a547-9115b477fc88",
        "cursor": {
          "ref": "cf3ed0f3-9b38-4349-9e95-2e8b969fd489",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9c570fe7-8cb0-4447-a20a-4c9d2e6aef56"
        },
        "item": {
          "id": "084bc12f-5d79-46e2-a547-9115b477fc88",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6a3e12ce-2b62-4a7d-92fe-4f6cd7bdf2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91d3af6-8427-4721-90b6-5105efb76aa5",
        "cursor": {
          "ref": "35e0c2b4-da2c-40f2-9e54-410d1ac84752",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c740b3bb-bd14-4ae3-831a-5c2d65c75327"
        },
        "item": {
          "id": "b91d3af6-8427-4721-90b6-5105efb76aa5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0836ab2a-7565-486d-ab66-638677c44712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598e1988-2bb1-44c6-ab22-20e03549bdc1",
        "cursor": {
          "ref": "0f388ee0-f84f-43c3-be93-1f3636c86c17",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "41160253-31f4-45ea-b846-3a9dab5cbcb7"
        },
        "item": {
          "id": "598e1988-2bb1-44c6-ab22-20e03549bdc1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d0379e2a-0417-481e-aca1-1781d28ab142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974f2281-6bf3-4b1a-97c1-96530b3816cf",
        "cursor": {
          "ref": "591b8712-ed1f-4f0f-b32f-0e78b6a3307e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b7c62b10-e3f3-4cbb-8f3c-74901987784c"
        },
        "item": {
          "id": "974f2281-6bf3-4b1a-97c1-96530b3816cf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1d367e1a-a2c0-449f-8182-c68e578ecf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a8e995-ded5-4ae7-97cc-31779aa16e42",
        "cursor": {
          "ref": "ae5498f5-e926-449c-bf35-f9472de89bf9",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2e56fe8f-968b-41fd-b94c-fadb5156d81e"
        },
        "item": {
          "id": "48a8e995-ded5-4ae7-97cc-31779aa16e42",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "52164e0d-f14e-432f-8a2d-1e4aa23e4c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8013182-3a51-44c7-93ae-990bd4b84c0f",
        "cursor": {
          "ref": "e51e6780-9164-4b0b-92d8-d812ed8250da",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eff9964a-4f65-4df8-ad2a-52e71614b8b5"
        },
        "item": {
          "id": "a8013182-3a51-44c7-93ae-990bd4b84c0f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "44dbef67-8e79-4c01-9b76-d94f08bdb034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dbd7ca-f316-4fac-a078-6714eca776b1",
        "cursor": {
          "ref": "a8d3553a-b7dd-4661-bb81-53f3598b63ff",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5c1d7c14-1355-4453-ba66-be3a9e1d44c2"
        },
        "item": {
          "id": "f4dbd7ca-f316-4fac-a078-6714eca776b1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "38a0cdd8-8392-4651-a6f8-124fa801b678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c59a24-80e8-42e9-aea0-1242221ed896",
        "cursor": {
          "ref": "1ad8e3e3-3890-4d25-9a20-e03d039f70b6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2eb5a2c7-20a1-4081-8058-9f88bc510926"
        },
        "item": {
          "id": "48c59a24-80e8-42e9-aea0-1242221ed896",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7da38f1f-0e8f-4779-b15a-5f0e4b5ce0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf47dd7-bea6-492c-86c0-d8e9de10fdcf",
        "cursor": {
          "ref": "28c0ff30-0d72-499a-a350-99fda3f6c995",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "22a5bcb6-b976-4f6a-a829-d0cfd761f123"
        },
        "item": {
          "id": "3cf47dd7-bea6-492c-86c0-d8e9de10fdcf",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8698f873-607e-4808-849e-58a3f36d8c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be86b100-928c-4255-8042-fa28e11896e9",
        "cursor": {
          "ref": "0ded0750-0fd7-4a2f-9692-5c6b47e44286",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4fe3f33e-3906-4bf5-b814-126912ce46e9"
        },
        "item": {
          "id": "be86b100-928c-4255-8042-fa28e11896e9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4b0ff1a1-0066-4f0f-835b-81f2b36483bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a012d74a-ad69-4e40-bc95-51aac0ca55ef",
        "cursor": {
          "ref": "4cc2bf6a-20ce-406a-955c-1503c1057727",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cfa53893-bd74-45d4-b658-19d664560214"
        },
        "item": {
          "id": "a012d74a-ad69-4e40-bc95-51aac0ca55ef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ddf4d015-97fa-4030-8c07-9b5a91599d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a646b99e-f1ee-436d-8fc7-e6f5d0fe0a26",
        "cursor": {
          "ref": "c37e38f0-b242-4a2a-8cfd-070fd801ff69",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "798caacb-f5f7-48f5-9a3e-fcbc9a772e73"
        },
        "item": {
          "id": "a646b99e-f1ee-436d-8fc7-e6f5d0fe0a26",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cb4fb75d-ce60-4811-90fc-0728656e8390",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "44330ccf-eb0f-47e4-92ef-8a647e372a72",
        "cursor": {
          "ref": "d94c490b-c57e-46db-bade-99889f02502b",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0957de90-6050-4a59-8b24-439cb46ec2a3"
        },
        "item": {
          "id": "44330ccf-eb0f-47e4-92ef-8a647e372a72",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f61ce329-9504-4126-a706-7a2f683d8220",
          "status": "Created",
          "code": 201,
          "responseTime": 3015,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "544bf7f1-f334-4d42-b303-7ad67d4c373b",
        "cursor": {
          "ref": "714a4f21-5a09-44fb-8a90-0272e4f0a4bc",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8c8baf9a-e2d5-4e78-b2f3-3f3b397f5d5b"
        },
        "item": {
          "id": "544bf7f1-f334-4d42-b303-7ad67d4c373b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "71399112-0848-4089-aa72-ed07ecc3a3ee",
          "status": "Created",
          "code": 201,
          "responseTime": 3372,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94df4fc-86a1-4d9d-8170-a56343a8ff6f",
        "cursor": {
          "ref": "6c62ce7b-5b2f-4f8c-a6ca-f74b41a7558b",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4c530e72-27bd-43f3-98d8-ad057d4fabab"
        },
        "item": {
          "id": "a94df4fc-86a1-4d9d-8170-a56343a8ff6f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b63a4f6d-8193-4c34-be17-58f5fa59cc85",
          "status": "Created",
          "code": 201,
          "responseTime": 5409,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2e3f86-fb92-401e-90b3-8e4a3b7b651e",
        "cursor": {
          "ref": "11ca2640-8180-4d44-8167-93c93c35b540",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fdc53999-fa1c-4acd-a500-ec248648c02c"
        },
        "item": {
          "id": "cd2e3f86-fb92-401e-90b3-8e4a3b7b651e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "73ae8852-62a2-4b16-8e3f-9be0d963758f",
          "status": "Created",
          "code": 201,
          "responseTime": 7578,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43ee896-c943-4f09-aed1-d394c51d4706",
        "cursor": {
          "ref": "d2ea4f69-b486-4559-bbd1-c769d321e98a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8be86698-7f97-43d9-989a-0e0d47938873"
        },
        "item": {
          "id": "c43ee896-c943-4f09-aed1-d394c51d4706",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8ff95ce5-5968-4cb5-b8b4-6d6a2f5f4ebf",
          "status": "Created",
          "code": 201,
          "responseTime": 8127,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-05T00:50:30Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-05T00:50:30Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "54f97d0a-f7fb-46b6-842a-06b86446e7d9",
        "cursor": {
          "ref": "ce84c8dc-124d-4f08-beea-16ecc0f2f604",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "229b80a6-7c77-45ba-9c64-73bbf71ac5cf"
        },
        "item": {
          "id": "54f97d0a-f7fb-46b6-842a-06b86446e7d9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a5e9202f-e1be-4ef1-81a7-21784f587258",
          "status": "Created",
          "code": 201,
          "responseTime": 4847,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fc8eeb-1c55-49f0-a331-4edf0aabbe08",
        "cursor": {
          "ref": "b4693f7b-ab04-4fde-a59b-b36f18666d2b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0c29c516-a8bb-4abe-9b82-23a773ee714b"
        },
        "item": {
          "id": "94fc8eeb-1c55-49f0-a331-4edf0aabbe08",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8447bfd8-0156-4299-8383-97c32eff80ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fc8eeb-1c55-49f0-a331-4edf0aabbe08",
        "cursor": {
          "ref": "b4693f7b-ab04-4fde-a59b-b36f18666d2b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0c29c516-a8bb-4abe-9b82-23a773ee714b"
        },
        "item": {
          "id": "94fc8eeb-1c55-49f0-a331-4edf0aabbe08",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8447bfd8-0156-4299-8383-97c32eff80ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d23e070-5d4f-4d25-9430-dc85978ca191",
        "cursor": {
          "ref": "1ba34b63-5524-483d-bc40-5e0ef788ba74",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a00832c0-41e9-478e-adb6-2464dc21b474"
        },
        "item": {
          "id": "9d23e070-5d4f-4d25-9430-dc85978ca191",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "086d90ad-fe94-4735-8d52-5dcbd9fe7354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e80b746-51ad-4b77-b14f-4a6c59d1e58e",
        "cursor": {
          "ref": "92519303-6850-491c-9e37-1a6fbecbce2e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "036ad8be-59c9-4bbe-bd19-d63a8648ed91"
        },
        "item": {
          "id": "9e80b746-51ad-4b77-b14f-4a6c59d1e58e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9d71603b-017f-4056-93a5-1cea7f6840b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2140abed-1962-4199-92bb-e49264942d2b",
        "cursor": {
          "ref": "2bcf5282-d21e-4f41-9184-bfd3de7cb2d6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4b1cd5df-0934-47d4-9772-ca7f9ca76e7e"
        },
        "item": {
          "id": "2140abed-1962-4199-92bb-e49264942d2b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9781c3ca-e93e-4ea0-a4f0-f488312d0b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7581fc-e3a2-429a-afc1-fd7bfa6de0f1",
        "cursor": {
          "ref": "e77718d1-0473-4f03-812d-ab28bc3b31ea",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "52e46616-aa61-4338-af40-d8c0a3eab96a"
        },
        "item": {
          "id": "3d7581fc-e3a2-429a-afc1-fd7bfa6de0f1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8307c94c-785e-42f7-80a2-ea4684252df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6854faec-f120-42bc-97b3-b17689c7f458",
        "cursor": {
          "ref": "8dc37dc4-6fee-4f33-89aa-ab45da9293eb",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "13c3fb0c-d220-45b7-87ce-22843965e56d"
        },
        "item": {
          "id": "6854faec-f120-42bc-97b3-b17689c7f458",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e25cc64c-b508-417f-a676-ee97856152d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab824e07-a4e1-4511-9d26-d9b400c88708",
        "cursor": {
          "ref": "8885b7f6-6cf5-4ad8-b3bd-38ad4975e032",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8897c19c-bfc8-4cc9-9d7b-9068083c5fcc"
        },
        "item": {
          "id": "ab824e07-a4e1-4511-9d26-d9b400c88708",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f94d3a78-1679-4071-97ce-9b1a96871997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8f4380-73fa-4b15-a28e-1033caddcb49",
        "cursor": {
          "ref": "7daf56e1-89b4-45c8-8634-2407c489f533",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d5ad516a-24ca-4707-ab5c-0db1ac60c4a4"
        },
        "item": {
          "id": "ff8f4380-73fa-4b15-a28e-1033caddcb49",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cb577934-6542-46c7-9d55-e9631bf7e6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6234d50b-37a1-4e7b-b294-d016c9eada27",
        "cursor": {
          "ref": "c64134df-0d8d-429b-9851-41bf31eb7f13",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "84abd517-4502-47b2-9e7a-0ffdbbfaabcf"
        },
        "item": {
          "id": "6234d50b-37a1-4e7b-b294-d016c9eada27",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e7e3a719-f1ca-4736-86a4-30daa9a3c488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d1c265-b344-4247-b827-7b1f2c4878b4",
        "cursor": {
          "ref": "ac37be0a-750d-4dfa-b28f-f255300a2785",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "24cff83f-b947-4820-822c-e616e85f0dff"
        },
        "item": {
          "id": "41d1c265-b344-4247-b827-7b1f2c4878b4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c294703e-a5b4-42b1-b68f-80a6a9ca6629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55c7c8d-8536-41be-9eb2-9bcdc3f26de4",
        "cursor": {
          "ref": "8128683a-2950-493f-86a7-bf866038b995",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3f79ad40-b81b-420d-b929-538b772657cc"
        },
        "item": {
          "id": "d55c7c8d-8536-41be-9eb2-9bcdc3f26de4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b1681da0-f987-4f35-8f6c-8dcc3be579bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e71b838-5458-499b-836a-7388ad09434f",
        "cursor": {
          "ref": "31ca5fb5-6edb-4ebd-bce1-fdb508850d15",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ff1d2018-9c97-44d0-8458-3af0e5ef78ef"
        },
        "item": {
          "id": "1e71b838-5458-499b-836a-7388ad09434f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9fa8e897-60a8-4be4-b166-c86bb0c2cba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5ebca4-9798-4713-995a-ad47ca199d8a",
        "cursor": {
          "ref": "001575d3-3b4d-4d89-8466-29a36cd5f552",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ba576e1f-0472-4f0b-8695-b73c92bbc3f7"
        },
        "item": {
          "id": "8e5ebca4-9798-4713-995a-ad47ca199d8a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4dec1275-43bd-47ef-949c-242fd5f127f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb53281-eec6-4b25-86fa-f4d2db0f504a",
        "cursor": {
          "ref": "a5554ef8-76c3-42b2-b84b-c49e84c34a43",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "942d5fa4-cc42-459b-af20-8e21c87266ce"
        },
        "item": {
          "id": "5eb53281-eec6-4b25-86fa-f4d2db0f504a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27641ccf-52c2-4fde-b884-ac39d6d11cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63cca48-998c-4438-b667-438b5bf8a804",
        "cursor": {
          "ref": "c499e0e9-6b96-4d9b-ba2d-36f5fb351da9",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c552a095-5bdc-4fea-90b1-89ae3da4d959"
        },
        "item": {
          "id": "d63cca48-998c-4438-b667-438b5bf8a804",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b4a49ba2-375b-47e8-9cee-de701c50223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afef955f-7c88-467d-80f6-3dee63a9d9f6",
        "cursor": {
          "ref": "6814884f-ab91-4d4a-92da-f161460b32c0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "28dac06d-44d8-4024-b725-c0cf4e7f8e3d"
        },
        "item": {
          "id": "afef955f-7c88-467d-80f6-3dee63a9d9f6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "76aeed43-1430-4035-99ee-a826e906beb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff9f0fd-a855-463b-94ab-be0487831491",
        "cursor": {
          "ref": "f15cae56-6a30-45d1-a505-a00a950bf524",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b25fd612-ccf8-40bd-b68c-d249ae37729f"
        },
        "item": {
          "id": "4ff9f0fd-a855-463b-94ab-be0487831491",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8a27d54d-4ec0-43c1-8779-b49cd844c014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e3668a-f46e-48b1-8d6f-2fea18a1850f",
        "cursor": {
          "ref": "27c57de3-5b9b-4fb5-9868-02c8bbf43924",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4d5e5840-801d-42d2-9cd0-71a9469cf8f4"
        },
        "item": {
          "id": "57e3668a-f46e-48b1-8d6f-2fea18a1850f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6f47d122-c77d-4ab7-8e2c-4dfa524396e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c480d5e0-7569-43b7-9bf3-a769ccf3e076",
        "cursor": {
          "ref": "f3d33d8c-3151-40cf-93bd-47b9381e0a1b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e9500ce3-5572-4501-9c1a-e9f4af2909b2"
        },
        "item": {
          "id": "c480d5e0-7569-43b7-9bf3-a769ccf3e076",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2b0d3203-8ce6-49f2-a9f9-a9cf27194025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f806e64-5e7b-4a6c-adb1-914d7ad8dedd",
        "cursor": {
          "ref": "658152a7-2bea-4f62-99d0-56eff523d51d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e0541e92-6540-4afb-bc62-245b4076ab8e"
        },
        "item": {
          "id": "0f806e64-5e7b-4a6c-adb1-914d7ad8dedd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad8aa7c5-5118-470b-bac6-48b457a80521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43209287-ce92-4e6f-99f3-bf0881b24e72",
        "cursor": {
          "ref": "250c284c-dd13-4c6c-989c-80aac6dbd63a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "02b730ef-4eea-42d5-a5b4-ae4559cb69bc"
        },
        "item": {
          "id": "43209287-ce92-4e6f-99f3-bf0881b24e72",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "837ed803-419b-4d7a-8b20-b953e96ab364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5848e38e-b7f6-41ff-b174-f47e0478a4c9",
        "cursor": {
          "ref": "6075afec-db1f-43ab-bfe7-8edb7183cbc3",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b226418a-3114-4ff8-b2d2-39197943bfb1"
        },
        "item": {
          "id": "5848e38e-b7f6-41ff-b174-f47e0478a4c9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "389179e3-1978-46ea-983c-24ee57a26330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1356c63b-ca6f-4212-8334-8221dcb08c19",
        "cursor": {
          "ref": "b8d0efc0-7a72-44fb-a855-219e981fab2e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c0db58bc-9286-48e1-a0e8-dd873bc4d345"
        },
        "item": {
          "id": "1356c63b-ca6f-4212-8334-8221dcb08c19",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a7aba505-1819-4314-9155-3dd7ba2dd00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4775a5-d946-4321-af0d-fb491ade796f",
        "cursor": {
          "ref": "62eed1e9-4825-40e5-a68f-33a93d719afc",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3506165e-7cb2-45f4-80d0-1921be9ea1b5"
        },
        "item": {
          "id": "bd4775a5-d946-4321-af0d-fb491ade796f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "37a9c364-c8b3-4cb0-bcdb-e3dbd768f5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf2862e-92b4-4da2-8cfd-d3c29f123a92",
        "cursor": {
          "ref": "dda10418-926d-4b00-9e06-9a34b390aae0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1a2279cf-ee1e-4e28-84cf-5d9929dc379c"
        },
        "item": {
          "id": "acf2862e-92b4-4da2-8cfd-d3c29f123a92",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f090c540-b636-4655-8897-2ec0c8083ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa2ae67-89eb-4f84-a607-dd13d1407510",
        "cursor": {
          "ref": "be35764d-8228-404c-9b59-c05ddb8814b2",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b66e405e-f38e-497e-98f9-1933e0c15f85"
        },
        "item": {
          "id": "efa2ae67-89eb-4f84-a607-dd13d1407510",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e60d542-df11-4657-bbb6-41316fe3d916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cb52f8-fe7f-45df-9a36-1c4f4f5d4242",
        "cursor": {
          "ref": "47cc72f0-cad3-4c7f-9a07-ccacc273bef9",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ee1c1d4d-f172-4d0c-9662-f3ee1aaca516"
        },
        "item": {
          "id": "f2cb52f8-fe7f-45df-9a36-1c4f4f5d4242",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c3bff203-3726-4b9e-a41e-18b5468ab194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452c9371-4053-465d-9aeb-8d29f03f143e",
        "cursor": {
          "ref": "18f45cc0-3b6c-48f8-a123-05b43352d688",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b9df0cff-8c57-4376-a2fb-9cbb64ca70eb"
        },
        "item": {
          "id": "452c9371-4053-465d-9aeb-8d29f03f143e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ef2d8ef6-3a9f-411e-9292-41957240067e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6943dd4d-6ed7-435e-9e21-e1cd39b618c7",
        "cursor": {
          "ref": "6bae7d3f-355e-4b60-ab7b-365d1e2a7d98",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5b09f0e1-7a8e-45d4-935b-503d49b41a3e"
        },
        "item": {
          "id": "6943dd4d-6ed7-435e-9e21-e1cd39b618c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "271b6c0c-ca14-4ced-b57f-efc9888115a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505f7171-9490-4ba6-8fa9-7c07df856aaf",
        "cursor": {
          "ref": "6ff955b0-a80d-44cc-9dd8-6aad9a6b9960",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "72c0f751-04b4-46c9-bb9d-3134fa5a0fed"
        },
        "item": {
          "id": "505f7171-9490-4ba6-8fa9-7c07df856aaf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a0446553-5dc7-4c68-a663-41a0fc49b80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6a8e3b-28f3-4fc1-a355-c7a5de3ad198",
        "cursor": {
          "ref": "acde4b6e-7ade-4b12-97ae-fd18f1bc280f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b46cfc78-7219-4974-b966-7f59fc5da7e0"
        },
        "item": {
          "id": "aa6a8e3b-28f3-4fc1-a355-c7a5de3ad198",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b0d16d3d-2430-46d7-99c0-1a5363f314aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1288ce-f5dc-4a4f-891a-77a4663fa54d",
        "cursor": {
          "ref": "1d879cf8-3c1e-4de4-938f-fd4010d0f3dd",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "64986c85-c80b-4826-a30c-7cf2a39e16da"
        },
        "item": {
          "id": "7d1288ce-f5dc-4a4f-891a-77a4663fa54d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4a6fdbf9-18bb-4d29-8d78-e17c4e8d36f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe1079b-d42a-420c-b9b1-4a3755bbb1ec",
        "cursor": {
          "ref": "53882403-61c8-4fd7-a459-9d38eb322440",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c6d5f745-64a3-4314-a2b3-652dd21d5af3"
        },
        "item": {
          "id": "ebe1079b-d42a-420c-b9b1-4a3755bbb1ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9035bf37-4bfd-444e-9df1-9aa5e9317b5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1440ee94-2288-484e-a336-eb31042666dd",
        "cursor": {
          "ref": "9ede4e9d-11a8-4d74-9a3e-16e993cb022f",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a181ac67-996a-419e-9ef6-d999ccbe00ec"
        },
        "item": {
          "id": "1440ee94-2288-484e-a336-eb31042666dd",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1ba307ae-59dc-4555-88b2-5b0d90876509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ecd4df19-8020-43ef-905d-4c18ffb28b52",
        "cursor": {
          "ref": "b641c68f-95f4-48ed-8298-d8e529f2272e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "17c55fe1-12bc-46bd-8192-cb5831fcaeb7"
        },
        "item": {
          "id": "ecd4df19-8020-43ef-905d-4c18ffb28b52",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1f88e2a-da9a-4b7d-bfb0-de3bb6978f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd4df19-8020-43ef-905d-4c18ffb28b52",
        "cursor": {
          "ref": "b641c68f-95f4-48ed-8298-d8e529f2272e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "17c55fe1-12bc-46bd-8192-cb5831fcaeb7"
        },
        "item": {
          "id": "ecd4df19-8020-43ef-905d-4c18ffb28b52",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e1f88e2a-da9a-4b7d-bfb0-de3bb6978f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0189b6ed-0c5c-4089-955f-d48ec2582163",
        "cursor": {
          "ref": "b16557a6-ef26-4453-911b-b9f0f75cae23",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "27a93ac1-b150-49af-ad10-0882dc2e9435"
        },
        "item": {
          "id": "0189b6ed-0c5c-4089-955f-d48ec2582163",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3a13fdef-4a44-4ead-a123-c64d742fdcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdac7fc7-1df1-48ff-a97b-8f1f672844c8",
        "cursor": {
          "ref": "0bce4bad-4d30-4651-8ec0-7942a446e4f9",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dd2c3e6d-dc25-4d26-aa67-2b73973ad638"
        },
        "item": {
          "id": "bdac7fc7-1df1-48ff-a97b-8f1f672844c8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4d2ff5c2-d8b1-467e-a727-2b45036e74cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df991a41-72f4-407c-9738-4e18d5899c99",
        "cursor": {
          "ref": "2aacf440-ec3c-49b6-a11f-d8bca8071659",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3783a645-05ef-4c23-b8d3-2c0be778de6a"
        },
        "item": {
          "id": "df991a41-72f4-407c-9738-4e18d5899c99",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1d1594e9-f7f3-426c-9711-95e56ed5e252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2719e9c7-1c46-4d97-8628-135c38208728",
        "cursor": {
          "ref": "eb15dfad-c817-49ee-8fbe-f6e362292638",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2580b680-0056-4454-ac42-2a3f1b41cf71"
        },
        "item": {
          "id": "2719e9c7-1c46-4d97-8628-135c38208728",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5ed968ce-217f-443d-8690-54b37c9b523b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711e7dbb-69b4-4185-918d-04891ce7366d",
        "cursor": {
          "ref": "05eb1b8c-4b51-4d46-9e5c-cb0ef2c67d9a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "29bad40a-e4bf-43fe-91bd-a513b8cc47e9"
        },
        "item": {
          "id": "711e7dbb-69b4-4185-918d-04891ce7366d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "403fb31c-3787-4641-823f-0bd446fdac3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce40aa8-2daf-4fa1-90a3-da03de9a3493",
        "cursor": {
          "ref": "b374eae1-a8f9-49f1-98cb-ff711fa1b34e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "aeecf66a-557c-4689-876c-c2394c8a5e45"
        },
        "item": {
          "id": "4ce40aa8-2daf-4fa1-90a3-da03de9a3493",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a90a2e96-6141-432a-88aa-f29ce7797315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15061c88-c634-4464-8580-e650896ca3cb",
        "cursor": {
          "ref": "f8ac2bac-4ed4-41aa-8d30-ce2303bb96ce",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5cf099f8-e164-4be2-bc96-d1e2ea791239"
        },
        "item": {
          "id": "15061c88-c634-4464-8580-e650896ca3cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ef36f76c-ec03-4a09-8c4e-00ff6b980359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efe808e-be00-48f0-9fc8-8d1b27d0548a",
        "cursor": {
          "ref": "937683ae-07ff-4aad-8a1a-7d364c483ee6",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bc13fc6f-9449-4254-b532-a2145c8c58cd"
        },
        "item": {
          "id": "2efe808e-be00-48f0-9fc8-8d1b27d0548a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f4d285d0-f94f-451e-8558-fb011031d6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4cc982-ec69-4bb0-9412-6bc7707c1e3e",
        "cursor": {
          "ref": "1aa01421-91e3-4953-8ccb-676bc9b87f90",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "feae1ffa-be5c-4f13-a28c-ef123cebef50"
        },
        "item": {
          "id": "cd4cc982-ec69-4bb0-9412-6bc7707c1e3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "65a3e19a-ba66-4f65-8613-8b3b971799cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fa78b2-422b-4c1e-8825-be428d140005",
        "cursor": {
          "ref": "32fd61f1-cbba-4a8b-864e-8cf54a7ab674",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d53f2d6a-d7f7-414f-a4b5-522645c12af1"
        },
        "item": {
          "id": "b8fa78b2-422b-4c1e-8825-be428d140005",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3fdc10f9-afda-4e1a-a0f4-ebf76b078b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93824cb-1712-4296-928e-c5aff2df92d4",
        "cursor": {
          "ref": "aec6aace-01e2-42b4-a5a7-898fb52bc90f",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8f615ad7-c245-461d-97f2-e24fa7ee4c94"
        },
        "item": {
          "id": "b93824cb-1712-4296-928e-c5aff2df92d4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ea0e2a64-36ac-466c-9f11-27b9219fd788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b08cf05-8923-42a7-a4a1-0939469e1a9f",
        "cursor": {
          "ref": "30860fbe-130a-4d16-b51f-744154a5552f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c3dc3b22-a37f-4b3a-9799-00666919b7ce"
        },
        "item": {
          "id": "7b08cf05-8923-42a7-a4a1-0939469e1a9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fb5f21ba-aac9-4d00-90f3-babf2340959d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27e1987-21f6-4cbe-b214-1d7390579ce8",
        "cursor": {
          "ref": "76de9253-e40f-474f-a1d0-c77ca03d9a41",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "de23cd19-83b6-4170-932d-6b0c97d60ab9"
        },
        "item": {
          "id": "a27e1987-21f6-4cbe-b214-1d7390579ce8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "22d9f215-4c85-4414-ae70-42267f841e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd53100f-ddc8-4a06-a258-ab08bc32bd95",
        "cursor": {
          "ref": "0dd85f75-c15c-4d35-abb2-e1c780032c65",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d05123c7-4170-40aa-b5b4-833cfb911de6"
        },
        "item": {
          "id": "cd53100f-ddc8-4a06-a258-ab08bc32bd95",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "829c4ef8-10fc-4d51-a91b-9c69dc045f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665dd361-6a80-47cc-8cdc-54b69917b706",
        "cursor": {
          "ref": "afa004cc-5e91-4309-b6d0-e5ef89a3aa1b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e86138c3-14c2-44ad-ad52-948da287e11f"
        },
        "item": {
          "id": "665dd361-6a80-47cc-8cdc-54b69917b706",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d6127ec4-64c1-4f82-9b8f-8fee4adb33bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0babd6-021c-4bb4-9c28-0e11ec7434c8",
        "cursor": {
          "ref": "9d0fe465-4457-48b2-a65d-3e2054ced6f3",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bffbe08c-6e12-4837-a50f-9f3bfd09c7b2"
        },
        "item": {
          "id": "8c0babd6-021c-4bb4-9c28-0e11ec7434c8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5ccdb12d-7ff4-461c-8586-3d092c58425f",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "96fd17aa-8aae-4fbf-838b-41f5e25a55fe",
        "cursor": {
          "ref": "ef1a17a8-d5c1-4ece-a1d7-2ee320e4d965",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1e79239e-dad4-4101-bf60-e388cb7efef1"
        },
        "item": {
          "id": "96fd17aa-8aae-4fbf-838b-41f5e25a55fe",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cc98d5e5-a162-4bdd-af41-40f258e5d67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8199b267-fe9a-475e-9431-7564c9f62dd1",
        "cursor": {
          "ref": "75defd29-d847-4c38-847c-4dc5cdbdb952",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5e04a8b9-076d-4394-8e62-af543f636ba6"
        },
        "item": {
          "id": "8199b267-fe9a-475e-9431-7564c9f62dd1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1949a6dd-078e-431e-bf7a-cd217e3274e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d15e8a-f072-468d-9d81-6b5b578b8e96",
        "cursor": {
          "ref": "f91f63f1-3432-41b7-9669-d823d6cde167",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a48e5fd0-c3ba-4c35-b183-353b9a2e15f8"
        },
        "item": {
          "id": "00d15e8a-f072-468d-9d81-6b5b578b8e96",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4ff85881-93c4-4e4e-b41b-ac030bb6a13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2433a353-0235-4954-af47-f09677f761b8",
        "cursor": {
          "ref": "0c70e1ba-a776-42d1-906e-fb55678695a6",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f6d13144-7997-430e-a73f-87fff8fb6e7e"
        },
        "item": {
          "id": "2433a353-0235-4954-af47-f09677f761b8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aded8378-85d2-42de-ad07-6fb0b5afc29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49561602-4448-4b5c-9fd0-0d0c0b069a25",
        "cursor": {
          "ref": "1b133522-6a96-4004-87d2-2bfd6f0b9c81",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "86ee7bb7-b749-4668-9a8b-abf0b2c27f03"
        },
        "item": {
          "id": "49561602-4448-4b5c-9fd0-0d0c0b069a25",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2b87fbcc-a598-405a-99a1-c3dd12dee782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df790a3-2cea-4c5c-926f-a9c7f37d16c6",
        "cursor": {
          "ref": "c38dc0bd-0e91-4399-97c5-dfba1a2d988e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "69f6dc82-153c-4fee-8632-114079fc8d25"
        },
        "item": {
          "id": "8df790a3-2cea-4c5c-926f-a9c7f37d16c6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3b297a43-7f7c-4dc4-a32a-22068393b621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d9b697-9798-440f-a540-54fc20bda376",
        "cursor": {
          "ref": "d3a2d405-32e1-4286-9ca8-5a49dda4aaaa",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fc5346a2-c6f8-44bc-ab9f-a90be214af75"
        },
        "item": {
          "id": "e7d9b697-9798-440f-a540-54fc20bda376",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cdcfd532-b929-4b20-b660-a07ae5dca2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e2c64c-64bc-4d4d-8e16-0f3c35ce8401",
        "cursor": {
          "ref": "456d17fb-d3a5-4238-ad33-e90b804175de",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "edd72bf1-7058-4a31-b55e-71b329813dfb"
        },
        "item": {
          "id": "79e2c64c-64bc-4d4d-8e16-0f3c35ce8401",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "017155ab-d446-4087-9e4e-1c0809def249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783d8cd3-9b58-40ef-afad-866c5f7fd833",
        "cursor": {
          "ref": "965389d6-f96d-4663-970f-bc2c240ea218",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8997487d-06e3-4fa6-99c3-b91f158c56e9"
        },
        "item": {
          "id": "783d8cd3-9b58-40ef-afad-866c5f7fd833",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6a590b1d-9998-40f7-97e8-8fb1989bcb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d102cb68-7d12-44da-a306-76140b16dd47",
        "cursor": {
          "ref": "ad3507c8-5e2c-4e7d-a857-63ad8aafacf5",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2278a11c-52ba-4605-9f5d-950142ce3dbc"
        },
        "item": {
          "id": "d102cb68-7d12-44da-a306-76140b16dd47",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "acf42750-a5d8-4b3b-aa04-958ddb63fd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a741aaa-7b09-4b3b-852c-aa5ce5454bf0",
        "cursor": {
          "ref": "04a878b7-549b-4aa8-9d0e-faa088e4c3d7",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f0796a1a-6da1-4b35-b86a-6025b325b3a1"
        },
        "item": {
          "id": "9a741aaa-7b09-4b3b-852c-aa5ce5454bf0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "918f5b34-5b8b-46d5-9f16-a20175c0c101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf0ee34-8021-45a6-9532-055ea4710d5d",
        "cursor": {
          "ref": "884dd326-00b0-4197-9f0e-4712c8c0f4c0",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "43a408b4-9edd-471b-8936-7ac72bbc4c35"
        },
        "item": {
          "id": "3cf0ee34-8021-45a6-9532-055ea4710d5d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "64ad24c3-2766-4fa3-8494-3e9bf9bae353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a045a4d0-a37b-4941-a635-f38abdb369bd",
        "cursor": {
          "ref": "8605a982-19aa-4e99-b89b-e63effd8f8cd",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "39e748bc-7bd1-4ef2-ae3d-704a3bdfa474"
        },
        "item": {
          "id": "a045a4d0-a37b-4941-a635-f38abdb369bd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "61de4541-2701-4cb5-98dc-1d181c6f302f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d610fb-5c25-4e42-9708-e484df3807d9",
        "cursor": {
          "ref": "00190c41-3350-4b3a-aba2-660d62918502",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5b6ea4b7-a062-4e44-b9f7-9be5df15991e"
        },
        "item": {
          "id": "70d610fb-5c25-4e42-9708-e484df3807d9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "13b841a9-c3a0-40eb-80a3-99cddc9722d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e27be81-06ad-4314-8e4d-fc5457d6e30a",
        "cursor": {
          "ref": "5fa29eb0-2f92-4e39-b5e0-1ba80647ad0f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8ef57d45-8673-487d-9918-345174a1b507"
        },
        "item": {
          "id": "1e27be81-06ad-4314-8e4d-fc5457d6e30a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d1cd1688-2bbe-457b-8e2d-2aaaf177b9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81a2cdd-97c4-40f3-90fb-a7c43ddb1d72",
        "cursor": {
          "ref": "d1898aed-e054-4205-9ea8-949f0cc43608",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7bb3971b-48b1-4a3a-ae63-c9a57db1c239"
        },
        "item": {
          "id": "d81a2cdd-97c4-40f3-90fb-a7c43ddb1d72",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3c0cb6a0-5e90-4979-b414-2270f0a8df58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca75d963-0b34-4c3d-af50-9a466fe64e7b",
        "cursor": {
          "ref": "5122d1df-f49e-4bab-93cc-9a430ce72a34",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f8147607-1da1-42f2-ad3d-81e95166f108"
        },
        "item": {
          "id": "ca75d963-0b34-4c3d-af50-9a466fe64e7b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e561008d-5826-47cf-b0a6-c577ea54e836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c47e6cc-140d-4338-8135-ffb494605ab0",
        "cursor": {
          "ref": "4877e466-13ea-4971-a8a8-78800cd6ac20",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9419118c-279d-47b6-979d-16b91861efda"
        },
        "item": {
          "id": "5c47e6cc-140d-4338-8135-ffb494605ab0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a3043ace-90bb-436a-adb8-3d94e546cc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742c15c3-8b0b-4973-9296-c9f2a2c15e36",
        "cursor": {
          "ref": "4cca1897-f88d-4c1c-920b-4b7e12d3936e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ab4117fc-ee17-404d-944f-b45ff6731a00"
        },
        "item": {
          "id": "742c15c3-8b0b-4973-9296-c9f2a2c15e36",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "08bb36a6-76dc-4ef5-9491-481a6ebc6591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2aa8d1-21e5-43cc-8977-10cfdcc0d1ef",
        "cursor": {
          "ref": "1b10b29c-0f2a-416e-b7e2-ea15b6c83340",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5512cc21-dde2-45c2-957b-03321aa225b7"
        },
        "item": {
          "id": "ca2aa8d1-21e5-43cc-8977-10cfdcc0d1ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "59cfd554-e074-4904-8302-21bb8b25e271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd38398-d319-492d-b356-fbf829c1d17f",
        "cursor": {
          "ref": "cdb4feff-8d9d-4065-a0aa-d8961d884b9d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e52f938d-a539-476f-9cb1-2b32685dafb3"
        },
        "item": {
          "id": "9fd38398-d319-492d-b356-fbf829c1d17f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "627977e0-ec9d-4b2a-ac86-cec04abacc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed65e29-212a-448a-a0a2-743abf489789",
        "cursor": {
          "ref": "1669cf4d-b93b-4569-a9db-3f4a544cdf3a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4f86bc11-0a25-46b7-83cc-039ee7a0cfe7"
        },
        "item": {
          "id": "3ed65e29-212a-448a-a0a2-743abf489789",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e76e9b92-41b0-467e-8cb5-9558f3a17506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5559a710-0de5-4d92-9537-6c8df3572997",
        "cursor": {
          "ref": "ea925dbc-d430-4da9-aee5-38969cfb8c0c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dfecb5f4-002c-4e63-a62b-ce9910cea425"
        },
        "item": {
          "id": "5559a710-0de5-4d92-9537-6c8df3572997",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b313f812-b62b-4cf1-83c6-7f7567b32d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa3c03c-788d-4418-a07a-430d634c7415",
        "cursor": {
          "ref": "a9276eb2-abe8-4e24-8cf7-4b4b26b82507",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3f264984-0242-4783-8da4-3ec57afdf944"
        },
        "item": {
          "id": "2fa3c03c-788d-4418-a07a-430d634c7415",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fad113de-5529-4046-a671-751151b66b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbbd6e3-86a7-484c-8760-8a37cd565328",
        "cursor": {
          "ref": "ec9ba9a2-ed93-4cb3-85b0-fdd3c6e99a92",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "15d5edc8-ba79-4737-ab96-d6578e209414"
        },
        "item": {
          "id": "4dbbd6e3-86a7-484c-8760-8a37cd565328",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "83ca51b8-80d1-415f-b6a4-6df5b0828854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7b7c3e-eacf-4f39-966b-62394c242303",
        "cursor": {
          "ref": "9a0986e3-e456-4811-8521-28c0e94d69b6",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f249944b-5ecc-4bbe-bcf6-1638b152ac09"
        },
        "item": {
          "id": "5d7b7c3e-eacf-4f39-966b-62394c242303",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b37df4b2-de5a-4a2e-96ef-9a8b0b965a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef76d235-d0fe-4f87-abef-1d8b3e33a258",
        "cursor": {
          "ref": "89c731bc-4578-4bbd-b26c-634f41d6c867",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "00ec7578-9d50-49d6-ae74-983f96b3f688"
        },
        "item": {
          "id": "ef76d235-d0fe-4f87-abef-1d8b3e33a258",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7097ec97-666d-488e-b927-bc9d7cc50449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd43c6ab-f910-4725-accd-bd875c16aa4d",
        "cursor": {
          "ref": "541e5447-37d8-4a18-a02b-b4b4322bc7ef",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3c30411c-9489-45c2-bff3-ebbf78b26a1b"
        },
        "item": {
          "id": "fd43c6ab-f910-4725-accd-bd875c16aa4d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "87c25cff-baf7-48eb-88ca-457646f1b556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e3279b-8401-4eb2-8148-f0e0e2aa1dc5",
        "cursor": {
          "ref": "0bdc547d-264a-4bdb-8676-65fe49655504",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "68c2e461-69b9-4234-a6f9-0fd1d4fc7cc8"
        },
        "item": {
          "id": "e0e3279b-8401-4eb2-8148-f0e0e2aa1dc5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "edb1fca2-73ee-472b-b891-1119e781fcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d8b689-f5ba-45ae-91f2-babf7a5ab6e0",
        "cursor": {
          "ref": "f07d0c35-f5e0-41a6-9665-a8d20561414a",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6f5564a8-33de-4f92-9f91-95fd09ad6860"
        },
        "item": {
          "id": "22d8b689-f5ba-45ae-91f2-babf7a5ab6e0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "171cdf52-2b43-4238-af69-a26a96b42de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e8ebb9-3c9c-4039-b1ef-6016ad9a8cf3",
        "cursor": {
          "ref": "7a1b3a7e-50f2-4208-954b-47ed769376c1",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0593640e-6571-4b2a-86ea-57ff56912081"
        },
        "item": {
          "id": "84e8ebb9-3c9c-4039-b1ef-6016ad9a8cf3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "24a9a0dd-feb2-48b3-a29f-4079215da9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c7b722-9b75-4771-b6d6-b214a5b0cf29",
        "cursor": {
          "ref": "1ffdd886-2706-4c7b-9e3b-eab0f41085da",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e70001f9-cf63-4d5e-a4d5-1580b1bff922"
        },
        "item": {
          "id": "f8c7b722-9b75-4771-b6d6-b214a5b0cf29",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "086d42f9-c853-42bc-ba74-c188741a6bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da948c73-5165-4bfe-9dc9-b91e482dba3d",
        "cursor": {
          "ref": "fabb4906-eca8-4791-82df-b0d421ed1179",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aee754fb-c329-4f52-9103-e616ce6906a9"
        },
        "item": {
          "id": "da948c73-5165-4bfe-9dc9-b91e482dba3d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "292380bc-281f-4a33-a081-d77f6fdfb7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 579,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97587790-1dfa-45e8-a369-f99807ab425d",
        "cursor": {
          "ref": "4a561eab-95e0-4c30-aa35-420ae24daddd",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f32db10b-3c12-4add-9296-ac55657fd645"
        },
        "item": {
          "id": "97587790-1dfa-45e8-a369-f99807ab425d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ee651806-179d-43c0-b667-3e674247136c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba03f4df-b7f7-46df-97e3-0855efc28872",
        "cursor": {
          "ref": "dc7beeb5-672f-4d2f-a5a5-8de6033e309e",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c7a0357f-a4e5-4ddb-a360-75cbc2fa7f73"
        },
        "item": {
          "id": "ba03f4df-b7f7-46df-97e3-0855efc28872",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6d07e05d-21b7-45b3-8c21-7c2a39bc5b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b0df45-6b19-4772-b7fd-ddfbd6aa0be8",
        "cursor": {
          "ref": "31485e76-63c9-464e-b273-ea6b3f4f598a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ce10bde6-7a4a-4bab-8f56-689fbb170bdc"
        },
        "item": {
          "id": "b2b0df45-6b19-4772-b7fd-ddfbd6aa0be8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1d11429a-a86c-4a23-a218-a3a07b94ea61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eea683-72c4-4fe9-b6fa-910c5d9dfac6",
        "cursor": {
          "ref": "a379b050-1d72-4878-a5a1-aed6125cb4f8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e28df741-c2cc-4ada-8388-992d9dfbcada"
        },
        "item": {
          "id": "00eea683-72c4-4fe9-b6fa-910c5d9dfac6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "13e90da1-086a-4eea-9353-d474a380cb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bf7b6d-68ff-4bc1-9c9c-3eac06fdb715",
        "cursor": {
          "ref": "10e4efac-b870-4f26-936a-f9a82240e083",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ae8c6d6f-6ff3-4107-b74e-ed5428e6c1b9"
        },
        "item": {
          "id": "f3bf7b6d-68ff-4bc1-9c9c-3eac06fdb715",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "56d8c52d-6546-4452-b137-f2e938ca8ba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d53af5-fa33-4793-9dbf-51dd77b6c495",
        "cursor": {
          "ref": "b58acb45-4771-4474-83f9-1374e7a4e805",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4ae20004-82ad-4932-b9ad-a6b3b2430a62"
        },
        "item": {
          "id": "f3d53af5-fa33-4793-9dbf-51dd77b6c495",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4e9e2dbb-c233-424a-9558-83aca7bd88c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed7dc2e-d58c-4506-91dc-b4cfc47ee0d7",
        "cursor": {
          "ref": "5c4a03fd-35f6-48d7-b601-c361ed6445be",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6b010a05-da4d-4a45-b1b4-02db9243275e"
        },
        "item": {
          "id": "0ed7dc2e-d58c-4506-91dc-b4cfc47ee0d7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d0c9648f-1a74-49ff-842d-0daec05d9183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfeeb96-1602-41a2-a595-ed628b446798",
        "cursor": {
          "ref": "b4fd5a67-e22c-4e36-b2f3-74cefe4a18b2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7a56ee60-3289-4639-82c2-8e5a71e00e25"
        },
        "item": {
          "id": "7dfeeb96-1602-41a2-a595-ed628b446798",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c4eed364-dca0-4c59-9499-2d246f6a2424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b02f4a7-d51b-4d52-a875-28f8f69c82c9",
        "cursor": {
          "ref": "ae29f66e-4565-49fb-bd01-d69af2f69dad",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7080a15e-a489-4af8-b886-9df01345bc45"
        },
        "item": {
          "id": "2b02f4a7-d51b-4d52-a875-28f8f69c82c9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a972a56c-3b54-4549-96fe-e47a41f28ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dfc157-22b6-499d-ac48-3106228cc7bd",
        "cursor": {
          "ref": "97e6b6ad-83b9-459b-adc9-ee4dfcb0898f",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4203a2ca-06c3-4528-aaa2-80cf4e0ca7db"
        },
        "item": {
          "id": "b8dfc157-22b6-499d-ac48-3106228cc7bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "92149a8e-c8db-402e-b513-660334e9c07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8d2a0a-0b2c-4711-b755-f0dd65c01eaf",
        "cursor": {
          "ref": "c27aeea7-39c1-48c2-98e9-8d8d8ea04fb6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f3130d1a-654d-4148-ae3e-de27ea2d8d07"
        },
        "item": {
          "id": "ab8d2a0a-0b2c-4711-b755-f0dd65c01eaf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c6190753-9ab6-4208-83bd-92c51b091d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b09505-0692-444f-8b72-50a145080fc8",
        "cursor": {
          "ref": "0079b58b-66e0-4b8b-beed-97093403fe8e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d997dde3-8122-4cb8-9ee2-f4ba5ed45c79"
        },
        "item": {
          "id": "a0b09505-0692-444f-8b72-50a145080fc8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3a160507-cf5e-4424-9e68-bec3f0b6df13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd6b375-5d10-4670-adad-4a10f985d6ee",
        "cursor": {
          "ref": "4debcf1c-899f-4aa9-9c73-8e8b0cb6572f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c867547e-25c6-4c09-8162-b167a22f252d"
        },
        "item": {
          "id": "6bd6b375-5d10-4670-adad-4a10f985d6ee",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9e5720d5-9c65-44f2-9114-0e5b08faff3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca025401-2141-49af-b67f-eb7e5f01a84a",
        "cursor": {
          "ref": "db466059-4fd0-4b3b-bed7-8b3e73f1398f",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e66cbd80-64aa-4aab-931b-068a66598a2f"
        },
        "item": {
          "id": "ca025401-2141-49af-b67f-eb7e5f01a84a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f1819703-ac3b-4a08-a532-f007ed75aaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64e6e3f-9610-4c90-9093-5d63ee4b4e12",
        "cursor": {
          "ref": "e6c88cc2-807e-486f-9fec-1ab4750ff1b3",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "23c13a1b-3dcc-4ad9-9286-1e541a44fd64"
        },
        "item": {
          "id": "a64e6e3f-9610-4c90-9093-5d63ee4b4e12",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6aee6db4-f583-4b0d-8a7d-38880880f67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a1a792-7edb-495c-b615-262ce4654dc9",
        "cursor": {
          "ref": "808bf4df-9a69-4884-bd97-403af8e1a1a6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5a8475e4-54c3-4e99-80dd-fd7419ba8764"
        },
        "item": {
          "id": "81a1a792-7edb-495c-b615-262ce4654dc9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8d672378-bfb6-4240-bf7d-c547dc0121b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb264ff-9b11-47a6-876c-0fedf3800501",
        "cursor": {
          "ref": "c9c5c117-2804-41c4-9fd4-c48c11cd276f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d46bfbfc-9c8c-4f7d-926c-db94f57754be"
        },
        "item": {
          "id": "9fb264ff-9b11-47a6-876c-0fedf3800501",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77c6735d-afad-48c6-87c7-2cde00f19b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d68031-5689-4471-ac00-af18e9d8a7c3",
        "cursor": {
          "ref": "1091b850-defd-4bff-b209-03610f705dd4",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "299bc9eb-0d37-4bd1-9afc-94a19b80493e"
        },
        "item": {
          "id": "d1d68031-5689-4471-ac00-af18e9d8a7c3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "20343c5f-6cd6-4186-9a80-784e4b9e7247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1779b329-6171-4dd0-97b4-a37023c575d8",
        "cursor": {
          "ref": "e2c64d45-d1a3-4a85-b383-568f9296b4b7",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0976e892-ad46-4336-a2ca-491ff24e0dd6"
        },
        "item": {
          "id": "1779b329-6171-4dd0-97b4-a37023c575d8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "46f848c7-42a7-41a2-977d-aa8c79c7d310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61505604-d167-4e8c-9386-484a445a9e66",
        "cursor": {
          "ref": "60c3d8bc-6e91-44d1-a255-39dab0664ca9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "421d36ce-9608-46a1-84b5-c27a0f858b1b"
        },
        "item": {
          "id": "61505604-d167-4e8c-9386-484a445a9e66",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f7f6f5d7-29af-49cb-b5b3-2c1c1e31a6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d1363a-7eda-4f6d-97c9-96ab56cc1906",
        "cursor": {
          "ref": "b1b010b9-584d-4dcf-a5b9-91d1ebfb24f4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fad57695-b0d2-453a-8a31-f282edc6fe8f"
        },
        "item": {
          "id": "b8d1363a-7eda-4f6d-97c9-96ab56cc1906",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e9577116-cae4-40fd-a1de-0cf515339f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf098ed-ef15-41b0-bdb0-d9e2712364d8",
        "cursor": {
          "ref": "b1dbf6d4-806e-4576-8c97-f20c2c188242",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6ceb44ba-6fa5-4221-9fc9-60b148b15871"
        },
        "item": {
          "id": "cdf098ed-ef15-41b0-bdb0-d9e2712364d8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "702f27eb-5959-49cd-8bbe-f6bc278cf64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c618bc4-a637-483a-9a13-2941ab4854ac",
        "cursor": {
          "ref": "3e40030b-d25e-4546-ab67-0725f1fb541b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ad8888a4-d4f3-4dd6-9c42-8571bb540468"
        },
        "item": {
          "id": "0c618bc4-a637-483a-9a13-2941ab4854ac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4878a82f-a789-4056-95c8-edd7e8094a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5566df-56b9-4144-b6d8-280349357f53",
        "cursor": {
          "ref": "ab5dd396-ab5c-47b5-bb6f-7f93f6316a2f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "67be4a4f-e589-4768-a70d-f039607caefa"
        },
        "item": {
          "id": "ea5566df-56b9-4144-b6d8-280349357f53",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dc90550b-405f-451f-9766-070348c83db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2145aac4-d87c-4505-b0f3-065ee32b4aad",
        "cursor": {
          "ref": "a920ce43-a461-4cd7-9b9e-6b93914cb281",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "123bcbb5-d7fa-475d-82b0-1ddf6d39504a"
        },
        "item": {
          "id": "2145aac4-d87c-4505-b0f3-065ee32b4aad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "093a995e-229f-4099-ade1-077a3d56a0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dfec68-dfcf-4b30-ae97-fac6371f4d8b",
        "cursor": {
          "ref": "6b1280ef-6640-4505-90a9-d5c4833050a1",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e3f46dd2-b5fc-436c-81a3-8f38754ccba1"
        },
        "item": {
          "id": "f0dfec68-dfcf-4b30-ae97-fac6371f4d8b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "60a93ddd-762f-43b4-a2fa-8d72b3c634cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5011b3f0-76f4-4592-929e-c6a74ddda991",
        "cursor": {
          "ref": "32a79b19-5931-4efd-9011-dfaa0e58a2d6",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7c3aac32-3f30-4ecf-aa84-87bd1fb3e58d"
        },
        "item": {
          "id": "5011b3f0-76f4-4592-929e-c6a74ddda991",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a52f22c2-e1a0-40a4-b0e5-34a6c54591c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca91ec3-3f97-4a45-9eec-05e4dc27e23e",
        "cursor": {
          "ref": "9a016e27-6e80-461e-9447-d38daaf938c8",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f4e705d4-67fc-421f-a724-a107230b82c5"
        },
        "item": {
          "id": "7ca91ec3-3f97-4a45-9eec-05e4dc27e23e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b6d23c86-d3fa-4f89-b912-81161a380e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28014cd0-b5fd-46a2-b92b-4a40e3011afd",
        "cursor": {
          "ref": "0964d8c6-05a1-4658-8f89-cc83326d1db6",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "17bbea8b-a462-4b63-bf6f-51441851693f"
        },
        "item": {
          "id": "28014cd0-b5fd-46a2-b92b-4a40e3011afd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "365e3351-0774-476a-a7a1-374ef359546b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cc35a2-6a1f-4c40-9257-1eb30677b88c",
        "cursor": {
          "ref": "9659c71e-97f1-4f82-9aa6-b030d2f4952a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5d05fc33-afc1-4c10-ac62-631f15a34bc8"
        },
        "item": {
          "id": "f8cc35a2-6a1f-4c40-9257-1eb30677b88c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0713734d-61f1-4b18-b6ef-e2fb2a86423a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55a664b-ca38-47e5-affa-3967896e0856",
        "cursor": {
          "ref": "92fb9015-94b9-48bd-9e50-01e2e4c12526",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bc236a6d-d796-4977-8e3b-233f22ea94ed"
        },
        "item": {
          "id": "a55a664b-ca38-47e5-affa-3967896e0856",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d773ab4f-6c80-4bfc-8b69-0748c18f6434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22bfc7f-c1f9-4800-9d81-6dd56e502123",
        "cursor": {
          "ref": "18f68e59-ae93-4fe4-9b39-1cb235c49e8e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "56ed9d0b-c49f-4a56-8163-fdcdc2d1a685"
        },
        "item": {
          "id": "e22bfc7f-c1f9-4800-9d81-6dd56e502123",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ab99031a-df0e-4e0f-89a0-e698655b395a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89654346-096b-42a4-9e94-126c9c0175e0",
        "cursor": {
          "ref": "0a9cd20c-8dda-40d1-a5f7-7ec9f84afcdd",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3b1210b8-102f-4e39-825c-d04d6b5c2b3e"
        },
        "item": {
          "id": "89654346-096b-42a4-9e94-126c9c0175e0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2b7413e3-4251-4767-b33b-3bdb438f4c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b1496e-5a3c-4f8b-bec8-55fd20d51c9c",
        "cursor": {
          "ref": "b713a989-36a9-434e-8b60-25cfe8d10733",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "960fbd5a-8ffe-480c-acad-32fdc8175026"
        },
        "item": {
          "id": "a4b1496e-5a3c-4f8b-bec8-55fd20d51c9c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "df696939-259e-4555-8180-29cb036f4cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98163073-71b7-4451-a7eb-19d4c66109cc",
        "cursor": {
          "ref": "bf631fb2-59bd-4973-be06-72081ba18ae5",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "eda7f8c4-e758-47a0-85c3-e353cba6dc10"
        },
        "item": {
          "id": "98163073-71b7-4451-a7eb-19d4c66109cc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6f796147-d899-4b39-b558-7a2127f8c6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae1d337-027f-4fd5-9c3b-d3735403832d",
        "cursor": {
          "ref": "cf55f267-521a-4a75-88ba-5865391f451c",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "613537d7-19a2-48b6-b478-c949845fadab"
        },
        "item": {
          "id": "1ae1d337-027f-4fd5-9c3b-d3735403832d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7a054f80-15cb-4e93-87ab-d3ec2ab4be38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b2e353-df15-48c2-be54-5f58e865603c",
        "cursor": {
          "ref": "5c8dc904-58a8-4471-b56a-f35b119a9dde",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "22b13f0b-561c-4884-945d-ac1ea0eda98e"
        },
        "item": {
          "id": "a1b2e353-df15-48c2-be54-5f58e865603c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f7fe14c6-4896-4861-9eb6-0a0bf59a4a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ce68c4-ce03-4d24-943f-2abdbd3d68b6",
        "cursor": {
          "ref": "dca4b6ac-eedd-4bd7-a1c7-d321c405d1fc",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6d5c4b99-9d2c-408c-bdc3-0603c508fa89"
        },
        "item": {
          "id": "c2ce68c4-ce03-4d24-943f-2abdbd3d68b6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5b9934f4-45be-4a4b-aa2d-87a83c1a2b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2189caa4-049b-4cd4-b199-0203a39411d2",
        "cursor": {
          "ref": "975b427c-a747-4bbc-bb48-07295c3b5a4b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2fa4e96d-aee6-4e41-8ae6-5d2761fb9245"
        },
        "item": {
          "id": "2189caa4-049b-4cd4-b199-0203a39411d2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "87b012fc-f9a5-439e-bd73-6d827e43b216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fba9cec-4ef5-44db-acf7-bfb749b5da34",
        "cursor": {
          "ref": "4259eb75-5762-4c86-942f-becfc44d16ed",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "10c4a65d-a6dd-4fb5-852e-3e0f751505dd"
        },
        "item": {
          "id": "1fba9cec-4ef5-44db-acf7-bfb749b5da34",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "42bd2d36-8f14-4a91-9dac-a1c9e7ff7d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47e92ca-c771-47ab-9dfb-e1b696e0b229",
        "cursor": {
          "ref": "79949dfb-0a0d-4439-b38f-650066ff2380",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e87d015d-24db-4542-bd30-19f5d10d3a4a"
        },
        "item": {
          "id": "c47e92ca-c771-47ab-9dfb-e1b696e0b229",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fb34331a-61f1-41bf-966c-cce6521dbe68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a97b75-ad04-4357-9aca-888b61a807e3",
        "cursor": {
          "ref": "84240039-0c50-4ca7-910b-a86463e8c24c",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "65b4509b-e538-453e-a207-cd2ed3cedfd0"
        },
        "item": {
          "id": "43a97b75-ad04-4357-9aca-888b61a807e3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e40d55f0-f261-4898-b07a-fed8d419a685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7470c5-6432-4349-be1a-3ba4fcc51f70",
        "cursor": {
          "ref": "9bd9bd41-cfbf-4202-a826-a8b3f8465a5a",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "46ee48ec-462e-43a1-9045-f7d86b2d0319"
        },
        "item": {
          "id": "6a7470c5-6432-4349-be1a-3ba4fcc51f70",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05c629f0-f1f3-4db7-9973-6f76b89c8e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2180f52-cde4-4f45-a4d1-546026c7ee94",
        "cursor": {
          "ref": "3b438dae-af6d-458a-a6b3-734c0f5a4815",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "09611ac4-0106-4573-bfa8-8bfbf4d58c19"
        },
        "item": {
          "id": "a2180f52-cde4-4f45-a4d1-546026c7ee94",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "269851d9-d556-4d1d-8775-ab5cd9569e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4119cfac-380f-4d25-9671-02cb573b8787",
        "cursor": {
          "ref": "6e5b4418-e02e-4ead-8e53-3d947cc2239d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b693456d-8f33-4353-96ff-455cb1d49b4c"
        },
        "item": {
          "id": "4119cfac-380f-4d25-9671-02cb573b8787",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5d6fddb1-82ee-484a-adee-353359ce5699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5858eae8-e248-4cab-811e-a750240e2cd2",
        "cursor": {
          "ref": "46ea4402-e19f-482b-b4e4-c0b2011002e9",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "09e4cb71-83e1-4c09-b952-7f130b19c2c4"
        },
        "item": {
          "id": "5858eae8-e248-4cab-811e-a750240e2cd2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1e085870-1b1b-4b24-b603-2edbbe59ecff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7d321c-ac02-4b6c-bfdf-dcb9e7052851",
        "cursor": {
          "ref": "15f6bd43-2202-4dc1-92b7-49404229faae",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c28da97a-d054-4194-9552-77a447a11f84"
        },
        "item": {
          "id": "0c7d321c-ac02-4b6c-bfdf-dcb9e7052851",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "acfe461a-6a0d-4876-80ae-521d9aa5ec9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d341894-3d5c-445a-bc8c-9a196681a61f",
        "cursor": {
          "ref": "2feb9db3-da53-409a-9c43-8a4d5abd5bf4",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0196203c-17f1-4ed4-9f63-2975423dc47c"
        },
        "item": {
          "id": "6d341894-3d5c-445a-bc8c-9a196681a61f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "71073166-85d5-43e9-8fcb-a03d84ad85e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9b813e5e-86d5-4c17-a63d-9b5729ee306f",
        "cursor": {
          "ref": "8cddfb0f-3c2a-413d-832c-c19da3b344f9",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "31dd9975-3687-4881-8546-dd9eaf2b255f"
        },
        "item": {
          "id": "9b813e5e-86d5-4c17-a63d-9b5729ee306f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e7e31559-b3c6-47d3-ad8b-411ede79de64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ed297bc1-5393-49d6-84e4-095e4b64fb09",
        "cursor": {
          "ref": "2cdc2ef0-faab-4c0e-aeab-9ff929ee8b0c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ee395132-ae91-42d7-9f74-9b5c42f330c2"
        },
        "item": {
          "id": "ed297bc1-5393-49d6-84e4-095e4b64fb09",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "10338a54-db58-4a2a-bf4f-2cc97ed11000",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbcaf79-d80c-43c0-8f18-badf763e58b4",
        "cursor": {
          "ref": "297f383d-e5a1-4861-be80-81c0a0107ce6",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "95373d72-6aa6-47dd-9ee6-a0d973f6b941"
        },
        "item": {
          "id": "6dbcaf79-d80c-43c0-8f18-badf763e58b4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "95f84b86-06ee-4343-888a-932d98ee4341",
          "status": "OK",
          "code": 200,
          "responseTime": 1750,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "762936e4-9f1f-4828-b28e-7f736362f64a",
        "cursor": {
          "ref": "a128c35a-58e5-42b1-856a-f7596089d9a7",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "096e612b-8e88-423e-983f-9f81e3b5d72a"
        },
        "item": {
          "id": "762936e4-9f1f-4828-b28e-7f736362f64a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fb2b5ccc-1b94-47f2-aeb5-a0ce1a9be1ae",
          "status": "OK",
          "code": 200,
          "responseTime": 2253,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
        "cursor": {
          "ref": "1993f4fa-487a-485e-aabe-6abe81ef160d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a35a843c-f4ef-4b3b-8b68-e660f2b077e7"
        },
        "item": {
          "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d86b0676-5af6-424f-aac3-4cc31a4d15f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
        "cursor": {
          "ref": "1993f4fa-487a-485e-aabe-6abe81ef160d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a35a843c-f4ef-4b3b-8b68-e660f2b077e7"
        },
        "item": {
          "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d86b0676-5af6-424f-aac3-4cc31a4d15f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
        "cursor": {
          "ref": "1993f4fa-487a-485e-aabe-6abe81ef160d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a35a843c-f4ef-4b3b-8b68-e660f2b077e7"
        },
        "item": {
          "id": "2da404e1-2656-4d50-bc8d-418ce1a0d616",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d86b0676-5af6-424f-aac3-4cc31a4d15f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "0b141184-aad2-479e-a3af-99fbaa7fd04c",
        "cursor": {
          "ref": "4222fb53-5f2e-452d-b5e1-5119061f0711",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "83f1e8c3-5efe-4b81-92dd-1022d4d9fcba"
        },
        "item": {
          "id": "0b141184-aad2-479e-a3af-99fbaa7fd04c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "57a8efdf-e1d9-44a8-ab55-197c2739067b",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cce5eea9-2b25-4897-ab3b-4396cf8e5e44",
        "cursor": {
          "ref": "3613da5a-fa78-466a-9c35-f9c21d51168a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3bf2c749-553a-483a-81a1-ebdad3724c36"
        },
        "item": {
          "id": "cce5eea9-2b25-4897-ab3b-4396cf8e5e44",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d9bca40c-c0b7-406e-9148-90fb83e7709f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "cce5eea9-2b25-4897-ab3b-4396cf8e5e44",
        "cursor": {
          "ref": "3613da5a-fa78-466a-9c35-f9c21d51168a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3bf2c749-553a-483a-81a1-ebdad3724c36"
        },
        "item": {
          "id": "cce5eea9-2b25-4897-ab3b-4396cf8e5e44",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d9bca40c-c0b7-406e-9148-90fb83e7709f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3b7b2454-cc75-43a4-b01f-24e8e11ba6b6",
        "cursor": {
          "ref": "07153293-9dca-4052-9837-6807ee111667",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9e969a15-6102-43d7-b6ac-15a41a9dd206"
        },
        "item": {
          "id": "3b7b2454-cc75-43a4-b01f-24e8e11ba6b6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e1c6e290-1dc3-4d10-8f38-a26445d04286",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 113,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "94849385-a71e-4742-a713-7c77a942b105",
        "cursor": {
          "ref": "27970791-f01c-40c1-9671-5a05e9dedab1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2d470b68-b093-40d8-8d80-f836b3b01607"
        },
        "item": {
          "id": "94849385-a71e-4742-a713-7c77a942b105",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72ad59f3-6d7a-420a-b504-4916033244da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "94849385-a71e-4742-a713-7c77a942b105",
        "cursor": {
          "ref": "27970791-f01c-40c1-9671-5a05e9dedab1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2d470b68-b093-40d8-8d80-f836b3b01607"
        },
        "item": {
          "id": "94849385-a71e-4742-a713-7c77a942b105",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "72ad59f3-6d7a-420a-b504-4916033244da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cf26b90a-7b3f-4ec4-9b02-a91ef603f2d8",
        "cursor": {
          "ref": "49812e39-3f1a-4f47-9867-3036b64b2926",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1afd2bfe-d59c-4774-befa-18a92f0d553e"
        },
        "item": {
          "id": "cf26b90a-7b3f-4ec4-9b02-a91ef603f2d8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0beba77d-8153-446b-827f-8e8d3d158617",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}