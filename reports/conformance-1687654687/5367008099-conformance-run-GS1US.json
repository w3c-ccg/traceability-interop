{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "83ad814c-a45e-45a6-bcaf-0b138685af10",
        "name": "Clear Cache",
        "item": [
          {
            "id": "534e24e9-c461-464a-b1e9-feef6a315044",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "805bc461-df99-4d3f-99f5-726159a900b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5e93ab05-4fa2-49dc-bf58-e4fd4e67a0e2"
                }
              }
            ]
          },
          {
            "id": "2d578376-7585-416c-b3ca-d7b0f624a2fe",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48a01d3b-241c-43c8-959b-3faa52dda910",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4a9a9b26-dacd-4a91-b613-e23f44dd74ab"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "beb3ce8b-c487-4227-bb4f-03ef445ef849",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "228bc1a2-5610-47e7-881e-a9eba19f4391",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f27245d-9e54-4f95-ad84-4817327b8742",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72eb36a8-399f-40d0-9c0c-e181ed8fb78b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acb38f0f-a815-4ea7-b49a-db7d64c5d44f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3cb1c041-4dde-4d35-8191-7f3cf055df99",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98e955bd-2978-48d1-acc7-4d37d27e52dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f409536c-58b5-4638-9c29-d3e9a16e0bb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fda9b592-2522-49ca-a01e-36a511f5668c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed2ca807-fb50-4427-b5a1-8eb5686f9aee",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f77e15ee-d920-4c81-9985-16f8c70c52e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5dca0c3-d2ad-4d6e-a44f-49b88f1d1546",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da585abe-c43b-4750-8aa3-0e6c491e6238"
            }
          }
        ]
      },
      {
        "id": "fb9478d6-555a-4ca3-a245-b6ee23209684",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d9321eff-48fb-42b2-9da3-06f340ac6dbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ec59d8f-52f1-400f-ac85-9a54c08a1980",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47a12183-a286-472d-8179-48b555d81195",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e6a9b2-0f56-468b-b110-2e7604da6f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1da97d7b-b9d7-443c-9abb-815523f2760d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372a3971-5fb0-4fae-931c-94999897bff3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcde761-16fe-41dc-9235-f98b3401ffa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19db4182-2e3d-41b4-8fd9-e6bce7915de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334a5d62-71e6-4624-8d76-4acd4151abcc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3849d9-46e7-42f6-88ed-6b0208e2acd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be93a035-02a3-4fd3-8592-13714477afa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c2ad458-aea2-4276-8db5-8352689227dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "037985bb-c894-475a-94e4-cddebdd672bd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c1eb79-77d6-4e62-9cda-1bb0bb7f3980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d510257c-e05f-43ee-b9d7-7f822a8e6bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715304c5-2f04-42b8-81a4-e9374bb091d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c8a3d7b-2055-48ad-a5e6-ae1eb1d0289c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3990a32b-e3d2-425c-9d11-6757d4dd2eab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f039a067-ea51-4758-b48d-0e3ea6b98c5b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71f43888-50b8-41b0-a114-c4ebef76146b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "857abd26-1b62-461c-863e-370ab403695c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "690daf49-2348-48cf-a32b-294de06f3e55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f426c817-6da1-461b-a651-af941f626074"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2ee0eb5-b024-417f-916e-a3873678af64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e313b79-8b1d-47fc-9f4e-621dda71fc30"
            }
          }
        ]
      },
      {
        "id": "8561bd06-be9e-48b0-814a-e85132198cad",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "63d72175-cf9c-4fa1-8706-745a68f4e995",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d560f79-e688-4023-adfb-e69d37c8f3d5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0d450091-0d31-4cba-ac1e-144018d029b0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16abc025-b171-4317-a008-00f4191ce3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd83158-9d3c-4e42-b9e5-f36228023f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96717fa-0d6f-42ea-a513-d2a2121b4085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e88bb33e-2720-4c64-b955-52c74ceb64c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c423559b-e896-468a-a50f-1a071b8a33b7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bea88b-d8cb-4c82-9bd9-575294481948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5ccc56c-0a0f-4176-b420-3ef920d82b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd6ad49-84ec-40ce-b875-4560d9095651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fabb9618-be63-4b94-88bd-4ccf0881917c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabcd672-ff81-4034-b470-e0546ffd3c36",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01258c1-5440-482e-b4a5-a581394218e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c719eca5-bc6d-47cc-916f-c9537c499141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98281687-0240-4498-9f4f-c7acb4067ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3133eea8-3872-45d1-9211-1ac2846c91d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd88203-1b4a-4e31-bbca-90d8d2550cf2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edb8358-2601-44d8-a92f-221d7223b648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1e154a-16bc-4faa-95e3-752720bc7ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b069f561-80f4-415a-b759-74edd45637fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80469ada-80e6-4f24-8887-db58219eeeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3183522d-e61a-4109-9c93-ad3db91639cd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b679d6-507d-49d3-9833-a34b36985082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4e6d0e-2e5e-443f-a5c1-b44d34a6c337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827a3fa2-0b9a-4d4e-9442-a08970e8cc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4b2d9e1-b502-4a5c-91fc-d47c76cfd1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81b0f64-ae6b-4805-8423-24c303edb82c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a6de06-d5e0-4939-bd9e-9f8e679bcebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b933f55-9a60-4c7d-b7de-864e24a0c535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4482fe08-0e5f-4dac-92fd-09168b8a806c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "667f2be5-e8f8-41d9-bf9a-12b38cfbfa57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76a5ea4-1a62-458f-9759-b0c2f704dc2f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b97223-5e73-48fa-a478-9b2310c4d886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc54dba-04ba-4546-a417-2367b4aa8c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50480ebe-80c5-441f-ae6e-90cfd5110ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "683b240e-7102-488a-86ab-3f85b0d5e4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea169cb-6312-41ae-a9ed-2b8e4086d7f3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876920cd-1a2b-49ab-8daf-40a4a90cfdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb3c223-7100-40d6-a722-9723c3ce615b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bc3bee-ed98-4ef0-a327-6c5a9706c128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9593c8a2-125a-4d86-ab33-92cecba1be8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c565f05-e232-4646-9472-632e289d4fcd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d46e39-f4f7-4c82-9b8a-3b0a2b22dced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74e9592-0255-4cad-8c2e-39bd89a3fc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b834b7-450c-43d8-8438-f3084f429643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "315439aa-a8f9-439e-9ab0-3a52c7630235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb033ac-312c-49a8-b736-2334d52fa76e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032470a1-15d7-49c5-a05e-ca3a5203fbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf723a2-c981-47b6-b50e-ea74c4d849e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f917e798-e077-454f-b8bc-3eac462a4257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c71a7806-82e8-4d6b-9389-90683e74953c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074f075c-1110-43b7-aa3b-fb65ed7cfb5e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8955e3-8d80-49f6-a65d-5d96d56f5ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3201675-a513-4541-b5d2-ac364c682159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b7c468-7228-48f7-b9f6-00cc9eb8b851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c9239e2-c805-4888-a1fd-d4576027c5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd5aea9-8854-402e-a7ca-6be6cbe4453e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7843661a-29de-4f1b-bbd1-86826dffdb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e8d178-2361-42d6-8777-a3780e9043a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76312a8e-19cb-45a8-8078-2a4452e9eb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f28db2a-14d6-4c12-9a9a-20dee9ab1d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea833db-e741-4ddb-889e-0d3d3bbf1822",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31546f1-e649-44d0-8482-5de5963f34ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771a5ece-d70c-4db7-92cb-b732441225ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832ddc5d-6073-425a-b389-64c25ef90a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "960d0812-08f9-4f49-aa2c-f1ed910b56ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867b0a6e-fbcd-4636-b334-4fb04c0a1d69",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e07348-087e-46e7-adbf-141c3014087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a117fb-1604-494f-ada7-3d96f035012f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a964d7-8cc2-4fa9-b8d9-f4306fe11e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c4f009c-014f-47f3-a1bd-8af2623cc4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e0f591-cc84-4798-9602-d66c72a70726",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8c3934-5b3f-46b8-bb01-d0e732c97df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c97136-8e48-444e-8570-29797a3c0bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e4989c-e764-4512-91b2-a8e9ddea190d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf44cfc9-21a9-4bc8-ac5b-fd1ac0cc0a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9968f195-a5d4-47a5-a173-953371fe10cb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58857da3-198d-410a-a025-03a334755bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838bad38-1a43-4d33-80e1-3c0f66442c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54121694-2e8d-44c2-9a35-43f0144740b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1938a06-d91d-4803-b380-7ddd24791114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96afbe1c-7836-475e-83aa-d7fcba2c5e41",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0347ac0f-e99f-452f-9dba-52d7a08982c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8dce5e-caea-43c9-b410-9017d36be4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f381337-cd92-4a65-9a09-85ccdf6860cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65599d67-14a4-4286-89de-784ad7a1818f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c58c34c-77b4-44b3-a9a8-1208249a895b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db03521a-dfa5-43d6-a89d-344f3754ca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6e3b00-88dd-4371-961e-247a649ac128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944353fd-cd36-4694-9f82-48ed6bbb637b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c39a5b-ab9a-49fe-8c6c-af17cbcaefc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201ff428-5e9e-4ba5-9c51-b03627488cd0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5656ec-e0ac-4659-8d88-0d1f0a80977c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19de2c8-4b16-423c-9cd1-d0c22d7f4d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde683b0-d046-446f-beeb-bae60f330091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "448342e9-60de-4131-b15d-fece9810ab2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de61b45-18ec-4c0c-9e21-90e4c645ba7c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8efb430-ad3a-40d6-934b-8c72d8ab14b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccb40b4-6823-4491-a519-a1f55acab5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1ae5f3-c9a4-4c3a-a002-5b0c78d8d799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9610b2a-5275-4eaa-a80d-b278cb84e8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fde60e-a52b-4093-aede-ee4cc40f03f9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253699cd-4f55-4cbf-93d5-837a0a40fdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332195c3-2b37-4657-8c84-a12c7f717ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd98f49-6abb-43af-8177-5878887096c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "100e2a96-fff6-4569-bf69-19974c685a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bc4d18-aa96-4251-80dd-5648d82dc267",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579d8870-dc3e-4503-8cbe-d5d2fd6976db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b55a89-7400-49eb-8959-dbee2a8b5269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7bcdd6-4ab8-4cae-ad28-256e196aa291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcec711-8a97-4f8b-bd0a-79bd181fe1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b5828e-107d-42d1-93f9-16bb1dcfefab",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac3037e-d61b-44fb-af3e-177eb18a8077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bde0c6-515f-48e9-9fb8-d16961a39263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13627247-898b-457e-8ad2-3deeb872ec5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e93f1d75-ed21-40cc-b34a-341f355d5a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bdb8de-fb0e-4a44-9213-8d88980ec812",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154171ba-1ae6-494b-bab8-9809427e0796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8381cfac-3496-4cae-9081-414d08ed281f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571d5785-bdf9-4acb-9a43-e69de305c9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a131fd94-dc17-4897-8670-e14c8a211f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b4531b-c667-41b7-ad63-6546091f6aba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f49696-80ee-47e9-9b9e-d9f3ed15fa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fda1690-665a-48ee-8688-464048163252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1451d7e7-dbaf-4f2c-a656-d1968ce61c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07f68e2a-11f8-4dd2-b669-a4f072fca285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e02b24-765c-4b7b-b207-be121ceb1267",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54985c8a-127d-448f-bfa4-e87142987ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413af685-59c7-4a86-8ae5-87ef828e4440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84da941-42b0-44f3-9dfa-d30e53091ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75be2a72-e2f8-4a62-a952-b38d7330c6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bd2c0a-afaf-4790-b668-bd950cd9cc7b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25047cfe-65a3-4ee4-aadf-e805d98d25c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88020ba-8216-4b39-a4f9-01bf3d5c0ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721f821e-1daf-4c74-b47a-48477962f3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e881aa8-cd63-4049-98e0-ab79aef1b7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfafe4a-ff49-4e90-a22b-13d2425b2a9f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e44727-4e84-4d14-8f4d-bf7382bbb637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5334a8b9-1f38-4ad4-ad57-af34085568fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7139c5a-0cd2-4aa4-9c92-8bb057926ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "777d668f-3863-40b6-91bc-34ff7ab02431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb776f94-6500-4444-9dd4-74fadc6b9fb8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5371ec-603e-40f0-bf08-6f01a70b3ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a74983-f3e2-4436-b8b6-7e09ca1586f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d9e59c-8722-438b-93ce-5e466b9260e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b95313d-c616-4593-9c2a-8780825319f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f70cf1-429b-45b7-97dd-a59cabfd5223",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f36840-db3e-4eaa-8180-461709c04601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7d6986-b66b-4c8e-8058-bb432b4c4579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a7c252-d328-453a-b206-3846c0755273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c35e0f6a-b2c4-4c34-b550-c1523e842383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b95e70-0efa-47bb-bf4a-dd0dfc912012",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e09bdc-b2eb-4ab0-b5cf-2afe52acfb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce33d3e-da88-45cd-883a-798dcef54aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4c4d23-a917-4919-ae05-5ab98a9a220c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4a57d8-0a38-4ea1-a003-c40a40e87fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cc7418-8fb8-4472-8b90-7ba4714a16a0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1299b2a1-019f-48c9-8f4f-34a23af8027f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2c40fc-199f-4058-9607-5b6a919d8a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53edd7ec-19cf-4015-a40c-b3564a91d36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44aeba28-f92c-4153-a062-ccee4ba1e8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed66a069-23ae-4bb5-a2a2-c9e1fdd5d9b6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a12aaed-e515-4be3-a672-8324c37cd20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e986e4-3cd1-419c-a455-80bf148dba3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5b92b8-9386-4de4-bb20-bc907715b780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9029df-8f7b-4fae-ad64-3b4f92de6dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a48dcb-c667-4a7f-a3e9-cfd8db54e437",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ea0a16-be87-4d9a-b64b-6f7915b6128c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7769476f-a550-41ec-b178-466342cd4d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1686aebd-7f47-4f3f-b916-a1f6febfc826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "424ff82e-0b44-4461-a837-2a0bf6123b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bd3e7e-4dd5-4bd2-8481-89888d9fd073",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3c855e-bebf-4af8-9a9f-c1341129a21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb6fd9f-13a2-4d8a-af4d-e9416f210f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c5b54f-e3bd-478d-8478-6956ebd1e553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "84563f86-7c8b-4b01-a0e6-32d5a4a9e032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5614151d-db16-4fe8-82be-de4dc27476ab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb049aae-518b-4196-9629-2040623ff2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d2d4a77-c568-4acc-a002-097d8c1e5b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6463985-08f6-4947-937d-415690f9ab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c50a36-0625-4ec6-93c8-47ba7685a4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6637e56-196a-45ef-894a-a8d031612d74",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cc1bc6-3ffe-4384-86af-8ffb56dc209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbabff70-19f1-4d01-8760-602983c9fcf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef89a1bd-dccb-470a-93f2-2302be7e9467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ad30f2-4b72-4fc8-8da3-b4cfccf10065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2f6ba0-e331-44b5-9a3c-6aa21b99eb43",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2d9d9b-65f2-4481-8c9c-b5feb29cc9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa86fca-6386-49d3-97f6-8ff06cda6d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58acffd-c32a-451b-a3a2-82a4fa636a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a0c458-c30f-48a0-bdbb-73cb43fd7017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7982f1d5-7c8f-49c3-8e8b-831bdf3b7380",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc897bb-ea99-4058-b31a-c08d44dd373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b875be8b-094c-4529-88e7-6af1e40e1f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c83be74-829d-4721-90c5-c51c3a8aee9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9782ee3e-66bd-494c-b487-4e7a67946cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cec69e7-1650-4e95-93bb-d653d034cf68",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1b6d16-db32-489f-8013-12b8ce03040a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a0c124-c181-45c5-8d75-7f669ace77b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3a0467-28e6-42f8-8557-20c97b112eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07da22ad-720c-4b38-b024-c026cce9f3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40f422e-1d05-4140-92ac-019f7e784a7e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d96760b-ab91-4c78-bd7b-9c08aaa80a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa8f84c-9ec6-48e6-a35e-b0862bcf2f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c5be0f-d781-4746-be0c-3a65fdfebb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "810cbb92-be46-4e79-9035-4bffec9ebb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b5c64f-407c-49c5-9f01-0a7eaedb3665",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8575ee58-2b05-4e85-9d08-0186f61ab6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68da4890-e311-4da2-ba3e-0028fea01029"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6136d867-22a7-4600-bbf0-6690ae7adfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8b976344-5d11-48bb-8198-6e046263e22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cd16a8-77e2-4e9a-b548-87e582e9df6d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b032b8-5008-4ea0-a977-d1e496cf6100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac61125-c407-41b5-a263-eca5d32ce3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e72380-32ba-46b3-8816-a17320618e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "17e260c1-93e2-441f-8424-158d5473bc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ea83ee-03ee-4180-ab55-71762549c5b7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667ec848-8f7c-419f-bbcb-bd4cbdfdce91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfa1467-c29c-4e75-bf59-2fe63493bc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f6b01d-4e44-4f01-8d94-9cd658b03daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e73d024e-b8b5-43ce-8dee-7c738ea54c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cedacc-eb7a-4ebf-8ccd-34eebf17c454",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d16eaa5-73e2-4451-84ed-3cd8fc792d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10e0c3e-d4b4-46db-8f8f-83d0ff9c8167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7192e4a-6067-4551-a3b6-12a2fa2a8962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a304b5-733d-46fe-8e58-c266c9472f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708206d6-ff06-425b-b425-1e45ab568225",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1588618-8e00-463f-929c-858b4c6132c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328ade4f-68af-44f9-a1a8-7239cefb3215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e70338b-49f1-401b-8cf3-45e9d8a416ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b94a528-a4bd-4bae-972b-8b170cb668bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a025bb0-bff2-43f8-a7c1-4ed7947b7de4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538f1679-df2d-42a4-a898-808be348dceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6274a650-a7bb-4336-ba00-b56b47c0055f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a3e2c3-8946-43b7-a91a-f5c1f384a0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50956a20-c04d-4427-afba-e692d7a5a38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b5bc40-c804-48bd-95db-c5dca7655c71",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0466b7-9a77-4868-8139-9eafcb393940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dab8fa-cb5f-4d37-b891-781aa1a670e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82f3ee8-2bbc-4dc4-97ce-0cf3a280d152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b820608e-83ed-43d8-8cca-5392350f6d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1967e73-1ca3-46bb-b1bf-d2a2afb5f1cb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eea714-d445-4da6-84fa-0963228346d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84d8363-c9fb-426f-be24-6d66088165ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa004582-e8ba-4269-ad8e-2eabcb4ffa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3c8d32-3203-48fd-ae33-6cfc0efe07f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce756a0-8047-4474-9e1c-b9071360ca97",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b417152-d0dc-457c-a345-42eebc396b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a485a108-a962-4617-9597-6c1a498f8689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be490ef-e1e8-47d0-8e60-47a123cd65d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5a610e-df46-4461-a8b9-bb9255d3bf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd815b-4869-4caa-b476-9f9ed288cb8a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d72296-bfd4-44f5-abbb-d0799028a9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b8a347-c856-49ba-8445-eeea26f1d33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e400e9ca-41ea-41f2-ab40-636b0453f2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9c431d-a42a-4867-aa11-f825c3470ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d50e85f-dae3-48ea-b936-d4a8953b9183",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb68c7c-9f4c-451e-bcac-8d53f7a07dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852c0a37-8888-4cee-8bd4-e95bd09bb37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbefe152-096b-4fc8-b8c6-2124c9c83d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3ba916-c5b2-49b6-afd0-08dc6a1c5d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011dc972-a3f6-4128-8a82-93645e8d63fd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3db7636-64ea-464c-bf1e-fb31ce8f09f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4f90c4-a1a4-47be-97f2-64232013809a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb151b23-30df-439c-b50d-a2517c67398d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b1b3eb-fe35-4cb4-a721-ea41421a945a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b6c033-cc6b-4633-87ca-24083e215eca",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88fbc0d-05af-4ba3-93cb-1cdb887fd786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdecd5c0-9269-407f-8c4a-488915b845f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a06626-548d-4b3c-a470-7576e3e7541f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6328595-c95a-4bd4-8545-189ab049a08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5367fa99-f6cf-467f-95f7-d204ed1d8527",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3fd193-ceb7-40cc-bc22-2f15dfdf4423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5478087-d3dc-47f9-99da-bb21347dedee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae56785-05f9-4612-bfa0-a0d3debeff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22f91f4d-639b-4490-a709-14b27b17f13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9501d148-9945-4298-b902-5eaee3077010",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdb52fe-a00e-4b4c-be86-96eb10c0a51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffbbb555-1b28-4b3f-b5c4-fe01bb0b89b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9254905-2d76-40a0-8ee2-b20aaea48040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5425ef-483c-4186-8763-ef569362e5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92606d8-6496-47e2-9bf2-8844774a3b1b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70e2d15-f3e0-482b-9cfd-f9cc7264ef67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e75c77-0acf-4fd6-8d9b-0b32b40dc6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bdf3b6-0912-4cff-885c-e46dc17fb21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "51e2cea1-4be4-43eb-a1af-209fcc826eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284eb2a9-ab2c-45a6-8d27-fcd85bb245a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f4f9e4-0c0e-4c00-b04f-72a5735c40d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9bf4e2-500a-434e-a1c4-a0a63839dfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef21267-8166-4ce4-bbae-c67be75fd2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbcd0d2-b6d8-4977-8aa5-c5a2733f8c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a6e62d-55da-4011-ae71-2007189d6560",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f121b583-5c8d-4df3-94de-2b8ab68a063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271e6798-7d5a-4e4f-849d-a8bf306d249c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41717e06-a9d9-495d-9569-444050acb870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e316080a-cedb-459d-9f2e-c6708e539e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8452961d-1ee9-491a-b8a1-125b184ff630",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40533d34-1627-476b-b7a9-befe568e1f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560b85f4-cab4-4f13-94f8-28603581c36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "214b0156-7c8b-4a3f-99dc-b951575356dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3709a2c6-008b-43d8-9ef7-f6be0c0fc319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf8b89d-b33c-4d16-b109-c6ae4f654d5a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fabfe70-ed90-46a3-af34-b00e4ffe87c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05570294-4c3e-4b5a-89fe-189d9b4153cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230d2453-75a6-44fa-a8a3-1185030119c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb09ebc-bb5a-4899-b5c4-8abf7a5ef21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019aca7d-8be3-4648-8fad-1cfbec6a6f2a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537cd3d0-b7c9-4474-b88d-a84bc6790834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11330976-d589-4338-bffa-2a957e4effae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42811e1d-e94f-4b01-8da7-7fba57a008ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8bb542-e095-49a8-8548-cf1a990354ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067fd491-5a68-45bf-ad73-31f7e0a31d97",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ccb341-e950-489c-aeb6-b0c0e5a30b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88c7021-bb64-40d3-bbf6-c7600e24c69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e48feae-df55-446a-8782-0a59d314df6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "18c309c7-e7ea-42e5-811b-d2145c22e1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f67a156-0d75-4e66-9423-bca61b366644",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861eb7c8-cae1-4b01-ab80-a35851d61d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721b72ff-11cf-4321-a37c-9b40bc744ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a019072e-97c0-4be1-b0b5-1aa939c4a1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7a4229-fc1a-4e8d-ab8b-8f71523caff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e500f741-83eb-4366-8e41-2b6a0b6f7969",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aaba22-140c-428b-a7e5-ab5ffe843620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b984bbff-730b-41c5-96a1-68a1f567badd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c296de1-19b0-478c-8f0b-7b796c990086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5441cd-96b9-43bc-86c6-e838093171cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ee46e9-6da8-4518-9ff6-394cb44730f9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bccea5-28b6-4ae4-9014-cdb3d1f1d6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dfd4bb-1949-469b-9969-49d9ed6ef22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98081991-ae48-40c9-8777-f9001fb9c6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "971a4c40-bdc8-4d65-969b-181827467913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91ccde3-aaa0-45fc-a75d-84875ce5577c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d4993c-8c23-446e-839e-a84459ab9a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a702152-f029-461b-af81-833b1702e41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c56b4cd-408e-43c6-8f34-2686b59505b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e53c5e-f2f2-419b-9a2d-2df399c37fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6db857-6abc-4400-9430-d0b407e18180",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa104f89-bc58-43fd-927d-643b325ba46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b32798-35b2-4f74-b392-276ad1439847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cce8d25-396b-4eac-8012-dc664e2c45cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ac4c10-6144-4907-8748-17c01fb2ec5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b91e5b-5422-4bb5-b436-10d9c1c8658a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d89c077d-9960-4c62-8dd9-5d479c84334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bdb514-e5d1-4aa0-a6f6-6588407e9345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c5ed1e-3a8d-4986-84fe-8dd921679528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9912302d-827e-4515-bf83-455439d69af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46740712-97c5-4625-987e-b83ddd309481",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075cbf35-8649-4878-bc15-2ec6f65814f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212c5b62-208e-4e08-8a66-dbe2f0b75829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fb3509-6cdd-478d-9427-441c6b004b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f68908a-6db9-4539-aa8c-4e642a59e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d64edc0-a1e9-47a4-b32a-ee313ad99215",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36783bb7-bb90-4445-bbd7-6c7a1d4c88e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40e4165-5a12-4789-a975-cba3d9ab8645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42eb765-0f81-45c4-9458-4c172dc5674b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65f2f124-61e1-400c-a728-85f2c7718aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a016d3de-60ca-40a2-a223-9775380dca77",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cec901-d95d-4367-9233-dbc46b34ddb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f188bc-7b90-4847-b8c8-d70d5c3b2abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9803f429-05c9-47de-9e7a-9022aad7c91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "480e5734-846b-4fc5-aba1-ffd48e4201b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7003a367-f73b-4c20-b39f-dc20781340c5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ed55e3-7092-4a3a-bd06-9846e207a96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5d7412-94ef-4983-a4d4-70c1dd075173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82505f7-79a5-47c6-95ee-ae48b366bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "124429af-4a41-4efe-8ebd-b29a39a52460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f842a15f-a912-4d27-a977-dfa3d0ce8b94",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3291e85a-3c13-44d3-bcc3-a93046565e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0487d89-4f9d-449a-bb0c-b27384c2edce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990ab658-466f-4677-829e-978a09bf860e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b90bbad0-4b4f-49b4-a092-823c53dcacb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2491cc33-40d7-454f-a292-26ea09353bb1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e5b555-a839-46e4-bd97-89e6d2d77cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b4bd4e-dd91-4555-8385-21a26d3ab62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2539f2b3-463d-4b23-942e-72bcaa0d976f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde3ad8f-213c-4d11-99ff-c5569329f60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088c3646-870b-4412-985c-e06ce6eeccd1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f12af1-445a-4640-b7a9-94f28c541516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd7449c-b7b8-4b2e-8837-05fef5907aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b310ba-eac4-4f03-9548-10a2b3f1637e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75f7f4e0-a478-420e-b01c-975f5b3259ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585e5fd3-b3a1-47bb-affc-3945440a5c00",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bd4954-621c-4ea4-94aa-b85b4bd03a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57228c0-954a-4b68-9886-4243f6e18878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd05c31e-807a-4332-b16e-5c67b20bc21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "759e56d5-7557-4adc-9776-fa5d2dced2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23024fc-ea5b-43d9-ab9a-389db9cb1cdc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c52b29-4a45-4b10-97a7-e03d3680bffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d499d4-9e11-4472-9264-3f7ea90345fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7dea0-f827-4e51-8202-5b7540533a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "523d844c-ebdb-47ba-899d-6afbaba867e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d68d2-06f5-4d3a-9087-2c8f74f560b5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fb081f-4d07-472a-831f-79b5e30b801f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf040a7d-1f9f-471e-a9ae-78c0ac82cba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b4ee02-22e0-481b-b535-5ec810d97a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4da44ac-982a-4cee-81e6-be4ab64f9960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b58648f-fc29-4fb2-a9a5-1a92e963d4ae",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508e1ef0-846e-4639-9fe3-e881e0a44cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624bd91e-1644-490d-9fff-1f1fa37fb820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8decce14-e41f-43e0-aebc-d4795bb28166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b99112-874c-4cf3-899f-837f1545d395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca19662-25fd-452e-9cea-8db597ff12cb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e634aa0-fb8f-45ce-9bc2-243081480e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7ca8bc-5843-473a-91c7-da4fdcc5acfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27898eae-125f-435e-bb53-235d0a17b19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "577a7746-8315-476f-9d08-d7a3572270ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba960ae-8fe7-4472-88de-87f3150f89b9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63004b1b-6b19-45f0-9703-7f656142b306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df97638-b53f-4106-8e3f-ed98a09c0be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d53124-9446-4e31-bd4f-1ebd123cf947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "582fd2fb-0d53-4aa0-a116-26545d809461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29c3930-7369-4de5-9b3c-9f58068193af",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77841a1-eede-4b13-a02e-c8f83f4835df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183e55bc-73da-4a78-9f34-43eb9664387d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fc92ac-f8b2-40e7-9f17-a5dd1334a6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c26091-f3a6-43a4-899e-c5388166f41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7702a48e-f190-466b-8fd2-0b125e5a61a3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66340f6-6e76-49a9-9b53-7fec9793007d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bbb4a7-6c13-458b-a2ba-abeb069cee3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbaf8f8-24a4-4a6f-8c51-d33fe899b615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17592f2f-1ad0-49bf-93e2-2474fdba7727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51a2b37-3296-4ac7-b942-703a56d9cfec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba869c5f-5304-45d1-896f-41b76c0212b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00de8a31-ebae-466b-8ea7-12d2f6ab8ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf8a2fb-41c4-4b1c-b92d-550a788ad45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "950131fb-bb78-4e24-9960-0adc7f130791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ff1473-f195-40b9-83dd-af42cab646e2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aee739-4ffc-4130-9676-57ab875934e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfbd8f44-bf11-49b3-8b29-50e6da55e095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa0c26b-0f42-4bcd-ae06-2d9907cca167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54325de6-07a6-497c-a0c0-6ddf6d78d724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9113e127-e152-4ec6-85cf-77288dd197c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e2f4de-71c3-4c43-9f53-01f77fe72fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d200ee38-8169-4cd3-89a5-cae52e3c433e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed83e893-a620-4c82-a102-d948580634c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "03736412-d102-4594-a9a8-fab0d0f85f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf31e45b-dca8-4907-988d-3eeccec01034",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8a23ca-2284-46ef-b566-07a6155d9ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9725b6-564e-48df-af0e-4dc4fda8da82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad340979-4620-499a-b3e6-63020b5197c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "692c29db-a49a-4fb8-b703-db5607f10a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea2af15-ab23-4e70-a347-5f65e6e5edd3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5c3b3c-c8db-494f-9b5c-b4c95425327f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c41d30-08ca-4ab8-b848-1f7a1ead92db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f22b00-d0b1-4019-ade9-2195143a2b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc729c5-7f57-4a7f-9f3c-ac210e9b9b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb45dc8-0390-4bbe-bafc-90ca6f2166ff",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800c9b19-ed32-43f8-a4a1-437583e0e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37d4f82-dcc9-41b9-98a0-d48023dd565a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4c22be-00bb-4b21-8f48-651fd6ac96d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdae60c-182e-4719-b01f-56fdcea002ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f89993-52a1-4ae7-b676-c8936d174cbf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b9cbb9-b23f-4d6f-9c24-b79b6b4a22bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee66aa1-66a7-4887-a16a-834fa7105089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ab5e13-dbad-4173-95f3-f65d71d59731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6fa099-6540-4413-b235-b642ff24153b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8872057e-b177-4e7a-a3c7-32e9f2ebdcc2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37409fb-339d-4d2f-9f48-578d815ba28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2e9c7789-70f7-4855-95a0-dc5a8b7697c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7b592e-ce96-4243-8595-b26997724268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1093ec3d-d68e-4290-8aeb-56f5fb32c940"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3718b2b-2a24-463d-83dc-2fb2f510fb7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0bad28c-5c98-48e6-94de-17c6eb5c1a59",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb194a0d-3939-4f45-9946-992f7a6e8e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b46b9a5b-724e-4bdb-8687-5b32ed4b9c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126937c5-51e3-44fa-93c1-ee6f6cad185d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7492bb1-39b3-46e5-9379-7648bbe9e32a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37bd330d-253b-4090-8201-c5bdeeb7dc2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "165a4f77-7e73-468a-9656-f39870ffc33d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8479a3f-3504-4891-b614-eba082757952",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e3b6ab9-f3c3-45a4-ae80-a0d62eebdd69"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eba4c361-3aad-4911-be10-0ab50691be52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e24de6c1-ef65-4e60-8371-85c4d7c9c54f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33e89361-2313-4346-b691-d20f2025d05d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05bf4acd-d48c-472e-bee1-e3314e14b7be"
                }
              }
            ]
          },
          {
            "id": "e9fa7fae-5bb3-4def-977d-6df487a5efc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a0961df7-10c8-4942-843c-f756400d6354",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db00ef19-cf1f-43c8-a018-bb515ea3fae1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71e66109-5378-478c-8521-ecab5e9073fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee2d2524-c989-4baa-8320-65e33707adf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e723d22-36c3-4c71-b7bd-b5ad6b5d96a9"
                    }
                  }
                ]
              },
              {
                "id": "61082d86-5f9c-4586-90e7-c488aba446c7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8095fb1e-829d-45bd-adf2-85b863ec782a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2eb681d5-07a8-40f7-b88b-5e8ae07d203d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b65970b-c7cc-445a-b2f0-2cbfa67d4405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a78e9da4-0a1b-4913-8ce1-40f26f1e20fa"
                    }
                  }
                ]
              },
              {
                "id": "868ce245-c8b1-4b46-b32d-8d8ff783af0c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9b3e059-71c6-4b74-97fb-d806f6b35489",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02657169-443b-432e-8792-48d9daf82d18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf172169-cb70-43ce-ab56-d6de6432b8ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c24ea15-7430-4b09-9d44-4b1f3fa560c2"
                    }
                  }
                ]
              },
              {
                "id": "3c086c4a-899e-42b6-a0f9-e75157764cbd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1401b144-af70-43d8-9875-9e9403030c0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28570caf-a3fa-4ec4-829b-d48e270ab7b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2eea1b8-fcd3-4dcd-87a2-2c66729fd745",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "26e3a162-eb24-45dc-adfa-707a49741233"
                    }
                  }
                ]
              },
              {
                "id": "ad9ed561-30ea-4602-9913-df9421642447",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40e71bf3-d544-4d8a-8476-006151629867",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6874418-0bb3-44d4-8a0d-ce433fea46da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c79273f-87f5-475b-8f4f-b0716a921763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a96e9e37-bd02-4ccf-8d78-bb1f67493805"
                    }
                  }
                ]
              },
              {
                "id": "30dcd07e-a902-4199-8c89-2f82a425edec",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aaa26fe-097b-4233-8682-173b6154a65f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aea9492b-8b3d-41c8-962e-d31857ff5355"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecfbd68c-46c0-49ff-9f3c-6937626f9e2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "95bcd094-14f7-4970-9c2f-aa9bee9f35ca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02bc107b-2dfb-4a39-95bf-7240585eb24e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4f89132-bcf7-46fe-b6e6-7996a9c4d29a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "70047567-f35a-4897-8e0c-d566ff273060",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50e5362e-68af-4d95-86e7-1998e7212e91"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d415fd3-b74c-4bb7-a1ff-6eb4858442be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cc2602cc-0546-41f8-9868-8492034e8d43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f765c4a2-03ae-430f-8325-790884d58b7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88383527-9394-4c43-87ce-9c546e592d17"
            }
          }
        ]
      },
      {
        "id": "31712493-f9e7-4f19-b3b3-494c15d0a81b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5608c955-b259-4e66-a1d2-d556c03ed987",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07d318f5-0d90-47d8-8b8a-d45905700344",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c760f20-c864-44d0-a843-9003a096944e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e2670b-a482-40a0-8127-8e7a3e16d105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133b2f3e-6e88-44be-a9da-b404680371de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc78076b-2ef9-43b4-9463-f626b83b7b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07c2938-b50f-4b04-8003-c6fc571b3716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4936c7-6021-4e51-bbd0-db776a148c87",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215db7b3-d5e9-4d83-911a-4e3ffbf46ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7b6cab-ea66-4693-a768-287c3b59ed62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b616dd26-3319-4716-a3b2-eb66e5b6aaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d7c5f1-b6b5-48d4-9952-b1560ddfbee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee059af1-efce-4966-ac84-304b339d7d76",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28382d50-41c6-4e6c-afcf-4549b0c02a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834a4ba5-5e8f-491b-830e-39310fee8cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2786e34f-cae7-480c-8b4f-f0470703dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29a8bfb6-2dac-4240-8296-b4e2230ad033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733759c6-6b18-467a-94ac-8b4d1bf21519",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87712197-c5a8-4730-8db6-ad201dff8245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c52b5d-11c9-4c09-9542-94e0550f56b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20049582-a0ab-4719-8bb4-7372f13fbf52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6403ab0e-2fa2-4c97-878b-7c4af785e154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7a1e26-427d-4fca-96df-7b3b78fb4c3e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f8d7e2-bbbc-4b5a-8fe3-23be3c280654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a006fbc7-5df1-4a4d-be04-a3d098889f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47876c31-8a88-4be7-b008-bc75f465c657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca0d45a-ba1d-4d56-8354-39dbaa67d0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddd8e21-2d8c-437b-84f0-ceb71e3f7ac2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6782fe4-43c8-46ed-a1f0-73c2803a50e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83b9d52-6892-477f-a0b0-da216f8a234d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc8025a-c96b-41b3-b684-4ae636cfd8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbc14c6-6213-4130-82ce-4116bc3ca4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3247d75-090b-4f9d-ad14-f201cbee7d83",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e29db1-a824-4728-9a65-faf59186c073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf8b059-25ad-4761-9c8c-57fa6d8bd5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e20ba4-611f-4822-9906-69842104c0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "13e97624-4852-4dba-9477-530613171fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7dbb58-2e52-414a-8f68-1b949772ed3e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ee38a3-5de2-48b8-9492-a336b600bc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7ddb4e-b59e-4771-9b11-9c91beba95ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30af5b1e-c915-4a59-a813-d411cfa7ba2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91ec69e6-13cb-4983-973f-27d7762200e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefda181-a634-473c-a83c-f8b5d698445e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f4ab3b-9039-4f4f-9d87-754d65e34db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b0f5bd-02c0-4261-b40d-28ba0d9c4286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29438f6-3272-4259-9171-803aa02c918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b91a4c4c-68d1-47a4-81df-63524e0adfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68222f1-4629-476b-8e3b-a344a899da5a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f565252-f860-4435-b588-e93a15cb51dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c10238-a253-449f-a435-66a2f70fc773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7eade6-3bce-4cc4-9b59-041a251dd78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92b21b0-686d-461e-bc5e-7fbc45daae0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b781d992-f7bc-434c-b641-779ba63fe428",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9a5054-2472-4022-aa61-bb797f17561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3085d1-330a-4b33-b324-115e332ca00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571a612b-46d1-4bb6-badd-68d0d3a75a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "93f9e353-fde8-48a4-9231-7611498ad0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a49b38e-d028-4292-a071-c395be5da85f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49364dc1-9de5-42af-b823-5b7816c56a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51dacccf-c95b-429a-85d3-a429e47c30a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e2e9c3-b377-4537-8cc8-6347f94ffb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "acd11299-2339-46d1-9f49-81c3591b0aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d912423-7d2e-4223-9e77-e19b6357b1e2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7e7a73-c09a-43ed-9418-de9a09acc88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0059ebd8-c3fc-498b-8636-1ae724aac5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c45956-d7a7-4d1c-92ef-629a2c0ac2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3962e129-ef36-4374-8ca1-68ad3cad4aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1bb5d2-ed2f-4e35-b3a1-802199856e04",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d794e8a-b126-4eb9-919b-189f8cee6bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c24d754-0e76-429a-804c-f15851576ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db80a543-94e5-4d64-9000-85a4fdd9a6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72b34046-0780-48ae-9d55-93920a7b484b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58edf64b-bbc1-46f3-8e77-59e413820e3d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8b9cd0-6134-4e0c-bab4-5786ff101969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2ed4cb-1e70-4bad-9e7e-c265f6fa8961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3074d2-22c8-4432-8b37-cd62e77c5e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a77a8be6-6f3a-4513-a9a5-dbd694204489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85b378b-1a91-4bf7-816a-947a07d212a6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99933148-1e4e-4263-a052-c94b4b6ff814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfb75d3-08bd-48f4-8f79-640be0d3742f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab83f3e8-1b41-4063-bc14-5b67a29f2bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "519848d7-c632-467c-9791-213b746774bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349d7da3-1def-490f-b73a-732a7762528a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8dbd21-1f77-4537-8cad-6578e75e475d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ffdd18-d960-4e08-b78c-6eb0942a0b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc3d14a-a108-48c4-b6f8-481d24afac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "98fb59ec-2d48-482c-8eee-cd60fb4e5f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d145e5-c3f3-4998-aaee-8bbf387a1787",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6520c9e6-d528-40fd-85ea-b9d98ceffe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c246470b-6eaf-4a40-bf9d-aebdfa6ddea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4769a0-a2f9-46c8-ba5f-b47ac42358b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "244d55e9-e79d-4333-9ccb-bcc341312ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99a13a7-34ac-4791-89d1-dc6b19019b05",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080b59ef-7bff-42da-acbd-061cca251c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695f3e75-39f0-4818-8f3b-7d02c5b7b63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9e36da-0dca-4df2-8b1f-0dac4d896d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf66ba8-54d4-491a-bbf8-793ae6583ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a670dd0-337b-4381-9ac7-d6bee2dbace4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d116dd5b-3a3d-4ac6-9214-e3b5c27f80f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9609401e-c6a2-4805-bbe7-0654d34c29ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5337e119-59cc-41f4-bb54-559dadf5a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2455633-461d-4889-a6e3-c31fb370015a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065a7418-c845-46d9-871f-e5ed362e8a0b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26274e8b-c62d-4df6-b41f-f5731f0d411a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae4f678-0aa5-45a0-b6e5-a8f15a393293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d580b98b-803c-4d83-8d6b-5a18ca46c84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3db136cb-3fc8-4112-8e29-7ebca59ffcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc1065d-55c2-4442-8158-81e82a8d1324",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317fee71-a51a-4c82-99d4-066721451229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed6571a-0801-4e2a-b1a2-6c9c8044cae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4976e5e7-f41c-47a8-aae5-ec86bd92226a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f57eea-a8fd-4fc9-8a61-f7cbddc1bc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a7888c-7359-4af3-8db3-5e5d860d7eb5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf8ba64-b49e-4ddc-95b8-e067be6a7585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe6906d-4ddb-45da-b5b9-2dcd93ebcda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a863f3-a45c-48ca-b28e-396038b088cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4d0144-073f-4d1b-939e-d849ab321464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338bb8ab-3563-4f18-b379-8f739a3b2117",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b713a7-d3ad-41be-800d-1f22d0189834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3786486-9667-44b7-ab4d-7c314921defc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72588a2-d906-462f-a8b6-ec6e49cd6d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba3e4a9-f16f-4b05-8391-19e4ce86ec4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748ac12f-51f7-447c-a411-6bc8474b3f01",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05be441-575d-4ffe-951e-3d89d1c59986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449199d8-3e31-4f0e-8dd3-0ce155ed87fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd115af-8773-4831-8742-ba05abb2de3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a517bb-1e67-4f1e-a50c-0f9e94c23ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6be0458-3af1-4bac-99a0-cd3bfcc97f25",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3480209d-0fda-4117-a883-c80fc041de16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6dbe8d-be7b-4efb-a97c-26b9692e66de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff505a8-e9b6-4d24-a24c-008613f16e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "854763e1-f124-4ae6-97b9-3823fe9af894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b92214e-4f37-4bb1-9afd-90015520bbf1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda414bd-1ec1-4814-81b1-d3cf21dce892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cbb87a-cdff-485d-9d16-e63466385671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3eec98f-8ca8-4200-98c4-d09a6e120f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a5e56b-a192-4602-b83e-82b95a194d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2100432b-3462-4ff5-8a62-8863bf832281",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ef64c-8a7c-4f20-9d39-cfab10d4474e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83921268-cb5c-4916-8c5f-4a1d2dfe4960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2001b1b0-5b5d-45ae-ba86-9988efb506cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec07124-8f4e-4222-a46b-1ac512829d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0784fa-e62e-4ecf-a702-34a18e50edf9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a19ab04-b473-4857-89fd-9689cb7f6da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e9a957-e3a2-41a7-bd84-a0833b2c77bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc096e42-ebf6-4b61-af16-3e2e59b9f4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b09936b4-f436-4942-a1e7-7a4d4bd4c311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dc66f2-5709-4a44-ba31-d92c4022a238",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd3786b-c2d4-429e-8a74-f0ba8c8d465a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249b7898-8a4e-4b92-a003-95f73950b5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b934817b-75ba-4535-8504-b7d55e5f29c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6391cf92-fbc8-4e75-8f94-667775429ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35792529-69e5-449e-b4ba-4741a124e74d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47edc65e-1562-4fe6-856b-3b0388dc687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49eb2db-8da3-409a-a216-ee609600a59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2348e74-2e82-42c2-aca1-150ea8c89654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6b1982-3a07-4eef-8c2c-065e16695beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62387fa7-9e43-4cf3-bab0-32d258e8fc67",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5708c3-5c45-48fa-b250-244b37039911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf28393-c04f-46d5-8c48-f1f0d9e036c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fce32d-6a3d-4324-a39c-8eef58955b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdfd142-9272-4ac3-9820-46a1b6f9c71e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5762fc9-908b-43b9-8585-3ae170c7c9fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c515730a-0457-4a25-b1d5-0a2adae114c4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcb09e3-e312-46f7-b2ce-be17aec2cbad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a3eeb8a6-4717-48fc-8e70-e41207695d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec34d6d-98fb-4f23-973b-5bb582122c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4db22802-fc7c-4d22-a6f7-36c588d03622"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c46b379-517c-41ca-935a-8e170e7a6260",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "963c9548-3789-42f8-a8b5-744c3de047aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5d22406-bf12-448a-9682-1cd7ff7a4432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46d1a9d9-a184-41cb-a763-d675daffbc13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a78c9007-5540-4050-90b5-ba47a55e763a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "70274b1f-a6f6-46e8-a560-1e5842227484"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1d94452-0be8-480b-940a-f0ab535f118b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "412e8f2c-a712-4af1-8a2a-e5eda546c040"
            }
          }
        ]
      },
      {
        "id": "d65037fe-42f1-427b-9d39-fb9508060ed3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fa249e5b-332a-42e5-8027-44f1cd845b08",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0625622-c7e3-4cc3-90bd-919d7c871ebc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "521703a3-1180-4661-a4b7-229448d372da",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21b779e-597e-4d0b-a7af-b4673df78adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19234c23-da2a-4bcd-9ccb-7c6657131b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1e7522-4e75-4ba4-acc7-dc74fbca7ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa08fd8-ad7e-4e4f-b1c2-488065573297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fd09cc-66db-45f2-9186-284e36061ab0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d6e20c-ea1f-4c59-bcef-20670ee13a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773e138a-0438-4294-ad96-1d35991ad51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5620a3-c09c-40b4-b5e7-694560d30ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb15df8-f1bf-439a-a300-d0e9ed9bd9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8013b21-0185-4d27-93ac-b45f79e7ac80",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19edb868-f4b7-4510-89f7-2ee5f01914f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2e3a23-5e31-453c-86e1-6849378efcc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4327291-867e-4ea6-9e2a-1b6631f43658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1a3057-b63a-4624-877c-fe9434e846c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1913f0-f238-40ee-b807-52d5f526f2a4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5cca47-c2dc-4c56-8624-b06ce32efaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dcfefd2-6b71-41f4-b2d6-5daeee53237c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc02f882-be44-4d04-bc11-b7129493d20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c878108-8498-4694-aeed-80b43087a4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511af484-2ac8-444f-b253-c02426bcafcc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87a0171-2f44-401c-ba5b-0e8ec6fe7c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f7a5fb-0ef6-48aa-8fb9-99b4bcd4d906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14f4254-2836-4e71-8eea-6709983812e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "350a9679-f626-48e6-b178-135a37877e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49758e80-c2ea-4f72-8a2f-a501da05cdaa",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e98bd82-6a64-4721-95d1-0fca0bf7a3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111f7a4e-06c5-43d6-b94f-2ac3c3b626e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7a8a24-c06e-4786-9d55-6c090bc11923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf747c3-b050-4f97-91a5-f8d9449f64a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee2f15a-f23b-4d95-b789-59a73e6bb4ef",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecec31f-ffcd-4cf2-84c7-e106901eb9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356ea412-b29d-4259-9e70-02ee975c6430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e42ccff-756c-4498-95b1-1a7603be59ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb97799-2a9f-41d0-b81d-25f339cf0c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c16c02-ea8b-46e4-86e7-08a7507b7068",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dff4f4-b9c8-416f-a867-5e47b56fe32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cbe674-bfe1-4b74-809a-cef01f448e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c0123f-22fd-418e-ae61-b1c0d239ac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "447d3e24-44a8-4f1d-84f5-7c8c9ab058b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b2c2ce-8bc9-412d-8fc4-92808ac854ec",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0fdc7d-71f1-413f-b310-f3d208e260a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4d7ca0-fa2a-4913-8861-0ba088715312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478a72ee-b0f0-4223-be27-8a61c40239e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8031ec-6c32-411d-a60a-6bf050018730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05beb8f8-6bb7-46ec-8210-98b3557320b8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1da7a9e-6b7f-4b67-9048-c4efda721996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303e15f3-e9cb-4346-9a4c-b59859f4e6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57cb5ed-599f-4be4-ac83-1b09c5b2c1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89a94b72-4722-4912-9a9f-a4130c3cdeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b027ca5-c007-4bed-9ae9-acd21354847f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dd472f-f34f-4da4-b90e-1688f20e1f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a0aa31-00a7-4431-aca2-d09640b87c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff612b8-fd93-407c-a9be-ab088531b49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a64bf2b-7bd6-48aa-9879-9ea371b63dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1939d7-ff42-4aa7-929b-f533b4dd9c62",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce07a87-9dd8-4b09-957d-ddce8b93cfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b0a823-ce6e-40ee-aa1e-9973bed91c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033fef26-55e1-45c7-a3e1-81b873388a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b06e8cb7-2ee1-4b94-8d41-008bf1f8112d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c13bc10-8c54-404b-bde3-6879e26e873d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f99279-d797-4297-afa2-f2ef5a491778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c6cc99-2828-48b8-a82a-433737ba955f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fb89af-93d3-44e9-a0f0-5423888915cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "991493c8-de93-42a8-8a31-4ef6f8400e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c65320-b80b-4271-a0c8-9b030a2b0cf7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b3bd7-08d0-4f8e-9a9a-f5161e88459a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bce772f-5ad5-44e9-9a91-f950ed518e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2acb8a6-1384-485d-85b2-e4890121ddab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "23fbbd55-45fd-4f86-a231-d1949cbe7683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1805bc9f-ad2c-4e94-92e4-573369d7dabe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cc881d-75de-44b5-8365-bbcb3658f53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f0c288-dce7-47d2-ab7e-1eed4fa7074f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f64321-5fae-480d-ac42-806ec3fb24b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "748ddb42-9618-4c39-b253-007cb7b32330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d85c01-6994-4be4-92e9-8b90fdc7932e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e727a5c-b557-4dcb-a598-74157778a4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75134e34-4dcd-4912-b6a9-169271096502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0897d509-2e90-45d5-8fc4-b7814fbf710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c020f85b-8be2-4c44-835f-dd62fa0f52cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3b2dc2-1b4d-4892-913a-404da8e06df1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49efd58b-52a6-4f1d-aadb-becd241530d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05e3732-47d7-4193-ab93-7505071f1891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267e3bc4-b10c-4c6f-928f-a1286c3ff4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e500caaa-d6e1-42c7-b250-4d6a59f049af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bc79fc-7807-4395-8364-a506ba02c82c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc05a34-30c8-48de-b00b-92bf25f50d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0481d47f-0077-4c58-981d-60cdab92ffd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356ce319-2f24-4179-b1fd-8b2a1e28b06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e6d31e-f09e-407c-90c6-707bab21e3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccea5d5f-73ba-4b33-bcbd-8cbf02aadab4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b0036d-61b7-4a4e-b6dc-5b43e75aa724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f8cb83-a41a-425f-9945-56c609a2baee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b2e23f-dcac-442d-af4e-02236c38495f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57995126-7706-44e5-aadc-2e0ada65dc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251c2ec7-89e4-4fde-95d2-f59837905cfd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6a4c93-b43a-4b25-b825-35e0dfd0a1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa730c29-1f3c-4a1e-a48e-1be0a96dcdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e387308-41b6-4524-ab52-e31b9bada560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "193a3cbb-24bc-4d84-859e-af7e63c5be98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5ef3eb-22f7-4df7-83f1-d887b0ee6567",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1819dbe4-18b1-42a2-8e45-5b0b80c58149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80174360-adb8-4bce-b9ab-92d52915daf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cbd454-cd3e-49ad-93cb-d6e13a088335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03c0ba47-c72b-4a8c-8c18-42c225a8f5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ee00d4-3f7e-4b26-89b4-0fe602ac0b8f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0657319-b9a9-4e07-9dc3-57ab0411493d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca243b2-9411-40d1-be4d-f3f9f73e29ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c4295c-2cd5-46bc-a0e7-4e68a7370655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "357fb7bc-cc87-4d1b-96f8-8b2d88ba6dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e86b41b-fc5d-42b8-ac0b-b7dea7ed79cd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41b2088-937a-4537-993a-a1f8be14fdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139b264c-64e7-4a70-ab20-4cfbf99a4a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe72a85-5dfe-4748-983e-d42b7277dbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab59205-0fb9-46e9-98ca-7ab127a5ba55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c940ba8b-ec6a-4af6-a3b9-2fdfbb61b4b9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7800b7-2302-40de-9ea5-0a6620804f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610a77bd-ba5d-4aad-b414-a3e05f727d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6dc54b-bea2-4520-83f7-7279f6f0f3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a411276-c6e5-4000-a200-d7b2463317fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34ffd83-4785-4be7-8f17-ccdd676b2276",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64c7444-c8f0-4633-b5b2-c94c551edd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6246a42-03d7-454a-90c6-3fcc6eac8bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a542814-4fd7-4795-b483-daf70e4fb236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca45b1a-1399-4a80-a64b-0dc6756bdce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ec76c9-d75c-493f-a87c-82d2d12cd449",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9828978f-e30e-46aa-a513-1dc4c893f32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39613c17-ffa8-42aa-aad8-349f6466661a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcae39fe-639c-45b2-a85b-7ea292fd944b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95112c6-6b03-442a-9323-84395de50de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9f8d09-424b-4487-8799-69965db7337f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fb7a21-142d-4de3-8dd5-41e02d214246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f65a26b-8ac3-41f8-b1b6-e9ac9973d689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349369e-1aa7-4187-a46c-bad8eb8ff968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222a26a2-7b00-4e10-a15d-9c19fa418abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e0c10d-161d-460d-8d87-56981e890399",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e97a1fc-3f59-42e9-991a-44a29685047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e96805a-ae10-43b1-a871-a01c783ffca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155083d2-1da8-4aaf-a087-967100cc8b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6a55af-a52c-448a-84fb-0a039eb1e6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4c4dbc-35e1-4c7c-88a1-11721db16031",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3fb985e-b29f-442a-81db-586dcb3bc447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a136327b-ed04-48cf-b61d-8ed6312d13ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541608f2-4903-48c8-8ab3-8e7156243cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70eba95c-6582-4d46-acd1-d3188556e57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7cb4eb-5bea-43e5-a5f6-99d3b3ec63ed",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73af047b-afb4-4ea2-9497-4fa450c22bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950529e0-9491-4f4d-9bb8-0e4335d6aebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e02cad-7ab6-4805-a00c-02dd9c8951b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49eb3235-5448-478c-b9fd-0e4eb2a6069e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24efac45-201c-465b-9537-6ec8dbec14b1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba29da9-6f9f-4b7a-b632-964ecb6ebefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85eed16-304a-4b8d-b6cf-c17e58262d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8f734c-09e8-41f8-921f-92eab7fb799b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2253df15-350d-4b21-a78c-4ad57944eb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630c14f1-8a3d-4793-8f66-c508b08d4e51",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee10d18-3d89-481e-95c3-35da181a97a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3edeceb-3e81-474f-818d-5d26394df07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7885dc12-4b3f-49a7-98cf-da2fb6e53c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ce8f99-b273-4a17-b14d-0b3eef12bf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2cfddf-3cbe-4717-bce5-321219447b6d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b30211-bc45-41e3-8c36-0111e61ba92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92884c2-521b-4e9f-aac9-da4de436c809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff58671-781a-4501-a406-9340a7cf2309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c1d379-8327-43be-b3fa-7097b78aab41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ebe996-81b5-480d-8d7d-f2c1d7dc2c10",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa04530-9fd1-4b60-be77-bb502305fa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c809d1a-327a-4834-bd31-fc334bfaae02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d9ddaa-a6e0-4c90-86b3-5715b5e2c7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f960397a-3720-436e-aaa0-a78e108a9e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1172c5-dfff-4570-84f2-211a82aafddf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce498ed5-d856-44d1-9e54-09f0f6c54348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d02acc-f9da-4c38-bcf2-93d3838728c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2909586b-18c7-4fbc-9f39-176e729e94ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "066ae080-8ec2-4631-a9d6-2fced077532b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1511b167-15f8-428b-977b-ebeeccea5161",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d22a2f-6c20-41a7-a7ea-80bcc7443c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6db8e8-2888-4959-9a91-f672817eb0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbcf043-af42-4bad-b665-83d97016778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c073ebb9-befd-478b-8afa-888f9098fa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000414ad-cab5-442d-a45d-4cfad44d5681",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4feac05a-f40d-4cbd-b617-60dfca6ccb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04062d42-6ae3-4d99-aa7c-cec65c8ad2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc9dfb5-41bf-427c-95a7-549cbf4f48d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4e67bb-cee1-4318-8c10-a1880cd138ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98296054-8502-4ff6-83ea-fb1b4f8c5acd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e9591c5-87db-44f5-add9-59f997e0d770",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fea419b-7124-4986-9914-b1f0b877ab13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "55889ea7-385e-4006-a9ac-bc2e3062f077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4acea7f-4dba-459f-a040-7bb9e55270e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3a79316-8c66-41ea-b714-9743cc231cab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15a34a9f-abaa-424e-9aa2-0942a637e15e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "431ec7c6-18de-49e5-bcaa-bfde10b94814"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e73b0283-09f4-4743-8f96-c37154e80f8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c121645-f95a-48d7-b8e7-0f2cf98ab88e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e3506db-0a8c-48e4-8f30-3caed1bfc624",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1f3ce03-f7c1-499c-8488-8df414420ed2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0b53497-fa60-48dd-b265-311c7a8c07fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e696448-5fcb-49e2-b0c0-830e560d163a"
            }
          }
        ]
      },
      {
        "id": "03838390-7ec2-4d4f-80c5-12a43389aec2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2eca7fb1-1896-4f37-8b81-6bdfaa7d005d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2796335a-8f94-4360-a133-100371808a0c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5d271cd0-6250-4547-84a4-6400c74fa2c4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082a189a-f468-4e9a-8ec7-4d1f2061748a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8918438-9b99-42bc-8ed3-bf5ecfe47a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad12e88-4d23-4d6f-858e-530ec6d19d5f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495786a2-f2ff-4020-b97f-b7ffebac0c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe0a932-753d-45fb-b30d-ca49262027d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea86b491-3eef-463d-b1cf-8751dbb4a471",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea39ef1-fad4-4394-8674-1df273db6772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c82907-10d8-4d45-9808-900e6071d701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421f2e7d-af71-494e-af4c-310fb5efdb08",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf41c68f-5247-4ecf-96b7-50efba22e508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1414b9-5957-47e1-af8c-76e513e7cb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81ec6c9-d55b-4df0-8e18-f2837711ec44",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd643a6-a8b9-4ac0-80cc-3b83ab1ad8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "733fe0d4-b908-437a-8493-3a50a0c88616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6012614f-ed9e-493f-bc2e-56f20cf31d4d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2e0d31-c5cd-4840-89c1-340dbce553ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56b33da-b346-4fcc-beec-0de0509c576e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef3df94-2415-4a11-a041-34cf23316fe3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f4f8c7-e0ff-411a-87c7-2086fc2fba7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49dfdb60-6070-43e0-913f-6f4832d93048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e2468a-bb6d-4a55-99d2-039332b005a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b95988-d7a7-4d8c-9491-b0a59e862774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10c023b-0dd3-4a01-a9cd-f52ac6bb0181",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7cc712-b0e2-40d8-be92-3343ecc564a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056cb645-8ecb-4411-b17c-a5fc9cfa650c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c6b42d-3909-477f-8a1e-2b094fd3432b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2800d51-e22e-4177-9711-333d41e16a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c3462b-d0a5-4912-86f3-4f1c8dc828ba",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aef9bf1-9ee1-4995-a629-571c84c63b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ab2184-e5c3-4dde-ab33-c941c68bfe7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7839b35b-82d5-4650-a6e5-f38669de3d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cc5de2-c917-42c5-9eb7-82012620871a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f9ca0e-4ece-47b6-8097-1c59068a36cf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c93a8c9-8110-46bd-9ba1-866f22d0dc00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3ea8050-c1ac-4e05-9fe1-416aae1a3deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72388ec8-b798-4a52-b03f-dfe9a0f7e3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c4a6f2-c34a-4f08-a66a-4ecb9c66f537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e0b493-0c46-4865-a8b8-5829f1c261dc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f4f786-8fe4-4ecc-9aed-d9b6b312a323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cf6a4a-8eec-4bee-9dcd-2437c9380704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f348fcbc-04ac-40bf-b026-6d78d63bdeea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626e72ca-e86f-47cb-a9ad-8d4929827118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed842d-9da9-432d-81b4-7b4bfe8b74f5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d932182d-3f06-4670-9b7a-e0999f11ad5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bdfea6-42e1-4f0a-b0fd-5a03f046f304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35f9309-b455-4bd3-91b6-aed3b422f8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabfba68-9c70-4afb-a5b6-1851f68cfe39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde8e0b2-5642-4ece-ad08-0e9415a28bc9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c7bef3-7076-4f49-8ca3-bdd3d15d6717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b8a61d1-1bcc-462f-91b8-7b361c54227f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fde6668-7a74-4404-aa87-28b7ac7ce822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34a6364-8357-45d2-bd9a-c86114fa675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6413c0de-50e9-46a7-bc8e-29254cb8d49e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971c18ba-4894-4d0e-99e0-caa7c6bddc64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b7a0e76-7129-4157-96be-8a38fb252c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37a096f-5582-482e-8da7-be7d180f3cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca375b5e-9dfa-43ef-93f9-75f4204f0a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9577fb-51b9-4556-a9a5-324221dbb1b3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8656f2-e2d4-4560-8662-0deb68f036f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f983af-3b45-4e29-b81b-489ef82ba714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da2323d-50a7-493a-9543-b3aefa286abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b294af6a-f4fe-41b9-9470-8c0120d8d16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72d3142-9626-4d30-84ea-887d1684bdc3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f6b764-8247-4cfb-ad8d-73594916f26f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5372036e-e2ee-40e3-8a05-f10111d68c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85187fe0-f109-4be9-b822-63d1da012d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141950f1-9d9d-4360-9f68-346fd7752040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61b3cd4-884a-4a8b-b162-7a353389fba2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3b99da-24ac-4b83-b066-67b97c7b12e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2caf697-4725-4e04-a701-de0d34d60d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5731cd1-b25b-4155-b49b-bd0eacb29d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f199d6-157b-4dbd-860d-b3425a0e7b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ed6bf3-70c2-44a9-a892-4645a9f1520a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a809a4a7-f1fd-451c-9fb6-fb4a98022d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582e8080-ddb9-463d-9605-972b1d329536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1614908a-c6a2-4f3b-8566-850d4f0fdd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e49325e-3b19-40f4-b626-3f362d329141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fb8989-35de-43f8-8213-52a4539897ab",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a24c590-5102-4090-9b61-f8c5e23bade0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fa2185-073e-4518-a61b-afffd87584af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a60fae-9964-43a9-8097-bc664807a005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976280f9-aa64-4ed0-aad5-4f5ee8f5624d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dbfd45-befa-4734-86bd-d62d3d852102",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445ad925-fcdd-4f75-b46f-c88ccb006640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62fc1d1-78b4-4351-b517-5e478a67f920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d28d14-2f4b-4ee1-b800-1ab475b14008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c569e9-5d76-47d2-8e9b-2546759d7ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157a91cc-59e4-4887-bc1c-45abd8023287",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a0efb9-af12-455b-8427-26abee6cfabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f6c1524-3ca6-40fd-88c7-b2c43b4f01e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115abd58-29e9-4baf-9145-89537c77d977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07422273-3ad6-4daa-85ab-e275e712c4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e197ec71-b2bb-4635-81dd-71d9895ff0e0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303fe68c-c97e-4de7-81aa-5bf0a5fece96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ad6727-7266-4c2a-98d8-3525c5e07bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edbf852-3d27-440a-9aa8-075388fb70d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b581e41a-dd2f-4b62-90ff-c01fe5219a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe5bdeb-6ac4-4420-a1f1-e90f49d1e9a8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d71b3d-ccae-492a-9bb0-0e9aac723577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0095bc-14c8-42a4-b4b3-9ae526228e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8331a0-bb37-49f6-8388-4558ee17e1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "713d976b-6deb-4bdd-b00e-52e5bcaf8aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f81a90-1666-489c-a7fc-23302ffebcbc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9794c6-fed2-4a47-a1cc-2c24c5c6f729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9721d3c0-6514-4d52-a166-e16299ec5c6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea83be5e-a814-4af8-a8e4-c59d70b94198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39547cc-fcac-46cc-872c-d493fc1332a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77ae6e0-c94e-4d95-9b14-bbb4469a5e85",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd9304f-5259-4b5d-a7f4-c74182f83bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f50976-654f-4ce8-b41f-4e8d88bb4568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6034656-c6ac-4b7c-8ea3-6ea6b640fb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c4d2ce-524f-4115-8f0a-edd8498448b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4588600-21ae-44da-a2de-550370ea8ab9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d9ef83-6ae8-4ec5-87ee-d7379a73e5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73664ef6-fb18-4c9b-9e20-18fb021de4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ffd568-66c3-4140-b181-dc77d73431c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0188980a-788b-47d3-917d-f5350eb9e9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecceef89-ac32-4995-8832-f09f4aaf51b2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2236282-6adc-47e3-b883-88ff68ad7767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8405f329-7500-4149-8698-e1a40215ea8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d146b58b-a606-46c0-88d1-39432603e7b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec78de8-2296-49ee-8d0a-9e6216a86f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf540df-a610-41a1-8a82-367994e20fc1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ee4322-b5cf-4743-8dae-ab0eadc1a458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a42959-be0c-4f16-a366-3c6a42260ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d44ee8d-02ce-417b-bdbc-c850edca44d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1dea679-f8a8-4d62-bc6b-9b32aa7a6507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ee05d0-3eb7-4381-bc67-0634a0467639",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff1707b-dcc9-4586-9921-ad8543cb30be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8390aabf-7ec1-4bf2-ae59-54b595c042d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94096d1e-19ce-4e1d-8c47-28a5c72a80e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8847cf15-8394-4cd4-b6ae-4e7b6da90071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f579b178-8657-496e-9d2c-31f93b147b51",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be4ff62-8b62-4b2a-801a-1b41584f5a66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d9d557-dc84-4a1d-ac3a-474e41e7dc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b8ecfb-dd04-4914-bef4-b9c53c4dd612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdbc932-78fb-41b7-821c-451adb7d9a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0ee4e6-7d4c-47e3-974f-9380aa0f29d6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7b0653-14d6-407b-a788-3c689f3aa059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217f8f25-ecf3-4bf7-8951-1a25010c0f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8131398-52ff-47c9-abf8-1510ac13810c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b242b1c-9948-4279-9f2b-242d0363bcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863c0743-6515-4408-a4bd-0441ef8459da",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bee0cf-d959-4fca-a1a2-2f78afb56e29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a7a602b-c36d-48ed-b136-159342acc8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286564ee-d6da-4349-8654-de3354931cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec1b652-8128-4cf1-8fc2-7d684fe0c9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe1283-52a8-4df1-be79-9c4f279c8c89",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e763f5f-0171-4de2-99b7-83287e75bc22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5884cda-7b25-4048-81a2-4461168f1354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9462839a-0053-4ba1-be9d-8e5286dd0bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40478f90-94e5-432b-a6ae-c271ccdb62f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dad78c4-d400-4eff-a4a7-35698d0a20e5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae1b602-934e-40b9-9b62-27187a6e6196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "031712db-d271-4d92-a029-f6fe1e5924aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fd023b-3869-44e3-8da4-f02402b9b555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6aa8f5e-2bf8-47e2-a0e3-ae3b948f7c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04d1f52-981f-4ecc-a433-0d00c3737873",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b57c25-7ec6-4fe0-ad29-66d9c36fd701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337fcdb0-62bb-4ec5-9785-604cdd0f3657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0930bc8c-5c25-4dc0-9214-d8a7a4df2f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e226d4-3584-479b-afad-fe4a97a83702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0814f1-4f4d-4614-b95d-b925b37aa390",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2827dfd5-d983-444c-95a0-22e20876c77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ebf18d-692b-4e3f-8545-13a7dc9e849e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c399a5-c308-41f6-9c07-c2fdf5a2e9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7aead1-5ff1-40fc-91d6-2f31516c35db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253dbff2-36e0-485f-bc12-d41d1f1b2b08",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c3a992-4b24-4d2e-be6e-782338927c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e78731-e4a8-4e72-939d-94688319db65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "249fa013-d250-411b-a798-47f560e771fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed5554f-9151-45fe-a8a9-e6d56e913afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a857685-1ea5-40fe-8a5b-6edbe3ce72f3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6813dd0d-03a6-4a37-9f91-73fe7d5f129c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07867958-5045-4556-bc6b-50d681f690e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a61d60-2ad1-4b64-86c2-6131da1e9a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb9237c-3837-4cdb-9707-37214ab29e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d028c4-8612-4887-b4db-4485e90e5b37",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8008d5-6cae-470c-97a3-783db81acb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45ed109-4f50-494e-8790-b387636cea3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510f07e1-3988-4fd9-9d1d-1c207da4b0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6044a4-8433-4ee7-adac-e3b26b684986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80efac02-1f1d-45af-8b1e-484740ac59de",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d08574-ba13-4144-9179-8398486d7905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc5f9a1-0a62-443f-9221-63a0905658e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76e3dbf-534a-42d5-9c69-99b7049d772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855ce77e-78dd-49c8-8d2f-b9958cee47ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4240ec-6c05-4f7b-a8b0-54c4025b0874",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e319ee5d-d396-4d34-8f55-d6e13a570fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7cef62-1d1d-49c4-90f6-842520eba203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fa6510-e32c-4b4e-917a-8e62cec4d5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de64a29-9a2f-44bc-b17f-c37c8353ee57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78414830-ca31-4ab9-8580-3db7f0c5cc13",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586622c5-828f-4c38-8d6c-587bef047687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e4b9a3-3f8e-44b8-9f3a-1399fb6d4f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b77a44-749c-4aa5-a2c9-cc880fc7a1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698e3f74-d0d6-4d76-a0ba-c6cfa2db1e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86219698-22e8-4591-a659-c1281812ee43",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f84361-3f19-4054-bc4f-0c623a8f35c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8f63d1-928b-430b-8973-79c7fb37f565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e822d601-fa74-4ac5-a7b4-7cb4d55ceb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e67514-60c6-4d85-ac35-2ee7c08bbcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da9334f-68f7-4f2c-8fdc-5f572d8dddc9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e0f8a8-e167-4ce8-a5b4-8a6538204117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856b56e6-4d8a-4dc3-a4f7-b608ff0d9340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8949ac9a-6afb-4b2d-b047-916dda5091b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a279e9c9-4c6f-4419-8d65-036305d72854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19eda373-96ea-4ee3-b2a9-0c964428831f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8dda90-d333-42f9-ba76-1c534cbf1434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e320d5-975b-446f-88b5-8a2ddea67c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c253dc80-5e02-4705-a468-6ab8c49ede15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b172607-838d-46a3-8d95-06454d489ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6600ec-df36-4724-8d30-d482b5789fcf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dadd2d6-0119-4d63-b8b9-6c20b2b40371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9dfe322-72df-4287-adcb-dcc411ba5daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450f2b7f-1334-4e5d-a985-7a72cce9f77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4db324-afed-4a2a-babc-5edff4a867bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24353714-f02d-488d-b530-e71bdee0a0ec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70267f50-f688-433f-8a55-73853175c0de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d77cd25-225f-4063-a27c-3cd0a90b591a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67d4faf-f9a0-4e3b-8011-106725c706cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75906d03-15ed-46cf-a1ad-8915117bdd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b73d09-fcbe-4a36-8926-6a6381a76a0d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a42fd83-482b-4f24-81a9-a21468409af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b89db3-27b2-43e3-aeaa-c57a90ea75fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732814e5-7849-4fd0-9d7c-c47a9294d270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bff515-7f64-4c40-9649-cb13bcf6c1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d340a53-051e-467d-a465-35fa64e9de08",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f882bb3-c8e4-4d1a-a09c-3ed1feee34f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57562f2e-c1cc-4cda-a1d7-1bfcf9310b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea7fcef-a6d1-4cd0-b281-37ec3515df91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9ad10b-af4f-4fcc-8eee-454e021af44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4124a5c1-e68c-4b21-af76-ea5c57021780",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac499ded-ddbc-4d60-b6ff-8c5ac38c6468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ef3dfb-fd26-4a8e-ac9f-076645feaa19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c99869-1776-46ea-8b01-1abda37bebba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1d76dc-e823-4956-b6bd-5f349ef11544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8a3a36-2ccb-49a3-a4a1-b1b0d002c873",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2998ee69-cb3e-48b0-a9a7-8bf741099faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c39de4c-8b2c-4e40-a61b-8322633724b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57d53c4-47a6-492d-a508-101f47a53579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82fe0e05-bde1-4ba2-a14f-a6cf30bc4fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311385b9-c310-486b-b8d9-4f203903b7cd",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4781f9bd-9b72-4a2e-8879-df3cb80d9653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6645af-91a8-4a71-8786-d8e8ce0a3f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b78c146-5d13-453a-a1d5-85348ac9e60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fbe7d1c-1f61-4d9a-90f7-838b6a6bcb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa0f2ef-360d-44be-8513-7c0106aadaa1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f88d29-81a5-4238-8fff-429a9f80e5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "939d48b1-33f1-420f-93a4-1ae8037d6f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc114623-981c-4318-86c4-41babfbb8559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8e15bc-2c3d-4245-8339-91c9d960999b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c5407b-a798-40f7-a45a-8ef0e2205334",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f23f594-b32b-4bb6-b9f0-40894d2d0260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb024db-d979-4a0d-9a4e-6e4b503c0b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31de56b7-c318-4e79-8675-33d9decb482a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524a3713-6f64-4098-b80e-a3ebddad9964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d38074-0fb0-448f-a48d-dfee80bc26cc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d50e200-9240-4a68-bc68-6e6248529f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a6d304-b602-42e9-a81c-6659df3e7353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603797ff-8439-4b44-ba6d-256575806e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e67743-94af-42ea-8423-6a5066f289f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62da78a-c07e-4521-a756-aa47d4e9f487",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da8a8a9-9a5d-4c3b-bfd8-4d1763193321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7101a7c-af8f-417b-88d6-e89d5a1fe61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d59cdae-0d02-4c5c-9078-c413f429c755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77364577-d48a-4f62-9e52-79b1fb20c706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f9c351-cb3f-4697-91f1-e17b8da119c0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb2e5b6-dffd-463e-96da-f59ae23b21d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8153383-6208-4a7c-9aef-c80bd15bb41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79db4f25-9c28-4e6b-ac9a-3304b0f038e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df6f3e7-08cf-4dd6-953b-6421b21e474b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab39c91-5113-42c0-819f-1d809bc89b6d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d95981-4b27-4b27-95ef-329e3566f6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6cf5d9-cffe-440c-99b1-c1392718defa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63edde81-c25f-41c0-910e-2ef939575854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4d7e6c-57c6-4394-89a7-fd8740836662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1341b2d1-394e-4fda-90e1-fa6e8c3cd36c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9511bb34-eabe-4512-8d14-e2f5aab7ce40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f1ee1a-78d1-455a-8755-212f95b5cdc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e21a038-21ac-48b4-a772-dff1838e84ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b701f2cf-b1ec-4ad3-9ba9-54a0b6ef1e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e8fe9b-5ca6-44f4-9969-c0935018c87e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98032c34-3759-4fc1-b865-7cbe8b95aff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87271853-08a1-4f36-bd3d-bddee9be055e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ae282a-2121-44ca-9130-daf292a737a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f88568f1-bfc9-4960-bc5e-4c5578f640b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8db69c0-83a9-43a7-8a64-4f32b2a3b787",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa3287f-f49c-4e7b-b9b6-cd0736b7dbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c37562b-65da-4332-9c35-329c2c9f0ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d7578a-f844-46ce-9999-874430a14900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068194e9-82c6-4d6f-9d5a-650662ceceef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa7569a-b000-46d7-afdb-c2ef717e8106",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635c5ef4-f859-47e9-9c12-ac4d5b98930e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6f8e21-a11f-4ddf-bdf9-2c1c16fc7ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586c2315-c2cb-43ad-8ed3-132cc712d6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ea9b85-0775-4c41-bdea-00131bc91191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95948d64-14d9-42fe-95f4-43bb773bcb04",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b7f07d-ab5e-4820-a083-8e648c7376a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5a4d20-4ee5-4eed-b58c-b4c062d20241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bcb9e5-a6ff-4451-9182-e46b8c8adcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ffa6f18-9973-494f-bd58-0c568682ae47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d21da81-029c-4eb8-8a68-8b4b46b5fb95",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a9f617-baa9-4862-9acb-076c303ceec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "363ca795-5d10-4ac7-bffd-e45ede00547c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b4a60d-9234-4dbb-b004-a9dff6e10928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a847f37-c891-476b-9cf1-ff14b7878a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935f81ec-046d-43ee-a83b-bc17a12b9e57",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d6a21d-6b6a-45e9-88ae-1558c0f53f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd406bd6-83fb-4e1d-8325-30be847cdf30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab83cde-cc9a-4466-97c9-7edf6c9b9818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f08d5ab-6cb7-41e1-87b3-6fd212d43b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28de5f3-0cb2-44ef-b640-00c43e76b234",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87089205-fbed-4f43-a6ef-8e4f7be4bc3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "304e241e-4c71-4049-b97f-5fca9b415539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1357690-8d88-43ff-8d09-12a3077e4e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7958b070-33cc-4263-a61e-01ca1be7ecb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfadc23-7f6b-4c6d-9c3c-4c081035451c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a715f1-6cbb-4947-b282-f3ec0b96d0c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4694dc7a-9908-4602-8b2c-4828d83a3eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc2ac87-0ecb-43e9-ac90-394881130906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3ffae5-5f91-4ab3-b175-ec58ef82e08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b7b2be-a64a-46aa-8569-b22835ba72a1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ed6d79-3578-451a-a3a6-bb4e929c348d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bce2718d-6fa4-4b97-bcc7-f4dca1debb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333b9e9d-5acf-4fa4-856f-c116b191bc93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37007ea7-4a49-45bb-a2c7-7bbb5b91de03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09017c4-d00e-4d30-b599-0fcd5b75ced3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a28de3f-41c5-4ae0-b24a-8edb91be4287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e36e66-bb43-486b-ad54-1b1b5556efa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53899647-cd8e-432b-a73c-715ccc048e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2003e91f-1c16-4c40-9a6e-b02f96c0cd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fd7090-57a5-4748-8217-8f113f34f8d2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e1c3c8-dbaf-49d7-a2c5-bbf5ac6336ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d19982a-7b57-486f-9583-b3dc0e03e503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfae3697-87c2-4db8-9e06-d15a61d0d6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7c634f-b494-4d12-b825-cad219b07e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc866133-ae38-495e-8e49-07b688a33f76",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af6598f-caae-4358-95cc-c1497c03b454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b20ef49a-c150-433d-842f-dbabba2bc4ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4c78ca-1ab6-4379-8dd1-2ae7681304e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cfb376-79c2-42b1-b7d8-76b793ba6b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4ddfc3-1660-4254-91ff-f87571d85d77",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fb9d7d-f47a-494c-abcd-a3f26b4e78d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b64b916-0485-41b0-bdb2-66f45989b751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8ca8b7-0b17-4c35-a527-638b26cc5147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7cd9e5-900e-43f5-86ad-f06079644562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe36218-692c-4a3f-aa36-088ffb8127dd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a5c0e1-ac3a-403d-82f8-9d4dbb800d78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991df6e2-f48e-4ade-b3f3-e64f0b37e225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce9ba30-a7c7-4d82-9f5e-77973019dee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc464227-e4f0-4962-b2c0-ebea87ff5d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290290c1-7cc3-4cfa-9671-dc52e31dc356",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d475e308-f67e-4378-bc88-68f95890b8ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7c2811-df4a-47c7-ba08-a15790e97329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940be471-db28-4969-9c5e-069a773f139e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef64d873-5ccd-4542-b96c-f785adad3afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae768eb-a891-4e35-9d6b-d8a5a5edbf2d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d716e11a-5908-4cfe-beba-bdb7a6c68d49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25244d27-e54e-43ea-a8ba-2b26a7143d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50543d5c-2d07-4a5d-97a9-3305873f7819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e10553-76f4-4328-ad0a-fdfa08fe0261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e415eb76-0529-49e5-a78b-79662738cb1d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b23d5d1-6c97-4911-9476-2bcce3b45fd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a51a66-fd60-44b8-b3ad-cae01cde20ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26daf3b3-4315-4779-81fb-93a35064648c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3ee819-3f69-4eab-a5ea-48be474d3274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddbb8c-a6d0-4d8c-b9ef-755efb4417ed",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecace32-eb5f-4ad3-959b-f728c24a2a86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf1e22e-a4b6-4fac-b947-bf3c1d371345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ced8f3-c160-4879-ad61-b9f37e74878e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7727e3fc-f2ef-477e-b5c3-711e3d9a2851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41fb92d-18a2-45a9-b45e-7fe609b05c11",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c756dde9-3d8c-4ea6-822c-4d2c7fc2ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831be63a-2b98-4329-9d6c-ecd947a72a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932c2132-6b20-498b-9e84-614d0fc6cf1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877ef4c8-3793-45da-be65-717cf3789c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec236665-c0df-4e6a-bdab-54641eeca3e3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2d3aae-31d3-4fec-951b-c3ecf13be760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc18dc3-c461-43e8-b380-df91e495330b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c712514-9607-4c99-9d62-3403f7d8df21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e82e70f-15db-4866-9d55-9d354000216c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb52eb2-4118-4e06-ba98-fc1576442e41",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69179e54-6ac6-4096-a5c9-95004a5a927f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8faf54e5-f65e-4ce9-92ef-5d6e20eee757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15108057-c411-4bd3-ab16-8139bbe7f573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4e5edc-955b-463a-8c33-fefa6487929d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cf0cd6-b8d4-433d-9c88-1e12388916a5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c7e141-2b1f-46aa-86b4-905f3e5030c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "520025b3-4620-44bb-9330-6c2710d9ba69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cf8824-d724-4053-bcb6-cfbda3e1d882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9185f93a-b2ec-4f9e-af5a-1aeed4e397b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b9ef47-ef03-423d-9ba7-daae6793c2b5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bbecca-5bdf-4b64-84b6-0d5a7063ef3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831096d9-5533-4d6b-8539-0567b2978e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe03d3bf-b7fa-463d-b9fb-14035e43b698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b96ecb-b9f0-424a-bd56-42826fc43bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae3dddd-e175-4935-9936-02040a0856ef",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df061a17-e03f-43bf-a1b2-d65823ee0f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7310b980-dd9a-4a1d-a201-c5f7965b390f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cdc0fc-f307-4b22-876e-0cfc680986d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc7b4c4-a10e-49a7-9bcc-ba14c5d7037f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16e04f5-8057-451e-95c6-c8c0a61bd799",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b87c909-ccc2-43da-93a4-e80200d4eecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01069a12-c08b-4cbc-93e8-a923fd28b2f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b56a056-5597-4caf-aecd-16efb0c41bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8490555-1409-4d68-97d8-e1a36b018deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9cc092-a641-43c9-853a-4b77556239c9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345b33d8-2bd4-4571-9275-2deaeafc0efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a6dd319-6fcc-4331-b3d7-d3fde55ffb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b8bed8-3ffc-4edc-bc43-7d2222598a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4694ea88-8db2-414f-b8ab-35216d4f6246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00c992c-22fc-4b33-b4e0-f996eefb0b06",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d690fb6-2ca1-4650-b6ff-ca3c4bfdf084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a7a051-e889-45ee-ba5f-1998baeec090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5700e9f5-f5fd-4746-ac8b-0a2fb7794ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2b05f5-8af0-44f4-88e3-d6e9af7477f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0400e829-70af-480b-962d-737f6ac1c7aa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3bf63b-d72a-44e7-9c18-9c22b4f3deb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb36d49e-0ff4-474d-9e56-1724e77dca06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce437ba-309e-41f1-8d07-a162f8ab98d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533f3bb8-648a-44bb-b85d-3117aa99d712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27cee11-768a-4d1f-9800-9f0ca3a123be",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c539ea89-93d2-480c-8313-847fdbf99131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0fa1f4-7824-4d7e-97c9-1e9afe60754b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e56229-ffaf-43f7-a0d0-c2beb6cb60b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117725e1-278f-4150-922e-232bc31069d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42afaed1-14f3-487b-8406-bc4444c0c2a8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0036a9-5b2f-477e-bdfe-371e11f02833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f78a5e5-c882-42db-b321-aeb9ef865094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a103356-3451-4692-92fc-133c924caeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c52fc7-49d8-481a-8a6c-7a4571276402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da665f2-48dd-4267-a65b-6b5b5e000ca6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd35a5b-89fe-4eb1-a1b3-c338754d2b48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4cb0998-bc1f-4128-ab52-2251824842a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fead92-aadb-4f18-b72e-e451a60efe5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae442d3b-5a08-46a4-b2bf-508e9b96410d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba0d26c-484e-433d-8159-30880b004f15",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ba7176-3c6b-4aae-b73c-11825c65eded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835dfe71-a5cc-4152-8146-135c6f16b16d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036bd2d2-4733-4e3c-8a37-3b13e9745043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08f40e3-c3b6-49ec-b21d-ec48cd9cdb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a943feb5-0a7f-42f7-a1cc-8327bed4e827",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ce99d6-c6d4-4c70-a52b-1532054cd711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b76b8a1-0be1-4697-b81a-8b7683743e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c7f3f3-4ec4-4302-a34b-ed7cfd2ec536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e16b3b-7219-44b8-bda1-4741e29d5594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040222ea-d514-4ccf-a94e-a743384c59c4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dce4b7-0cf8-4a19-a008-49221d4df5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f69e852-dfb0-4506-b0f0-93df8beb2144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0b0db6-5ac4-465e-9ec2-1e54ac15aff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8672c0-0a31-428d-ac9f-8522f10a92f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d9e8ce-a7de-4796-b147-b60ed4983043",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52feeccb-4a88-4e4d-aa1e-46017b945b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854fc7ad-24e4-41e4-8e48-71639d28581a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1856ac-0073-4588-86bc-a4b6768fd5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe99d31-86db-409b-9ff2-46b0ff2bc58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec4123a-76e9-445e-990f-846b75b959f8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828730e0-cec5-4299-8270-4388ee1417e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a20305-efe5-43b6-8376-a67dd6d7b64b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b4541e-83bc-41e0-82cf-aed2d5d37e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ae7b56-f663-4243-9b90-fa0d6290af47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919ed6cd-8c75-46e9-8e4b-7029b735e6ce",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d3c5f3-6af5-468a-92be-791d93cc3021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae69f98-68fb-4d94-a98c-9e6c05e18ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c8539b-183f-4eb3-9a6f-2c3752137deb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c6aed9-f382-43bc-ac9f-74f1e7c0eb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5802fe4b-d20d-4e07-b10f-7a1da5cc11d2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da6ae35-c669-430d-869f-1031713ad92a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cc98268-60f1-4e88-bc7a-4f7dcebc241b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4180d5f-1d94-4abb-8956-a75ce65e3b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef253ae-4802-4f28-9422-6f40b78d15ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88a0a151-9966-47d8-826e-4d2857fca6ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b51bf675-7e15-4ae2-85cb-881f4dd95cf5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e98046d-d042-4539-832e-9c4d165b1743",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7aa08c0f-f17d-46c9-86ac-e0639fb76803"
                    }
                  }
                ]
              },
              {
                "id": "aa0a96d1-7d57-4ea1-9aee-98547efe48cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32dc8b81-db8e-4621-8d54-d90a8b7aef25",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77fe306-95ed-4ba5-8b09-33af9282086a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ffefb471-6bd9-4c6c-a09c-3ba3291a975e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e05c7dd-b4a0-4d38-a2bd-8511869e1159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01d69811-2827-4b35-a7e5-a0602048ea7b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e6c8e6a-6d79-4c75-82d9-9dce7e34ca0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "790c17bb-429d-4630-818b-cf2e27fbe895"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c54162c7-221f-40d2-83f7-2f1ec3258169",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "832f8768-fe6b-4186-aa56-46b759eb86d3"
                    }
                  }
                ]
              },
              {
                "id": "3ae5b6e1-878a-42ea-b0bb-36e143b52b7b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "aeca59be-273b-4eed-9a79-de52fccd2b77",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893952e3-923a-4dd6-9a7d-7fa0db08ad50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "efc7fbb5-874d-495d-acc2-da6cbc6a6028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036bf689-07f4-479d-92d9-1f6ec4181d76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e9704e-633a-4ddc-bc6b-99ef2c708384"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e2529539-0b8f-4646-a4bf-af6cb31b42c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e67452d-f49e-44a6-9b1a-af50b65a28e7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d485dba-b0c9-481a-a71c-37c23eb87a96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "729c2e04-d5e0-4c5b-8bc3-2a42548210bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "640de028-7fcf-4b2d-877c-fdbbfdbe3680",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c0ad71a-7078-430c-9008-7b2fe63e1c20"
                    }
                  }
                ]
              },
              {
                "id": "112c0281-4b7b-4908-b60f-bcb59bca65b1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a043b30-dfc0-4e10-ac18-156ec0cea471",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b849f92-0927-4df2-9d74-ceaa9aef2495"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ead77e9c-9c71-4767-a6b6-9bc295e54216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cfabafe-9345-4637-9d2f-d0af3f9e231c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80233a43-944d-4eaa-a8e5-e46c64800de5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ea1658b1-9ae2-4015-b82c-b9d2b5562d8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7f75bac-cbb7-490b-9dba-a0cf4f179c95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a279201-ece1-4365-b507-213f1a7061a2"
            }
          }
        ]
      },
      {
        "id": "573d84bd-8144-4518-9c7d-52a8a34a4b06",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fec295e2-ed22-44d4-a5e2-ac2e53a46ee6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84db6504-9c42-43aa-a65b-6724a95c21b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8436d28-d394-473f-8aae-880db16698b2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d6ea79-4f48-40db-938c-fc34983ac539",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0f5571fa-e323-471a-83b9-7ce1897caa67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c32ecda-b388-4eae-8280-3a58d63dc381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c879f4ba-3e05-4511-82b3-0d174aecb570"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "373803a7-940b-4eb0-8c42-465b2ff7429c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9edf9827-71d8-48f0-b860-b1c3299dfd62"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cabcaab2-a4dd-4696-a8b1-d1f4d2c283dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b440d651-53a9-4169-ad1b-43b330621748"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f7927aa-fad5-423e-be07-784e40e36008",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dd7c885b-f1ad-45f6-b603-24321c55cc21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82eaf270-6e1a-4ee8-9f48-2fa3b8a3c773",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a213eb5e-0fa2-4611-9929-bed5adaf8148"
            }
          }
        ]
      },
      {
        "id": "a668e348-9ffc-438d-8eaa-de3e342f0063",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a39fc4c6-8821-47d3-a47f-087036740e3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd4dee15-94fb-45c3-9426-11198c557efe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac7efabe-7da3-4131-97df-ab635aa6c98f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be977b1-dbaa-474d-bf8a-a1ba36b3d9be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "082f3f0a-071c-41c0-ac61-2172f9dd2e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62b7d5a-c57c-4dd1-9808-a38f7fe53031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07697b5d-6f55-444c-9e44-7992f1755eb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28bb9754-50d6-42a7-ad28-defa12e39b6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14a3bd63-cd5f-41bd-b938-27360cc83acb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea2ca3cb-df07-4c05-9326-63c72f27d55f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b293468-84b4-49a1-91e4-11d05a6dfea4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6336a7aa-b147-4e9c-be31-ef0da07fd6dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c40404a0-5d95-447c-9ab9-abed9b6a318c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8316766-fd31-40b4-ad05-5af409e63e92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22d70bba-a20e-439a-9b1e-7fe15fe5ad7e"
            }
          }
        ]
      },
      {
        "id": "68ca5b77-e72b-43fd-a7be-00162b47285f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fcd124e3-8131-47d1-9490-a44cf95496d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3c9ae3a-7942-4628-bd08-215939216ca0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5ec08d0-36c0-4db3-b43e-48e3d26d07c1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16101df4-11be-45be-b21b-923fd096fa7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcfd3157-8e7e-4e99-9b2b-11eec22ec174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c520ba7-8996-45b4-af63-47752cda5e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1957ece-86da-4e87-b3fc-43a7380fa32e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c984ffab-37e2-430b-891e-df422d3fe4cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885d75f6-3343-4058-be1d-58e2835672ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b95c434-97ed-497c-923c-1d15896d5726",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30fabeeb-60f6-4a7b-9746-bba6a5c610b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f608fb5-a0f4-4f6c-b293-33c17475d762",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a9a05a73-1da6-4846-ace3-0ccc8b29ec71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee1338cb-f808-4953-af5d-da586e75de55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "791b64b4-f845-427e-a3d6-9ada04ba24b8"
            }
          }
        ]
      },
      {
        "id": "e5471552-b51b-4d84-be32-3d495b30cbb7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "687a736b-73d9-45b8-92e7-3eee73eb2713",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "957c9cc1-6b24-4c95-a4f6-9b8e458f3c66",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "54bf8416-5257-4d52-b870-d2c4eb405f0c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2660a27-f36f-4f75-a2fc-cb540083edc6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0e95b7-7935-4ff9-b2be-ff1ce0918d52",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 242.17253521126761,
      "responseMin": 11,
      "responseMax": 13118,
      "responseSd": 973.2621756161687,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687654324504,
      "completed": 1687654405834
    },
    "executions": [
      {
        "id": "534e24e9-c461-464a-b1e9-feef6a315044",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8d97a7be-26e0-4877-a3a4-5fbd6a3a1cb4",
          "httpRequestId": "d38d34b3-2670-4551-ad3d-ac18c73eeaa6"
        },
        "item": {
          "id": "534e24e9-c461-464a-b1e9-feef6a315044",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6aab34ae-7b82-4658-bbd1-5565a64c494c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "2d578376-7585-416c-b3ca-d7b0f624a2fe",
        "cursor": {
          "ref": "25750e67-92ed-442a-992c-93342e6d2381",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "61a6e980-b15b-443e-aba5-b9efd3fdf136"
        },
        "item": {
          "id": "2d578376-7585-416c-b3ca-d7b0f624a2fe",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e64889bb-57f3-413d-abf8-a6daee40dbe0",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "8f27245d-9e54-4f95-ad84-4817327b8742",
        "cursor": {
          "ref": "ca3c7665-2c9d-466a-8cf1-f32dfe7b451d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8977749-604b-400d-998d-438d63b0b043"
        },
        "item": {
          "id": "8f27245d-9e54-4f95-ad84-4817327b8742",
          "name": "did_json"
        },
        "response": {
          "id": "ab4fa3d2-effa-4492-97b9-78fd86abcb45",
          "status": "OK",
          "code": 200,
          "responseTime": 463,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a12183-a286-472d-8179-48b555d81195",
        "cursor": {
          "ref": "8906083b-9708-48bc-86f6-53e22af0aa18",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61d3b6c8-415e-43d3-b447-180699a920ae"
        },
        "item": {
          "id": "47a12183-a286-472d-8179-48b555d81195",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c461ce2-3bb3-4d37-8966-b3eeca13478c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1123,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "47a12183-a286-472d-8179-48b555d81195",
        "cursor": {
          "ref": "8906083b-9708-48bc-86f6-53e22af0aa18",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61d3b6c8-415e-43d3-b447-180699a920ae"
        },
        "item": {
          "id": "47a12183-a286-472d-8179-48b555d81195",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c461ce2-3bb3-4d37-8966-b3eeca13478c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1123,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "372a3971-5fb0-4fae-931c-94999897bff3",
        "cursor": {
          "ref": "92e428f8-6b1b-4e8a-9233-0e62345d7537",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c157f94b-5d43-444a-a672-d683c44e6609"
        },
        "item": {
          "id": "372a3971-5fb0-4fae-931c-94999897bff3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bd753ef6-31c0-41f4-a8b4-37e0c18534bc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334a5d62-71e6-4624-8d76-4acd4151abcc",
        "cursor": {
          "ref": "9f979aa7-2e5c-4ce9-9d04-51786d7a8389",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a1ed887c-2e57-479d-a7f7-4256b09d0df4"
        },
        "item": {
          "id": "334a5d62-71e6-4624-8d76-4acd4151abcc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bd17797f-3794-4ef3-9ef6-897c5ea7cc66",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037985bb-c894-475a-94e4-cddebdd672bd",
        "cursor": {
          "ref": "533801a3-ea74-4e09-baee-6e1ed54a0f37",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "50fce99b-737d-47d2-aecf-45186c154161"
        },
        "item": {
          "id": "037985bb-c894-475a-94e4-cddebdd672bd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "75ff79d6-1be5-499d-82bc-750ebad2de35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f039a067-ea51-4758-b48d-0e3ea6b98c5b",
        "cursor": {
          "ref": "a28dd0c2-eb43-4ce2-8b6d-f970c70856c5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f006cb2-c6f7-41a4-97b3-179558cea844"
        },
        "item": {
          "id": "f039a067-ea51-4758-b48d-0e3ea6b98c5b",
          "name": "identifiers"
        },
        "response": {
          "id": "6f022257-9b36-4b5d-b4ad-5383f7a1fb12",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d450091-0d31-4cba-ac1e-144018d029b0",
        "cursor": {
          "ref": "f4d394d7-e355-497d-b2e9-111ee3bd3814",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a6c3b14f-da62-41de-adde-f78c007d74ce"
        },
        "item": {
          "id": "0d450091-0d31-4cba-ac1e-144018d029b0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "026690ae-058c-4af0-b223-5b8a76c4fb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c423559b-e896-468a-a50f-1a071b8a33b7",
        "cursor": {
          "ref": "0b9fa9c2-e81a-4cab-b7ce-8b47b9c3972e",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c6a710b4-bfbc-4a18-aff2-c81c106802d0"
        },
        "item": {
          "id": "c423559b-e896-468a-a50f-1a071b8a33b7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "23915666-7f43-4331-a091-58f349a1b207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabcd672-ff81-4034-b470-e0546ffd3c36",
        "cursor": {
          "ref": "99426796-3688-46c4-b6c2-2e0a51aa0fad",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ad8dd969-5edc-4b6a-8b98-e39200f59b80"
        },
        "item": {
          "id": "cabcd672-ff81-4034-b470-e0546ffd3c36",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ba211fc2-44f2-4ca9-a77a-9a781292d4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd88203-1b4a-4e31-bbca-90d8d2550cf2",
        "cursor": {
          "ref": "5c90640c-60b4-4253-9c1d-1be0e582d963",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6fcdc612-7ee1-48ed-bbb1-cacbfb277f32"
        },
        "item": {
          "id": "bbd88203-1b4a-4e31-bbca-90d8d2550cf2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ce9f2709-d548-45d1-9544-bfe94cc41f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3183522d-e61a-4109-9c93-ad3db91639cd",
        "cursor": {
          "ref": "0002bcd3-117a-49ee-b7bf-00c6c57a7928",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "29fa86c3-a249-4dc0-a727-5a945c7d027a"
        },
        "item": {
          "id": "3183522d-e61a-4109-9c93-ad3db91639cd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c0db9b49-113d-4ad2-af16-db2c80820748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81b0f64-ae6b-4805-8423-24c303edb82c",
        "cursor": {
          "ref": "f93f22e3-f4e1-424e-9e4b-d6778a9764d3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0d9c47ec-d1a5-434c-ace6-a77ec7799eda"
        },
        "item": {
          "id": "e81b0f64-ae6b-4805-8423-24c303edb82c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "531b5c52-8198-48f1-a281-d69ba95a95f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76a5ea4-1a62-458f-9759-b0c2f704dc2f",
        "cursor": {
          "ref": "5bb36a77-2782-49cf-ad04-eab2f3b7afbb",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d3ffd5ae-a25b-4ded-a1ec-d31782d26ab0"
        },
        "item": {
          "id": "c76a5ea4-1a62-458f-9759-b0c2f704dc2f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7663ae22-027b-43fa-9997-30846d5eddb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea169cb-6312-41ae-a9ed-2b8e4086d7f3",
        "cursor": {
          "ref": "2871bea6-8387-4d64-8426-d95caa7279cb",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fdddbf97-b594-4922-9693-c663d215fbd1"
        },
        "item": {
          "id": "0ea169cb-6312-41ae-a9ed-2b8e4086d7f3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "34752457-d366-4855-b5b8-cfd2143b34d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c565f05-e232-4646-9472-632e289d4fcd",
        "cursor": {
          "ref": "a058dd07-a495-44f1-be7f-8da3a8cb73e0",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cd217e5d-15de-4993-93ee-ac9cde8a9fcf"
        },
        "item": {
          "id": "3c565f05-e232-4646-9472-632e289d4fcd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "568aa434-17ef-4b13-b16a-c8d76a50dbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb033ac-312c-49a8-b736-2334d52fa76e",
        "cursor": {
          "ref": "154bee52-fc6d-409c-9ca2-cecb22b3a137",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3e4c58b-9a35-4ec8-85ca-a5b00bedcc0d"
        },
        "item": {
          "id": "0fb033ac-312c-49a8-b736-2334d52fa76e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "61d35763-39e4-4665-b7d9-ee3565964eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074f075c-1110-43b7-aa3b-fb65ed7cfb5e",
        "cursor": {
          "ref": "ab0441aa-3beb-42d5-8a47-a6faf857a2eb",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7b4a9ceb-2a3d-46a7-8e1b-d87e1edea8d4"
        },
        "item": {
          "id": "074f075c-1110-43b7-aa3b-fb65ed7cfb5e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5bf58ded-7a89-48ac-8b07-197523bb4b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd5aea9-8854-402e-a7ca-6be6cbe4453e",
        "cursor": {
          "ref": "052acbd7-933a-4818-838e-980ad1d5aff8",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7c13cdc7-dacf-4757-988c-a39ac9459faa"
        },
        "item": {
          "id": "fdd5aea9-8854-402e-a7ca-6be6cbe4453e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "af285326-3d22-4010-a94c-4c2647b282db",
          "status": "Created",
          "code": 201,
          "responseTime": 2495,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2ea833db-e741-4ddb-889e-0d3d3bbf1822",
        "cursor": {
          "ref": "c91668ee-1280-406c-bc9f-ea240167bf03",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac2be796-fb5a-4757-bd1f-ffe16b95c773"
        },
        "item": {
          "id": "2ea833db-e741-4ddb-889e-0d3d3bbf1822",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "408ccacd-c1ab-4c9e-bbd7-92d4d14317f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867b0a6e-fbcd-4636-b334-4fb04c0a1d69",
        "cursor": {
          "ref": "eeb7425c-bfa6-49c2-bc5c-96edcf39a056",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ac70866a-ea1a-403b-bb0b-1bd15cca6500"
        },
        "item": {
          "id": "867b0a6e-fbcd-4636-b334-4fb04c0a1d69",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fcb7675a-4890-4f19-adbf-b3bdecd770ee",
          "status": "Created",
          "code": 201,
          "responseTime": 13118,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "57e0f591-cc84-4798-9602-d66c72a70726",
        "cursor": {
          "ref": "9ea80ba2-83ab-4f28-867c-fb3ec5ae7933",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f39f5cab-c623-43fa-a7ad-354be77db456"
        },
        "item": {
          "id": "57e0f591-cc84-4798-9602-d66c72a70726",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "488a9d82-41ea-4fcf-85cf-1bdea106b420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9968f195-a5d4-47a5-a173-953371fe10cb",
        "cursor": {
          "ref": "c25e84e7-16f7-4173-8d1e-a610b1c06044",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "adff52bc-28da-4158-9f92-5e95325e3f04"
        },
        "item": {
          "id": "9968f195-a5d4-47a5-a173-953371fe10cb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e0bb7352-6687-4445-af62-f02523952580",
          "status": "Created",
          "code": 201,
          "responseTime": 3520,
          "responseSize": 968
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "96afbe1c-7836-475e-83aa-d7fcba2c5e41",
        "cursor": {
          "ref": "c9c2f9ea-5e82-4cad-af7c-478b2c32ea87",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0be046d8-ebf4-4076-a393-437ae2244cf4"
        },
        "item": {
          "id": "96afbe1c-7836-475e-83aa-d7fcba2c5e41",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8dcbb110-5451-4e82-9711-3d27004f7132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c58c34c-77b4-44b3-a9a8-1208249a895b",
        "cursor": {
          "ref": "dfa4bb59-dfe5-4476-a99a-ab3418784a99",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c6cbbf20-bd31-4d82-9e24-4b8a3efdca01"
        },
        "item": {
          "id": "4c58c34c-77b4-44b3-a9a8-1208249a895b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b707dfd1-0c3b-42d0-99f3-526bd6cc000a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201ff428-5e9e-4ba5-9c51-b03627488cd0",
        "cursor": {
          "ref": "b4ab3346-b6ac-4307-b6e3-8f60b471703c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bd740c8a-c137-4352-9ca2-1229b6cd8dfe"
        },
        "item": {
          "id": "201ff428-5e9e-4ba5-9c51-b03627488cd0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "718d8e71-4f99-467c-ad32-778a0702e200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de61b45-18ec-4c0c-9e21-90e4c645ba7c",
        "cursor": {
          "ref": "ad03b2e1-1329-4f83-85ab-0f9ab9b08068",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "adeb6a3b-2e3a-4134-876f-df7aed344e46"
        },
        "item": {
          "id": "8de61b45-18ec-4c0c-9e21-90e4c645ba7c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1652dd2a-55cc-41ea-84a1-1e1fad520dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fde60e-a52b-4093-aede-ee4cc40f03f9",
        "cursor": {
          "ref": "564c3570-aac4-4532-b719-44af4bdfb8a5",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a9e4c7f8-6c56-49bd-b8eb-346111e8471a"
        },
        "item": {
          "id": "f1fde60e-a52b-4093-aede-ee4cc40f03f9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "68a481d9-fb3f-4c70-b0a1-e81daa7b4382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bc4d18-aa96-4251-80dd-5648d82dc267",
        "cursor": {
          "ref": "ae19485e-d632-4435-8f01-c1be8bbbf2b1",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "01f63b78-e38f-4e13-a11d-4990bcfa4d9c"
        },
        "item": {
          "id": "62bc4d18-aa96-4251-80dd-5648d82dc267",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1fcc5efa-2354-4639-bba5-21b9c529da1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b5828e-107d-42d1-93f9-16bb1dcfefab",
        "cursor": {
          "ref": "891f527a-4439-4ac1-b946-a0d0b92dac46",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ab2c35e-b657-42bb-90fc-a4c59fc2f345"
        },
        "item": {
          "id": "77b5828e-107d-42d1-93f9-16bb1dcfefab",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "425e073f-1c9d-41b6-b72f-3416b25748c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bdb8de-fb0e-4a44-9213-8d88980ec812",
        "cursor": {
          "ref": "948b7906-0a9e-4270-8b2b-cc7a646ad8f7",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "537d1fb7-053a-49ed-88cb-08e81d13bb77"
        },
        "item": {
          "id": "04bdb8de-fb0e-4a44-9213-8d88980ec812",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4c57465e-48b9-42f4-b2dd-773d8f096318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b4531b-c667-41b7-ad63-6546091f6aba",
        "cursor": {
          "ref": "e4d9d48b-d2d3-4ecb-a021-8d9ad12c581c",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "94b61e6c-817e-4f62-bb7b-701ca123e98c"
        },
        "item": {
          "id": "e6b4531b-c667-41b7-ad63-6546091f6aba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1c3725fe-99c4-4756-bce1-93afb944610d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e02b24-765c-4b7b-b207-be121ceb1267",
        "cursor": {
          "ref": "bc28eea2-f180-4902-a8cc-5049a353b0d6",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "332d5ece-4c1b-401c-b853-373f91327340"
        },
        "item": {
          "id": "53e02b24-765c-4b7b-b207-be121ceb1267",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ea9d4eeb-05a0-4d06-ad75-cffcd4d787a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bd2c0a-afaf-4790-b668-bd950cd9cc7b",
        "cursor": {
          "ref": "ef6807e1-0677-4673-b6e4-658e2a925d53",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "202e0bab-0626-4adc-b3b6-bf0d9bf48b30"
        },
        "item": {
          "id": "34bd2c0a-afaf-4790-b668-bd950cd9cc7b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8acd387b-95b8-4a2d-adf7-1ea52455dcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfafe4a-ff49-4e90-a22b-13d2425b2a9f",
        "cursor": {
          "ref": "66504f76-932a-4279-9a97-972ebe2d7b52",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4b8df7d8-d4da-4fa7-bb35-c2306b05710d"
        },
        "item": {
          "id": "dcfafe4a-ff49-4e90-a22b-13d2425b2a9f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d6bcb725-19cb-4dd5-8dd1-cd1cbada9c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb776f94-6500-4444-9dd4-74fadc6b9fb8",
        "cursor": {
          "ref": "b65ab263-6246-4924-a4ef-8a697727a9f2",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ba8e9720-3c4f-4cfb-8f12-c85a6099563d"
        },
        "item": {
          "id": "fb776f94-6500-4444-9dd4-74fadc6b9fb8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e6efdc39-309d-4aea-94ef-e7037e5ddbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f70cf1-429b-45b7-97dd-a59cabfd5223",
        "cursor": {
          "ref": "56bc1cc6-4cf7-4e1e-8eec-c071b3467ca5",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "037026cd-89a9-4803-b00d-9734cbf74744"
        },
        "item": {
          "id": "80f70cf1-429b-45b7-97dd-a59cabfd5223",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e9fd5a6a-f4c8-4d1f-836f-b23b5defa567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b95e70-0efa-47bb-bf4a-dd0dfc912012",
        "cursor": {
          "ref": "e6e9521f-d46a-4868-9bfb-85b46811b079",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e148e436-ee21-4642-a93d-8d32e5bca95e"
        },
        "item": {
          "id": "10b95e70-0efa-47bb-bf4a-dd0dfc912012",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8d32dcbb-2f69-4182-8502-99059ac62909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cc7418-8fb8-4472-8b90-7ba4714a16a0",
        "cursor": {
          "ref": "4974c125-cf75-4286-9767-513cfcbf4a9d",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "05476ca2-f47f-4eeb-9fa2-78ef14eec96c"
        },
        "item": {
          "id": "95cc7418-8fb8-4472-8b90-7ba4714a16a0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "23868b68-bbd2-48b1-9e9d-8b31f16aa441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed66a069-23ae-4bb5-a2a2-c9e1fdd5d9b6",
        "cursor": {
          "ref": "7f9eb42a-01ca-40cf-b71c-d4faa97d027c",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1266b741-c9ba-4bea-9225-cf0a70f15537"
        },
        "item": {
          "id": "ed66a069-23ae-4bb5-a2a2-c9e1fdd5d9b6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8303779e-f23d-4f0b-ad85-1504fa563840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a48dcb-c667-4a7f-a3e9-cfd8db54e437",
        "cursor": {
          "ref": "4383eeec-ffe7-4a60-bb56-635a3ad394c7",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f25ba875-7118-410c-a899-3d8f9c19c927"
        },
        "item": {
          "id": "e8a48dcb-c667-4a7f-a3e9-cfd8db54e437",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0a112bd8-9267-4a9b-b671-82c1dd7bd09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bd3e7e-4dd5-4bd2-8481-89888d9fd073",
        "cursor": {
          "ref": "20eb83fe-82ae-43a0-a56d-970b454490ab",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "43e5a78f-d8be-417d-b7ea-2645f081db7d"
        },
        "item": {
          "id": "f4bd3e7e-4dd5-4bd2-8481-89888d9fd073",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "27a7e383-d59f-49f3-83ae-f14717283da1",
          "status": "Created",
          "code": 201,
          "responseTime": 2742,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5614151d-db16-4fe8-82be-de4dc27476ab",
        "cursor": {
          "ref": "07b20410-6f29-4814-8f31-912c4cbdbbc0",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fb4a1c79-c47e-454c-8e51-2c7cf424fb62"
        },
        "item": {
          "id": "5614151d-db16-4fe8-82be-de4dc27476ab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f5575b71-9ecc-4266-8d90-bb035c02e3cc",
          "status": "Created",
          "code": 201,
          "responseTime": 2564,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a6637e56-196a-45ef-894a-a8d031612d74",
        "cursor": {
          "ref": "153578d6-13da-45b0-a0c1-224a70164878",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bd2fa05d-44e8-4822-85a9-9b7062ee77e1"
        },
        "item": {
          "id": "a6637e56-196a-45ef-894a-a8d031612d74",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "32ef9cd2-0c6f-4575-9b80-0f6a5816943c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2f6ba0-e331-44b5-9a3c-6aa21b99eb43",
        "cursor": {
          "ref": "17a11ddc-7925-4758-b8b6-e6cd04554721",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c915ed1-cd66-4587-9a09-16b9af8ccdf7"
        },
        "item": {
          "id": "3b2f6ba0-e331-44b5-9a3c-6aa21b99eb43",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a16f3448-fcfd-4565-9127-a42e18229ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7982f1d5-7c8f-49c3-8e8b-831bdf3b7380",
        "cursor": {
          "ref": "bbbb661b-876c-4060-82ea-275e89efa52c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "23aa5218-4180-4c19-bb85-c6b6c31d682f"
        },
        "item": {
          "id": "7982f1d5-7c8f-49c3-8e8b-831bdf3b7380",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5040345d-d4bf-4a41-946c-3ba454766074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cec69e7-1650-4e95-93bb-d653d034cf68",
        "cursor": {
          "ref": "a1a10642-994f-43e5-8e81-6c99c6eec0e5",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "54b1fd15-b569-465b-89cd-1a86c2a700c6"
        },
        "item": {
          "id": "8cec69e7-1650-4e95-93bb-d653d034cf68",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "56f5cc4e-d08e-471b-96c9-8c5a29870b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40f422e-1d05-4140-92ac-019f7e784a7e",
        "cursor": {
          "ref": "a7a7c671-5115-49be-bc00-06db7bce6fa4",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b0d3b838-bba6-4b9a-ad60-0446d413ce6e"
        },
        "item": {
          "id": "c40f422e-1d05-4140-92ac-019f7e784a7e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d7b1a56d-30c1-44f9-9b37-45e96c9e3b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b5c64f-407c-49c5-9f01-0a7eaedb3665",
        "cursor": {
          "ref": "960ce947-a625-435d-9866-637bade68fd1",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "34b8983a-e4be-44af-98b4-651edc3cc45b"
        },
        "item": {
          "id": "b7b5c64f-407c-49c5-9f01-0a7eaedb3665",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd990975-4902-41b7-a9a9-598bbf0181dc",
          "status": "Created",
          "code": 201,
          "responseTime": 2947,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "21cd16a8-77e2-4e9a-b548-87e582e9df6d",
        "cursor": {
          "ref": "cb1a1098-dec1-4ff3-b43a-fe744ce04bbe",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3e82f855-8b3c-4412-bf8f-b8a2e96474f3"
        },
        "item": {
          "id": "21cd16a8-77e2-4e9a-b548-87e582e9df6d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "07062c29-965a-492c-9bcd-5b386d171b2b",
          "status": "Created",
          "code": 201,
          "responseTime": 2708,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c4ea83ee-03ee-4180-ab55-71762549c5b7",
        "cursor": {
          "ref": "87717186-fdbd-4dc3-ae27-8de475947f3b",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "27f0b9a2-0e42-4f23-8c0e-409c5cecfdd9"
        },
        "item": {
          "id": "c4ea83ee-03ee-4180-ab55-71762549c5b7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c8bb14ff-6bfc-4b63-a4e5-a9773f91f426",
          "status": "Created",
          "code": 201,
          "responseTime": 2743,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a5cedacc-eb7a-4ebf-8ccd-34eebf17c454",
        "cursor": {
          "ref": "46f9b45d-45b4-48f6-807e-0fee44dd81f3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f0222180-fa3f-4807-85ea-081ec10c924b"
        },
        "item": {
          "id": "a5cedacc-eb7a-4ebf-8ccd-34eebf17c454",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c581bc0c-642c-428c-83e5-2002dc1c6fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708206d6-ff06-425b-b425-1e45ab568225",
        "cursor": {
          "ref": "3d53a559-5d17-4f9e-9c55-1a1ae66d9d74",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b080e20a-5901-4807-af9d-039393854acf"
        },
        "item": {
          "id": "708206d6-ff06-425b-b425-1e45ab568225",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4b98ec1d-4453-4f11-84e3-546ec97c1206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a025bb0-bff2-43f8-a7c1-4ed7947b7de4",
        "cursor": {
          "ref": "4112b136-e1ca-43d6-8597-e29d90a424c5",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "423246c6-bca5-47ce-9df6-c535f6af971f"
        },
        "item": {
          "id": "0a025bb0-bff2-43f8-a7c1-4ed7947b7de4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e297ce52-630f-463b-b58f-aff0bd5e85b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b5bc40-c804-48bd-95db-c5dca7655c71",
        "cursor": {
          "ref": "0852982d-9ab5-4c20-836f-e2deac6ec916",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d7b54b0c-7464-4ef0-b44f-25d4b25d29ea"
        },
        "item": {
          "id": "e4b5bc40-c804-48bd-95db-c5dca7655c71",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6477a7f3-bbb7-428b-88ac-c210e66a4fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1967e73-1ca3-46bb-b1bf-d2a2afb5f1cb",
        "cursor": {
          "ref": "b50cfe0d-3188-4a5b-8e4a-6ebe7f988b89",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ecc45b59-38b1-4e60-a81a-f623f7e56729"
        },
        "item": {
          "id": "a1967e73-1ca3-46bb-b1bf-d2a2afb5f1cb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dd514201-ee80-4c4d-b860-43fef166a7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce756a0-8047-4474-9e1c-b9071360ca97",
        "cursor": {
          "ref": "67e2469e-573b-46f4-bb24-58efff4efe0b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3a355b7a-ea0b-4fd2-8868-3fe9e2a83369"
        },
        "item": {
          "id": "6ce756a0-8047-4474-9e1c-b9071360ca97",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "05a742c8-e618-4657-a575-5ce408c44c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd815b-4869-4caa-b476-9f9ed288cb8a",
        "cursor": {
          "ref": "88b9e0b6-ef74-43c6-af11-e846675f40b9",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2cda73b0-5b08-4c11-9ae7-198f8d5bfcfe"
        },
        "item": {
          "id": "b3dd815b-4869-4caa-b476-9f9ed288cb8a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7b267dbc-9b7c-4484-b036-9a2018ac6f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d50e85f-dae3-48ea-b936-d4a8953b9183",
        "cursor": {
          "ref": "c3c199cf-73b3-4d61-b934-1e8f6ab56b59",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d7215a2a-1fdf-489f-bf67-eb4e5e8bb09e"
        },
        "item": {
          "id": "2d50e85f-dae3-48ea-b936-d4a8953b9183",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b5e5c66d-659b-4546-95cb-242d6dde9276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011dc972-a3f6-4128-8a82-93645e8d63fd",
        "cursor": {
          "ref": "6b246676-2821-486d-b2ef-ceba1dadc220",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "01b414a6-b8eb-4ee3-90a6-5144384538dd"
        },
        "item": {
          "id": "011dc972-a3f6-4128-8a82-93645e8d63fd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6ef860a4-cd82-417d-836c-4b627dbb6955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b6c033-cc6b-4633-87ca-24083e215eca",
        "cursor": {
          "ref": "94c7133e-b09f-4da1-b417-faeabc2e3ac1",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b12a32d5-db90-42bf-a5d1-e4b7b8a69f28"
        },
        "item": {
          "id": "92b6c033-cc6b-4633-87ca-24083e215eca",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d71c2c64-93f0-4b96-9edb-ad0aed92a456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5367fa99-f6cf-467f-95f7-d204ed1d8527",
        "cursor": {
          "ref": "8c3e0ed7-aec0-4cf6-8f26-d38095fa81f3",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "233c928c-c4a6-4803-8002-df87f31aa8c7"
        },
        "item": {
          "id": "5367fa99-f6cf-467f-95f7-d204ed1d8527",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cee6b459-58e7-4997-ae76-38f6cc81fe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9501d148-9945-4298-b902-5eaee3077010",
        "cursor": {
          "ref": "fd41ee61-8ee9-4ded-8035-982783d88216",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "131a9be1-2f9b-4f76-8277-251d0a02183e"
        },
        "item": {
          "id": "9501d148-9945-4298-b902-5eaee3077010",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "35d188ff-c8a1-42c4-9434-7d382a937781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92606d8-6496-47e2-9bf2-8844774a3b1b",
        "cursor": {
          "ref": "f909c9e6-8cda-4517-a095-3ea0a9d0d133",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ce2de473-5f42-48f0-9940-e5133359d0cc"
        },
        "item": {
          "id": "c92606d8-6496-47e2-9bf2-8844774a3b1b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "da9b694c-2c23-4c98-bf9e-efe59d663e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284eb2a9-ab2c-45a6-8d27-fcd85bb245a5",
        "cursor": {
          "ref": "8d395fa5-6ebc-410b-b2c7-ded5eafce8cc",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f98963ae-5d98-4cdd-a4d3-4f07923966b2"
        },
        "item": {
          "id": "284eb2a9-ab2c-45a6-8d27-fcd85bb245a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ffd7e713-0815-4971-899e-af8181021be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a6e62d-55da-4011-ae71-2007189d6560",
        "cursor": {
          "ref": "e740b259-0c8c-4a17-91dd-ba4d169be817",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aaaada4a-a3d8-4fef-a465-77468c65d093"
        },
        "item": {
          "id": "68a6e62d-55da-4011-ae71-2007189d6560",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "16d2da07-7b82-41e8-9752-227bade3b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8452961d-1ee9-491a-b8a1-125b184ff630",
        "cursor": {
          "ref": "ce1ec67a-9f8a-42a0-a254-24a65d4b7a17",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9caf1950-125a-44aa-9de4-5b66ec905585"
        },
        "item": {
          "id": "8452961d-1ee9-491a-b8a1-125b184ff630",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ed3f2eae-7613-4009-baa1-fd2708a10440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf8b89d-b33c-4d16-b109-c6ae4f654d5a",
        "cursor": {
          "ref": "ec9158d2-6d0f-4af7-a697-3562c9c0ab97",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2b41b0cc-7b59-40a1-81d1-dcef0aa0c368"
        },
        "item": {
          "id": "fbf8b89d-b33c-4d16-b109-c6ae4f654d5a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2602197c-e7e6-40c7-a5a7-d61f9e644dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019aca7d-8be3-4648-8fad-1cfbec6a6f2a",
        "cursor": {
          "ref": "91f32768-7688-48a2-bcdc-59ab40512bff",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12f56df7-874a-4255-8dbf-4dabe3138449"
        },
        "item": {
          "id": "019aca7d-8be3-4648-8fad-1cfbec6a6f2a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ddf9626-d9b8-4661-ab87-6a612cae8754",
          "status": "Created",
          "code": 201,
          "responseTime": 3014,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "067fd491-5a68-45bf-ad73-31f7e0a31d97",
        "cursor": {
          "ref": "ff9fd17a-40a7-4020-8248-49d4437bd782",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ccc276f-9c1c-44ab-a087-a2c8ab520294"
        },
        "item": {
          "id": "067fd491-5a68-45bf-ad73-31f7e0a31d97",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "61799b38-893f-4bde-b619-0f050273f7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67a156-0d75-4e66-9423-bca61b366644",
        "cursor": {
          "ref": "c0b329ef-c3ea-4322-8f7a-01284d10abe3",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6adcd716-f9a0-4700-9b99-1a0470184d1a"
        },
        "item": {
          "id": "6f67a156-0d75-4e66-9423-bca61b366644",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cffa91e9-a324-4694-83d6-706131731ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e500f741-83eb-4366-8e41-2b6a0b6f7969",
        "cursor": {
          "ref": "fe8b68a6-02c5-4230-9920-55d581a7bda3",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "da8a91bc-1f78-45ad-9b6e-f9296ebaa84f"
        },
        "item": {
          "id": "e500f741-83eb-4366-8e41-2b6a0b6f7969",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "efc2e32f-ed86-46c7-b4f1-74b7b6ebf4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ee46e9-6da8-4518-9ff6-394cb44730f9",
        "cursor": {
          "ref": "2ac0ffc6-a99e-4ce4-a0b5-bb9bf7212672",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "83fa1f24-31db-49a9-866c-4bd4537c2693"
        },
        "item": {
          "id": "c5ee46e9-6da8-4518-9ff6-394cb44730f9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b75a8348-4845-469d-a4e4-226862cf9c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91ccde3-aaa0-45fc-a75d-84875ce5577c",
        "cursor": {
          "ref": "fe5ecdeb-bd5b-452c-969a-03b9a1819edb",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a43e23b6-dae2-4d63-9433-806052951ab5"
        },
        "item": {
          "id": "e91ccde3-aaa0-45fc-a75d-84875ce5577c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "020e9dc4-d2c9-48e3-90c5-732578fcdd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6db857-6abc-4400-9430-d0b407e18180",
        "cursor": {
          "ref": "9d54aa1e-0e20-46bb-8f36-2bf708924df2",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9ddfacda-48dd-417f-9f5e-d0edc7dff9bc"
        },
        "item": {
          "id": "4c6db857-6abc-4400-9430-d0b407e18180",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4563fde4-12c2-4730-b666-8c6d1df042af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b91e5b-5422-4bb5-b436-10d9c1c8658a",
        "cursor": {
          "ref": "a015adf1-3967-46b3-a37e-2ff32ad57d26",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d33975d0-0eb5-4833-bd3d-c6d4eb1ce21b"
        },
        "item": {
          "id": "45b91e5b-5422-4bb5-b436-10d9c1c8658a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "14fec989-7cb6-4fb6-bc25-b4483860b30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46740712-97c5-4625-987e-b83ddd309481",
        "cursor": {
          "ref": "92b28698-640c-45a2-a49d-28c72a2eb1d2",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9ffe5833-6c23-4513-8de8-5db3a764dc2a"
        },
        "item": {
          "id": "46740712-97c5-4625-987e-b83ddd309481",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7b2ef3a4-64e3-44bf-952c-b63f4084163f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d64edc0-a1e9-47a4-b32a-ee313ad99215",
        "cursor": {
          "ref": "afa71570-7b31-4e3b-bb91-79707d274834",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b0751e9b-5401-4fb0-8daf-e7c73a8ccb10"
        },
        "item": {
          "id": "6d64edc0-a1e9-47a4-b32a-ee313ad99215",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2de037ff-4cb9-4716-acda-967873de2f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a016d3de-60ca-40a2-a223-9775380dca77",
        "cursor": {
          "ref": "098ecf3d-1c37-4207-8b4d-57a7253e0abd",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1a48ee3d-e77c-4fb6-9be3-43b74016f429"
        },
        "item": {
          "id": "a016d3de-60ca-40a2-a223-9775380dca77",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d1e1cd44-e100-4f01-9dd1-bd11eddb4bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7003a367-f73b-4c20-b39f-dc20781340c5",
        "cursor": {
          "ref": "1d27d6ff-2247-4ff5-811d-50f102dac64f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "00000fd2-0ae3-4cf4-8cdd-b44e4c0b3b5d"
        },
        "item": {
          "id": "7003a367-f73b-4c20-b39f-dc20781340c5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "89e5b977-3d7a-477b-a592-75856681c055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f842a15f-a912-4d27-a977-dfa3d0ce8b94",
        "cursor": {
          "ref": "2e8ac8cb-b5da-41a0-8e9e-56debceafff0",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6aad559d-fb44-4836-96fe-851372694c72"
        },
        "item": {
          "id": "f842a15f-a912-4d27-a977-dfa3d0ce8b94",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "432b5275-1cbb-4ff6-b397-9a4cfdadf753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2491cc33-40d7-454f-a292-26ea09353bb1",
        "cursor": {
          "ref": "f8ea44bd-306c-4e02-967a-7c5c782e2b5c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0da7917a-b8b3-4da6-a1aa-b7ef8519e0b8"
        },
        "item": {
          "id": "2491cc33-40d7-454f-a292-26ea09353bb1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f7da9fba-3c5c-4251-8ae7-07e49c8f3a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088c3646-870b-4412-985c-e06ce6eeccd1",
        "cursor": {
          "ref": "e7d77c52-2cd6-40b6-a25d-2018b1ed65c6",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "55ee838b-9ae3-4a28-aae6-92f9f385e778"
        },
        "item": {
          "id": "088c3646-870b-4412-985c-e06ce6eeccd1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "10148794-6f6e-40d5-9f7f-4b10c54618f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585e5fd3-b3a1-47bb-affc-3945440a5c00",
        "cursor": {
          "ref": "e397d778-62b5-4be2-9778-413552b6d370",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "329fe7c5-654d-4294-b33e-796d717b2d60"
        },
        "item": {
          "id": "585e5fd3-b3a1-47bb-affc-3945440a5c00",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "33313eeb-3839-476f-8e2c-a509b77598e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23024fc-ea5b-43d9-ab9a-389db9cb1cdc",
        "cursor": {
          "ref": "388642eb-2b74-4a88-9683-817a1f3c4a59",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ec0cc788-4b35-40ae-92a6-da0d6498f889"
        },
        "item": {
          "id": "f23024fc-ea5b-43d9-ab9a-389db9cb1cdc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "75b4b7c6-c0ab-4616-b238-9b457ad643ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910d68d2-06f5-4d3a-9087-2c8f74f560b5",
        "cursor": {
          "ref": "4f397c42-1bc9-4881-aea4-ab66c3bdf3f5",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3d43efe6-4b35-4943-a14a-aa2bbe731b76"
        },
        "item": {
          "id": "910d68d2-06f5-4d3a-9087-2c8f74f560b5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "092290d1-0a20-45d0-ab6e-5b080a412455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b58648f-fc29-4fb2-a9a5-1a92e963d4ae",
        "cursor": {
          "ref": "7905a114-a51f-41cc-b55d-4873d4f86c3c",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "747c5e53-6b5a-4f5b-8d16-19dca406083f"
        },
        "item": {
          "id": "1b58648f-fc29-4fb2-a9a5-1a92e963d4ae",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "46ee656d-ac9b-4549-a290-8eec523f79d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca19662-25fd-452e-9cea-8db597ff12cb",
        "cursor": {
          "ref": "3ccbcb03-6b9f-4a95-bbe1-91955057e222",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8227b587-86cc-4b19-b0ea-3fb2c562a326"
        },
        "item": {
          "id": "9ca19662-25fd-452e-9cea-8db597ff12cb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c016cefb-36f4-4281-b5da-427acdf0273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba960ae-8fe7-4472-88de-87f3150f89b9",
        "cursor": {
          "ref": "ac45fbf9-d1ec-45f5-8080-977087f0f0f6",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6bb045e3-a7fb-4e21-93e1-db8e4f733b5f"
        },
        "item": {
          "id": "6ba960ae-8fe7-4472-88de-87f3150f89b9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e568241a-d469-4a3f-9acb-c145280a0b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29c3930-7369-4de5-9b3c-9f58068193af",
        "cursor": {
          "ref": "e83ee8ae-85f1-4e88-ac1e-46d2d2ed92b7",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2a226ea9-32ce-4025-9269-f987a5825141"
        },
        "item": {
          "id": "f29c3930-7369-4de5-9b3c-9f58068193af",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6fec0dd7-1072-471e-8f80-d07b2e8f0a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7702a48e-f190-466b-8fd2-0b125e5a61a3",
        "cursor": {
          "ref": "07ae727e-fe3e-4f6f-8432-c348325699e3",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4c50ff82-eba2-4a1d-9b19-23a08c90a860"
        },
        "item": {
          "id": "7702a48e-f190-466b-8fd2-0b125e5a61a3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9abb2a58-7e58-4cd8-b882-06f5bc05eb8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51a2b37-3296-4ac7-b942-703a56d9cfec",
        "cursor": {
          "ref": "edba3130-2de5-44d0-9578-e7e78dc6b3d6",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "29592e9e-6b24-4a5a-8947-24835d8406f8"
        },
        "item": {
          "id": "d51a2b37-3296-4ac7-b942-703a56d9cfec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ed252fb0-6ca4-4031-ae81-b9152ca0f702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ff1473-f195-40b9-83dd-af42cab646e2",
        "cursor": {
          "ref": "3ba07359-dadb-41be-8260-97ce93f44d20",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37caeefb-54a0-4ae3-baa2-e0b287f17221"
        },
        "item": {
          "id": "b9ff1473-f195-40b9-83dd-af42cab646e2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "65bb3bfa-336f-41a1-983c-686192f0d7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9113e127-e152-4ec6-85cf-77288dd197c5",
        "cursor": {
          "ref": "9c755493-3b7e-4e56-8ef4-16a8b355e025",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "022ef448-736a-4bdd-8f63-b6e9281a40ae"
        },
        "item": {
          "id": "9113e127-e152-4ec6-85cf-77288dd197c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3c0b2b6d-6755-4c2f-87d0-7699e18aee5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf31e45b-dca8-4907-988d-3eeccec01034",
        "cursor": {
          "ref": "e355acbd-9604-423b-99b8-fee06073735e",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7fb5bfa5-4f11-4c00-b11b-e49fd7478d56"
        },
        "item": {
          "id": "bf31e45b-dca8-4907-988d-3eeccec01034",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2dc0b23c-4d4f-4b8e-831b-de6f05e81f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea2af15-ab23-4e70-a347-5f65e6e5edd3",
        "cursor": {
          "ref": "af003642-19d1-4e5b-8b9f-1de18e49aeae",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "75ba121b-9191-46d7-aafa-65c3d333ae44"
        },
        "item": {
          "id": "dea2af15-ab23-4e70-a347-5f65e6e5edd3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aea2a1ae-ccfb-4e7b-8a34-c65af3c08317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb45dc8-0390-4bbe-bafc-90ca6f2166ff",
        "cursor": {
          "ref": "673fd420-6092-47e2-9d44-78b423367a79",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e7f4d36e-49ea-4cf0-b21a-392e01c03b34"
        },
        "item": {
          "id": "2cb45dc8-0390-4bbe-bafc-90ca6f2166ff",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "26474792-ecd0-48a3-aaae-a578033a7ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f89993-52a1-4ae7-b676-c8936d174cbf",
        "cursor": {
          "ref": "e1129272-ef0d-409c-b571-ca0c6f637477",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fdc1b304-a401-4a0d-80fc-11ff3395144a"
        },
        "item": {
          "id": "a7f89993-52a1-4ae7-b676-c8936d174cbf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "215af3df-dec9-4cae-a01b-54c320062690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8872057e-b177-4e7a-a3c7-32e9f2ebdcc2",
        "cursor": {
          "ref": "d0613821-136d-42cd-9998-d0c3e83a1c62",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "cb846ced-f223-4c7c-ae81-8ee1968af8eb"
        },
        "item": {
          "id": "8872057e-b177-4e7a-a3c7-32e9f2ebdcc2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8fcffc07-aa9c-4ae2-8ae8-18945c106000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bad28c-5c98-48e6-94de-17c6eb5c1a59",
        "cursor": {
          "ref": "b95dfdac-cf32-4f42-8af2-0b85d5a6b181",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "00d73ded-2840-4d1e-beef-66207176b912"
        },
        "item": {
          "id": "e0bad28c-5c98-48e6-94de-17c6eb5c1a59",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ce7304e0-be9f-4e0c-b294-5d52222edd9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "a0961df7-10c8-4942-843c-f756400d6354",
        "cursor": {
          "ref": "fe4dc1a7-64ef-4515-b28f-a886f08eec4c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ed091c0f-c1fa-4769-ab0c-d181478898c3"
        },
        "item": {
          "id": "a0961df7-10c8-4942-843c-f756400d6354",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8ebc66ac-2d9b-4fe5-b22a-0e2490962e34",
          "status": "Created",
          "code": 201,
          "responseTime": 2103,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "61082d86-5f9c-4586-90e7-c488aba446c7",
        "cursor": {
          "ref": "fd6c5eb4-b9d1-4713-9c10-21cbe5baf1c1",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "efdc508c-a9cb-4b23-94eb-cad6145dbc93"
        },
        "item": {
          "id": "61082d86-5f9c-4586-90e7-c488aba446c7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "909f965e-546e-44e0-b5d8-06723d78fd50",
          "status": "Created",
          "code": 201,
          "responseTime": 2734,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "868ce245-c8b1-4b46-b32d-8d8ff783af0c",
        "cursor": {
          "ref": "531851a2-bb25-4f1e-adb7-e01f9cfb112f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "73ac7961-414a-4496-9628-cc5ef4539f02"
        },
        "item": {
          "id": "868ce245-c8b1-4b46-b32d-8d8ff783af0c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eb2cad0a-a4cf-4d61-a734-f2b6f9376652",
          "status": "Created",
          "code": 201,
          "responseTime": 2428,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c086c4a-899e-42b6-a0f9-e75157764cbd",
        "cursor": {
          "ref": "08d96f0a-fc78-4f56-b89b-d682da57c9f8",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2bd7f3b2-9e9c-4152-8d12-22a17b66e82b"
        },
        "item": {
          "id": "3c086c4a-899e-42b6-a0f9-e75157764cbd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "563e1ec7-77dd-43ae-a31e-465534f878e9",
          "status": "Created",
          "code": 201,
          "responseTime": 2315,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9ed561-30ea-4602-9913-df9421642447",
        "cursor": {
          "ref": "8b994280-c89f-4575-b626-d05e4f4b364a",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c67e9ec6-5adf-4eee-82e7-8eeb18b92b4d"
        },
        "item": {
          "id": "ad9ed561-30ea-4602-9913-df9421642447",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d54c5ac3-3610-4458-b301-3b835e84c5f7",
          "status": "Created",
          "code": 201,
          "responseTime": 2532,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-25T00:53:03Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-25T00:53:03Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "30dcd07e-a902-4199-8c89-2f82a425edec",
        "cursor": {
          "ref": "a302b99f-f6b3-4fd7-a6a2-31cd6c700933",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5c1e94de-96cd-4e0a-acd5-86c90796b8da"
        },
        "item": {
          "id": "30dcd07e-a902-4199-8c89-2f82a425edec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f5592dfe-e354-4e00-849c-e0aba0ea61ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "3c760f20-c864-44d0-a843-9003a096944e",
        "cursor": {
          "ref": "d1da6ee7-d00e-4efc-9b81-01eb78425c68",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "71305e4e-b41b-496f-a9a7-61fba381b87b"
        },
        "item": {
          "id": "3c760f20-c864-44d0-a843-9003a096944e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a643f184-ac67-498c-9345-1617a3267d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4936c7-6021-4e51-bbd0-db776a148c87",
        "cursor": {
          "ref": "1fe66f8b-28e2-4c56-bb9c-6fe095fcc582",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a1128f5-6832-4d5d-be27-125fa5f74ad7"
        },
        "item": {
          "id": "ce4936c7-6021-4e51-bbd0-db776a148c87",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d77d37b7-3ec5-4573-8397-52f3d6a2713f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee059af1-efce-4966-ac84-304b339d7d76",
        "cursor": {
          "ref": "9e465e03-e3d4-4231-a361-2047b1904638",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4615f917-6bc9-4d6f-b7f8-581dcdee3d0f"
        },
        "item": {
          "id": "ee059af1-efce-4966-ac84-304b339d7d76",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "85545436-2581-4c8c-ac1f-40b6d177e937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733759c6-6b18-467a-94ac-8b4d1bf21519",
        "cursor": {
          "ref": "2c3a3e09-43d4-481d-9120-d3185dfd7c1d",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e6051426-a793-430b-afbc-b376bb3e571f"
        },
        "item": {
          "id": "733759c6-6b18-467a-94ac-8b4d1bf21519",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d93f941a-6386-489c-a091-0856f5c5b7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7a1e26-427d-4fca-96df-7b3b78fb4c3e",
        "cursor": {
          "ref": "c21bdf44-39cf-4350-9a68-ce3c86e9e80f",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "62e836aa-c667-4867-b7d5-132a0eee7448"
        },
        "item": {
          "id": "ec7a1e26-427d-4fca-96df-7b3b78fb4c3e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7e58ffc0-2335-4157-956b-8f153c15f2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddd8e21-2d8c-437b-84f0-ceb71e3f7ac2",
        "cursor": {
          "ref": "2b13573c-d1b2-49c3-8381-3d13350258ba",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "62447293-b9d5-40ec-96f8-0b2b9f587ce9"
        },
        "item": {
          "id": "2ddd8e21-2d8c-437b-84f0-ceb71e3f7ac2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e4bb76ff-9d72-41d8-bfad-020bf688f4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3247d75-090b-4f9d-ad14-f201cbee7d83",
        "cursor": {
          "ref": "59b4b3a8-c5c1-479e-a7cf-a9c3b0a6a809",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "03e8e517-ca63-4d49-817d-8e2801f6e0cc"
        },
        "item": {
          "id": "d3247d75-090b-4f9d-ad14-f201cbee7d83",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4a31a93e-33f7-4da5-ba61-cb8737c4fd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7dbb58-2e52-414a-8f68-1b949772ed3e",
        "cursor": {
          "ref": "fad57d67-ff0a-478e-988c-206b68c7eaef",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "83b41c3c-5e80-43e7-94e5-befaf0e4ec9a"
        },
        "item": {
          "id": "0c7dbb58-2e52-414a-8f68-1b949772ed3e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5052b6e4-e90f-4c58-9ecf-e20d0eb52181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefda181-a634-473c-a83c-f8b5d698445e",
        "cursor": {
          "ref": "580a2b60-9a02-4528-891a-b98ee1ef6894",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "76b2af97-7d16-4b90-827e-0773e02a9cd7"
        },
        "item": {
          "id": "aefda181-a634-473c-a83c-f8b5d698445e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "56b7e723-bc39-4d93-8e03-03a03c5fab45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68222f1-4629-476b-8e3b-a344a899da5a",
        "cursor": {
          "ref": "be65bc70-e7da-4639-83fe-ac9bd6e7ca77",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "874e8904-6e06-4377-b1b9-a12f495a3bb5"
        },
        "item": {
          "id": "f68222f1-4629-476b-8e3b-a344a899da5a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "84706876-f497-4cfb-8329-52d23e91f874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b781d992-f7bc-434c-b641-779ba63fe428",
        "cursor": {
          "ref": "fc765c1f-f696-448a-8aaf-5f134b5586b0",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f928e590-a23a-49d0-a247-a270ced18108"
        },
        "item": {
          "id": "b781d992-f7bc-434c-b641-779ba63fe428",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6e06ed9-b045-4f88-a0af-2ce8c0f48e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a49b38e-d028-4292-a071-c395be5da85f",
        "cursor": {
          "ref": "58c8e1ab-bf6e-48af-a58b-dd8ccf48513d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "641de4a4-b7b1-4632-adc4-6255c0559e53"
        },
        "item": {
          "id": "3a49b38e-d028-4292-a071-c395be5da85f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "81fb2042-3e8c-422e-a004-2e6abe9f4228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d912423-7d2e-4223-9e77-e19b6357b1e2",
        "cursor": {
          "ref": "7d1cb538-393d-4b36-83b9-b4b2e4180e54",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "340bbdd9-f2f0-40ba-a4fd-054e78b994bc"
        },
        "item": {
          "id": "3d912423-7d2e-4223-9e77-e19b6357b1e2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d6daa0f9-1ff4-466c-9350-b3ead39ec43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1bb5d2-ed2f-4e35-b3a1-802199856e04",
        "cursor": {
          "ref": "4fcd76e7-9f50-4264-95e3-9cb0a632b20a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "53ded93d-7858-4fc2-bfe5-a86cf86582eb"
        },
        "item": {
          "id": "ff1bb5d2-ed2f-4e35-b3a1-802199856e04",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ac31692a-51b4-4fe1-85c3-30775e82a0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58edf64b-bbc1-46f3-8e77-59e413820e3d",
        "cursor": {
          "ref": "81c10558-ebd4-4b82-a661-9802afcc93a1",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a0f1b34a-a846-47c6-a4d4-e8445399258c"
        },
        "item": {
          "id": "58edf64b-bbc1-46f3-8e77-59e413820e3d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "75ca3893-86ee-47f6-8c1f-c376891be343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85b378b-1a91-4bf7-816a-947a07d212a6",
        "cursor": {
          "ref": "023362d8-158e-4cd1-bb84-eac85b746524",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b1f2a804-e864-459b-bfd5-3b5727ef986d"
        },
        "item": {
          "id": "e85b378b-1a91-4bf7-816a-947a07d212a6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dd43faac-a622-467a-b4c2-056e0b34f582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349d7da3-1def-490f-b73a-732a7762528a",
        "cursor": {
          "ref": "7f7b96ac-7a06-4ae5-8bbe-8a070d42a928",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "13ba67cd-a688-4146-96e8-4dc9c8f804df"
        },
        "item": {
          "id": "349d7da3-1def-490f-b73a-732a7762528a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a7b23d09-45db-4101-bc39-20ab7a62d367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d145e5-c3f3-4998-aaee-8bbf387a1787",
        "cursor": {
          "ref": "44b54cb0-b160-4569-b2d4-9518ab4d23c4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ed03491a-4929-4a63-aa40-0095014c98f2"
        },
        "item": {
          "id": "40d145e5-c3f3-4998-aaee-8bbf387a1787",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "76706f6e-1eec-4398-8a97-3266b2683bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99a13a7-34ac-4791-89d1-dc6b19019b05",
        "cursor": {
          "ref": "ce12608f-b04f-40bc-a4e0-ec18f1f8267a",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "414aaa31-e994-407d-a1fa-1126670f1bae"
        },
        "item": {
          "id": "f99a13a7-34ac-4791-89d1-dc6b19019b05",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f5e4556e-e2ea-4c2e-a3b9-c191a445bdd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a670dd0-337b-4381-9ac7-d6bee2dbace4",
        "cursor": {
          "ref": "4c7092ba-52c0-4014-967b-1add1ae45ecf",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "13ab7927-627e-4ace-aa3a-b6059d997b1f"
        },
        "item": {
          "id": "8a670dd0-337b-4381-9ac7-d6bee2dbace4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a43d8f30-7358-406e-813d-1756556dff06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065a7418-c845-46d9-871f-e5ed362e8a0b",
        "cursor": {
          "ref": "54ee029b-82b5-4f10-b984-f76c65f0b10d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2761f1d8-a84a-4df3-bc1c-b56ea6be2338"
        },
        "item": {
          "id": "065a7418-c845-46d9-871f-e5ed362e8a0b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ad67a496-bef3-46e3-99c8-4c8340fa7257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc1065d-55c2-4442-8158-81e82a8d1324",
        "cursor": {
          "ref": "74660f90-1263-405c-82cc-1b0e1728d3c1",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "862722b3-3d9d-411d-9bf9-3426586e4864"
        },
        "item": {
          "id": "ddc1065d-55c2-4442-8158-81e82a8d1324",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4c62aefb-f66f-4e3a-a3aa-ff83dc32a2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a7888c-7359-4af3-8db3-5e5d860d7eb5",
        "cursor": {
          "ref": "e780c39d-50dc-433e-a4f1-9716e9b28e1c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "960b02da-237d-4d9e-ac0b-dd9e0017b127"
        },
        "item": {
          "id": "60a7888c-7359-4af3-8db3-5e5d860d7eb5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0dfbac75-c2a8-4230-a3c5-605d185b7f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338bb8ab-3563-4f18-b379-8f739a3b2117",
        "cursor": {
          "ref": "208d48b0-1d16-4349-96da-0766435b71a9",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f7ec05d6-54d9-4591-96e5-85572a51bea7"
        },
        "item": {
          "id": "338bb8ab-3563-4f18-b379-8f739a3b2117",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c1e07bef-482f-4258-80ba-9157bd829370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748ac12f-51f7-447c-a411-6bc8474b3f01",
        "cursor": {
          "ref": "440233d1-c971-47bb-a047-5e6c7b12be70",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ec619075-f5f5-4298-8275-a07777a7348f"
        },
        "item": {
          "id": "748ac12f-51f7-447c-a411-6bc8474b3f01",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bb3c30ed-a1b9-4552-946b-3620332c14ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6be0458-3af1-4bac-99a0-cd3bfcc97f25",
        "cursor": {
          "ref": "ba14173c-f1c4-4b6a-a150-9ab490b84a4f",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a81488f4-1d56-48c3-bd84-b3b4e46c0002"
        },
        "item": {
          "id": "c6be0458-3af1-4bac-99a0-cd3bfcc97f25",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "87872772-f97b-4392-835c-f72bae721689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b92214e-4f37-4bb1-9afd-90015520bbf1",
        "cursor": {
          "ref": "22db0ac6-fe91-4fda-b6ea-2d13df47f6b8",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "53f01019-93c8-4fee-a988-479a10506fae"
        },
        "item": {
          "id": "4b92214e-4f37-4bb1-9afd-90015520bbf1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "75b8286f-6d68-497d-b874-083e419ec6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2100432b-3462-4ff5-8a62-8863bf832281",
        "cursor": {
          "ref": "cc9b04f2-8c48-4698-b737-2ba9d289731f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dc1dcdd2-8227-4c88-bfe1-ee74d699f59f"
        },
        "item": {
          "id": "2100432b-3462-4ff5-8a62-8863bf832281",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4ad7e5c3-172b-425f-b3bb-32ae0857274d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0784fa-e62e-4ecf-a702-34a18e50edf9",
        "cursor": {
          "ref": "ff040b51-da83-43a5-b679-53a4af23289a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3985b0eb-1aa2-482b-b3e6-4e40e12617c5"
        },
        "item": {
          "id": "4e0784fa-e62e-4ecf-a702-34a18e50edf9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a8da6093-f22f-4468-a53b-7706250ebcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dc66f2-5709-4a44-ba31-d92c4022a238",
        "cursor": {
          "ref": "0a6b8ff3-625e-48f0-a764-cae12ce88324",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "702f7b42-8b49-41e2-9472-718d5268fc9e"
        },
        "item": {
          "id": "48dc66f2-5709-4a44-ba31-d92c4022a238",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f5a605c0-fd6e-4523-91be-122ea91d8f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35792529-69e5-449e-b4ba-4741a124e74d",
        "cursor": {
          "ref": "da41f861-6055-451d-87f2-0fba0d477339",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ba11e89b-6cbd-439c-adf7-228c6952695e"
        },
        "item": {
          "id": "35792529-69e5-449e-b4ba-4741a124e74d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "86ebad49-e3ca-4557-a196-46294cb620b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62387fa7-9e43-4cf3-bab0-32d258e8fc67",
        "cursor": {
          "ref": "54a1f6b0-ae07-45d8-9aa5-b04c27f854e4",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "54a0ed54-2626-49f1-8760-f2633aeb6a55"
        },
        "item": {
          "id": "62387fa7-9e43-4cf3-bab0-32d258e8fc67",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8744c5e5-df6d-4750-bf39-8e422a72e857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c515730a-0457-4a25-b1d5-0a2adae114c4",
        "cursor": {
          "ref": "cf197326-4182-4d22-9d34-5591143cd645",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f585857b-28ec-434e-be30-591df99020dd"
        },
        "item": {
          "id": "c515730a-0457-4a25-b1d5-0a2adae114c4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "eba2a118-f49d-4898-ad0a-0b5129937b39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "521703a3-1180-4661-a4b7-229448d372da",
        "cursor": {
          "ref": "fff1fa0c-59c7-40ed-b241-04b9d7bbc621",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b2ca1732-81c4-4160-85f3-ce719f8b884c"
        },
        "item": {
          "id": "521703a3-1180-4661-a4b7-229448d372da",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a38376a1-75ba-4a26-9d79-d44e33887610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fd09cc-66db-45f2-9186-284e36061ab0",
        "cursor": {
          "ref": "d0c89a31-3291-4178-a697-bbc25c2f6573",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dc332a31-cbe2-41e6-a0d7-8915aaa34809"
        },
        "item": {
          "id": "78fd09cc-66db-45f2-9186-284e36061ab0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "63016231-530a-4e10-baff-5ca10ced94b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8013b21-0185-4d27-93ac-b45f79e7ac80",
        "cursor": {
          "ref": "022f4921-d6bb-4c5a-bda1-b6012bcc6365",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ebe7635e-2b7c-4bdd-bafe-750819a586c2"
        },
        "item": {
          "id": "e8013b21-0185-4d27-93ac-b45f79e7ac80",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7fd78659-a866-4be2-ad1c-755b333c6603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1913f0-f238-40ee-b807-52d5f526f2a4",
        "cursor": {
          "ref": "9aa9d83f-f133-4285-8c30-eba72edf3948",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6748d5f9-b76f-4bcd-824b-b9c33aee1c8c"
        },
        "item": {
          "id": "4b1913f0-f238-40ee-b807-52d5f526f2a4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e5228c1a-bf48-451b-bf18-c288d8a06300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511af484-2ac8-444f-b253-c02426bcafcc",
        "cursor": {
          "ref": "27db840e-caea-4b5c-b60c-90376b216556",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a809e4f9-0f8a-476b-9f6a-ee64a7307e12"
        },
        "item": {
          "id": "511af484-2ac8-444f-b253-c02426bcafcc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c46a59c7-d28c-40ec-bda4-d902f711d1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49758e80-c2ea-4f72-8a2f-a501da05cdaa",
        "cursor": {
          "ref": "e6097cbb-61f0-4f7f-b326-d070172af9bc",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f8aacd21-d287-4285-90d1-bb364301772b"
        },
        "item": {
          "id": "49758e80-c2ea-4f72-8a2f-a501da05cdaa",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e41c246b-a81e-4a6d-a050-d36f57136072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee2f15a-f23b-4d95-b789-59a73e6bb4ef",
        "cursor": {
          "ref": "e5a868fa-84f7-4759-a397-0215e1309473",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "df9be66b-1582-4705-8bd9-888f8d0a8d42"
        },
        "item": {
          "id": "5ee2f15a-f23b-4d95-b789-59a73e6bb4ef",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "48a69ae3-97d9-485e-869b-6548852e88d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c16c02-ea8b-46e4-86e7-08a7507b7068",
        "cursor": {
          "ref": "64c84b7d-2138-4a0f-8fe2-b923363d86e7",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ee43744d-6e68-4e9e-ac1c-d60ad79b8daa"
        },
        "item": {
          "id": "79c16c02-ea8b-46e4-86e7-08a7507b7068",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f5c048bf-5b3b-4734-9797-5a39cd1a4f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b2c2ce-8bc9-412d-8fc4-92808ac854ec",
        "cursor": {
          "ref": "7b22e273-d246-44d9-8088-2f23fea3b93e",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bab669a4-3b32-43aa-93ab-76ffab30ef8b"
        },
        "item": {
          "id": "73b2c2ce-8bc9-412d-8fc4-92808ac854ec",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "95182d90-8e49-4fca-9f47-5331c203e862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05beb8f8-6bb7-46ec-8210-98b3557320b8",
        "cursor": {
          "ref": "0c805c44-2106-449e-80fd-bda90221531f",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3ebb2eb-308c-48d2-aedf-b66e40331966"
        },
        "item": {
          "id": "05beb8f8-6bb7-46ec-8210-98b3557320b8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "13309b2e-25cc-4936-8c18-ecac4855b6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b027ca5-c007-4bed-9ae9-acd21354847f",
        "cursor": {
          "ref": "0003138f-1122-479d-b45b-5a6b9ed868ec",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "99d56606-bb6a-402c-a340-eaf6121f4797"
        },
        "item": {
          "id": "7b027ca5-c007-4bed-9ae9-acd21354847f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a06cb1e1-17ee-42ee-b678-e1637da38d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1939d7-ff42-4aa7-929b-f533b4dd9c62",
        "cursor": {
          "ref": "f8ddcf3a-e687-47d1-ab82-87238711286a",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "874c81ca-d15d-4b2c-810f-9a663197bbbc"
        },
        "item": {
          "id": "af1939d7-ff42-4aa7-929b-f533b4dd9c62",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bf1bc23b-ce1c-41aa-9fb7-16547bd0f627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c13bc10-8c54-404b-bde3-6879e26e873d",
        "cursor": {
          "ref": "6294c59c-3e54-4479-9362-ecc5bdc1b098",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "eceeaa43-ba21-4dd2-a62e-0c11491ad8f2"
        },
        "item": {
          "id": "1c13bc10-8c54-404b-bde3-6879e26e873d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7b8f185a-efed-4641-923b-82d1155d8480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c65320-b80b-4271-a0c8-9b030a2b0cf7",
        "cursor": {
          "ref": "9b2fa03e-88c8-48a5-90b8-523c7f8d213b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "925f5940-3c4e-4556-bb0d-47dd9e929e45"
        },
        "item": {
          "id": "04c65320-b80b-4271-a0c8-9b030a2b0cf7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7433cf16-c73b-4cea-b49f-eec1e35c8ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1805bc9f-ad2c-4e94-92e4-573369d7dabe",
        "cursor": {
          "ref": "fc4f1ef7-605f-4429-a1e5-1b1e8b088f37",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b26b09b5-9d9f-496b-8d21-bc35b126f4c0"
        },
        "item": {
          "id": "1805bc9f-ad2c-4e94-92e4-573369d7dabe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "905f794c-3efc-491a-861b-af2b718a0e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d85c01-6994-4be4-92e9-8b90fdc7932e",
        "cursor": {
          "ref": "6c0c4c8d-29ff-47f6-aad9-1ef0328cee53",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f1491c24-72b3-4b12-bcbb-8526a2774ed8"
        },
        "item": {
          "id": "f6d85c01-6994-4be4-92e9-8b90fdc7932e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0ce5ccfa-51c8-4d85-9435-fb35af425315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3b2dc2-1b4d-4892-913a-404da8e06df1",
        "cursor": {
          "ref": "dd1ab0a7-76cc-4155-a327-9dc1ef2b9a02",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "65c7fc42-09cf-4f8e-bdf6-17b4e8436769"
        },
        "item": {
          "id": "8c3b2dc2-1b4d-4892-913a-404da8e06df1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6720cfc1-a58e-4079-a116-618ba3a44271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bc79fc-7807-4395-8364-a506ba02c82c",
        "cursor": {
          "ref": "61188cbe-524f-4eee-ae36-510a7a224272",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "83e749cd-8811-4eff-8712-03f7d20c8fb5"
        },
        "item": {
          "id": "59bc79fc-7807-4395-8364-a506ba02c82c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5354f6c1-b767-4d86-9326-3bb769ffa69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccea5d5f-73ba-4b33-bcbd-8cbf02aadab4",
        "cursor": {
          "ref": "c33ab979-5be7-4cc7-8081-1a84e2d0e012",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f48a572f-1b1c-4deb-ad59-daea34bae56c"
        },
        "item": {
          "id": "ccea5d5f-73ba-4b33-bcbd-8cbf02aadab4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "12b087dd-c651-4add-8d75-85a4da76ca28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251c2ec7-89e4-4fde-95d2-f59837905cfd",
        "cursor": {
          "ref": "538c9c04-7f14-4591-8a55-c04aa0b5000c",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "131e2ea3-905c-4b45-aaea-e84471b9fc4a"
        },
        "item": {
          "id": "251c2ec7-89e4-4fde-95d2-f59837905cfd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "128ba02e-df72-4823-b27c-b5282da24aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5ef3eb-22f7-4df7-83f1-d887b0ee6567",
        "cursor": {
          "ref": "a0dd1eb2-c2f4-471d-a4dd-69a24deaf7ea",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a17fa549-095a-45bf-a0d5-5da7526f88e4"
        },
        "item": {
          "id": "8f5ef3eb-22f7-4df7-83f1-d887b0ee6567",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a9e1f4c3-15b7-49b8-8763-2786ee83c4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ee00d4-3f7e-4b26-89b4-0fe602ac0b8f",
        "cursor": {
          "ref": "5d69fe58-de4c-41ab-8b0e-e2acea413602",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c6c73ea0-bda0-4a55-8fc3-8baecae48c45"
        },
        "item": {
          "id": "45ee00d4-3f7e-4b26-89b4-0fe602ac0b8f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "61c0abe1-ec57-4814-9477-a71452209604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e86b41b-fc5d-42b8-ac0b-b7dea7ed79cd",
        "cursor": {
          "ref": "46196174-320b-4ece-ab98-bb3a63b5df66",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bdc6d0e0-e0d4-440c-a936-29e1aa893511"
        },
        "item": {
          "id": "8e86b41b-fc5d-42b8-ac0b-b7dea7ed79cd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "94459284-3fa3-45fa-9989-0a7e1a0f4649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c940ba8b-ec6a-4af6-a3b9-2fdfbb61b4b9",
        "cursor": {
          "ref": "180ff9a3-e704-416e-8977-f3cea543feb4",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d500b3da-1629-4663-bfd8-a78645a2d492"
        },
        "item": {
          "id": "c940ba8b-ec6a-4af6-a3b9-2fdfbb61b4b9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9f378df5-3a02-46b3-a7d7-bb9bbc1fae78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34ffd83-4785-4be7-8f17-ccdd676b2276",
        "cursor": {
          "ref": "b29c29c7-da80-47fa-b249-4bc8647786af",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c4385f31-065f-4da4-99b0-b53a9eed59d5"
        },
        "item": {
          "id": "c34ffd83-4785-4be7-8f17-ccdd676b2276",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fec90e14-c5b7-460e-a0dc-353dcff9f1e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ec76c9-d75c-493f-a87c-82d2d12cd449",
        "cursor": {
          "ref": "65ee67c0-0bbf-4aec-87d4-c9002d957040",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c4b8e5b3-e4a4-4904-b862-a8933a6e9b3c"
        },
        "item": {
          "id": "56ec76c9-d75c-493f-a87c-82d2d12cd449",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ffafa791-bc31-4d3c-bd56-a2b6da5f2f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9f8d09-424b-4487-8799-69965db7337f",
        "cursor": {
          "ref": "a7ef08fa-06c8-450f-b8d8-cc83602a0855",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "45520b6c-3427-4ca7-8ba3-417a1f789f8c"
        },
        "item": {
          "id": "8d9f8d09-424b-4487-8799-69965db7337f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d1c334f-8bc5-4ffb-9ae7-d5ed5f73e715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e0c10d-161d-460d-8d87-56981e890399",
        "cursor": {
          "ref": "3a296019-02d4-4fa0-99ae-8fb387319d3e",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3085356e-cb2b-4049-a768-cf1deaebc529"
        },
        "item": {
          "id": "30e0c10d-161d-460d-8d87-56981e890399",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "41586b4f-17a3-44ea-b13f-9f2734584548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4c4dbc-35e1-4c7c-88a1-11721db16031",
        "cursor": {
          "ref": "9fa74494-6c92-4324-8131-9dff4f9fc45c",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7366319b-5bf7-4e7b-895c-0743f9e959ae"
        },
        "item": {
          "id": "fb4c4dbc-35e1-4c7c-88a1-11721db16031",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "53a6ae9f-2e96-4ade-9e7d-60a995fe8d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7cb4eb-5bea-43e5-a5f6-99d3b3ec63ed",
        "cursor": {
          "ref": "3793bc4a-3362-4606-9336-8afda6330067",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c5d46ef4-bbee-4511-a9a5-c97cc0b94788"
        },
        "item": {
          "id": "fb7cb4eb-5bea-43e5-a5f6-99d3b3ec63ed",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "31385194-07b7-4326-9537-dbcf24de6105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24efac45-201c-465b-9537-6ec8dbec14b1",
        "cursor": {
          "ref": "e2cf160a-a085-40e0-b308-8659214fe6b0",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7794a77f-7425-4cd3-8f00-b816bcf34c4a"
        },
        "item": {
          "id": "24efac45-201c-465b-9537-6ec8dbec14b1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cba6a56d-1524-4dfe-ba9b-57d1110c6f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630c14f1-8a3d-4793-8f66-c508b08d4e51",
        "cursor": {
          "ref": "f3674670-d05b-4144-8bab-2530f821dca0",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0ea91bce-5e03-45c3-9c1b-5d8611eda633"
        },
        "item": {
          "id": "630c14f1-8a3d-4793-8f66-c508b08d4e51",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "22c0db18-9f55-4985-9b08-e2535d2b91ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2cfddf-3cbe-4717-bce5-321219447b6d",
        "cursor": {
          "ref": "d8a26d8d-1cb1-4ad4-b3ed-b599f0e2e1ae",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "12f0e377-2637-41e2-9bc0-4bf5920b8179"
        },
        "item": {
          "id": "3a2cfddf-3cbe-4717-bce5-321219447b6d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "746be384-fc7a-4bfe-b849-ab31aff7949e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ebe996-81b5-480d-8d7d-f2c1d7dc2c10",
        "cursor": {
          "ref": "a1b535ac-6184-47c7-b1d8-d9d47755464d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "82ee6db1-0d91-4210-8905-c91f2a621657"
        },
        "item": {
          "id": "15ebe996-81b5-480d-8d7d-f2c1d7dc2c10",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "16abd09e-67b7-4929-96d2-21535838be3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1172c5-dfff-4570-84f2-211a82aafddf",
        "cursor": {
          "ref": "842449b1-48c3-4d53-bad8-d4526c3326fd",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c318f8f2-27f0-4e6a-8828-7b13857bb294"
        },
        "item": {
          "id": "7c1172c5-dfff-4570-84f2-211a82aafddf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ab7394b5-c2ab-4ca9-ba3f-7e660042aad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1511b167-15f8-428b-977b-ebeeccea5161",
        "cursor": {
          "ref": "7459adf7-742e-4c23-9236-96e50fef9ed4",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c4056fa9-0e8c-42d4-a1b1-9b47111fe80d"
        },
        "item": {
          "id": "1511b167-15f8-428b-977b-ebeeccea5161",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d4957526-0a68-4561-914a-fb90fadf7838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000414ad-cab5-442d-a45d-4cfad44d5681",
        "cursor": {
          "ref": "fc16d952-0709-457c-8935-70c9ea3b5105",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "262a372a-80ec-45a3-bb19-eaf2f07db1e2"
        },
        "item": {
          "id": "000414ad-cab5-442d-a45d-4cfad44d5681",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d3a06aaa-a3ea-4561-a10f-95eb82afc4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9591c5-87db-44f5-add9-59f997e0d770",
        "cursor": {
          "ref": "87bd6af7-ace6-4f13-bf97-9e94ae2d556f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "99ccfbf6-18ae-4636-b9e3-cd8c07a191e1"
        },
        "item": {
          "id": "6e9591c5-87db-44f5-add9-59f997e0d770",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "05e290e5-16e1-479a-83ce-a0bc847fa7f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "5d271cd0-6250-4547-84a4-6400c74fa2c4",
        "cursor": {
          "ref": "183e7649-567d-4e90-8995-3e0ee69fc547",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3b58426a-0c4b-4b4e-a8a2-41acda816754"
        },
        "item": {
          "id": "5d271cd0-6250-4547-84a4-6400c74fa2c4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fd7dbb11-6f38-4281-9467-cb2919e12e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad12e88-4d23-4d6f-858e-530ec6d19d5f",
        "cursor": {
          "ref": "fb1d5593-54fd-4dd0-a0b6-472529faea0c",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "633baf09-e0e3-44bc-afb8-a4354504fcd9"
        },
        "item": {
          "id": "3ad12e88-4d23-4d6f-858e-530ec6d19d5f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7effa74a-03af-4c93-8d3c-2de75f6be173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea86b491-3eef-463d-b1cf-8751dbb4a471",
        "cursor": {
          "ref": "70be0035-1815-4c48-b090-e16240033a0d",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b6aa402-9161-421d-89a9-998a956ffc09"
        },
        "item": {
          "id": "ea86b491-3eef-463d-b1cf-8751dbb4a471",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "05085892-0a09-4346-b9b5-c2ee9b5b1f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421f2e7d-af71-494e-af4c-310fb5efdb08",
        "cursor": {
          "ref": "8510cb74-8323-4a2e-891d-9546dcd62fa3",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ecabab57-57da-4fb8-b730-532246506646"
        },
        "item": {
          "id": "421f2e7d-af71-494e-af4c-310fb5efdb08",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1cddeb4a-920f-4f71-a2cd-3cd5fae74d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81ec6c9-d55b-4df0-8e18-f2837711ec44",
        "cursor": {
          "ref": "49254dfb-00a0-4fb8-a924-5798a05efae9",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "be6f1305-74db-40a4-8848-1249e21135e9"
        },
        "item": {
          "id": "e81ec6c9-d55b-4df0-8e18-f2837711ec44",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a8a02068-61ff-4d6e-94c7-4a4689defe3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6012614f-ed9e-493f-bc2e-56f20cf31d4d",
        "cursor": {
          "ref": "63abde13-d93c-4368-9c32-ef345ce58769",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a67ee6a7-1577-4377-a08e-6ecf3f027b42"
        },
        "item": {
          "id": "6012614f-ed9e-493f-bc2e-56f20cf31d4d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b612bc9c-0d4c-4493-971c-8f86b865f46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef3df94-2415-4a11-a041-34cf23316fe3",
        "cursor": {
          "ref": "2df7034a-e911-4997-8bd8-70a916785d0e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "977b39db-eb4a-4ec6-8894-9fc9de8e48e0"
        },
        "item": {
          "id": "8ef3df94-2415-4a11-a041-34cf23316fe3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3c914d24-a02d-470e-9c46-243ffa8ef7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10c023b-0dd3-4a01-a9cd-f52ac6bb0181",
        "cursor": {
          "ref": "8f44bcfd-f137-4fca-92f0-c004ef0518d6",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c734c80f-6559-449e-9212-4ce2bdf1905f"
        },
        "item": {
          "id": "c10c023b-0dd3-4a01-a9cd-f52ac6bb0181",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "79a27517-3157-4fc8-9769-b9ccbd7e48ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c3462b-d0a5-4912-86f3-4f1c8dc828ba",
        "cursor": {
          "ref": "174e617b-e103-4515-8b91-7d090b5c1344",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a23e22c3-357a-4c04-941c-d3e4d052a3ce"
        },
        "item": {
          "id": "d0c3462b-d0a5-4912-86f3-4f1c8dc828ba",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6063442a-fb11-427c-9652-b4899c38e5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f9ca0e-4ece-47b6-8097-1c59068a36cf",
        "cursor": {
          "ref": "944dae6d-e290-42ab-9291-199691c8c6ad",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "48e59d22-3351-4784-9f02-ae167835289c"
        },
        "item": {
          "id": "f0f9ca0e-4ece-47b6-8097-1c59068a36cf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5a8aa304-ad70-4a64-930c-15238a38575e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e0b493-0c46-4865-a8b8-5829f1c261dc",
        "cursor": {
          "ref": "2324cf65-b1b4-4b80-bc36-f4d6c8e300bd",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7de5689f-a120-4dcc-9ebd-327836b81647"
        },
        "item": {
          "id": "20e0b493-0c46-4865-a8b8-5829f1c261dc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ee38ca1a-698f-4ca7-ba0c-8798acb772ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ed842d-9da9-432d-81b4-7b4bfe8b74f5",
        "cursor": {
          "ref": "177de828-75af-447f-9a77-56f22d0a524e",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "90f28fd7-7fb4-45e6-be1e-69ccb6db0403"
        },
        "item": {
          "id": "66ed842d-9da9-432d-81b4-7b4bfe8b74f5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "064c931b-74c0-423e-a3f2-848157cbb78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde8e0b2-5642-4ece-ad08-0e9415a28bc9",
        "cursor": {
          "ref": "7fc275a3-610f-49ea-8d7c-6da810f585d5",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c17cc712-8402-48c8-a222-1929c97770a1"
        },
        "item": {
          "id": "fde8e0b2-5642-4ece-ad08-0e9415a28bc9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2d544aad-b95b-4e84-9be6-cec14b12c6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6413c0de-50e9-46a7-bc8e-29254cb8d49e",
        "cursor": {
          "ref": "0a8cc758-3b76-4f36-bbc9-19859956ffb7",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "57b62bb9-4b70-4a93-9422-94485cc32827"
        },
        "item": {
          "id": "6413c0de-50e9-46a7-bc8e-29254cb8d49e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "00116958-92ef-41cd-82f8-b91bb112e243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9577fb-51b9-4556-a9a5-324221dbb1b3",
        "cursor": {
          "ref": "3af2f302-267b-4576-a52c-0bb6aa2915a7",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c3c53e9f-10ec-494f-b3ee-d340f23975df"
        },
        "item": {
          "id": "6c9577fb-51b9-4556-a9a5-324221dbb1b3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "088fdd03-8b61-4f71-9fde-f90ccf49d096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72d3142-9626-4d30-84ea-887d1684bdc3",
        "cursor": {
          "ref": "de7edd98-30bd-49ed-8558-e6580cba97e5",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7384762d-4acf-4df3-b5eb-c751e92c0072"
        },
        "item": {
          "id": "d72d3142-9626-4d30-84ea-887d1684bdc3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "75b61573-9c65-4840-8fd4-39b1e93dea72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61b3cd4-884a-4a8b-b162-7a353389fba2",
        "cursor": {
          "ref": "3fcbf7a8-8f81-4d36-a10d-1607e9b249bd",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "977d2659-b860-4aa5-bf48-d58251579381"
        },
        "item": {
          "id": "e61b3cd4-884a-4a8b-b162-7a353389fba2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "60bdc359-03c1-4c94-898f-d82f6660c30e",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "c6ed6bf3-70c2-44a9-a892-4645a9f1520a",
        "cursor": {
          "ref": "b7504127-89fa-4dc4-9806-0a15024d6378",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "851830cc-79f0-4a33-bfad-57be4a2f474d"
        },
        "item": {
          "id": "c6ed6bf3-70c2-44a9-a892-4645a9f1520a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7c88aa87-8e74-4edd-84c4-3adc14fa95c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fb8989-35de-43f8-8213-52a4539897ab",
        "cursor": {
          "ref": "bab3f713-5294-4d1e-8ff0-135c416a2af3",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a8b18121-27b2-48b0-99e1-a9ba0ee59c56"
        },
        "item": {
          "id": "76fb8989-35de-43f8-8213-52a4539897ab",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d859f383-f8fc-426d-8b3a-1d01bec8382d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dbfd45-befa-4734-86bd-d62d3d852102",
        "cursor": {
          "ref": "4cba2767-8c11-4ab0-8bf5-fdc32c5aeb5a",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4509515d-598f-43f0-9e72-59ff056b4b4f"
        },
        "item": {
          "id": "d9dbfd45-befa-4734-86bd-d62d3d852102",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fda27390-081c-43b3-8908-a26a5debfbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157a91cc-59e4-4887-bc1c-45abd8023287",
        "cursor": {
          "ref": "28ad665b-ae4a-411f-94f1-92e961abe85b",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2fd0ab69-b437-4534-9d16-d4cc5141782f"
        },
        "item": {
          "id": "157a91cc-59e4-4887-bc1c-45abd8023287",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8ac61c40-3e3c-4f78-a980-4d2889f515d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e197ec71-b2bb-4635-81dd-71d9895ff0e0",
        "cursor": {
          "ref": "899a4acb-af33-42f8-ab52-4818e4acfe8f",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9526c4fc-d9a3-49d2-bf5d-65714783f7a0"
        },
        "item": {
          "id": "e197ec71-b2bb-4635-81dd-71d9895ff0e0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ab53f76-189e-4458-97fa-f8bf1fab88b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe5bdeb-6ac4-4420-a1f1-e90f49d1e9a8",
        "cursor": {
          "ref": "d14e59f7-94a3-4127-b3fd-c509dc7d9567",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8164a95e-81f5-4e0c-8623-69e8bdd7d30a"
        },
        "item": {
          "id": "bfe5bdeb-6ac4-4420-a1f1-e90f49d1e9a8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a0639ae7-7cc6-4655-bdeb-ef7a572afe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f81a90-1666-489c-a7fc-23302ffebcbc",
        "cursor": {
          "ref": "2d581743-8228-49ef-8fe8-16cfd7b63e67",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c33f038b-c773-4295-8938-a4a547ad5d51"
        },
        "item": {
          "id": "f1f81a90-1666-489c-a7fc-23302ffebcbc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fd7e959b-d411-4473-bf74-e7f18d6b9054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77ae6e0-c94e-4d95-9b14-bbb4469a5e85",
        "cursor": {
          "ref": "c42b5f1d-8d8a-48d3-86c8-e65fb49ccd03",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dfed07c0-3bfa-40d0-8e39-2edd852e0822"
        },
        "item": {
          "id": "d77ae6e0-c94e-4d95-9b14-bbb4469a5e85",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "67bc08a8-0816-49a0-aa99-6cfa1e58164b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4588600-21ae-44da-a2de-550370ea8ab9",
        "cursor": {
          "ref": "7b9d0dfd-92f3-48d8-9248-fbe2e6efa995",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a1020c41-e703-411b-8ea9-6b1484a5f4c4"
        },
        "item": {
          "id": "e4588600-21ae-44da-a2de-550370ea8ab9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a6aa7e37-f4d5-4de1-bc11-cc12d3fb1084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecceef89-ac32-4995-8832-f09f4aaf51b2",
        "cursor": {
          "ref": "71cd4ab2-83a3-4e0c-a17d-d70d27c102b8",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e69cced3-7cd3-4fb9-8e22-feab08a0a1ab"
        },
        "item": {
          "id": "ecceef89-ac32-4995-8832-f09f4aaf51b2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9b5a4dba-63ce-4fd0-8483-79958c3daa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf540df-a610-41a1-8a82-367994e20fc1",
        "cursor": {
          "ref": "d0597b49-1494-4c0e-8066-3b8fcc0ace3e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "30b4d3f2-d8d8-4a07-9186-0633df84311d"
        },
        "item": {
          "id": "0bf540df-a610-41a1-8a82-367994e20fc1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e7413d30-c9c7-4798-aed1-63ebccc54e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ee05d0-3eb7-4381-bc67-0634a0467639",
        "cursor": {
          "ref": "a0f45b07-a469-406c-98ca-bf865e1b8798",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "600bf311-89b9-456f-a626-218ab214266e"
        },
        "item": {
          "id": "51ee05d0-3eb7-4381-bc67-0634a0467639",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5976b9c8-e6de-49d6-9f54-8c109d28b9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f579b178-8657-496e-9d2c-31f93b147b51",
        "cursor": {
          "ref": "ac8cb1b4-d853-4dce-b03c-3dc767dce6b9",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "99f8ec3a-ac12-4b68-a618-be628ca797fd"
        },
        "item": {
          "id": "f579b178-8657-496e-9d2c-31f93b147b51",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b5011c2c-5ff9-4f55-a230-398df6284965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0ee4e6-7d4c-47e3-974f-9380aa0f29d6",
        "cursor": {
          "ref": "c4ebfbc9-ae8d-4eb3-919f-a8131b9cefe3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d7ac9fbc-aeb5-4af0-ab9a-a8b0873771c3"
        },
        "item": {
          "id": "1a0ee4e6-7d4c-47e3-974f-9380aa0f29d6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "29730273-5ea2-4e48-b007-9d44fb9cf8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863c0743-6515-4408-a4bd-0441ef8459da",
        "cursor": {
          "ref": "2f090a73-f0f3-4842-bf02-869eb0d5db11",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e847fa64-99f8-47aa-867f-c00940f15b2f"
        },
        "item": {
          "id": "863c0743-6515-4408-a4bd-0441ef8459da",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6adb05c6-48ed-46fa-a95c-34e662e87027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babe1283-52a8-4df1-be79-9c4f279c8c89",
        "cursor": {
          "ref": "6aa5e8c4-b25d-4912-a327-fc92aee399d3",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8ea52f55-7f42-4e76-b2dc-cef7acd10783"
        },
        "item": {
          "id": "babe1283-52a8-4df1-be79-9c4f279c8c89",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2227e6d2-6f0c-4aed-91c6-e1751056fbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dad78c4-d400-4eff-a4a7-35698d0a20e5",
        "cursor": {
          "ref": "8fb695ce-d177-48e9-8800-28d6965bcedd",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e3c3d9c9-3b6b-4da8-b4cf-39f23c5e0ebf"
        },
        "item": {
          "id": "8dad78c4-d400-4eff-a4a7-35698d0a20e5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "00997ac7-b3d7-4f9d-a51f-4e9016fee605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04d1f52-981f-4ecc-a433-0d00c3737873",
        "cursor": {
          "ref": "c8f78347-e44d-4535-b0ea-e3b2ddb18eca",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b3323a7a-b062-4720-8e49-eecfe2046cf6"
        },
        "item": {
          "id": "b04d1f52-981f-4ecc-a433-0d00c3737873",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f31318ed-e6bd-4d27-a0a0-1370b2af9c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0814f1-4f4d-4614-b95d-b925b37aa390",
        "cursor": {
          "ref": "c1cb7e24-de4b-4074-8178-2475a5cad44f",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8ba8c75d-268d-49d3-8352-935e7a953769"
        },
        "item": {
          "id": "4a0814f1-4f4d-4614-b95d-b925b37aa390",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c6cbe20a-c992-450c-8e06-89bcaaeb5aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253dbff2-36e0-485f-bc12-d41d1f1b2b08",
        "cursor": {
          "ref": "6f18a025-5e1b-4c01-8ecf-754955378498",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d99cf17f-d8de-4e68-bf3e-c25bb5a26896"
        },
        "item": {
          "id": "253dbff2-36e0-485f-bc12-d41d1f1b2b08",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "eb2b0105-045d-4193-ac42-e1518cc590c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a857685-1ea5-40fe-8a5b-6edbe3ce72f3",
        "cursor": {
          "ref": "311c7e27-0e67-45c5-a7da-2795e1479afe",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fa0ce3e2-ba04-4e47-b707-9eb0fe2eef6a"
        },
        "item": {
          "id": "3a857685-1ea5-40fe-8a5b-6edbe3ce72f3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "96689e4a-3c32-4dfb-a600-a2d39ddac0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d028c4-8612-4887-b4db-4485e90e5b37",
        "cursor": {
          "ref": "5d7338bc-917d-4b81-8a0e-a0f2a96f1945",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0d005e4b-c7b0-483a-bc83-a2774fcf0483"
        },
        "item": {
          "id": "86d028c4-8612-4887-b4db-4485e90e5b37",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "21e690f1-5552-45a3-8be4-aba59555fec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80efac02-1f1d-45af-8b1e-484740ac59de",
        "cursor": {
          "ref": "e02b2632-1ce4-4891-b4c3-39783ed3b94a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "773b731d-02b5-40e4-8921-c5cd232c03bd"
        },
        "item": {
          "id": "80efac02-1f1d-45af-8b1e-484740ac59de",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b3d4b32d-4aaa-4679-903b-215b262a1dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4240ec-6c05-4f7b-a8b0-54c4025b0874",
        "cursor": {
          "ref": "2d5195c2-541d-431e-835e-dda28d5638af",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c78730bf-3e48-40f7-b85c-0765647a04d1"
        },
        "item": {
          "id": "8d4240ec-6c05-4f7b-a8b0-54c4025b0874",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fbc713f5-3608-4dde-94f2-e8f01bbd9ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78414830-ca31-4ab9-8580-3db7f0c5cc13",
        "cursor": {
          "ref": "73aa9996-3ccc-46b9-a227-2e94b5d68279",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "897a3c80-9888-499c-a9fb-453af9666675"
        },
        "item": {
          "id": "78414830-ca31-4ab9-8580-3db7f0c5cc13",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d73c9fcd-1b8d-4b18-ab8b-ea04fe6a559d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86219698-22e8-4591-a659-c1281812ee43",
        "cursor": {
          "ref": "91229b5b-2962-42b0-831c-19c8f8014ab4",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "708f8667-f989-4721-bd0d-07e737ba143f"
        },
        "item": {
          "id": "86219698-22e8-4591-a659-c1281812ee43",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "af764252-4241-4b7f-9274-91120b08fda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da9334f-68f7-4f2c-8fdc-5f572d8dddc9",
        "cursor": {
          "ref": "6476269d-b6a9-44c0-8d5f-081f817be83a",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "46f045b7-f4a7-447a-b4ec-9fe427cc77cd"
        },
        "item": {
          "id": "6da9334f-68f7-4f2c-8fdc-5f572d8dddc9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e469feb8-0d4c-48bc-a966-3d973553013d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19eda373-96ea-4ee3-b2a9-0c964428831f",
        "cursor": {
          "ref": "9a96e8e6-c732-4660-9847-65187efe3e11",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d509176f-2337-4b74-a9ee-2d2b555c297e"
        },
        "item": {
          "id": "19eda373-96ea-4ee3-b2a9-0c964428831f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2a51d523-97e0-4cb6-bf70-e0580639276b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6600ec-df36-4724-8d30-d482b5789fcf",
        "cursor": {
          "ref": "57ffa27c-16fe-4cad-9355-b298eb1c0a31",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8986a2a2-57a7-4acb-b52e-456e4380bafb"
        },
        "item": {
          "id": "aa6600ec-df36-4724-8d30-d482b5789fcf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d679477b-9557-40bd-b315-c7d13ff72543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24353714-f02d-488d-b530-e71bdee0a0ec",
        "cursor": {
          "ref": "5b7b4348-5693-4b53-9cf7-b3daf9934adf",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b068529c-7e49-47ee-a37e-12746fa638e9"
        },
        "item": {
          "id": "24353714-f02d-488d-b530-e71bdee0a0ec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "010b8a2d-4846-443e-a6e6-d1254b37beb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b73d09-fcbe-4a36-8926-6a6381a76a0d",
        "cursor": {
          "ref": "42578f44-27fc-43a4-b645-963fbcfa0128",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c431b619-acd8-4a91-957b-78683c0165f4"
        },
        "item": {
          "id": "74b73d09-fcbe-4a36-8926-6a6381a76a0d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f128b9d5-ced2-4a61-be91-f8423fe328f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d340a53-051e-467d-a465-35fa64e9de08",
        "cursor": {
          "ref": "1378c231-b097-43ba-9906-5adf77a45dbe",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e39768a8-4952-4f85-b8b8-d53d8675c373"
        },
        "item": {
          "id": "2d340a53-051e-467d-a465-35fa64e9de08",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "eda510f6-17d5-4c87-b954-f87e7bf1d4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4124a5c1-e68c-4b21-af76-ea5c57021780",
        "cursor": {
          "ref": "ef3869a2-dc34-4ef6-8c7e-d57eb9d4d1d2",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "becfa854-5816-40c8-9965-b2af241e742a"
        },
        "item": {
          "id": "4124a5c1-e68c-4b21-af76-ea5c57021780",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a0c7c42b-53f2-43b8-b91b-761cf7ae74f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8a3a36-2ccb-49a3-a4a1-b1b0d002c873",
        "cursor": {
          "ref": "6672d00e-ba6a-4e0d-be12-2a76c4afbb9b",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0d8bfc15-ae23-45b5-a9ea-52fffb6b52be"
        },
        "item": {
          "id": "1c8a3a36-2ccb-49a3-a4a1-b1b0d002c873",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21077bd0-26a0-423c-8135-9024a32b9a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311385b9-c310-486b-b8d9-4f203903b7cd",
        "cursor": {
          "ref": "e1df2891-e82d-41ca-897a-722ebc6bf7a9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "844586cd-f8de-48bf-af94-7d4432a6ec55"
        },
        "item": {
          "id": "311385b9-c310-486b-b8d9-4f203903b7cd",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d35934d6-e8a9-49b2-a762-89f1f7a64bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa0f2ef-360d-44be-8513-7c0106aadaa1",
        "cursor": {
          "ref": "b5874ca8-0fc9-41e2-80aa-d9cf1f2677b2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cdfd5d2a-4752-454c-8c16-990124de1993"
        },
        "item": {
          "id": "4aa0f2ef-360d-44be-8513-7c0106aadaa1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dadf5125-5a49-4809-aa04-ff897d85a41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c5407b-a798-40f7-a45a-8ef0e2205334",
        "cursor": {
          "ref": "fa487d97-4b11-47dd-afb2-24f77a7c7db2",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8e6c1abc-7be8-4036-9072-6e2d28d9bcdf"
        },
        "item": {
          "id": "22c5407b-a798-40f7-a45a-8ef0e2205334",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5b0efcc5-8a56-4c60-88fe-1fd76162f31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d38074-0fb0-448f-a48d-dfee80bc26cc",
        "cursor": {
          "ref": "ccd74be3-1fec-4b8d-b4a5-0d32a62ffa4b",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c231cf0a-ece4-4a59-b343-3606d2ac3570"
        },
        "item": {
          "id": "98d38074-0fb0-448f-a48d-dfee80bc26cc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "bc046994-48f1-457c-b035-55d732804fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62da78a-c07e-4521-a756-aa47d4e9f487",
        "cursor": {
          "ref": "fa567d35-d189-4c8b-a23b-98cf028983f9",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8666a484-cc3b-4090-b775-f0fc6d0f015a"
        },
        "item": {
          "id": "b62da78a-c07e-4521-a756-aa47d4e9f487",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "85a0b31b-0fe4-4702-bd8e-92858c637559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f9c351-cb3f-4697-91f1-e17b8da119c0",
        "cursor": {
          "ref": "6d4f5b1b-cf30-4d00-b3e7-e3b750ab97ec",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "151d2a33-8608-49f6-93e9-77eccc96abc4"
        },
        "item": {
          "id": "07f9c351-cb3f-4697-91f1-e17b8da119c0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ae266f17-d5c4-4d5f-a765-ebe7a8fae93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab39c91-5113-42c0-819f-1d809bc89b6d",
        "cursor": {
          "ref": "d90aeace-c86c-45ca-9aa7-c3d3603ff10c",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "53be1be4-0c1d-48c2-9ad0-f3ae63297e3f"
        },
        "item": {
          "id": "4ab39c91-5113-42c0-819f-1d809bc89b6d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b4bbdc4a-fc6d-4953-95a7-0dbc594f4182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1341b2d1-394e-4fda-90e1-fa6e8c3cd36c",
        "cursor": {
          "ref": "ca89ec86-48e2-4d2d-8e98-093d67c96116",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2108b31-f403-408a-b72a-b313af47c129"
        },
        "item": {
          "id": "1341b2d1-394e-4fda-90e1-fa6e8c3cd36c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f53586e5-e769-4d37-a395-dd27b7100f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e8fe9b-5ca6-44f4-9969-c0935018c87e",
        "cursor": {
          "ref": "f2eab9b8-129b-4376-9268-48e43dd8e17a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5a117e07-4950-4546-a78a-bf8309050e28"
        },
        "item": {
          "id": "c9e8fe9b-5ca6-44f4-9969-c0935018c87e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b7f2a4b-76aa-425e-aac1-40e075b2b812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8db69c0-83a9-43a7-8a64-4f32b2a3b787",
        "cursor": {
          "ref": "1c2e73b8-ae28-454c-b2a9-c55469327d2e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "60a0009b-8ab7-4b13-97d6-ffeb1582d539"
        },
        "item": {
          "id": "d8db69c0-83a9-43a7-8a64-4f32b2a3b787",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d4718c87-661a-4f31-8b11-3c885d5900aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa7569a-b000-46d7-afdb-c2ef717e8106",
        "cursor": {
          "ref": "4d6edde7-c720-4cd5-a54d-550718bea1fb",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c7d0d4ac-3980-4bb2-8e0a-65dc1158f2c7"
        },
        "item": {
          "id": "4fa7569a-b000-46d7-afdb-c2ef717e8106",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "00bcbb37-d145-412c-b160-280659d2c3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95948d64-14d9-42fe-95f4-43bb773bcb04",
        "cursor": {
          "ref": "14865a60-b4a0-49c3-990d-b65058859eba",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "98bc17cf-f8d8-49af-9f04-e79e6218ac13"
        },
        "item": {
          "id": "95948d64-14d9-42fe-95f4-43bb773bcb04",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b5935ae1-9f6f-4908-adc2-7faaa5f54e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d21da81-029c-4eb8-8a68-8b4b46b5fb95",
        "cursor": {
          "ref": "1a926a64-8849-4aba-940f-dadbfee392c4",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0f51a67d-45c1-4f8b-afbb-54cff79288bd"
        },
        "item": {
          "id": "4d21da81-029c-4eb8-8a68-8b4b46b5fb95",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9c92884e-5bee-4474-90b6-8298e34eacc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935f81ec-046d-43ee-a83b-bc17a12b9e57",
        "cursor": {
          "ref": "7bbf5d90-07b1-4d5d-b8ae-e376b3d5c079",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "14abf9e3-d83a-4836-b868-f2d807bef897"
        },
        "item": {
          "id": "935f81ec-046d-43ee-a83b-bc17a12b9e57",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a8365b11-7e57-4da8-9438-e71f608c7485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28de5f3-0cb2-44ef-b640-00c43e76b234",
        "cursor": {
          "ref": "01f0d255-c3b4-4e80-a109-d7c23c3f6cb2",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e1fd359c-7841-4ed2-9620-a958e9b0bc9f"
        },
        "item": {
          "id": "e28de5f3-0cb2-44ef-b640-00c43e76b234",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eb432609-d464-4dbd-b24b-9e0fbef3f413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfadc23-7f6b-4c6d-9c3c-4c081035451c",
        "cursor": {
          "ref": "68fb5a0a-6272-411f-a7af-249e46876aa2",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a9cff213-8de3-4a2d-8dc9-0b44904aaeac"
        },
        "item": {
          "id": "5cfadc23-7f6b-4c6d-9c3c-4c081035451c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0f605194-adc5-43fa-bb40-30b41b3369cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b7b2be-a64a-46aa-8569-b22835ba72a1",
        "cursor": {
          "ref": "5c5919fd-8398-48bf-ac33-d89d57539cad",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7d95322c-769f-4dde-a45b-71788021e48a"
        },
        "item": {
          "id": "97b7b2be-a64a-46aa-8569-b22835ba72a1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f752ac4a-55eb-4aa8-9864-71654f287c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09017c4-d00e-4d30-b599-0fcd5b75ced3",
        "cursor": {
          "ref": "88be1545-8b1a-4028-9bb1-d043a0b29611",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b5b98bdf-819e-46df-8bfe-d0cc0e61eef0"
        },
        "item": {
          "id": "b09017c4-d00e-4d30-b599-0fcd5b75ced3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9cd32a1d-f914-43de-bf1d-32b4d85905ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fd7090-57a5-4748-8217-8f113f34f8d2",
        "cursor": {
          "ref": "097dcc46-2c0f-4026-9eeb-b6bcefe9d435",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b138c280-58c3-4e25-9cf5-4ba238c5186c"
        },
        "item": {
          "id": "81fd7090-57a5-4748-8217-8f113f34f8d2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a1ef149e-180c-40f1-b575-b0b62438b61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc866133-ae38-495e-8e49-07b688a33f76",
        "cursor": {
          "ref": "82b1cafe-7a8e-472d-aa17-b058d5899db0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cdd2b63f-7f05-4a84-bd93-05cf3ad23342"
        },
        "item": {
          "id": "dc866133-ae38-495e-8e49-07b688a33f76",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8d64fe7a-fad5-424e-a564-23f69829734e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4ddfc3-1660-4254-91ff-f87571d85d77",
        "cursor": {
          "ref": "b281f106-dd94-44ae-95be-14da54c2538d",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9f33419a-c4dd-4fc8-9adb-e6b29ba907ab"
        },
        "item": {
          "id": "3b4ddfc3-1660-4254-91ff-f87571d85d77",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9da12a80-0517-44fd-8328-0622ace2fdd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe36218-692c-4a3f-aa36-088ffb8127dd",
        "cursor": {
          "ref": "c17f44d9-0a29-4ba8-b77e-a4ee91d03ea4",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2947b071-9f09-493d-a288-a0405902220f"
        },
        "item": {
          "id": "6fe36218-692c-4a3f-aa36-088ffb8127dd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d61f62d2-6c70-4dc0-87da-76088a78a9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290290c1-7cc3-4cfa-9671-dc52e31dc356",
        "cursor": {
          "ref": "fea057be-b0f0-489c-9ac0-862fdd4af7ff",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2e3ad265-f5d5-49d8-9a39-8e7f563ea7b4"
        },
        "item": {
          "id": "290290c1-7cc3-4cfa-9671-dc52e31dc356",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e461c8dd-8a55-43fe-947d-3f2e9ca0cd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae768eb-a891-4e35-9d6b-d8a5a5edbf2d",
        "cursor": {
          "ref": "1ca7c529-fef5-4954-9fda-8c4425380087",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "95d3f672-adfd-45f5-98a6-17a87a13eb14"
        },
        "item": {
          "id": "eae768eb-a891-4e35-9d6b-d8a5a5edbf2d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3b03a4fe-b2bf-4174-ac7e-3fa5d0db7986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e415eb76-0529-49e5-a78b-79662738cb1d",
        "cursor": {
          "ref": "b1cdea15-f9e4-4dd2-85d0-c60b8079f49a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "c8cc5881-d5d4-4c56-a148-c295692f3dec"
        },
        "item": {
          "id": "e415eb76-0529-49e5-a78b-79662738cb1d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "008252c5-2e68-467c-966c-3f187898454c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dddbb8c-a6d0-4d8c-b9ef-755efb4417ed",
        "cursor": {
          "ref": "48111d43-f76e-496c-b4b1-469e7bc51484",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "cfe569d7-0230-49a2-b983-858108756b5c"
        },
        "item": {
          "id": "4dddbb8c-a6d0-4d8c-b9ef-755efb4417ed",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4cf85040-a466-4d52-b239-7154bbf152aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41fb92d-18a2-45a9-b45e-7fe609b05c11",
        "cursor": {
          "ref": "ec00384f-c990-464d-80e0-d59c80299eb2",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "aecda23a-f8c0-4b57-ac47-39f35ca8d918"
        },
        "item": {
          "id": "e41fb92d-18a2-45a9-b45e-7fe609b05c11",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b1bb4409-10c8-4130-a33b-c46e10e7e2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec236665-c0df-4e6a-bdab-54641eeca3e3",
        "cursor": {
          "ref": "f9140f65-ecab-4b82-86d3-a293be027b5a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6e81236f-acb5-41db-b9d9-8a3a0a8f711f"
        },
        "item": {
          "id": "ec236665-c0df-4e6a-bdab-54641eeca3e3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ee66b01d-95d7-4d56-bac5-368a64f5df77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb52eb2-4118-4e06-ba98-fc1576442e41",
        "cursor": {
          "ref": "cf6ce588-69f9-4e7b-a211-a6ae499e3c3e",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "695e78b8-6393-48c7-8208-b9cb881a98e5"
        },
        "item": {
          "id": "fdb52eb2-4118-4e06-ba98-fc1576442e41",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "68d27e8b-c0f2-4637-aabd-e71b9e5fcd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cf0cd6-b8d4-433d-9c88-1e12388916a5",
        "cursor": {
          "ref": "af85f0c0-c039-4e65-8b83-7c371adfb0cf",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "275fc482-b6e2-4b38-9ea9-e63543b12f67"
        },
        "item": {
          "id": "05cf0cd6-b8d4-433d-9c88-1e12388916a5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "01d8f9b6-228c-4f0f-881b-a3e7b30fb63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b9ef47-ef03-423d-9ba7-daae6793c2b5",
        "cursor": {
          "ref": "57759e5a-dcad-4f78-b89c-8ef3c373351a",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "01efaa6c-64dc-4bc5-ad83-fc64a1bd5850"
        },
        "item": {
          "id": "81b9ef47-ef03-423d-9ba7-daae6793c2b5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fab047e9-78ef-4a2b-ada8-30aa9c9fcb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae3dddd-e175-4935-9936-02040a0856ef",
        "cursor": {
          "ref": "870b2add-b43e-41e6-9fe8-ce1f13eae814",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f944a7ba-35dd-46cd-b1ab-a82daab8d85c"
        },
        "item": {
          "id": "7ae3dddd-e175-4935-9936-02040a0856ef",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7d745dfd-d041-4781-9920-7e73feab19b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16e04f5-8057-451e-95c6-c8c0a61bd799",
        "cursor": {
          "ref": "f539566b-bf47-4ff6-b4de-cae64b6c7032",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2aeec5e8-bff3-4975-80c6-93e94468c038"
        },
        "item": {
          "id": "e16e04f5-8057-451e-95c6-c8c0a61bd799",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7721c90a-cc96-4a4f-908f-a461302a223d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9cc092-a641-43c9-853a-4b77556239c9",
        "cursor": {
          "ref": "12569c43-8643-49e9-85e2-b0b1e441eb1f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8776289f-8506-43f5-a052-3f00a8f4d35e"
        },
        "item": {
          "id": "9b9cc092-a641-43c9-853a-4b77556239c9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d69f5d93-a116-4ca0-88f5-a7f277ba4bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00c992c-22fc-4b33-b4e0-f996eefb0b06",
        "cursor": {
          "ref": "b58b9886-4938-4130-bf47-ae7060d24308",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1ecf57c2-e374-4cf8-a74b-8cf21120f305"
        },
        "item": {
          "id": "b00c992c-22fc-4b33-b4e0-f996eefb0b06",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "378c9bce-dc5c-4648-bf3d-1f7ab5e82411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0400e829-70af-480b-962d-737f6ac1c7aa",
        "cursor": {
          "ref": "cc6bdb06-2d72-4efe-a625-7c916920eea2",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c121d59d-196b-49c9-8b44-a8434ca1304f"
        },
        "item": {
          "id": "0400e829-70af-480b-962d-737f6ac1c7aa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c8036135-e008-435b-963c-569248e9b81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27cee11-768a-4d1f-9800-9f0ca3a123be",
        "cursor": {
          "ref": "245c7d21-1cc3-45ad-b254-12373e389b3d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "8f8ed479-24d3-4168-9173-883437e95350"
        },
        "item": {
          "id": "b27cee11-768a-4d1f-9800-9f0ca3a123be",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d6b4f0ab-cc5d-49b4-8523-4c0156b27471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42afaed1-14f3-487b-8406-bc4444c0c2a8",
        "cursor": {
          "ref": "bed4254e-3cb8-4777-812f-890f4d8d8e8d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c1e2000b-f2cc-4aa8-968e-cf50129958d8"
        },
        "item": {
          "id": "42afaed1-14f3-487b-8406-bc4444c0c2a8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "343defc5-7f6f-4aa3-a32e-9a7c18cca5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da665f2-48dd-4267-a65b-6b5b5e000ca6",
        "cursor": {
          "ref": "4a0bab68-7fc2-45cf-91aa-88e0a03595b0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b7aba25d-0544-4292-ba11-bf45561d2c2d"
        },
        "item": {
          "id": "4da665f2-48dd-4267-a65b-6b5b5e000ca6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8c117d6e-8e90-4a77-a689-eb718ae40fb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba0d26c-484e-433d-8159-30880b004f15",
        "cursor": {
          "ref": "ae86b5aa-5f27-4ec2-b95c-167fbd6b3039",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2b6e055c-359e-4b0a-b45d-e1540bcd6836"
        },
        "item": {
          "id": "fba0d26c-484e-433d-8159-30880b004f15",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5a01f6b3-b317-4563-944e-e50600d31986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a943feb5-0a7f-42f7-a1cc-8327bed4e827",
        "cursor": {
          "ref": "0a768af0-b5e7-4f47-8619-51d0415b747f",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8e2deb9e-31c0-49d3-8e94-c072d0c08eb8"
        },
        "item": {
          "id": "a943feb5-0a7f-42f7-a1cc-8327bed4e827",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b646a0b6-98dd-44cd-a648-39c48053f504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040222ea-d514-4ccf-a94e-a743384c59c4",
        "cursor": {
          "ref": "a6e90bd9-e96e-4e26-a252-ac22fa5ade85",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7d0f706b-de1a-48f4-a163-5f20c63dfeca"
        },
        "item": {
          "id": "040222ea-d514-4ccf-a94e-a743384c59c4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b66476a2-4c35-433d-bab0-e7141a2f857a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d9e8ce-a7de-4796-b147-b60ed4983043",
        "cursor": {
          "ref": "20a507b9-4e60-4647-b7c8-1a1a0908c61d",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7ce45bd1-3442-4a2c-9fb0-7aac82f2f4d0"
        },
        "item": {
          "id": "68d9e8ce-a7de-4796-b147-b60ed4983043",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "351c0d3e-c0a2-441d-9a2e-7b3ecb9f706d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec4123a-76e9-445e-990f-846b75b959f8",
        "cursor": {
          "ref": "aabe7c3e-1101-4a79-b576-a03aabe63970",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "56ee1ff2-4342-4d8b-9a24-27bf3868b216"
        },
        "item": {
          "id": "bec4123a-76e9-445e-990f-846b75b959f8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dcc6ee7e-58b2-468e-9cb9-cf0cce931ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919ed6cd-8c75-46e9-8e4b-7029b735e6ce",
        "cursor": {
          "ref": "df6dbbe4-11dd-40e4-beb1-d3cdc33c024f",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a54c655b-4836-4faa-b717-74a1860d0e65"
        },
        "item": {
          "id": "919ed6cd-8c75-46e9-8e4b-7029b735e6ce",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2d362546-5bd3-4bfc-b657-9fcd691b925c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5802fe4b-d20d-4e07-b10f-7a1da5cc11d2",
        "cursor": {
          "ref": "9770fd8e-94d3-4e25-93e2-f6737664077f",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "88a2d820-4394-47c9-b3ca-dec449aafe21"
        },
        "item": {
          "id": "5802fe4b-d20d-4e07-b10f-7a1da5cc11d2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "30dc4783-bd8b-4666-972a-5710dffb5878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dc8b81-db8e-4621-8d54-d90a8b7aef25",
        "cursor": {
          "ref": "2d8d13a2-cec4-445a-962a-02823fd57a07",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0a84ea8c-25d0-4559-bb7f-6a063a88f535"
        },
        "item": {
          "id": "32dc8b81-db8e-4621-8d54-d90a8b7aef25",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a903954a-0219-4fd3-9558-720dc16abab7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "aeca59be-273b-4eed-9a79-de52fccd2b77",
        "cursor": {
          "ref": "bea9ebb7-7da5-400e-8819-d6444083e944",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4c5db105-5a0b-41a1-a265-b3b6bf660e58"
        },
        "item": {
          "id": "aeca59be-273b-4eed-9a79-de52fccd2b77",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "62ed396e-7e75-4ce0-b192-0bd5e882f115",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e67452d-f49e-44a6-9b1a-af50b65a28e7",
        "cursor": {
          "ref": "e3ea8c62-704b-4a7b-bda7-24b1e083d6dc",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "488da287-8bbb-4056-96c4-c1142961ac5e"
        },
        "item": {
          "id": "7e67452d-f49e-44a6-9b1a-af50b65a28e7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9cbe44c2-c8de-4308-9c08-0f40fae338e3",
          "status": "OK",
          "code": 200,
          "responseTime": 2391,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "112c0281-4b7b-4908-b60f-bcb59bca65b1",
        "cursor": {
          "ref": "f467020b-d6f5-442b-8a55-adac23e15ebb",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "84efb820-7d51-4b22-92b1-54c9c9325ee1"
        },
        "item": {
          "id": "112c0281-4b7b-4908-b60f-bcb59bca65b1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c8097e87-4219-45cf-8386-49f98fd5f863",
          "status": "OK",
          "code": 200,
          "responseTime": 2730,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8436d28-d394-473f-8aae-880db16698b2",
        "cursor": {
          "ref": "0cffa129-5b67-4352-8849-bb41f9d0d007",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9e0a3749-aaa6-47a9-8ba2-a477d9d286cf"
        },
        "item": {
          "id": "c8436d28-d394-473f-8aae-880db16698b2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9aadb508-595d-4628-ae11-0abe6dc8c14e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c8436d28-d394-473f-8aae-880db16698b2",
        "cursor": {
          "ref": "0cffa129-5b67-4352-8849-bb41f9d0d007",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9e0a3749-aaa6-47a9-8ba2-a477d9d286cf"
        },
        "item": {
          "id": "c8436d28-d394-473f-8aae-880db16698b2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9aadb508-595d-4628-ae11-0abe6dc8c14e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "ac7efabe-7da3-4131-97df-ab635aa6c98f",
        "cursor": {
          "ref": "ef155243-c476-410f-b68f-b221c32ebb99",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "515b98a8-5495-4a45-b36c-1175fd608707"
        },
        "item": {
          "id": "ac7efabe-7da3-4131-97df-ab635aa6c98f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b41790fb-fab2-4ae0-aa96-33358dcae258",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "b5ec08d0-36c0-4db3-b43e-48e3d26d07c1",
        "cursor": {
          "ref": "74c693f2-c55f-415c-8137-8b6f8128bf62",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "75100f73-06b1-4d50-96a3-c4009c804fe5"
        },
        "item": {
          "id": "b5ec08d0-36c0-4db3-b43e-48e3d26d07c1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6ecb9133-ecdf-4191-8f6a-dd3da4172b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}