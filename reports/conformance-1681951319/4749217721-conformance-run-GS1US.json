{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "37c787d3-0b0b-48e2-8fa5-46d55b1f68ba",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b3df37ce-7b93-4a0d-99a2-26f30d2f1504",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67c69edb-0eb7-4a54-bb21-7d9c51a5da97",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b658ae33-cbf6-4ec5-b940-60b6ce619a60"
                }
              }
            ]
          },
          {
            "id": "18c1f2aa-4c0a-42bc-8603-6b6d9c8badeb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69023687-191d-48c0-958d-06f91ef8de4c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "265313ec-ceac-4e7f-bac7-d6bc061ef431"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b73970ce-e030-475e-87db-fe154f0ce033",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1ff3f083-ff78-42d9-99f1-984f2b63d10e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18e22f9a-25f1-4ba5-9437-9e8d48247c68",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd9daf19-e15a-4b35-944e-8096f058a79b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0375975f-cd5a-4676-aa05-c46868330b62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36c4825c-0262-42b8-96bc-bb4975920d98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dad86d1-a8a0-4e81-9c06-f344adc374d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1f4b0f6-5071-4e59-a8b5-6afbaccdbec9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cebd0d2-c4af-443d-ac7d-25cefbcb4cb3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b92cc23f-306a-47e2-9a38-53afb6b9311b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2bbfa7be-e67e-4bef-ae4f-0067f7cb94bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c622eadc-e4fa-4d8d-9941-133fdf4ba2bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ba02db4-7738-4a4e-b4e6-a445215940aa"
            }
          }
        ]
      },
      {
        "id": "e2b4ca96-f0a5-4027-8618-98f687f7ba11",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f1a74172-94a5-4091-9d33-81e67d88c75e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3664d880-5027-4a1b-a565-f8215c3abd52",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7697484-f5e7-49bc-beb4-4970ad1741dc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f28c404-fe37-478c-9379-ee394797737b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad48fcb2-1fe8-42a9-ab64-dad5e4db841a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc3d10d-dc2d-4cae-a832-bfa9f6f0bfdf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b95ae5-91ac-490d-812b-32db173db6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e5ba50c-5ae1-4eae-b960-86a6643c7ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291ab314-f321-4f90-bd10-85359d9111e9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4c7eb3-33b4-466c-867b-4550cb61dea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83229ad3-b1f5-4861-b5f7-0391dd79152b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "caec2593-066f-40b6-bb39-506bbc442879",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06360b33-6845-4b61-a642-1b231b9d8023",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb69607-56f2-416f-80f1-0cc105f3198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f77177fd-e886-495b-bee7-95049179d35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d949a372-c04e-4c7b-9342-b466949d9ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cb9085-89b6-4517-870a-257ef2392862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b31259-ba5d-4a33-96e6-37c3c752e01e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955c5221-00cd-4e18-bd07-5e5129f79a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a377d3e-9710-4020-9ccc-6404640f7002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a2ebb9-29ab-4980-964f-faf5dbb2314f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b52e4691-60ab-48e0-bcaa-1839250d2c54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aec9a54f-a672-4341-9422-a86c2ac5f93d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b2e4da4-0c2b-44bf-86f3-d5fd72021aad",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f635431-6025-49e2-8b7b-a1a18f33d6ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "67bdb4e0-4fa1-42fe-b2ff-ff576829890f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa7b94e8-19b2-4fb0-9101-073e9c169497",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5012a590-6e52-4a5d-a063-57269860cfb5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f0b7827-b993-427c-8410-da6b759b3d84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f278da22-93f8-4199-b6b5-f892bed7fbdd"
            }
          }
        ]
      },
      {
        "id": "034507fb-3db4-4621-886d-90efc762a57f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4592641d-f3e6-49d7-8a76-fe49262acab1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a341f8c-f6a5-4fbf-88a0-dca70422e7aa",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e7371537-b087-4685-981c-f417737c04be",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d506cbad-bb7d-4b8f-8779-a01153aee683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773647bd-a98c-4ca2-9b67-a25c500739be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68e3aaa-d8ca-4755-b741-e2d8a5a04a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efdea548-e5f6-4cc9-a409-9efe1ddfbb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb07af7-8070-47be-b92b-3b7477e3bcf6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5677eaa6-964b-4d93-a49a-90f934a546a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7b58dc-f44e-4e97-ab3c-3b05f4b278a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7324d443-b3f1-4029-9932-cd9d3dfbd26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d338b86a-c91e-4ee1-93bf-9bb5c5849f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9bc64a-88e3-41ce-8b3b-d3662b38a93d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949955e6-b659-4f0c-be16-0171ea8c6511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931a010f-149a-457c-be2c-73b259a376c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1dedfd-4055-4f2d-acd9-e7c70bfc1acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04962e51-5b1a-4f9b-8e34-c6be31e66ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694df394-391e-4d53-9f64-ea27dbc61c23",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a40a4db-ba41-469e-b484-1cc4a0d7d8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df4ca57-83dc-4852-b863-2f4d1606acfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c6253f-7008-4627-b523-6b6ead1704bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e10a1212-d6c9-4474-a888-9b68a78871f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c1e8cd-3e19-4083-bdb2-84108b49d272",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfdcdc5-698a-401d-ac45-f916e310c5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76bf7f0-b576-4571-ae32-43a7087b9b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd49ab6-e6c0-4247-8c2b-e1374ab8714f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "271e5954-84dc-42db-abc4-dbf7759276dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29813fda-071e-43c9-b21a-9e29306601d2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3be8b98-108e-4c4a-b51f-cdeae480c828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25215ed-a0f0-4cdc-a478-5e709ddd754c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0d8951-fa62-4010-89f6-42003bf0311a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "100e8a35-ff84-4d2a-b1a9-f1143b8e7399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed9edcd-a347-4bff-b3a1-b5e2deaee676",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8848d9f0-d736-457d-9972-bb846f107089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae45c68-8eb0-41d1-abce-306f557403bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7009f844-fc62-4cf5-8c2a-734f93f09b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64c7fa6d-a82d-48f9-92c6-66b02e01e6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba2ed01-851b-4dbb-a86c-52467e213b5a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fef93c-a022-4227-92b3-34fbe9c3c037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006ce362-f48a-4330-a21b-ba083ae81482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c13d35-741d-4998-bbd5-f9cd9fd98afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "335a164e-c746-4aea-a760-3e53355b4fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bfec5f-5ad3-4f51-a0e0-607f54135fa6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1986a5ee-c5de-4263-9007-70a0fb5b4542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77cfb24-4276-416a-8f80-0cec9f62b266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a541c5-3b47-4310-81c1-621ce1707fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "194c604a-a706-4972-ba74-c22f33428026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbe34ec-807c-42b4-9f19-0c9af33d8c04",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c5cbf0-ac83-4902-859c-9eb0d996cdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bdc5fa-41a5-435d-915b-462f63a2d686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de100000-75d8-487f-86a7-e873190665e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "679b819a-73e6-4a20-a7ea-66fa1be86591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b767d3c-4709-4d18-886e-2b4219bfc9d5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1ea3ff-c2f1-4468-9a5c-d2141aff3d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e23265-badd-4310-ba38-276daee260ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e8b0c0-64c6-4560-8efb-537bacaf8fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e15b22e-a3ec-4c9f-80cc-db03013bc482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4ea1f7-b9d2-4996-8e49-449c83a05b32",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cc9c33-972b-455b-8077-fa07b09b68fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c210d5d-a6bb-4511-bef7-2b9d20f21b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5965aa17-5611-4527-8ee1-c9dba9c546a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07e742ad-dfc6-49e9-96f9-a062fc833a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95976e72-41b4-4f69-9a4d-b8ea7c7a0986",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12ca654-2acc-4671-ac94-24d404c697ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f9b48d-8122-4e95-9ced-91569b637904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f5de1f-3c6f-43c4-a942-e75d934ac4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c449c9aa-d069-4447-bb2c-efb9253adebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b058b0b3-62ff-4dc7-8dfd-593464202bb5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e17e93-0560-4dc0-9bcd-21831cc8b655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f877e126-6588-4dcb-a0ab-0a64b9fcd664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749466ee-79e4-4100-be6e-5d4f38e05118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b235c988-0d2a-4bb7-9c4c-1af3628e15d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9615f9f8-7da5-4c78-a9f8-2310b2940118",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c99b474-dd35-481a-bf07-1b0c60ea24fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce725a42-bc12-40c6-9a3a-f34c00c911cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ddb09e-c3d0-4184-8800-8cc4d7d7dbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "daa78a0e-90a9-4b95-a564-648cca8ac426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f1d679-2c6c-4f7a-a5de-5e570f7921c5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc696de-dbd4-458b-a096-6db0e012c931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92e85c4-eda5-4f80-bdff-6335401483e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b68fcc5-2426-4e63-bfdb-543e19776b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffa767dd-b573-47fc-8a37-43d505a480e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41d5b51-3c0a-4f78-b9b3-560a825734cd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b00aac-6d6d-40e6-b65b-c46cd0c3bfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d3338e-8c08-45af-a67b-0b26f3ef7d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acbf6f2-c017-4b41-b4fe-44305ec400ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47d541f-e40a-4b1a-a833-0f0774262fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bdb116-34fb-4d66-8505-fbbcd0a9e856",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7711dab9-74f7-465a-a322-db6d17cafb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20766154-36f2-437f-a3ea-b08c5815a683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b01f60-d963-4927-876e-99cf0641bec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5014a16-c937-437f-96c1-64f316527dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbf6805-e0b6-40f4-b395-567e7c406267",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae95da66-f961-4894-860e-cc6240e8915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a354b8-a507-4dac-b705-d93c8e7491fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aa1ad1-6775-4536-a0df-2788bb5933f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8fd9b39-3693-4f20-901c-3c0b8d876c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37d237d-e913-4f1a-9b75-896fd8c79a7d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b571a6c-71e7-4683-ab2c-ec6456be3639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9915a305-0daf-4fdf-93c6-7c6cdad85925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc6be7f-eda8-4cf9-89be-e2db8590c147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26a30e34-27bb-43d2-ae26-d183b1cc50a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6689dcbc-71c1-41b8-b363-b1997d5ced7f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad16aeae-90a9-45ad-aa17-e3c935f7f6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca360b2-5f23-4f6d-8bf8-27869ab137de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fea9a6e-1b03-4604-9742-851a85ad6094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87daf06b-5bf8-489a-85cf-af51770056e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efecf6ec-cc14-425d-878c-f27868b3ffba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e863e6-eb9b-40cc-8fd3-cb81cc3b9465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b003883b-30a3-411b-99c9-6913e15fbf36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a940073a-0910-47f0-949a-469d6ca4f931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c4ecc5-84bb-4088-bb48-f014ab9bc86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dd870f-f851-424c-848e-033b9b7138e4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915bf49d-a549-4de8-bb2e-0bc9f2920353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680caf14-96ca-4be4-bba3-8c033fe7720e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e1746e-8a98-4ef2-bd4d-329f62533bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e330ab66-a61d-4739-947d-6c038466ec1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff18054-2813-4342-ac0f-8e95195185e3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952d4772-4071-40fd-bdd1-f2f422534d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f5b051-dcab-4522-9706-44d35c1f8a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058580c6-8eb3-46ef-9053-b2d71e79f31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab0f49b-91d4-4f44-92ee-cdfa2ce297bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9116c4f3-07e0-448a-a42e-d4655263d48e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628a9574-6a71-4069-9262-447ed5f57253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53007038-63af-40c1-87e7-435f9d775a5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9386d2b0-d073-41fa-b6c5-e02c559c0421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf4b23f-4d1f-4c85-a9bb-8f8b9151f874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a9664b-54c4-448c-ac0d-541eb786185b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21491d1b-5fbb-4b84-a896-d9ee9d2ca317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd94ce7-3f2c-4423-b174-b2c0be6a37e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2896379f-f72f-4df0-aa3b-f733f00acd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d326905-9644-4957-913c-d3f85fd958ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6b6dab-121f-4fe4-b437-1e99930b67c7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a3786e-73a8-48f4-8846-deac92400ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e83950-7432-4d26-b23d-b85610e33c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde946b5-db48-4165-b711-dace5228ed96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d66b30f-05ca-47b4-9792-c20833a7152d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4f378b-3ce1-4ca8-80bb-16abd4b63212",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30d9d75-d9a2-4d28-88d5-1a53d68d1784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8820d5b8-a8bc-449a-aef5-70511616ce74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a4acfa-13c9-4a20-89ae-8b8356852114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf59b57-0abd-4636-bc09-cce772729664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa91288c-dc0c-47f3-8dd7-4760c74820ef",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1309e2f-863b-4bae-ac8e-9ae278cb9ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7adf028f-94c0-4f47-8187-b0538e2f9eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d555c1e6-135e-4587-b880-b799923439bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f64408e-f08c-40bf-8cc5-ec8859644976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc918162-28fd-4c2f-a060-4afe05e02e4d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f801fcaa-621f-495b-9ce6-e76325abb390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ceebdc-a8bf-4b00-9fbf-4aaf380a4220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff34edd-b68e-461e-8acb-01cf3769a4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae92b09b-6a1c-46bc-9321-393197779f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc6b12d-48c2-494e-9f58-6b4368d06fb6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42e5584-ab38-47b0-a806-cb468f9e6f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714a089f-5625-47c6-8969-6fbf9544547d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b237c2ec-c1db-43d2-8358-4df367638e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46f1f202-f86c-426b-80fe-6e50dfb6e67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13afeed0-304a-46c8-85b7-5edd5d4e35d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d259459-4bd1-4104-957f-e24b8aaddbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab5a891-61d9-4fec-ad48-5a5e144ef525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b85a535-6792-45c5-b382-703cf33d63e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e128e52-a4d6-468c-aaf1-c8148fe4bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681ea99f-0042-4ccc-9bfa-9d5040b65aee",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12778eb-d790-471f-83a7-f716ac2442e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2aef0b1-86e1-44b1-b3dd-0529629e36d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a761ac8c-cdbc-4ef7-807e-ff609a70b690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d199fb-8eb3-49f0-8515-6635b935b855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffd2dd1-c794-4b93-904d-25c98945ca94",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2871c329-42c4-4bf7-a11c-1ff634a744a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b69784-d3bb-4828-9cae-00d2a572a93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6672bbbd-79e4-463e-8c44-0bf2f191391f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4fc314-a3a1-480f-9479-582669d4009b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8120ffab-fd50-4acf-93a3-62cff6e1621f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc13d1c-a4f2-4926-b984-7797b068611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bda4fe-d890-4c75-883e-b1559152905f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe9926c-311a-4199-9426-2ce526c64ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecadd28-8dfc-4030-8c24-7ca81ecee588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32adb23a-21cd-431c-865a-bc7ba7fa6ad9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad0866b-eaf8-4156-9150-7bb4000ea145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "489abbbc-3cf0-44a2-a4e7-6ebe6a30d2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08239841-9f50-496d-b468-892018d13a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4926c4f-4cd3-4f5b-b82c-cf2641c64ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbdb48f-72fd-417e-9aed-e3ffa1a93727",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d831d99a-c2f6-4424-beb9-e899f441051c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce849e4-9be6-4eed-a807-7b0379e1842e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4629e95-d4a2-4739-9834-6c0d16cc60d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f35ce27-687c-4061-a8b7-c074b1c6fc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac4114d-99ab-4c17-8135-1a0b3cde7fe8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90dcb1e7-300a-4f7e-82e3-fa0cc23a5ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fc6c80-4661-4069-9ad2-1434a9cdb819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce340ba-b8f9-4539-8fc1-6cce4c3b5178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "20fb41c3-fffe-46ff-a5c9-42e846b3c231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5145f2ac-e4b5-493b-9f14-58871a42d063",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83800877-11f7-457d-a2ae-531a8980fb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94413197-0e42-4219-9202-4518e5ae4ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475885d2-f73b-464c-8d2d-c3e959e07433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60cb34bd-2b6a-4acd-bea3-8595f956ac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab03837a-b531-432e-babb-dbd07c29be5e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bb8d4c-6d31-4ef6-9703-440b956e2b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3045f410-7ddd-42be-929e-3db41d2d1ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634580c0-5f41-4527-a4fd-97f29146d56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ef61f1-f2b0-431f-ac4e-6131a5b118f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f6a8c3-d527-45ed-8375-1498f686c187",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4233eef-43a0-4c33-9f91-3f563065a299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d31f70-bcaf-4de4-8a1b-a7d1df4efbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dbc1ea-9d2a-4d06-b0b1-46e1b9fa8693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9549f2f8-62cb-4cdf-9dd2-eca08d7e6a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820f7f8d-06be-4dd8-8265-aeebf8556baf",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f202917-7b35-4ec4-b69e-bd74b82a4295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c76cd2-f0ae-4de2-9484-e1ce3e8351d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ee8d99-2663-4349-bbde-0b8e48f607f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7c01d9-0778-42b3-8eb6-4f05cc9ca695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6e2ad9-8cc2-45f0-adb3-97ce872bcf46",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86792c55-d47b-49e2-92b4-8050404d1957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387c0e4f-769b-4190-a560-eb5f2af2e8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22620a97-3d45-4554-a1cb-57315264006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "448f5817-6db0-4559-89ba-2121ea9f2eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4f40e6-7c85-457e-8da1-582372b8d8cf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c562df37-656d-4f1c-ad37-cd89b59f5dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d546d032-1557-4eb5-b917-dd54a5cbc8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d200cd5-ffd5-48a2-a175-674b1a58a8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "67cca33a-3673-4ea0-b2a7-bccff535fccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed560375-d1f6-4a90-a9b4-379fabbadfc8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2650a5f-6952-4fce-8a84-d5de26c70217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5e042f-2106-4f75-bfd7-8f0873588a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00467a14-6175-4987-8a8e-eaaaec7bf74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65670bf0-ec30-44fc-859c-e38cc07afe79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78936c4-aa21-4fa4-8b9f-a7e793736d5c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c8262b-e878-458d-ad4a-75c6588085f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f60e658-fdf8-4f0e-bda7-c13f8955549b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07ec524-c763-4c73-b675-c61555930362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87ac97c2-9aa8-4f70-a455-3328f922ef1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e625956b-cbcb-4668-b34a-7cf5321da2f9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afb0df5-d562-4d0c-8ee3-dad3569dda1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6c8afa-8d86-4f0b-986c-96827e2ee494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bc165e-b29f-47b8-bffc-1c42e99dd57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "995cfd6f-465d-4aa8-bc50-3d863f90c434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3677fd-e297-4c9b-b6b9-9ff72c94bf11",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dc0bff-9a82-4a80-8064-e8edc288a876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c1c3e7-738e-43d3-a324-6efac20ae961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b847b85-bba7-4d48-9c4d-f1d234f85182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6657d1-34b1-4f89-a7a9-f45313518a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd4272a-a742-417f-9573-6d7e38339f3e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0da818-ea6f-4f56-a1ed-de2ce11c42fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe96718-2665-4f12-9ff9-37732c923053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335cc314-6ffb-4991-903e-6c86a81066b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be6dcda9-2a6e-4c6e-bd3f-978f3c9f64b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8db8cc4-2797-4d84-b718-cbd94e8bf7d4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ff0141-f8ec-4dcd-a223-01e84c02263a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f9e97a-35f7-4754-88d1-41ed47b0b0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4029d9c-6f4e-4864-b447-6f69563ee4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65500da7-3401-4817-b608-b6a0e6cb1460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d6e459-26df-4145-a5d0-d82a05d0310e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac533b8-be56-4af3-a168-dd2f3cdfa98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b58a5d-dc21-4982-8073-7638a462cc79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e78134c-b0ed-4d11-ba9d-424f24bde9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cafa392c-5cd8-47c4-941e-41ae229a4578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03241735-7851-4e1f-8ea9-b0ff1d47c62f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c9fede-6177-4f92-991d-0755672eeca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3c4fca-4e9b-438c-aa06-d3fe31507810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9f7c17-ee75-4446-a7fa-69fd7b740e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03d182c9-8ca1-47e3-9247-fb82242b2f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8ce69e-f18f-43bc-a3dd-18b84be68946",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dbe85f-446d-46e3-8200-d9131e9d49b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757c5f8d-892e-450b-878b-34ac3ec406b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69541d57-1f85-435c-b63d-2d572a3f72b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0033d973-0877-487a-bca6-e3efe41c1414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942a2788-3082-49f3-9b5e-7e657c145fd7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a733fe-2ae8-4336-a236-519396ec6ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737504c4-c7e7-4972-86ac-867ba0f45f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e129b9-7269-470b-bc60-9f41438f0c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c70765d9-d764-4651-b546-d02148c22ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291f8278-4216-4c31-ad84-f869d28458e6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3bb1ec-2544-4a62-bccd-59c29e374e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d878b57-0a69-4dcd-8159-4ac16c99d065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d4116f-53f6-41b9-b50f-0838a40261d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "483335a0-f355-433c-921c-74ebe3f336d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4954c8-c15c-4479-9d66-cc7913079c5f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9f72ee-f99c-4c4b-87b2-b8d13e7c7401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f62b0c0-2179-402f-8a47-f88c33e06480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9779b097-f990-485e-8a85-fe4103bf400d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "81f05847-6f6c-448a-ab3d-923b95fe6be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c295a757-a49c-48b8-a7fe-ec973873bc79",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5097bc-e5a3-485d-8cd4-6b348642ed20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f409ab4b-fd74-4f7f-a1fc-7e795fa5b2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a825c5d7-d9e3-4d7b-bdca-1e0355d37a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "50578b7c-c123-4a79-ad54-aa007af10320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b0df09-c802-4aee-943e-07c09dcba7d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04397113-5620-4ed2-b15a-6f9a5dde22f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5032c58-59e1-48b2-abcb-e1e81c1232c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6e73d4-04ef-4ba9-9bb3-2b8d78603c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6050b8b6-393c-4a2c-bb65-80eb18404d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8efbfe-432c-4b48-b367-a88d13fe5018",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab8ce4f-da12-4f0a-9726-2bcac62543e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0ae477-c369-444e-a398-328ee575e6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe96a63-313f-4133-a244-486fc9161a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6775553-2e59-4419-b643-e190b9a118cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70a6aaf-6aaa-4379-82a8-6edf6ebcf3f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04115700-a9a0-42c2-8f1d-cc55931df763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06833c49-5e75-4c32-ab48-0f11214fe9b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5240c596-a908-4f4d-b12e-f332dfb8a56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd67722f-00d4-46ca-9292-e6867f003ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadb3ead-732d-4ba8-bdcc-d8c62f9ceb36",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a7d09f-9790-4871-aee1-a087823172b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7664136f-c8b0-497f-a0db-5111cf6bf230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6d6436-77b3-4c3e-a364-6438346225b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd99a55e-e91f-409c-9654-256196c798d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7926d91-b954-4c9f-88e8-87fb3a4560f3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07735a6-d8cf-4929-b010-e572f6269b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ef880e-a507-4734-ab8e-1e027d2c9b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1519a269-2020-4609-b0ad-3ec307156de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6184dc7-c94c-475b-96ed-3204d56416d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e05b502-e3da-4d6d-ab44-69f9b7a2ee5f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b6d4fe-5eaa-4dac-ae73-7ef7d39a518c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f908415b-e7ab-4eff-9de9-ec997f4f64e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ce0743-9bc0-4041-8bad-b1268677ef6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa4ec3a-65d3-4980-94c8-4e625c916aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29893559-b245-4d7d-825f-c88e0357955a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6558e71-0c52-4db8-ac76-7c13ec5ed1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059cc52e-4ada-4a65-b72c-23f06ea34fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e456de5a-08e1-4afb-ad85-2e426b2a5e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9af98afa-a33e-430c-97a3-51c5a7f52e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d18be0f-050f-46fe-b4d9-744f05e5e950",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f48545-5437-41f9-86de-37cfd2d87a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "381c4839-6a47-4575-a7ed-bbd7c5378939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4541d92-a7c0-470b-9ba2-a5ba350a1760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1058bd0-42a0-4435-b6f4-e8cf7c716830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3310af1-a64a-4ec7-8e73-0392ccd0d86e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0d7fab-a642-4454-b086-80257d910998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4efb61c-252c-487a-8e41-4c1ae4d50ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1bcb06-7c33-4c2d-bd94-b9c2d818658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa751215-71d6-4f24-8b00-0fde39cd8b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04273ba1-15de-45e1-b860-a3c731105df0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732557b9-4dbe-40cc-afe4-d2cd374761ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8220b4af-57ae-4cdd-903a-da65f9404ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984405ef-3ccd-43b0-9e5a-65b46e3cb39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90a1c6eb-f5fb-40f0-921a-76f4152b0d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56884e09-4f40-4eb3-92aa-1fb0b35ce0e1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a447026-83c6-4673-b2c3-d86dddf0dde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893b94f4-6525-4972-bb0b-c74d6aee6efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c038e79-5b83-4f52-bd31-7799e76fd324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f68854b-0c7a-4ed0-926f-fc6f0aaf6479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b183516c-d493-4247-90d2-ba7c0ca54166",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b05748-f267-4408-927a-f5bf38c05c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b900fa0-bc3f-431e-9932-06e9672caf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577284f7-859b-4018-bc63-b8840f0a703e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c78ef8ce-c864-4832-912b-88cbd39021a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25875e0-733b-4650-8ea1-8f3b9236b7b0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b778a04b-10c0-48a4-b3f6-7ab7fc35aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee290e3-c879-4a69-8766-fb81af31a893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4757d8-64d5-4241-a51a-9d9c1fd29dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1ecc87-12b6-4295-ba67-426dba68cd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d563100d-f16a-48ea-9148-f05cc11cfc19",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da681e1-443b-43a3-9e67-40384e31cf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0298ad4-f601-40bb-b7d8-8bfb5fd7a49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce411846-f028-4ff5-94f1-4e747232aed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3723425-0962-47d9-94ad-b73d908d1b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e9742f-d7b3-440b-ad9a-24eb359ee9c8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb49bf5-0a70-4440-97f2-ef67f47a0baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ec8cf1-9ea0-486c-bfc1-45099f660f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2090c30-7363-4e64-85ec-1aba40a33ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb5198f-6001-4c51-a155-dea93b9d087e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e935230-6a34-4782-bb43-130b7886f53d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2657960-2f41-4268-9091-a90c89f0f465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ebf1ee-b591-41c1-8beb-69c125f831e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a7eac2-0093-48a8-85d1-108c95e85a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "909649ef-d54b-4e52-910d-671f378003d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbd1945-2aea-4842-a6e0-2b2c2aef189e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf1556f-56fd-4e60-b480-b4b545c18774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca99189-2a93-48e0-98d0-3fbddccde316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff093eaa-1461-4899-9be4-a8718ce3a081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65d86d3e-2f22-4b24-ab58-5a12acf5419d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8657e067-bdc4-44a3-9211-2e678ef1a73f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e10681-3974-4adb-9944-e03d444019a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38ae16f-0a9b-4ece-b28a-99db64cf610c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37653c27-6a4c-467e-a8bb-35a7340025a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7dad535-81a3-42e7-8c19-89b7c8b168eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b763f4b-fbb1-46da-9653-0b2818c5882e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caed234-9cea-42e3-8d16-5f272afd67a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9f0468-f6c9-4580-b61d-0a1d6a371391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441c1fb4-b974-4308-8ee8-a36b88df15e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "766a2ef9-1e46-4f05-8e22-506eda406b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eaab17-9018-4974-9d75-211d0e12f78a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d0bca0-45eb-4e5c-a2b6-714e92c51e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c294be2-167b-462a-8093-ec4961a74018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d71582-80f6-4c8b-946d-9c787749e490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22876497-57d7-4511-b9c0-6e21f0e37281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6984c531-68fd-47ee-bc8a-8c75f5a56785",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e628597-20f4-49e4-92b0-e7f34297c7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2019e97f-e96a-4919-b73d-179c67261a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551be160-e2e0-4afe-8afe-c38267cad5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62186690-9df5-46b9-a704-792ba9ca59af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a34823-aad3-4df1-bb07-6e9d6562ccc6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44dafef-4d78-4d89-893d-bc7165ebb533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da674ee-ddb9-4d63-b8db-e3f35c9886a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55d3abf-88ff-4656-8143-3b6271db630b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "836b4c70-0041-4bd8-b405-05a4244b8c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffb30bf-c649-4c00-a803-42752276727a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417efb09-4950-4541-ac08-b10b2f9fb4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3600cb3-51c1-4487-864c-f257bf94fff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1e1851-c657-43fc-9f60-1287e878c99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31a670df-ed55-41a1-89d8-3228990ae8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35337bcc-a8a0-4f51-a0d1-02b51957e9c0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be645428-6825-40e8-af95-d2a136fb91e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4040faf1-d4ec-4c7b-9f00-be720b76a5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c6e97b-7c3b-421a-83e2-afdbfca4677c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9fa5b7-6035-4c76-bd53-730682c4bdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6f8aa3-e1df-4cef-8a14-7095c067073a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dfa45b-a0d3-4583-8602-e143753c6a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c558fc-09fb-4126-822e-556b591fc7f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957bd66d-ce6d-4e38-86ba-8aa61164f2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a1c565-fcd2-42e4-8ec1-7cc37f93afcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71d3ee4-8156-46fe-b991-b55375b83c48",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a0ccdc-66bc-4d58-812c-f88c73ae4199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c782bc0-35ec-4a28-8a11-5be3c92170bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b963a0c5-6766-4de5-96ba-0c3bf45e2397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "464d0324-1724-4f1c-a2a4-359d53eebff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3f0839-d04a-41cd-824d-d0b22d7af496",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb10923-b648-4647-96f8-5b21564ca943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcf7aa4-3f9f-428e-80d7-330ffa35313b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a2b0e-9e09-4a62-a7bd-c5f70d9b906e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2239ddf-71b3-4840-beae-df6901c4e8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd78a48a-b747-47dc-b95f-cccbfd78a577",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0d0fcd-9fbc-449a-a2ee-4667217ed4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9acd28c-cf95-4527-afef-654ea8df8e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb63926-0b16-4e4d-a2c3-031e9269b99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1569f95d-feb0-4082-b2b1-87cd608e1438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee5e858-2bf8-4319-9396-25f3b1f8f7fe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e84259-8d2e-4b4d-8619-bfe076ea08d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efca434-9438-465d-848b-60edd34884d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95217b8c-d6d8-4567-a809-e5cec341776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72651abe-3d8f-4742-9fde-fff2d3006789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ff3853-261d-437f-94ee-d13e6988c67b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee1d15f-7b40-44aa-bcf8-4e974af5df40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15526edb-b6c0-4f5f-976b-2ac2e525fd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fb27a8-564f-4f4e-b197-e75d4954c15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "68ba958a-41f0-4d7a-be42-fcde5aef2901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db337bd5-146f-4a08-9006-54496868c578",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74125459-6e84-4676-afaf-5e2a18b44390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffcd6ad-b440-4e5e-9e76-dfc069a59b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d226d22-f9be-4ad5-9bc6-2472e8960052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fdcc16b-0fc2-40e9-bd63-e8af0452bf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c6bfd9-e4d2-499c-b9c4-5f01a8596546",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf80e51f-5107-4933-9883-5608e2670ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b5cfe8-5d53-4c5b-801d-6d25536f645e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2abd64-49de-406f-9e5e-c3daecf2fd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3057830a-ec4a-40ff-8d20-73d1f48feddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1bb752-d843-440f-b819-0515b52f2c06",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd466d64-541b-49c0-b54d-70351e7dc04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3101ef-edb9-49ee-b38c-7f77fad918bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe7b3a5-51b0-4772-b1bf-a250aa29773d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d06c39-ee29-475c-be0b-6f106296a668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b95ac3-82a7-48b9-83e3-f2d8b2ca5b67",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96a00ad-2d70-4366-b8b4-4e4884c41ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34a2a36-11f7-4046-802b-358aa475d0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434d8512-2cb4-4797-b872-2ce741d243ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2db8e763-7a19-4260-8215-e5a94d46e1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23165dc-16fb-4c7a-9e99-f2d66bd08bec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6766407-feae-404d-b33d-1a338ffdf264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "02fed17e-a8f3-4496-8e42-5749b08a87a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f034b74e-90c6-4863-be02-64a0ca6deb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e298b8c2-4534-4327-920f-4db6d3203ff7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00785f7b-5f9b-405e-a3b1-8395f154f5aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c74704e2-eba7-4abc-a917-8bc3aa4ef02a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee09dd48-bdd7-482a-8b83-52b209728439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e18d6527-2271-4d95-a18f-fd235c0d7cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b8fc89-0da3-439f-906f-5eae3d0aedf3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08f262cf-31b3-4064-810e-51d36fb7aff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550510a7-ee0e-4908-8414-84b8a69541fd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0462946-8a6e-48fd-8ed9-582ccd6e7442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a762300f-2536-4de7-97db-3ea5981cf26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a20741-cef7-4fab-9ee7-c544c8a3c48d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53335916-fa6e-49ee-bda7-a2c1d15ea76b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1574917f-4706-4a56-af14-0c93a531cc9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83cc803f-9ebc-4bea-b6a0-3f49493ab6c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b992f2aa-3839-4671-aeea-2b380f2228f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c089fbed-6f88-48ad-9e37-1a60085be5c2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2ec8418-3955-4621-8985-3e124cbd419f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e3ef290-2151-43ad-ac47-e2d56cca13c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfce8985-e8f9-446f-b548-1a9a9567de14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "222529b4-1ca7-422a-8149-20b001ad8236"
                }
              }
            ]
          },
          {
            "id": "164ac770-ced7-40fc-9459-42ab281d5285",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b0c954f3-51d7-4f5f-a059-4d24741ef1b5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "495c51ab-310d-488a-bf24-55ee847158d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b228b9a-e825-4f60-a0ac-2770e0501a81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86372ff2-37dc-4e13-96e0-9de34a50a5c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89e01c27-b80c-4d4f-bc12-9b2f2b8fc7a5"
                    }
                  }
                ]
              },
              {
                "id": "9ddc7225-87e3-49e1-8d18-19aa9c15516e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f11b94d-4168-4e5a-9d87-24d7f52cc241",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c4d5f78-9611-4157-86a6-f50001bd62b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9988de69-3e18-46bf-b4bd-b909b70cddf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22748243-c5be-4b64-9d04-6e8eab08ef16"
                    }
                  }
                ]
              },
              {
                "id": "e4605a8f-8fe8-4586-bd93-a907e1110f7e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d140834d-d207-4ebe-85d4-94f2e134ef02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79b0666f-710f-400c-a8db-e9ff925963c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb4a54c2-5aa3-4790-8722-a416a8ce177e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "43ddaf4c-2d6c-4d82-8fdf-a6719ffa2de1"
                    }
                  }
                ]
              },
              {
                "id": "7dcc413b-391e-47e0-ac15-9275aaec4016",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "373b6486-0e2b-4c23-833c-0d97d22b41a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "679a6484-412e-45ae-8586-c7714628b7a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbb76bab-e08f-4df2-a500-097405a7ff65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b5efcd6e-c925-4e5f-a933-0dbd6aa0f752"
                    }
                  }
                ]
              },
              {
                "id": "38a46a80-cdad-4481-8103-e175764ee137",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1990bbc-e2b5-4d58-afc1-96bf01124f02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e131dde-0d82-44b3-a7d4-aad506272c4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f604f88d-6238-45c3-85d6-cde6b4db3561",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2112a8a6-27c4-4557-b140-64626cbf71eb"
                    }
                  }
                ]
              },
              {
                "id": "0ecff3d9-fcbd-496e-a7b0-71ce3a259ea9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07311d54-4537-4516-a21c-b6039729fc89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f747248c-6c20-4927-93f5-7b41432530fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a9d6c86-44e9-48d7-88a8-154714487e67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7851a074-71eb-463d-88bd-8544dac96b41"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e7a2d2b-6f8d-49fa-a95a-972fa91fcb1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02b39e8e-c284-4ba1-b611-3374b981f1bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a1a9eb87-e7d8-41d3-a8b6-07d41e50ea0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b0776aa-07ba-4c24-91e4-d9d11f9e73ad"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4d6a07e-6463-4d7b-9aa0-4f18b435eccd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "48da04b4-bd53-4dea-82c5-69a28f42ac31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f17c0e2c-c88a-4ca2-b3fc-0db094da37e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9680a97a-fe5c-4b4a-9467-133b9bab9b47"
            }
          }
        ]
      },
      {
        "id": "8a35b339-57a4-4def-ad81-b8e09806b0c9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "45341883-e0c2-4c13-a200-38cc6df44f0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31a3c7d0-9b26-4bf8-91d4-44f9a4c469b9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6a2c6831-0c8f-4faf-96e9-b379f1242b2c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d058b756-4a4c-4f1a-bb62-712d55569d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aff8d4b-a96e-4098-a73f-29d0d9618c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac8e044-fada-4845-98c7-d64ea9e87d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b78a15-d6be-4397-b5be-02bc3a2b5894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e3e891-338a-4595-82fe-c20615151393",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bccbd7-9d3b-49b1-8dee-205d4e5e1aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589145e4-a5a4-42ff-b365-8b8b247452a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef5c7f8-4d68-4c55-9ad0-921b78001ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b8f299-1171-496f-8c79-a0ba764323a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98be4f61-dc0a-4905-b0c0-036d95504f6c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3259ad19-ea7f-42db-af6c-18c2bc4bdfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eca2eb5-d601-4941-a5ee-c452eac80a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a60a39-68eb-452e-bf64-59f9be852b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d067cc-cfa7-481e-830f-628244faef6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b05f49-35f0-4cf7-8b2b-5600c9dee2b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a69f236-9bf2-4b5a-8114-0bdd1dcfc5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c594d6-2fa7-400a-861b-ec571bb7dfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78f3431-44cd-4036-b2e9-6f211ef59fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa4fa49-57b9-4c48-8318-fa945f12ee9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2f1f00-42c3-40db-a713-18fb6efda3aa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b05bf65-f471-49fb-bed3-ac2487c7c0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c201cab-2c40-4035-b53c-9495a0c5ee67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590ab9e5-8a5f-45fb-b552-d3499dc3948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbb1d1b-6656-4bba-96ca-2de849d78358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894a402a-f7ba-4b88-8dfc-3237335c050f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ae5ad2-068e-497b-b8df-fb3993e4ac90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843fbc70-7223-4d16-85f3-faaaf3a79c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a0ab4b-e1a7-4b62-9864-cca3f149c403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee037125-486b-4ef4-9926-f5c66b6b3814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d88d59b-678a-4532-b3dd-a6f8da0b1444",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e263ed-d7e9-4316-a5d4-1f5f51009f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cd8cd8-e269-4263-8d70-fe09bf3d7f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e817824-f0e4-4ff1-82d1-8e25b0736da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd104305-34d1-41aa-82a1-2e3c6529f0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870948f7-862d-41b3-9fed-082d2d6dcfde",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00634d68-9472-4b2e-8661-3317910e4b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f4dc1f-e64e-43f2-9ef1-8d3a04c0862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a51c24-4074-4fbf-88f6-514f7a39fe04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc76c612-198d-437e-8e65-69812c9a5359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a1f310-89d7-4fd6-9107-b0c484c10e11",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5103f149-1081-48da-9a42-af7e34ea13ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3642b4be-66fa-458f-a475-0de012c72785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d08d54-0c62-42cb-bb63-228a219c3868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "872e619f-c11f-45b2-a51d-782bc667fbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e306ece-8876-454e-b96d-35e87ebc709a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70016ac3-5242-480e-848d-94e3eec7c4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90d5125-6a56-42a9-924b-21ccb90a8aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f57464f-95df-4632-9d08-0dab937f781a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02fb6e30-9401-49dd-a2bd-eb65c967a497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c567e2-a099-44a5-a210-a100c5e7e7eb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b129f6e1-b9d1-474a-bce8-6acc35eda709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73acfb15-f4ce-4bde-8a64-ff42971a0442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c562cfda-ae28-4fd5-9e96-cc42046f3462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d43f5b6c-2be7-487c-9a40-e2d351d5e6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b807d5-32a3-40ed-81f7-209184f621c6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6654c0e-ad7e-4a9b-a812-ed2ee9425aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc773d59-59ae-4613-8e80-d281e44d4eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edabd95-3c25-4a96-a7c0-aefc70d2749a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "735df66b-0441-4e18-acbf-36d3ab8d2578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec3159a-84f1-4399-9227-01860dd229df",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c049dbdc-ec24-4caf-9d5a-2b3926f70bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669bb5fc-2788-4273-adbb-f119d0bc6511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483737b2-6ae6-43af-a303-c6d3fa50ee8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "59c89e17-f640-44ed-865d-86c851aa59e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48a76ac-f7c9-4af3-940a-191c78301dba",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b1fc6b-a5d2-4765-8d6d-1fe1b6022e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a219a8-bc1f-4358-951d-4f5b2dd4e942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacb1b1e-c1df-4dba-9f1d-923a87f5c2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "42116117-fa37-433c-bd9a-3b60bd8b837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55742df6-34d3-4012-a43e-8784bcdc07ef",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cbe1a9-2ce6-4a7e-b3d7-1d239cd0be29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b72ccc2-6fb4-468a-8988-6e13b0f9c2ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb28980e-82f9-400e-9e63-fbf73b1cf3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8519a3ce-fc80-4025-ad86-1b3078bc219f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885a6be4-c207-46c7-8ce4-51d1c348abcb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8eca7e-6171-4a92-8a7b-75dd94f03610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40c10ce-57db-413c-b269-36ccfc7a7313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae5caf5-7638-487e-af53-5bd39c610465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bb57b2a-2a34-442f-98be-250a1a2a7f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed04afa-b9a9-473b-a99c-b9406d12532c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf266c6-23e1-4089-a513-ec62182a3d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34fb9f0-3d01-47e1-bec3-6b1f697e1fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb64e46c-4ccf-4e03-bb7c-b3427013fc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "01aeed4e-b366-4165-87ae-9ddb19869632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaf3412-285f-42da-b358-0bed9767f786",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "785af81e-4960-43b4-9966-dec97dccfa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664e1a90-c8a0-452b-8fae-d3e85ca972f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860e0e40-b0d5-4b01-9c34-f016ff51c227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2274eb6-bd5a-4328-916c-6319756eb009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad637bc-049d-41c5-8f13-46d67b088fe9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148f5581-2dd4-45eb-892a-004ded4d41cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf53fa6-bb25-4138-9fb4-1b03969a456d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7067f609-3b08-49c2-bdcd-5dd76e625def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73d10adf-39d0-4c03-a848-038ff003730d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87e5f77-bdd5-4923-8e2f-c4e4a3466c55",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c43ad28-d93d-4a87-bb36-29f8d7bccbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c7322e-cf30-4674-857a-6b6dce62a6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461844e9-b248-4aaa-9157-d851cbc54d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0109dd56-432f-42b5-bac5-08a279d041f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c1518f-599b-4c9f-8741-9eb15b1fbcc7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9d92f0-20d6-4fac-8bcf-c98bad958b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9577e72-c7e5-4819-b360-a94db235af43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ed175c-193d-4a97-8741-1eb5a9e1d3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e488d18f-86b6-4dcd-9090-f861556fd696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67087a2-bcb4-4309-8653-bdc4360575ff",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cc3235-70b7-44e1-868d-967329171906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99ebb68-5991-44ad-9ac3-bbc2c93ffe2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815a7813-8784-4823-a22f-0a17052a9fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3efc09-2434-4809-840b-720b759f6798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29d6bf2-eaa6-47c8-8c4b-9af03442369a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a02e77-0407-4bf0-a916-8e4cb5fd1769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650483b8-a17a-4181-aa7a-b967fead6547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90211cb0-17a1-4685-955f-bf0a7da66aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db6abf2a-2bf8-4249-94b5-80c374d4044a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e57771-4b13-433d-ae59-dbe9b29d3fea",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd82c322-6f51-4635-99a4-2a86c28fcbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886821d5-1e90-4cfa-9187-33ec7d252830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16254821-5ed0-47c9-aff4-7feb72c82717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5ce16c-6987-4bd6-a806-7466f02de181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b194eba-d4c7-4bad-b897-aae0654c7701",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc4b0ec-0d24-43b5-b144-7a1853931a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f41f44-0aea-4746-901f-0b7abc4b8d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad548d4-638b-44a6-846f-14c77a69e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d29e0bf4-1628-42c5-aadb-f7d7e1c26ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d33cd9-aa7b-4bbd-9f04-5666bb13b9f4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e846e1-219d-43fc-bd65-08c06e190a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947bfcbc-ba5b-40e1-a643-baf1fef16fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f74904c-be38-42a8-bbf3-760f32ad0a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02cedeec-f6fe-4ed6-bd8e-7b79c420bfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0436d0b2-8821-43b5-aa48-d73765159101",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2abf24e-4012-42ac-bb5b-12e955a91b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cdcb26-d9c4-4185-ba89-6ea20d8ad728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87f0214-d3bb-42d2-9fe4-1436908fb3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "224802ad-fc11-4f43-aafd-db270e0d5409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fba28e-3e51-4459-8e97-a98378c2096d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2720f460-7f95-435f-9b47-5242410c50ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19509383-cf11-4e78-84bc-beebdbd25dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306f0858-fcf7-4d9c-bb52-892fdceaf3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9816e23-1ea9-4c82-a382-54b5441551bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf306f39-dc98-45b4-82d3-6822c4c5ee83",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0595e8-3c4f-4cbf-acd5-4702d883a95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3432e0b3-960d-40a9-a94a-259c45663711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7280bf30-f9ed-4d35-b92d-5b3b0ee92f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5950eb4-ade4-43ce-873b-747215861aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a794498-aae8-411a-930c-567ebd7942a6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8c01c8-97a6-4a11-81c0-c45ed08cf5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d059858b-a776-4257-8832-385799ec3039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70276258-1b69-4833-92fe-11e618e22c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81153101-6b8e-4b52-a3e3-8b949a5c070c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd1e72b-cc47-48a4-abaf-074b3628aade",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992e3bf0-0397-4d88-bf46-faa66a44f8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07172334-e098-401f-924c-8cc7dfe35cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8594564-c08c-4ea7-a848-2393ebb60d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6504ff3-8534-40c4-b719-2d34c23aa446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec2384d-7e01-4c1e-b360-19465a94eec3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b0bc19-1078-457a-acee-2e27fc53c7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e79bc72-d042-46b8-bc52-9479f43e5bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c5c106-de29-4c9c-ace6-1b9b4a916c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "644ee114-526c-44de-b16f-9795ad1c995c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2593860f-96fa-4d31-8a53-9ced97f81229",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dcd26d4-5c53-444b-8d59-55bc64293d44",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792bd03d-cf24-41d5-985f-5fc7d346f76d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "36c28d47-ca74-4d8d-894d-b3a582f4eb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79b0f93-d195-4256-b806-3f7b98adc26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffcaf78f-840b-412d-8a73-a1a368ad5b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691c9a0d-9a6f-4c1a-a95f-68e48c1df844",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d86383-5878-42a7-8563-e390e618d772",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c0066c73-8ba9-4665-87ba-84cfd64a7d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f2f2e6-e161-47d6-8ee4-1f0592993304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3beb1a80-3102-4291-ae3d-bc9f1dea3a4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd57a69d-2031-4008-bb43-e6a2f7100e3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c78bbab0-56d5-4947-8128-eec28e699899"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e92fa96-54f9-416e-8f7f-ae22ace24ede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00a56b3a-2b11-4594-8a3e-3b8ac96c9e3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77240434-5ae4-409e-a85b-0f883f9d3913",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f138a6f7-b6b3-4b23-892a-d839bd134ace"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4509131-8ca2-4ec0-aec7-1b49821d473a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a575c781-ba2f-4ae6-b92a-b935405940a1"
            }
          }
        ]
      },
      {
        "id": "3f2a28ad-7161-4a9f-bd15-33482eb80333",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4d197294-a336-45e8-94e1-287b1011b34c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "355bd674-2a62-4b2d-b580-342d66e4c473",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ede4a40-4ca4-4f4b-869f-c984841f9b8f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e02216-3b15-48be-a634-e71bc95c2421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711bebce-ed75-4a8c-afff-4231e2aaceb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ae35f9-ff37-43a3-affb-fcd7230eb1f8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e1b83c-e161-4d52-8ff3-5d41d34debc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91de3437-8bdd-4a23-9a57-dca21229fa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fa547c-717f-47ce-b162-108b16c1e27d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ca32d2-f93b-4043-a5c0-33f38f3ec5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acc3b91-fa8c-4a5c-97eb-2ea7be9f2839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d16fb56-00d6-4d00-a678-185e051f0055",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc17800-2b8a-453a-8866-4b68f91a84c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8989bed5-42ae-48ba-814b-dfc5bdb397be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0013bebb-26a7-4430-a4b2-eda67b8cf36a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722f1923-a783-49ec-9060-05af6a8a4ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7082b47e-4b6d-4e10-b632-bcd5e6fb929e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe8c3cf-25b6-4f75-867a-7d1fef77559f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4da262-fb65-4ed0-a360-e9a373bb169e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2212641-eae6-4393-9e1b-07a35975effc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c116f1e0-f6e4-4d1a-b86b-fd2f0b566e63",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf6c9ca-11b5-4b69-9939-9ab031543c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d38347a-4264-4def-8d3e-95d461bde576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d2539e-3449-41a7-9500-547f0f566f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d99c5d8-4323-4ab5-8023-3cd80a293c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17050cf4-1395-470f-9a5c-672e5c598344",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3f9c27-0d9c-44dd-8044-9d2b7e871617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c86bfbf-294f-4a56-97de-58a8e34c6951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace5b141-26cd-4156-ab1a-0010e51be0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64e12eb-9e10-4c10-84bc-2256e51323c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2be6cd-8bb2-440b-bcef-8ac4a3330e93",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fde63e-4070-4d3c-b04a-5f8df70fccf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b190e7ae-3c76-4a8f-9be7-b0437b92d585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0cdd2a-14a8-4eef-84f7-7b06de7c3ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddce55e-6e56-4d60-9a3c-4ae0da7b6327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2eca765-2601-4f0d-bb30-24b4c5416138",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88733a6-7eba-4622-a9a3-5ce94a86bfba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653432c9-e504-4216-bd7b-980a27dd93c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e18825-8fda-4ecf-a458-fede9e20cd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c95c433-4940-4a0e-9c0f-77c7c196e5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a7f0c-451b-4838-a418-2835e8f57712",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f723eaf-f8c7-419d-9568-8688307821f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe3445e-7965-4d78-b3be-9bdd7e78cf77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d209711c-cc7b-4a29-bb6c-f77c756014bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a5b10b-22be-4acd-9897-a68e2dc38410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd270ae-2989-4495-ba6c-43d9207de684",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b81be6-8576-43bc-a65b-df1cc7504914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e14bd52-90ef-4715-a772-45653186e47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8a028e-7464-4396-a410-ed041c884f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07d0376-8797-4532-8312-d1029195c2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a31fd6-7a71-40dc-b355-947c89ddf91e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b707299d-a4b5-458e-b0e9-35df4e7c2d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b3a794-8ea1-4c51-8038-c19382be3a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ec0031-6639-4815-9c83-2a21245f3599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ae9fb9-7550-4a1c-9729-c04da52fe1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b331bc10-200e-46fa-b872-4c5e8360d11d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2187c68f-54c0-4d2c-b00c-63854b96134e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bbae4f9-497c-4819-82f6-8a78eb0b0341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a543f0-1f6f-43ad-9f53-29f3478f3599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cfa735-7b0d-4906-a029-fefe9df29ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d44d3b-52be-490e-8831-0fe6b4651568",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ae07d8-c168-4c9e-80e9-c413d939701d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb6ec9fe-1b52-43d6-ad51-ba7edea3edda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369c1848-ac81-4783-9a08-d257b518ab72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638768e7-d498-4ee7-b568-6f0d8f18d13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba6109b-2efa-48fa-8d55-a37a0ffc8b47",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d3a8b4-93a2-46ef-99ff-4677f6949ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc88ef78-c13c-4ed2-bcb1-7449aa0c6781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79284074-a8a1-4160-a206-9eff1c7febed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49a2447-c8a4-484e-9d21-e6a546a9d457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f6759d-4535-4413-8ac5-059feece6e5c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd442384-b479-4832-a80a-995298b554b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96b4ce2-1afa-484d-9f7a-a23716fc4437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a25c75-1616-4ef0-b095-92268dbc5812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a2286a-c45d-465b-bc60-21b5a8bcbb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67948fe9-d01f-4daa-a83b-a52ce048815c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e587ef35-1e5e-4db5-acc1-5b66e7a29fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1aead1-54aa-4525-8ad7-2508cf5b6215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0969f0c-9fc5-480f-becd-389e8adebad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91a3a19-b44f-4f0e-9b0a-00ca223564bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc77306-679d-437a-a2e6-92da265d24f4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a6da91-88e2-476c-819a-624aee8e40fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8048cc04-77b9-479b-9d66-01f79b3a38f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e43bfd-521f-43c5-b4d9-c9adbd024a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f3cd35-f43c-4f10-9e5c-58d297f2a5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7405e5c9-e7b6-4945-a47f-862f3408a34b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ee401a-d3f5-47e3-8f2c-9ec48a6cfff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c7de27-1029-45d2-b576-fc9e421d1c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821c2205-b56e-431b-b585-178ff20270e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8ae016-dd74-4cbf-afd8-3a9a2a14093d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f81973-2148-4308-ac18-18c99a7044cf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbaa1ae7-7e73-4b4c-a95a-41bd89d2621c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a8718e-3a41-427c-a0d9-0f9e04e73739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c418ac-4222-4e88-a958-a7ee7aa1b3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3b64df-d4c2-4bcf-955e-dbc648d36e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc75dc9-b3ea-4998-8b4d-1b5236d239f3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12382b26-34c8-4b78-a74c-003f29821f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99590c6c-16d5-49d0-8235-c48e6256d5ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e4f5a7-8ff8-46f1-b435-0ddcc9770d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968b63f5-9c86-4a10-82fd-1e1df77a5bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df744d7a-5abe-42b4-a5b6-34ec9d98c3ec",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f123aa91-f9b0-4bf2-86e7-1a057d8bf9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45dbdf95-933b-4089-ba79-c9f882428e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea8a954-8e61-4c91-a054-f20c3d577023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b7e281-5e04-479a-898d-f74dd6457d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9af9b2-03e1-4647-8f46-bdce58947acb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5fb962-e676-4372-a021-45c8ff2032e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b35f2a7-e604-46de-af4d-e239f4ab4ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a6dc1f-f972-44aa-8e51-953ddd8e8eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880c3330-6362-462c-867f-279c65829866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a625fe-fcf0-4f55-a6c1-257ee6316667",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4582e594-705f-4f3e-abc5-cee20a350e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea6923b-5526-49aa-99b7-ecbb4ab0ddcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c73b7a4-05e6-4514-8444-3c817585d012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931b681e-feef-4c22-bb02-3374e4c45df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9085e4f2-6572-4256-a97f-c522e5a49ba9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce03118a-3c03-4384-98dd-cb9fe87677c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2de665f-fc0f-4ad3-9713-39373045ef8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595d92dd-381f-4556-a3dd-81136701f8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11667d3c-8ab0-4e48-8543-30b75474e1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3b9305-c794-4285-ab7f-a4303a5ca244",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419689a4-66bc-43ef-92e7-2b2dc24eefab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83adcbbf-0bcc-4a5e-af2a-493c441bf6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4b703c-ef4b-4824-ae83-b765b4848356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b65a6a4-0031-41e7-8773-d3464f46cae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d8f81f-fc06-4d5a-96ed-1a6bd3454409",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88945ff0-4a35-4202-b044-8d0377ae2f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c89942-9ce3-4444-a9ea-5ac5f2357279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba85ffa8-509f-4566-a481-e0089cb80975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116832a2-6091-41c0-a890-59657611a954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd74e316-871f-4127-a345-f2f38f88cb86",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e061693-386e-486a-8a4e-4e0eae503899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a784921-32e2-44db-9036-e2c4f7bcd3e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3892739c-ee57-4e53-9580-bb257ccbd9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf4e515-2cd2-4981-b830-1429ccbb2dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50f88f-c62b-4869-b08d-02b78b65420f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f6f93b-5afb-465d-bc35-eb062b2cba09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ac4ec5-0698-47fd-9256-e30507e78ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fae3aa-4aaa-46d7-a10e-bc7d669d448c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87be9be3-c28c-4c03-93ab-e8626ddbadec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a53bdf-79df-4b9e-81f6-df82a7bb78ff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f07f2fe-b002-45c2-aaeb-a577ea995cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec683902-f2df-4a92-bd73-560599a21984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db17a32e-1011-42ab-a1b2-63478458f35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded50a65-3556-4ddc-821b-c415aca423ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c402c5bd-649f-49ae-8780-fd00b7356910",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b28553-aad4-4861-b586-da560b81fd7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8116089f-cef3-4ec7-9f71-d6137cf78bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76bd21d-508e-44b6-8921-19cb09777b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613af363-da0c-4dc9-8b86-847b2308ce8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe9786b-5cd1-417b-b761-ea04b1abc5e4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353297cd-dc91-424d-9d91-187add80f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b898ed-967b-4d47-83fb-68430b12e8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3c168e-c726-459f-a800-6e7aaab07af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2726dc0e-a485-419b-a31a-929fdd36ee0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deee0c06-4ffd-4a7d-b397-db113bb6c8e7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e65c26-6ee4-46a0-8af4-b68717e38f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1350c9da-3733-4c9a-bfc8-d680e0fef2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69010491-973b-4ada-aa1e-acafb38f4c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216ec052-de3a-48b9-ba18-918c6d86a62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b262756f-78f2-4abf-aee7-ac99d2951cd4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc51bf7-afc6-445b-aa1b-5472d925b62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e811982-1053-4edb-b2bd-ddacc76b33ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51d5d2b-f196-4a44-beb4-cce4fc835482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0a8996-f71d-46b9-a525-a9685381fc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41d4383-731c-41b9-bbd0-5f3e4080ac37",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5b2e4c-3659-4660-9cae-98b4620b97a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61821f3f-961c-40b6-ba23-9715fdfd1a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbe1f37-5e74-4434-a5f8-4a05cbcd9162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5a000c-355e-46e0-82e2-17f1eba85b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf8b426-acee-49b9-8b88-6db6ed76cb28",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2a22f5-c0a8-4e93-b02e-4b26a05a2318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe72ebae-dee9-45db-8e75-27b4d7f6411f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b590e3f-0224-4c8a-8e55-eec7d2cf0aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb228e0-d6ca-4fd6-b0d4-80eb9805ee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6812a6-ed80-47e7-a134-122826c73ddb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18212ca0-6ef7-4c4e-832b-46e79ea70fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f701c5-944e-406d-8c44-61b10d7779b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ecc55e-d46e-430e-9502-05468ba2d2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3245dbd-10e6-4b24-b2c6-b88c401327b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1668ce3-59c8-4a32-a553-d24b3eacb071",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d6d6ae-192b-4881-a6bd-5864c233b1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce334964-3303-4aee-be89-648db033dd04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded1aed3-e836-41d6-983d-5aa7830a8229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17ffbb5-e284-463b-8d23-b9b38f870af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d52256-6ca7-4b74-9288-cb61fdce53a2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0952e89f-bb63-4a1a-9796-2d23a405df70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bd53f0-4bcc-41bd-aff9-3141e8454541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6155d684-b27a-4956-a2d0-b0a639c6e07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47128738-fdd6-4199-ba9b-6b6f048e1a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd078d5-29a1-40df-a051-fc0bb537ade3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d652e9-c0ab-47a6-a9ab-053480718344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b9fd51-24fe-4b77-8e79-ad36de4609c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c14ad2-4136-4983-a24f-55754a4925aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9442c4fa-3288-4a6c-a6be-c963993c474a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f80abd3-8e9c-4bbf-99c7-91a27f310135",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3dfe83-f4cb-492e-beae-e987658a187a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a57e8a-c3e6-410f-982b-5711a3809353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285ac6a9-8bed-4525-852f-944fd2248a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588fb582-936d-4c9b-8c33-6f5318c9d29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b632a2-db58-4376-8dee-0a43eba1a225",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f460bd-e0f4-4529-ac6d-494c9664ba5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d9ea11-9cdb-4122-a11d-8d4e7c99abb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5561c17c-b422-4239-b0d2-4d5ba406cdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2839e35-feab-4a36-9532-8b76ef5aeba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df3d2c6-0651-4181-94e3-2b82c700f5ee",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3151f2a5-1bac-42ea-b1ed-23fbbfc01931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c844c4-48d0-4be3-8b70-60477ef6f6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056740c1-5023-423b-a7aa-5262280e4f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628a445e-7833-44b5-8f4f-b17c8382be62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b65c5af-8292-4aa7-b958-e26eeb29907a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69077e29-2b2b-44ed-8d9b-285abe301a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3410e9-7d11-4371-a230-61f87393bb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9929e40-0dd3-4516-8d46-a460eee99eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401df09d-dec3-45a1-b4f0-4f7333557382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f498922-0db8-4ee7-b8b9-806e48652182",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a62f857-9ef2-45db-94c4-ec86c9d5caca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d701d39a-6850-486b-887c-41e9e7fc6438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615c0f77-ff6c-4e5b-8a8b-931b0245d92a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c947c11-d906-44fd-9019-ead3862a2b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4157c8-ec08-4217-b184-7ac0753216a2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832048a1-a3f3-482c-a96d-ae0404f192e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e14d552-43ac-49d6-bb7d-c51d1dbf4d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9491fe1-c691-494d-acbb-720b915158e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c2d88a-f577-4c4b-906c-ccb80bae76c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769c5749-9eac-4fc3-9490-6309cee416d5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2016a4-3eea-47af-aa6d-c4301d992516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b60786-b90d-4c87-88e6-1e430381cc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f796a9e-9ee8-42e3-893b-15742109ff61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69982fd3-6d9a-40b0-849c-42875448e06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8999745-e267-46e1-ae4c-e5015cd5a8e1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6893f024-5f4d-4846-9dea-f665a128d5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03853e6d-02b3-4f5f-9a27-afc50e16d8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c202076-3448-4ffc-9fba-078ff1870659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683a46ac-4298-4e61-8e1c-6dc0226c758d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35890e5-d994-46b8-8cb0-ee07275b2fd4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c765ab5-98be-4d6e-b386-9642ab1a9f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec1387b-3b51-4b9a-97b0-55b1eee661f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21796702-4407-4061-98bb-e268d928cf4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08868100-a881-48d5-b2c8-d1fc521d188f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7d5149-75b4-4b2b-8a32-1947888c837b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccfa5a3-b326-4f8c-8c78-527a0acdf90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1097dfe-fb58-4bac-b7a5-0abaf41765db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6477a39b-21af-4d26-95c2-bc49059b54c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85b57b2-6bdb-4c5d-8d90-1250de6980f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe14f970-ab00-4b7a-b262-e6c9108d9265",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620b3ba4-2134-4f3d-b1b2-f3a5535a145b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c351c3dd-aa9c-4f88-9a94-74e7769838d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f072f2-b028-454c-97c1-c52c74002395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db02cf2d-3ee2-47bd-9f85-cd808e7f4770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc6da15-94bc-4c12-af86-b2f46e3ccd7d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9070b9d4-7866-489d-8c04-ff1015b7aa57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00780d86-84cd-4a62-a31d-b04c3207bffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5209e09f-9576-4f45-939e-51b6728acd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2f9952-db86-428c-8d03-234750057b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7861e519-7d3c-4344-827a-6ff73d9553f0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1d383f-4cf3-44f8-ab07-b0c5d986a44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9212e87b-1a4f-4516-9d08-dbcb79f87dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537b2b87-da1e-4c27-9714-0897d8af327b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923c0d2a-0fbd-44b3-80a1-8ac83e548b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0862144d-4f7c-4429-9c0e-d50a35989595",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fc6bf0-10a4-4a43-ab44-05675c29d463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f6960f-c2e3-4969-80f5-189187f7584f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d0985e-2380-4ad9-87e4-c5c00a65b33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6d19df-b61a-43d4-8db9-ce062e9b3ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0396f2b-ed66-47ce-9939-c2367897cff0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3710a1c4-f0f7-4e79-9ca3-b6891cf15a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23330e0-f1b4-4b3e-826f-bc006878fa8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343c6f7f-7f82-492a-9d02-b8d0918854d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90612dcf-ab61-495f-8919-5b05607f8f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c1e773-7a19-455b-abd8-4d36cc97db2e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2a2e48-ce04-453b-a3b0-4e7bc0ecd5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1fcac2-ce23-4c3d-9604-a10ef02e200c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5598fb58-f916-4624-af56-06e543a15c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d96705-a408-4f39-a1d7-4e23419c365e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8a5f34-1d38-4465-8dad-e780e7dbe44e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109e08e3-3ca7-424d-860c-ade84ffa4fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc0ebc7-9705-49d3-8921-4f02f32735a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dfbbc2-c534-4c6f-aeb8-0c77bff97dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325c212e-651d-407c-84f5-08131cbc832d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed73afc4-250e-4302-a76e-8f9ca72a0686",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70495d53-36bf-453e-b108-778c3c03d996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de21b8bb-11fd-41be-be36-0fe81aafd410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1355f618-cf4c-4060-b4d9-df2cca19f436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0f3fcc-0201-4428-9d63-0631d1251bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d4b0bf-5a22-4589-a2e9-102356d57972",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c74bb85-8f0a-4fcf-b4c6-393c1b6512a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c60756-f5f6-4bf6-9d36-40d65f7408ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2490c66-0716-45e9-b20f-843ab2c0bfba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaf8f71-047b-491a-aef7-269eec80dd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e42f202-ab0c-4a1a-8981-f0f37d90b13f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2daeb154-7adb-4502-a5a8-cc8d0d6ad462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28285cd-6b6e-4771-a38e-e34e848d155f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b042ae20-b1f2-4b4a-be36-e5801a60498c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04437d92-bc07-42cf-9295-9b20235379a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7eff18a-4749-4fa1-b58c-87918b506288",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c035728c-488f-4417-8658-2355b369970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce23daa-602d-4325-a1e4-2b0094cbd920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c924deb-5410-4649-9ad7-7c7f6ace42c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8cddc5-6632-466c-952f-31e9021534e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fd60f9-929e-44fb-8756-bf2455cd4d8c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15c6e7d-468f-4781-8490-edfd35cec4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8bf98c-fddc-4b35-9338-c8b1ea8a854d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06674f6-22d5-42f1-8bea-4f3ea8e8c176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0226a5-5fa0-434e-b3d0-2631bd62780e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe38e319-4cb9-411c-a8c4-653398ad260f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc6d413-73cb-46c3-bc0f-fbf6cc4379f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d41708-73eb-42f5-b153-54aa3265b206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b76deb-e07c-4b48-bed0-36e8850e0df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429861ae-5786-45b8-8d71-9e4d1431ebc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a997f911-c99f-4417-83ad-a9ae348a440b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df6c318-e7c4-497b-b583-952c65d6a3eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b678ffc-fa4f-4e20-b763-9cedc0b7cb1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4328d-7486-4a3a-bd4a-ed3d36c9e493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73d74cc-4e10-4988-82db-d34f7663270b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b6659c-776d-4259-9055-6ffce8e165f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4144134a-fbd4-48ee-809e-338336dedc9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74239941-8309-4cca-925d-99a3f53dbd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac8761b-875f-43d4-a924-54c6df7abd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df135c45-6952-42d4-9105-8b34ddb50a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1368ed2b-837e-494c-acf8-0d2dc274804c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320ba46-ee6f-4cf9-838e-254f1a2ccab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bccded2-aede-44c9-ba1b-e1563160233e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff4ee8a-a2f4-4d25-afe1-694cc0c38ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6824d1-204e-41be-8a62-2791788af398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cfb797-0040-4ff6-870a-b7c4502cdb41",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f58aa22-fad2-4be2-a81f-737045c84e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8719dd7d-8213-4cff-a451-6f0e62acd56b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25a1ceb-0bf0-4ea7-a9d7-fbfc988b772d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac02f1c0-3034-447c-8e30-26734c8bdd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a319c26-eb84-4be1-96af-92433479cf64",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba3942c-21ef-4964-a546-2b57712ed13e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e029be96-1f29-4fcb-8667-83c0fd469026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843f8610-1bce-4f6f-bc9d-343f21aff3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd36d08a-dbb6-4a0d-9b5c-99c0dfe1b70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468927a5-ef48-42ed-b996-87bd5a3d58a4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226f59aa-d8d1-4650-8eaa-3d5d9de4b228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "587a082c-3082-47e1-8f18-2fdf8ce13df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddb45ec-d50e-4bca-9b41-3815a87ffe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6f0f60-5ea6-4eb6-ad53-185387836d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784ec0f4-8700-46f9-bfb2-6cc39b632f2b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d44438d-6e5a-4d90-b549-f7d69ea8f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc82378-cd65-4e78-90b1-1cb48e7038ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8903c17-dffe-4492-b604-4dec6bd2d65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cff21ca-3407-47c1-bbf9-fb5f67e45c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d0c028-2c35-4766-bdc2-b3b0b7c040b3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc695d19-7b76-42f6-8c25-cebcc6d69c44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b32ae085-b77a-4ae0-beec-e84431ce8820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9116328-215d-4b54-a89c-a4f278ac588a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6aa7e0d-a28f-4c4c-a571-327e87db2f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f2fddd-f96c-4ce1-a9f8-0519856e5b32",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee209d9-2785-4ba6-98e4-6fbd8485d9e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9690989-b8b8-41b2-b485-d473b8b2c616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7c24ff-afcf-46f8-8dd1-c414d734a3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1251a62-0dcc-4c76-80e0-acf990f05dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6013d890-901f-44ab-80a0-0d615fa52297",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad7c2a8-8570-454e-8bba-45d706225b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053d2a79-6514-4691-b8c9-1944b7386df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7aab96d-e1f1-4255-b6e4-fa7f0ef2e118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a6f6f8-ad7f-4e82-9c5b-07171eb503fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187ce033-927f-43de-a83a-69ab84aa0d9a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0fb8b9-0034-4486-9ba4-f081d13871dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b69e6039-90d3-4f9a-9e88-cad56472a9e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e10dfee-5408-4cc0-9eac-306c468b4a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd88a9f-0c75-4cb6-8cda-305f77312a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb298799-098d-4ce3-aede-5fdfaed55759",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1daad74b-d940-40c5-9984-6c3ba60af430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb0b294-065d-4f31-94e7-6e76604c84d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7a31ab-3f09-45fb-b258-6d83f3240718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f681be-ea16-4c35-9c01-9865b9624aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ced646-dca9-42cd-8b22-97227d24ab97",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479ff97a-d7ac-4435-ba94-f78e3cdda980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f996677-f237-409a-8541-4b89de6b2b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53196e1f-b08a-4d54-ab5e-fccc8a739ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b727f695-fdfd-4a54-9361-92f116277829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d012520-12bb-453e-897e-6dd2e3984dfe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe4f68b-7e6a-433e-aee4-7972fe715abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f533ef8-4cba-4d8c-b411-7c9265c60e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ff02c8-e61f-40e6-b14a-b704b87f1273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac8f158-9572-4be6-8a55-d508a7a6949c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5d9115-0d47-4e03-a0be-56445d48165b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5acdc5d-c77c-4c27-b65b-a74dc70b6318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c6a179-a26a-419a-8cff-dd28c0c33de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f75f48a-6d8c-4b64-b8a0-ca20bc615e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508d85cb-b45b-4fcc-8d88-601cba437c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fcdf94-fd43-458e-b049-70bee8d0128a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160eab81-9f44-4001-be17-df0c026ba803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cdde303-a5ea-47a4-82c7-5e736a80bce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1838535c-2223-40d5-bd75-24dbd4694cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa43feae-02b3-4574-94dd-ab5583d45a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa87630-de1d-4829-a844-8b2165323051",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cee4fb1-e35f-4dc9-b7b7-fac1effc041b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3428530-553a-46c9-bfd1-c2472034fdda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0efbe9a-61bb-446f-995b-c1e7e415c9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fefa074-fb51-4d49-9ff3-fa19936fddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d516ef50-9157-488e-9712-7966b1c922a6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf9efde-58e6-43b0-934d-61089a3870b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c61bd1b-9fd8-41f5-8721-db6cd2704811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630b951c-1b9f-475b-8a05-e8e772c4e6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0e49a2-950a-44b5-9da0-a4ce5f927607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5ec7da-4268-457a-b441-853b44c0e326",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c838b9-1847-4f7b-baf7-9c6ea541d968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c58488d-2b74-48ac-8704-9e0e5110b71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ffd612-0e67-4198-ad77-f409e770d4a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aecef1f6-41e3-4335-8d64-26ccef9d8962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac83b58-0e5b-472d-8d2d-292c043cdb7f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc914d2-243f-4e5f-aec2-7dc3f1270ab1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b844f64a-5541-4cc3-8a54-6e58b2128dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58980c2c-5899-4ff6-95d9-805ee0e06527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb83eb9-fa73-48e9-b543-c69440821a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5c07bc-e5c2-41e8-a906-3894e4e215a8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a60b67e-55f7-4d05-bc45-58aa30afcc2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34afa071-7142-4367-9f2e-ca9a6b4702f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9cc59b-2209-4559-b8b3-46aff33335dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151385c3-c58f-4253-ac92-39ff82ecdb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86a71e5-f5b9-4e4e-bef3-36210145a1a3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef854dae-f0cb-4ab1-9242-892ea91e172e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "065c2265-c1de-425c-9061-d8954fec787c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13f3452-fcb9-4d35-bc1d-b46ab4781552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8423c970-8b21-4330-9560-b48dd82df219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a497c7b4-e771-4bcb-95c2-05bfa226b419",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e300721f-4a8a-44c4-a46c-5a8f0771ffcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba24008c-9342-418a-bf62-a2475b742f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfbab21-2200-41d4-8325-d32c67d8d41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cf7db5-7e1b-4b87-ba8b-bc93b44249ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625453cb-f340-46da-80ae-68edeeb7945e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714a6b59-78b5-4d20-8aa8-b14d37aa452b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d174504b-dceb-4e14-a589-bf3343f8717a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9dd00f-9adf-4dc5-8cb9-20d76821541e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbecfbb1-babc-4e97-ad68-af08fbc7c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5efeafd-00ab-4e3d-9534-ff25c4f3f300",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122a17bc-7afb-48e1-82d7-71b2ba4dadae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67fbe8d-685f-4482-9603-086324ddcb18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b67137-98b3-4be0-8838-f94ebfb021be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a30ca3-194e-4223-b920-c630a7796911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a6b18a-3d19-4d18-9765-a2724ea24d5b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852490bb-ced2-45a8-a5e3-39a4f388d4b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc45a81f-ce0c-4cac-882a-ffeffaa74e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b626ba-7294-44ac-966f-e65ff4bba65c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c337340-ea4d-439b-9dcc-c64cff26ac1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26310dd9-c897-460f-a77b-c0750c9f6b88",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14736dbf-7902-47bd-a452-dabe2ac5d3a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0cb452f-42b5-4f3a-8ac9-c0b549a61d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d70a39-4484-487d-8a6c-ac8dd28e35bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23308731-c684-4e29-9419-416b0d2aa382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417bb66a-6cbb-4964-84d6-6b40e5ff4692",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf1e603-6590-4273-8686-00b370b74694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d1d26e-a226-42f7-b0f0-ad6dbfa88acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058ac7c0-39c5-43f4-9195-867d1e5abf70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00dc4c39-5d0b-4692-bf46-c977ec36789e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6df81db-fe75-4765-af36-edab9077478f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe6f171-fe5f-49dc-975d-78830979869d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d39a2a7b-233d-4fac-8ae2-7a114d180fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf38ae9-d53e-4108-8922-16962c657ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d8f444-369a-47b6-939a-9261d2e614a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbb6b50-aa9b-4eaa-b9f9-d6c6d1245991",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0514b3-06f0-4297-81ff-05d5024c61eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799af902-510a-4e92-85c8-deb29d4781a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bc61d4-6465-43c0-aa52-cf2545cc3bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94effcc0-7520-4fa5-903b-ff8005b011cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c69ccf6-78cf-49ce-8947-968adabfe078",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad3fbe0-1e39-4d52-9131-120c9b308e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "151ad8d8-2729-47b1-9d1b-63be1eb21c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e3778a-fc79-41fb-b82b-729cc2fed155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f473c0da-fc01-4cfd-bfbe-c3bcd09c62fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069038d0-8877-468f-9a3b-2a2aa04a0ab3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ea00b8-929f-4141-b274-607055031365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3430daf9-7325-4124-bd28-7e481581072f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a9e780-2682-4173-a85f-7116447219b0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3069ce89-3fb6-4602-b6e6-d12e7dc88fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72a6c88-545b-4e8e-a256-3f1bd49dd09d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91204d3-3701-42f3-b827-753f7c2fe654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa61b265-a7cf-4f4f-9cdd-ffaab6f8b69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60d264a-182d-45ed-b4e3-e3b2f9a7eb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49e2b57-eab3-4896-866d-40a51772f690"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed4e546a-cb0a-4af6-8910-ff96b584c030",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14605ef6-618f-4b43-8477-85a74c1e53c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37efca7a-db5a-4822-a164-3e8cb24dd6f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c348d750-7af9-4bd6-90f2-7f538bc2727a"
                    }
                  }
                ]
              },
              {
                "id": "ba5b5061-6cf0-4ee8-89a1-26eea3ec5fc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "954d5444-5f75-4ac6-a45e-28aab7455a13",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5137b2-d040-43c1-8533-7354d95f9c09",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6b3f852c-e4c0-4b16-9585-7a99e39ee49f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1d1e7c-4020-4eac-8beb-c13886770ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84806df9-5e5f-45fd-b573-1d84c4aea699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2de506-4d1c-4a4f-aea7-454300d9e324",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9139eb5-3c28-4b4c-a89d-619d7540610b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3f39d187-e44b-4c3a-a081-54cf85a05280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45a9ebf-278c-4132-a513-3c92c4a5d880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b68ebe33-fe58-4fb3-b48b-57d119192704"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25917086-125a-4cd0-bcff-5985140da82b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc2c4564-acf2-4294-8ced-95f6c172b007"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56103264-f639-4bad-9d49-62cb28441ffa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddccb4d3-b2b7-4aa5-af90-05aa8ee2dca6"
                    }
                  }
                ]
              },
              {
                "id": "9234f66f-0850-4340-9193-e827b37bc04f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "350aef4e-7dd2-4f7e-933d-2f610ce5d339",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17de30e4-b96f-47a0-98a7-6c7d581c99ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ecc7bea5-1ba5-442c-a7dd-c1b964051ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97674570-d187-401d-8026-db48af56a475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd336f28-8d50-4ff6-8e6d-39e6bf84fd4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a74428a4-16f8-40b8-b36e-9e34327e644a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb86578f-05ea-4217-a042-1174e97b2b83",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8da7ea31-e59e-4560-8749-30607fbc19f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "01a5bfdd-a5da-48b3-a009-244881bf39b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a458c4a-7380-48d9-a69e-1c1d2da4e865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd01f92e-6217-40ac-8ee5-aba2af7229c8"
                    }
                  }
                ]
              },
              {
                "id": "282b5019-fc1f-48b2-a5e8-18c610254a17",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6b3c9c4-cf5b-4694-9d53-b92b1a296c27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e134706-bc3a-4d3d-852b-9d69c0d98088"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2521bba2-c4cc-4603-b252-f8d79983e2fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2301de7f-401f-4419-8c4a-f8511e0ac750"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d815aa3-8a84-4231-adf0-3eb52bb7136d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c820e017-2ac2-4f27-b017-0c718f635bba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71f0ad53-1af5-4776-8a2c-60bf904d12ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5de2321-4429-4d09-a0bf-60167202b8fd"
            }
          }
        ]
      },
      {
        "id": "cdd79429-9c38-4135-8938-94d676fa9b05",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d087711e-9f4f-4e8a-90cb-59e04ad16783",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13e49391-c91a-4240-b346-14004fe65a97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "984c48fb-c72c-4a03-a057-48be91a32080",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd3ab7-54a4-4b6c-acd7-be9275898566",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed02eb1d-8c6b-46bf-b7b1-e057fe1a518e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a9ac91-31f9-41ae-a4f8-39f1af6184e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5996a173-3633-4e3a-a235-09f98069e03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21487804-81ff-4315-a593-f2ebc37e59a6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8dfde5-0a73-41e1-b8a4-2d1eb09c8c66",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "64e524b8-9fb9-4c97-a515-6c3c2adbee74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5490ebb-d1cb-41cd-8142-4dc04673e33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf45de63-aa72-4397-b156-1fdf6a4aebc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e324bfd4-1c7d-4948-a058-6556dec5fb52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62c9f972-094d-4afe-9d92-ef419ed49916"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "207d085f-f785-4774-896b-bd696c02bcaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5cb9d7aa-e3b1-40e4-b52a-b8ac6b81cad3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "686be8e0-25f9-4ffe-b118-795e497fc42f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "65503e1a-1cfe-444e-9320-44f439ea0649"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "474f28f1-4ad8-4779-ab3c-6a2141ae86e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98ffdcf8-2c69-444d-ad75-80ef17648b07"
            }
          }
        ]
      },
      {
        "id": "d54cb4bb-671b-40b5-9793-c72812519aa8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "edd2c2c3-cf15-4c55-b400-54f6f0ea07d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe06bd2d-6d3c-4bb0-bd26-997706f7a4c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7f2d113-ed07-4471-86e6-53f820ebd8db",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3109738a-83f3-4c68-9c45-68faccf14cce",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b944581-8f0a-49e0-b236-6658fb5218e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56dbee3-7800-406d-aa53-951825841a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03c5885b-bd78-4758-b43c-5b9ee162d38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55550a31-10c4-488f-8ca7-a3c187fa7344",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc82b899-17f9-4c46-9e98-63dd7806955a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66d31095-7568-43c7-8d65-adc7aed146e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7687739-648a-47a3-bad8-b2e2b784e51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "859f0ee5-366f-4b96-88c4-5cf086615a92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f568ac79-e661-448d-88ac-a05a25928e11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccd502dc-d423-40e6-a001-5997a9dc109f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f489c2ef-da3d-41ef-b808-e5730fce6667",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "233647eb-9d79-4363-b887-be4d52a086f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "912248b2-42d6-4087-887c-e1012dda36ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1c72c05-f52c-45b8-ae6a-ba50b9e704ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98047610-0746-40db-9fb4-94d5b0d5d144",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3625eb1e-6992-4ecf-a0d1-83fa17809dd4"
            }
          }
        ]
      },
      {
        "id": "dc76aef7-2177-404c-a2c2-24efa109cbd0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "50ac79d5-943e-4112-bcf4-7676754bebc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "890889bc-29c0-48df-b13c-9e233a1dd80a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "137bfd39-5e36-40d2-8ee2-fd71f560e48c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a917208d-4c06-497b-af99-b2ff235b2ae8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2302050d-5841-4dfc-92d3-5707b7732b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c66b4b-326b-4a50-978c-37ba0ba285d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89396837-7f8b-4db1-a2fc-e9ab9fd8a3d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc0d055-728c-47ac-8bac-bcf1d54aa404",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40e4441-95d6-4af0-8a35-472d7c3515d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b1e7d7-0518-4664-b302-b42445c14f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edd7657-bc01-4dfc-bc4d-ca20c8679773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e6d4979-efb3-4e3a-90c6-71d68eb60a90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5b42ccb-8ada-48a0-8c41-040518622edd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a16d121-3de7-4065-a865-7240aaca581d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28628300-cf9b-4d8a-9bfc-809f78792f45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d43b68db-6dac-4055-9214-0ee8c8dcb51d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91cb71cd-df80-4222-8584-936fb2d683b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "911972d0-22bb-4834-920e-698790b33661"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e24aaf71-fddf-40b3-a5ba-8e92c3aa4c01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8020895-a21b-4fe7-ace9-60e672c98e5d"
            }
          }
        ]
      },
      {
        "id": "3ae36c78-0bb1-4423-a673-74d6eea4aa70",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5557e3a6-006a-4458-b752-b64ea4d38dc2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "554dcc3d-b43d-4f1c-9775-eb767d75fa0c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "78ab8d70-3058-456f-a4db-fd3cd3913807",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fe43043-1631-4b88-96bb-3dd5ff7816c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fb2643d-5638-4fca-988c-e25d7063bab0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 328.2576923076923,
      "responseMin": 6,
      "responseMax": 6462,
      "responseSd": 891.1213629998298,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681950946801,
      "completed": 1681951046068
    },
    "executions": [
      {
        "id": "b3df37ce-7b93-4a0d-99a2-26f30d2f1504",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ffeea3b-3b0d-4b05-9965-1dcb55d56f02",
          "httpRequestId": "0e07d284-24df-409c-81fc-4c14bbf40589"
        },
        "item": {
          "id": "b3df37ce-7b93-4a0d-99a2-26f30d2f1504",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "34883273-b8b9-4437-9ded-afe9686079bc",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "18c1f2aa-4c0a-42bc-8603-6b6d9c8badeb",
        "cursor": {
          "ref": "0401ff87-f06d-4523-85cf-e0959f7d385a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "93893ece-5397-43e2-94bf-9d0015501cf8"
        },
        "item": {
          "id": "18c1f2aa-4c0a-42bc-8603-6b6d9c8badeb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ba7de048-9702-4ed8-a88c-2df990408865",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "18e22f9a-25f1-4ba5-9437-9e8d48247c68",
        "cursor": {
          "ref": "190e4071-26fd-4498-9942-8a588d94bc79",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6f1247f4-ed1b-4e18-8ff6-705bd36b9093"
        },
        "item": {
          "id": "18e22f9a-25f1-4ba5-9437-9e8d48247c68",
          "name": "did_json"
        },
        "response": {
          "id": "1b9dfaf4-ec7b-45e0-8b6c-a265ba05e6e2",
          "status": "OK",
          "code": 200,
          "responseTime": 946,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7697484-f5e7-49bc-beb4-4970ad1741dc",
        "cursor": {
          "ref": "64e5e11d-9f94-491f-9fd8-a5268a5b5fc7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c61a288f-cd79-4156-a176-e65a1b4593ab"
        },
        "item": {
          "id": "a7697484-f5e7-49bc-beb4-4970ad1741dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a82a896-784d-4187-b176-f46451218563",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1660,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a7697484-f5e7-49bc-beb4-4970ad1741dc",
        "cursor": {
          "ref": "64e5e11d-9f94-491f-9fd8-a5268a5b5fc7",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c61a288f-cd79-4156-a176-e65a1b4593ab"
        },
        "item": {
          "id": "a7697484-f5e7-49bc-beb4-4970ad1741dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a82a896-784d-4187-b176-f46451218563",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1660,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4bc3d10d-dc2d-4cae-a832-bfa9f6f0bfdf",
        "cursor": {
          "ref": "19326288-75b6-40d7-ba3a-3cb8df76f3fb",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2a6e915e-f6d0-4b78-8d5c-1d071619c1fc"
        },
        "item": {
          "id": "4bc3d10d-dc2d-4cae-a832-bfa9f6f0bfdf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f0b68bee-0b9a-4f32-ab9c-acf3b128a087",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291ab314-f321-4f90-bd10-85359d9111e9",
        "cursor": {
          "ref": "9ad16dcc-b027-437f-b167-a240e3b71968",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9e6170e8-037d-4676-b1c5-46a59877885f"
        },
        "item": {
          "id": "291ab314-f321-4f90-bd10-85359d9111e9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "59d7dac1-faed-47b7-93b9-0cd4f3086615",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06360b33-6845-4b61-a642-1b231b9d8023",
        "cursor": {
          "ref": "1aec9b22-fb87-4f0c-9af7-fe4054899c15",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "592f35ec-dd8b-4711-8bad-0ff72517401e"
        },
        "item": {
          "id": "06360b33-6845-4b61-a642-1b231b9d8023",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1bac8fac-5551-434d-ac21-95492f4b9852",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "67b31259-ba5d-4a33-96e6-37c3c752e01e",
        "cursor": {
          "ref": "fac366b4-0176-4a85-8bba-f21fa77f612a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9e8ec7bb-b26f-46ad-9cf2-9e77f5b817a6"
        },
        "item": {
          "id": "67b31259-ba5d-4a33-96e6-37c3c752e01e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "47b2bab1-3763-45e6-94a8-987242960488",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "67b31259-ba5d-4a33-96e6-37c3c752e01e",
        "cursor": {
          "ref": "fac366b4-0176-4a85-8bba-f21fa77f612a",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9e8ec7bb-b26f-46ad-9cf2-9e77f5b817a6"
        },
        "item": {
          "id": "67b31259-ba5d-4a33-96e6-37c3c752e01e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "47b2bab1-3763-45e6-94a8-987242960488",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9b2e4da4-0c2b-44bf-86f3-d5fd72021aad",
        "cursor": {
          "ref": "20f649de-bba1-4b95-907b-e7e1b9e0377c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "27534b65-4b41-412d-8913-bd695818568a"
        },
        "item": {
          "id": "9b2e4da4-0c2b-44bf-86f3-d5fd72021aad",
          "name": "identifiers"
        },
        "response": {
          "id": "5912aa34-170d-4c3f-b012-51cfdbc42391",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7371537-b087-4685-981c-f417737c04be",
        "cursor": {
          "ref": "c910592f-306b-438c-b8a6-dc3350f16323",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bad2e102-cbc2-411e-a2ef-adea5b430c05"
        },
        "item": {
          "id": "e7371537-b087-4685-981c-f417737c04be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a4040e8-e109-425a-b871-6c1cbac07d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7371537-b087-4685-981c-f417737c04be",
        "cursor": {
          "ref": "c910592f-306b-438c-b8a6-dc3350f16323",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bad2e102-cbc2-411e-a2ef-adea5b430c05"
        },
        "item": {
          "id": "e7371537-b087-4685-981c-f417737c04be",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a4040e8-e109-425a-b871-6c1cbac07d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb07af7-8070-47be-b92b-3b7477e3bcf6",
        "cursor": {
          "ref": "3f4b33c8-304f-41e5-88c5-1375e1cfbe29",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "deacd7f8-e275-4fbd-b46b-b5ab6b171d7b"
        },
        "item": {
          "id": "8cb07af7-8070-47be-b92b-3b7477e3bcf6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "81833cc4-4e01-4808-9828-cda9dd390a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9bc64a-88e3-41ce-8b3b-d3662b38a93d",
        "cursor": {
          "ref": "9ac2c5aa-82fc-4ead-b27b-582bdbc7fcbe",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "93fe0acd-1943-415b-b1f7-1940707a5c8f"
        },
        "item": {
          "id": "bd9bc64a-88e3-41ce-8b3b-d3662b38a93d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e7b030d6-d0ac-4357-91a9-c29ca6370ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694df394-391e-4d53-9f64-ea27dbc61c23",
        "cursor": {
          "ref": "dbc3af14-bdf1-4e7d-9fcb-e61d4bb7c85a",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a811434a-3f4c-4c51-944e-44e9ed558639"
        },
        "item": {
          "id": "694df394-391e-4d53-9f64-ea27dbc61c23",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f21c6306-7e29-4a23-b121-c7d81839264a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c1e8cd-3e19-4083-bdb2-84108b49d272",
        "cursor": {
          "ref": "a5ca47da-e2d6-4261-96bf-3251793956bc",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "676056ea-6513-42f4-9b25-3ee94d085cd1"
        },
        "item": {
          "id": "02c1e8cd-3e19-4083-bdb2-84108b49d272",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9cd1b0a2-9634-4990-9556-d62ee9ca3d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29813fda-071e-43c9-b21a-9e29306601d2",
        "cursor": {
          "ref": "3b6dc147-1a66-49cb-9b7b-5c54144aabff",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b0487bf8-8cb5-4532-896d-6b3344d6e0ad"
        },
        "item": {
          "id": "29813fda-071e-43c9-b21a-9e29306601d2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7b8da5ac-2821-4ea9-9943-36159ada4cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed9edcd-a347-4bff-b3a1-b5e2deaee676",
        "cursor": {
          "ref": "9673a8e8-9ec3-460e-98bd-867adc26a463",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9483ddee-f3f5-4ad5-80b0-1866d74da693"
        },
        "item": {
          "id": "eed9edcd-a347-4bff-b3a1-b5e2deaee676",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "719cab63-5180-41de-ac02-d03d22289f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba2ed01-851b-4dbb-a86c-52467e213b5a",
        "cursor": {
          "ref": "3a3c971d-0427-46a1-a18e-3a03c26610dc",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "397f3cdb-33cd-4268-9d96-76a84836ae4a"
        },
        "item": {
          "id": "fba2ed01-851b-4dbb-a86c-52467e213b5a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ed720c8b-82ff-4c61-b1bb-9796029b6b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bfec5f-5ad3-4f51-a0e0-607f54135fa6",
        "cursor": {
          "ref": "d113b21b-a38a-4d87-8e5e-10ca427ba33c",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4a143f91-4cad-4f83-a5da-bf3b258ee16c"
        },
        "item": {
          "id": "60bfec5f-5ad3-4f51-a0e0-607f54135fa6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "071a43b2-83d2-483b-99bc-f179456e3c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbe34ec-807c-42b4-9f19-0c9af33d8c04",
        "cursor": {
          "ref": "f6306479-5f2d-431b-bfca-2dfdfe870e99",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6a874926-9fbc-4fdf-b2ce-3283ac342898"
        },
        "item": {
          "id": "7dbe34ec-807c-42b4-9f19-0c9af33d8c04",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b1e4da6f-09e1-4fe9-be44-57e0c71da07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b767d3c-4709-4d18-886e-2b4219bfc9d5",
        "cursor": {
          "ref": "4573a26c-72db-4e3c-9823-4ed4fe34ca09",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "529919d1-f590-4f4b-a7bf-e841e52c5e96"
        },
        "item": {
          "id": "6b767d3c-4709-4d18-886e-2b4219bfc9d5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4fc937b0-8424-4c42-b39b-166367c85f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4ea1f7-b9d2-4996-8e49-449c83a05b32",
        "cursor": {
          "ref": "32afaa46-f383-4382-9c78-ef0f2f46c9cc",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "61665c83-1aff-4a8d-ad04-e0366e74f716"
        },
        "item": {
          "id": "bf4ea1f7-b9d2-4996-8e49-449c83a05b32",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dccfb7b6-70a4-4d9f-8316-87ea37cab48d",
          "status": "Created",
          "code": 201,
          "responseTime": 807,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "95976e72-41b4-4f69-9a4d-b8ea7c7a0986",
        "cursor": {
          "ref": "84d47a02-0cba-4086-b839-bf7d5b239db0",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "52dc7669-71f8-4357-9ce1-31c4eda45bd0"
        },
        "item": {
          "id": "95976e72-41b4-4f69-9a4d-b8ea7c7a0986",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "091ea4c6-28f9-45f3-92bd-d220d4b8e7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b058b0b3-62ff-4dc7-8dfd-593464202bb5",
        "cursor": {
          "ref": "c5de2b3f-d943-48d9-8296-dee8a9dadebc",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e7b59398-02e9-4a54-b3df-f2a78c125520"
        },
        "item": {
          "id": "b058b0b3-62ff-4dc7-8dfd-593464202bb5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2ff570c1-12b7-4c67-9550-e0f8f5cfe338",
          "status": "Created",
          "code": 201,
          "responseTime": 5803,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9615f9f8-7da5-4c78-a9f8-2310b2940118",
        "cursor": {
          "ref": "f746bab6-3271-41d5-b873-f7b3904f7e3b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8922eb86-d521-4cbb-b478-2863bff53f72"
        },
        "item": {
          "id": "9615f9f8-7da5-4c78-a9f8-2310b2940118",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5f8f70ff-48c9-4e68-9e6c-0211266a9d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f1d679-2c6c-4f7a-a5de-5e570f7921c5",
        "cursor": {
          "ref": "3bd8c52d-1581-47d1-bffe-6a89912e03d1",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "37e8e771-99f5-4db9-b885-26eb22ecc4aa"
        },
        "item": {
          "id": "b2f1d679-2c6c-4f7a-a5de-5e570f7921c5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "38c81e62-a892-4c8a-a998-b0045ead3c27",
          "status": "Created",
          "code": 201,
          "responseTime": 5784,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d41d5b51-3c0a-4f78-b9b3-560a825734cd",
        "cursor": {
          "ref": "94ae0a4c-9d71-4fa6-af76-abe2246f2ad7",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "80d550f2-0c15-4b41-be62-5aa2db366c27"
        },
        "item": {
          "id": "d41d5b51-3c0a-4f78-b9b3-560a825734cd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dbf1d355-de08-493f-9d8e-fa28767f414e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bdb116-34fb-4d66-8505-fbbcd0a9e856",
        "cursor": {
          "ref": "d2400ca3-97a2-42aa-b5cf-e38523838524",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "28723b8a-1e93-4800-9975-39d35d245b7d"
        },
        "item": {
          "id": "27bdb116-34fb-4d66-8505-fbbcd0a9e856",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c0cb2a1d-a121-4a99-9d4d-4ce6155e34c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbf6805-e0b6-40f4-b395-567e7c406267",
        "cursor": {
          "ref": "98de728a-0c93-44af-81f8-9c71dc32c184",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fe613a24-954b-4f07-8368-fa706e6a72bf"
        },
        "item": {
          "id": "5bbf6805-e0b6-40f4-b395-567e7c406267",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "311d9a95-63a9-48ea-9a67-de3ece8e373f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37d237d-e913-4f1a-9b75-896fd8c79a7d",
        "cursor": {
          "ref": "ea868db2-a420-47db-a6f4-518af78aa4bc",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "203787dc-995c-49f3-a917-7a5ec16c9477"
        },
        "item": {
          "id": "a37d237d-e913-4f1a-9b75-896fd8c79a7d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "31892999-4e87-4160-8333-973f047dde07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6689dcbc-71c1-41b8-b363-b1997d5ced7f",
        "cursor": {
          "ref": "81111198-6d85-4d57-a50d-f86e72c82402",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3f65d1ed-6db7-4916-979b-1e0439367b23"
        },
        "item": {
          "id": "6689dcbc-71c1-41b8-b363-b1997d5ced7f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bf65281a-1142-4633-ac51-78c27cbf256f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efecf6ec-cc14-425d-878c-f27868b3ffba",
        "cursor": {
          "ref": "05862ffb-6239-4ad4-ad0f-b46fc60daa5b",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6448387c-41e9-40fc-88d0-abf3bf04992b"
        },
        "item": {
          "id": "efecf6ec-cc14-425d-878c-f27868b3ffba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5a18c1c5-89ae-488d-971a-919f483d4e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dd870f-f851-424c-848e-033b9b7138e4",
        "cursor": {
          "ref": "c650c7ac-a4f0-4d02-822e-d33d857dfc87",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a4ab9df6-1efd-4ed3-ad19-0e8146c618e0"
        },
        "item": {
          "id": "27dd870f-f851-424c-848e-033b9b7138e4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "084e693a-8276-452f-bb62-62b9a5d88f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff18054-2813-4342-ac0f-8e95195185e3",
        "cursor": {
          "ref": "670c6755-8917-4fbb-b0c4-c546cd06103b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "473ff80b-7713-440b-8e42-11bfbf21d8c2"
        },
        "item": {
          "id": "7ff18054-2813-4342-ac0f-8e95195185e3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b6c4f269-1442-4c9c-97e1-1bcc953077cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9116c4f3-07e0-448a-a42e-d4655263d48e",
        "cursor": {
          "ref": "1ac47711-a81d-471f-93b8-3940916da3c7",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9181a0b3-67ea-4288-912e-0e17173f1211"
        },
        "item": {
          "id": "9116c4f3-07e0-448a-a42e-d4655263d48e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7de6e1aa-3a42-44d7-b7d5-075eb7c1b42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a9664b-54c4-448c-ac0d-541eb786185b",
        "cursor": {
          "ref": "ef9969e0-1b63-4db2-ad09-7dbf00b4d674",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d396c295-b6b2-4761-ae81-8b97f1fb1652"
        },
        "item": {
          "id": "51a9664b-54c4-448c-ac0d-541eb786185b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6b7cbfb8-31ed-4bb4-8cb6-2e4b6c2779b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6b6dab-121f-4fe4-b437-1e99930b67c7",
        "cursor": {
          "ref": "976d5dd7-2073-4d0d-a0d2-b5adb19a9e68",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3f5f4636-1704-4d06-9b3a-04fb5e4b5bd6"
        },
        "item": {
          "id": "4d6b6dab-121f-4fe4-b437-1e99930b67c7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1311361a-2fbe-4944-9f0d-578eec633f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4f378b-3ce1-4ca8-80bb-16abd4b63212",
        "cursor": {
          "ref": "60fc68bf-2b47-4581-a50a-1084acf2c044",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a0cee45c-93a5-49f0-9ec4-3588bf40d99d"
        },
        "item": {
          "id": "6f4f378b-3ce1-4ca8-80bb-16abd4b63212",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "47f70d6d-1e01-42af-99b2-d139ded4b227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa91288c-dc0c-47f3-8dd7-4760c74820ef",
        "cursor": {
          "ref": "69c5b609-6770-489b-a4e1-f94f8d07559e",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e53664c8-8c84-4775-9ef2-ad3f88e3e6bf"
        },
        "item": {
          "id": "fa91288c-dc0c-47f3-8dd7-4760c74820ef",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4ec9dfee-8ed8-43d6-8bfb-a30d6f12e7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc918162-28fd-4c2f-a060-4afe05e02e4d",
        "cursor": {
          "ref": "20408ec1-6baf-4379-ad9e-91aef8d378e2",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "262dcae6-217e-4b6c-8302-2e0a7917dacd"
        },
        "item": {
          "id": "bc918162-28fd-4c2f-a060-4afe05e02e4d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "71a46aa5-23f4-445a-9ff3-80b0dfbe4e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc6b12d-48c2-494e-9f58-6b4368d06fb6",
        "cursor": {
          "ref": "730cb3ad-db4d-4903-be80-2249a912f6df",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "63278e2b-284d-4acb-949b-9de1ee6e7153"
        },
        "item": {
          "id": "bbc6b12d-48c2-494e-9f58-6b4368d06fb6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "592226e7-0271-4394-bee6-80951d3aa800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13afeed0-304a-46c8-85b7-5edd5d4e35d1",
        "cursor": {
          "ref": "0d4efbe3-6fbe-46c5-ab27-4296e81b7c7c",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "df1ed234-668b-4925-be20-50689cbbff4d"
        },
        "item": {
          "id": "13afeed0-304a-46c8-85b7-5edd5d4e35d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4663083d-51db-405e-9113-406f1777e8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681ea99f-0042-4ccc-9bfa-9d5040b65aee",
        "cursor": {
          "ref": "504326db-2684-485f-bd6d-7d0e31a62dcf",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c643822f-e78e-4880-b405-17951de0a0d4"
        },
        "item": {
          "id": "681ea99f-0042-4ccc-9bfa-9d5040b65aee",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2d2854c1-801d-4b37-801a-024475ccd76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fffd2dd1-c794-4b93-904d-25c98945ca94",
        "cursor": {
          "ref": "a2fb0f33-ce86-49ed-9777-28e9daa40eda",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ccfbf9fa-8b8d-4fa2-8105-a3e6e6f1ceae"
        },
        "item": {
          "id": "fffd2dd1-c794-4b93-904d-25c98945ca94",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6d8e715c-8da9-46d6-ad57-7a73dfdf2219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8120ffab-fd50-4acf-93a3-62cff6e1621f",
        "cursor": {
          "ref": "1a01db2c-ce2c-4587-93a8-5b7090733170",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a3af92ee-8802-4a29-8c34-a08978aa9d88"
        },
        "item": {
          "id": "8120ffab-fd50-4acf-93a3-62cff6e1621f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "481e3503-8aed-4912-b708-7aec5071c359",
          "status": "Created",
          "code": 201,
          "responseTime": 2629,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "32adb23a-21cd-431c-865a-bc7ba7fa6ad9",
        "cursor": {
          "ref": "74d6dcbb-3bea-4d94-b113-41b21f4ea5e5",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3735916b-62be-49b8-9f8c-1476c0f11bec"
        },
        "item": {
          "id": "32adb23a-21cd-431c-865a-bc7ba7fa6ad9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "84380271-b5e0-4ed2-9aa1-4e840493f54d",
          "status": "Created",
          "code": 201,
          "responseTime": 2506,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0bbdb48f-72fd-417e-9aed-e3ffa1a93727",
        "cursor": {
          "ref": "232c8d23-12cc-495c-8809-f18b6338207b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "723146cc-a9e8-4884-8012-deebecbbe2fe"
        },
        "item": {
          "id": "0bbdb48f-72fd-417e-9aed-e3ffa1a93727",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "82d899c6-de3e-4468-9a0d-4174b289eff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac4114d-99ab-4c17-8135-1a0b3cde7fe8",
        "cursor": {
          "ref": "95d9e594-9869-47d9-b150-508d33fbc6ca",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "26767480-1bc1-4d54-be5c-ad34e9e7f41b"
        },
        "item": {
          "id": "dac4114d-99ab-4c17-8135-1a0b3cde7fe8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b9f8cbb6-b625-49ab-b85f-1a6748b9a53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5145f2ac-e4b5-493b-9f14-58871a42d063",
        "cursor": {
          "ref": "770c6827-1e17-43df-bf0d-16bccd739b5a",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6e6f2ad8-dd80-4ea7-b32c-15644702ba25"
        },
        "item": {
          "id": "5145f2ac-e4b5-493b-9f14-58871a42d063",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "76ca8fbe-dfea-44ec-a4cd-e1838b621d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab03837a-b531-432e-babb-dbd07c29be5e",
        "cursor": {
          "ref": "41d3f387-0ac3-4055-9943-2bf2cbffb90b",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "747c2830-59d7-4168-b19d-09ca0763846c"
        },
        "item": {
          "id": "ab03837a-b531-432e-babb-dbd07c29be5e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cd510f78-024a-4ffe-9035-2dd65e76bb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f6a8c3-d527-45ed-8375-1498f686c187",
        "cursor": {
          "ref": "353d642e-0276-4446-9dff-58bab99f6e95",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8813ad07-47d6-4042-837c-a1fa54cb147f"
        },
        "item": {
          "id": "60f6a8c3-d527-45ed-8375-1498f686c187",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b49afcb2-12a2-411a-889f-f07a95c2992c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820f7f8d-06be-4dd8-8265-aeebf8556baf",
        "cursor": {
          "ref": "4575d784-5913-4aea-b50b-5e30eb770929",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "378f7556-9c17-4dc1-9cc7-438ab349cc8f"
        },
        "item": {
          "id": "820f7f8d-06be-4dd8-8265-aeebf8556baf",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "714b240b-9667-41ca-a0d9-f5a0a6e5d162",
          "status": "Created",
          "code": 201,
          "responseTime": 2801,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9a6e2ad9-8cc2-45f0-adb3-97ce872bcf46",
        "cursor": {
          "ref": "bac1f498-38fb-4a7d-90b6-b7347832bd74",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d1e1cbee-dce1-42bf-8452-ab49cfdeb6fc"
        },
        "item": {
          "id": "9a6e2ad9-8cc2-45f0-adb3-97ce872bcf46",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ea08697e-b1d1-4f4e-80da-130c189f567a",
          "status": "Created",
          "code": 201,
          "responseTime": 5881,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9f4f40e6-7c85-457e-8da1-582372b8d8cf",
        "cursor": {
          "ref": "cd6f7228-5711-4e04-8192-23530c033fa0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca2d19a6-adfc-4e23-81b3-dcf4ac0f364f"
        },
        "item": {
          "id": "9f4f40e6-7c85-457e-8da1-582372b8d8cf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "24a4b404-8651-45df-9a33-945590a09141",
          "status": "Created",
          "code": 201,
          "responseTime": 3067,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "ed560375-d1f6-4a90-a9b4-379fabbadfc8",
        "cursor": {
          "ref": "6af43bf2-ab85-4d7a-9f76-000859cde31e",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "44bba4b0-11a4-4173-a7b5-792e61c0f8e7"
        },
        "item": {
          "id": "ed560375-d1f6-4a90-a9b4-379fabbadfc8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e38b0f07-2ae9-4a73-ade2-bce8fef45aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78936c4-aa21-4fa4-8b9f-a7e793736d5c",
        "cursor": {
          "ref": "09d32d5b-c77c-4a2e-96af-cf674be13a7b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d412a436-2f89-473e-be9d-dce1675a50cf"
        },
        "item": {
          "id": "c78936c4-aa21-4fa4-8b9f-a7e793736d5c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "de456c91-3d2d-43af-bc5e-cbf3a6bc8050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e625956b-cbcb-4668-b34a-7cf5321da2f9",
        "cursor": {
          "ref": "407b068f-3ff1-44a9-9998-e0f845f58980",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "107ea8ee-30a3-48e1-84ac-cd903137c0b3"
        },
        "item": {
          "id": "e625956b-cbcb-4668-b34a-7cf5321da2f9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e40bac1b-5e3b-4816-a3b6-1f27bdad23ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3677fd-e297-4c9b-b6b9-9ff72c94bf11",
        "cursor": {
          "ref": "820f8110-0911-48df-a005-c8263d5ee1f9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bbbd81dc-8805-4e2e-bb68-fb80926c62fa"
        },
        "item": {
          "id": "8a3677fd-e297-4c9b-b6b9-9ff72c94bf11",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f5d8e5ec-2b59-470b-a083-82ddbd101885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd4272a-a742-417f-9573-6d7e38339f3e",
        "cursor": {
          "ref": "b92f9ef6-8262-4e5b-892f-5fa73dac31b2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cb30abe4-3567-40a4-a180-cff0d5fa7e33"
        },
        "item": {
          "id": "6dd4272a-a742-417f-9573-6d7e38339f3e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4edb5f17-4254-400e-b97e-a0e73fab516d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8db8cc4-2797-4d84-b718-cbd94e8bf7d4",
        "cursor": {
          "ref": "2380e622-8d67-4158-9573-00cc26eee123",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "35f89890-7dab-4f77-b67e-61b7b3d43fe7"
        },
        "item": {
          "id": "f8db8cc4-2797-4d84-b718-cbd94e8bf7d4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b41470cf-9e46-447d-9a1c-8129b7fe2979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d6e459-26df-4145-a5d0-d82a05d0310e",
        "cursor": {
          "ref": "fe8eb5c7-2009-4c3b-a950-0602990b3586",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dfef8608-fa49-4999-bc83-a356df6eddb8"
        },
        "item": {
          "id": "d4d6e459-26df-4145-a5d0-d82a05d0310e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4a3541dc-ebef-4e34-a6cd-edc890f44923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03241735-7851-4e1f-8ea9-b0ff1d47c62f",
        "cursor": {
          "ref": "dc4b565e-22c1-4305-a522-e6776560ee9d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "98c3e766-fe8c-4e16-8e86-0bb9de152bfe"
        },
        "item": {
          "id": "03241735-7851-4e1f-8ea9-b0ff1d47c62f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cbef9534-b5f9-4131-90b4-410b3058f109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8ce69e-f18f-43bc-a3dd-18b84be68946",
        "cursor": {
          "ref": "eceda070-d66f-4219-93ff-bc50b3275151",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ec52d464-ee9c-4ab4-a610-8e2223f1f69a"
        },
        "item": {
          "id": "cb8ce69e-f18f-43bc-a3dd-18b84be68946",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4ae8715e-1db0-4ab9-aeb6-262728b151dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942a2788-3082-49f3-9b5e-7e657c145fd7",
        "cursor": {
          "ref": "b24e7fed-e24a-4320-9d81-6f4d5df7eb5f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5702e4f6-4939-4934-a708-d235cf0ce88c"
        },
        "item": {
          "id": "942a2788-3082-49f3-9b5e-7e657c145fd7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "83964c8c-87c2-4e5b-846b-d02f701590fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291f8278-4216-4c31-ad84-f869d28458e6",
        "cursor": {
          "ref": "420d05fb-d308-40ea-8179-5db3a42939bd",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e3138f6d-49ab-468f-ac42-321ca4787fbf"
        },
        "item": {
          "id": "291f8278-4216-4c31-ad84-f869d28458e6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ebd89c5a-3ad3-4116-ba79-5cb9e70ee780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4954c8-c15c-4479-9d66-cc7913079c5f",
        "cursor": {
          "ref": "6180e434-3d37-465f-a5dd-279e43601224",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "196a2e3b-d5f0-4cb6-86a7-8c208d973cfc"
        },
        "item": {
          "id": "6e4954c8-c15c-4479-9d66-cc7913079c5f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "640ec8df-ce0e-4025-8732-9bbc97fe9a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c295a757-a49c-48b8-a7fe-ec973873bc79",
        "cursor": {
          "ref": "a4c84bb9-a256-4660-981d-c4e0ec39d1a5",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "59d2a70d-25e8-4272-9970-61a439e0d0da"
        },
        "item": {
          "id": "c295a757-a49c-48b8-a7fe-ec973873bc79",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ec2298b1-03ab-4146-86da-ad5dddeb2bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b0df09-c802-4aee-943e-07c09dcba7d2",
        "cursor": {
          "ref": "004557f5-1653-4798-b637-fe4692028a6f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1d06b698-7dca-4a02-b3a0-af0a4797d797"
        },
        "item": {
          "id": "45b0df09-c802-4aee-943e-07c09dcba7d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a544f629-1513-4a85-85dc-eb290d0cfaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8efbfe-432c-4b48-b367-a88d13fe5018",
        "cursor": {
          "ref": "f87fa0d2-adbe-4b93-97c8-3631e15a8691",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5e2131d9-3783-4073-9999-e3204a7cbf50"
        },
        "item": {
          "id": "5c8efbfe-432c-4b48-b367-a88d13fe5018",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2198d683-47a1-4b61-9ba8-8931e8710e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70a6aaf-6aaa-4379-82a8-6edf6ebcf3f4",
        "cursor": {
          "ref": "b8a58b1f-2783-4aa8-92ae-fcf3d9aa5181",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ec7817e4-8357-4ad7-b2c4-a3ca6f559e6b"
        },
        "item": {
          "id": "b70a6aaf-6aaa-4379-82a8-6edf6ebcf3f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c8af4391-e8be-433a-b292-e40e20e675e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadb3ead-732d-4ba8-bdcc-d8c62f9ceb36",
        "cursor": {
          "ref": "015feae2-df2c-41f9-a910-9668e0d5994d",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "35334b0b-80fa-42c9-ba27-648999cdad52"
        },
        "item": {
          "id": "aadb3ead-732d-4ba8-bdcc-d8c62f9ceb36",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b62bf504-ac6f-4164-9263-96aa59396358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7926d91-b954-4c9f-88e8-87fb3a4560f3",
        "cursor": {
          "ref": "10658217-c42a-4324-9414-89262e5830e9",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4d10e77b-c7d1-4615-9ec0-f543a68601d5"
        },
        "item": {
          "id": "c7926d91-b954-4c9f-88e8-87fb3a4560f3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de34e3d3-328d-4d9b-93ad-2190cc6f749e",
          "status": "Created",
          "code": 201,
          "responseTime": 2019,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7e05b502-e3da-4d6d-ab44-69f9b7a2ee5f",
        "cursor": {
          "ref": "c4aebfb2-62b9-4609-a549-66627f279136",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5b1bfc3d-92f6-4792-a9e1-05e4e3ffc303"
        },
        "item": {
          "id": "7e05b502-e3da-4d6d-ab44-69f9b7a2ee5f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e17a6670-1ff0-42a8-9e1a-c0d93c6ecc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29893559-b245-4d7d-825f-c88e0357955a",
        "cursor": {
          "ref": "a49b8473-a223-4f9f-92a3-0a3d8d53d3ed",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "00ee3eec-6d95-4d26-98ad-29ae8bbd4510"
        },
        "item": {
          "id": "29893559-b245-4d7d-825f-c88e0357955a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "beb7a0ca-3944-4cbe-8126-49ced672e40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d18be0f-050f-46fe-b4d9-744f05e5e950",
        "cursor": {
          "ref": "962efc08-2ecc-4708-b4e5-d2f30bf34abb",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "08ac1569-87f9-4017-be65-a7a91ad8f05e"
        },
        "item": {
          "id": "1d18be0f-050f-46fe-b4d9-744f05e5e950",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "452d56f4-7e7a-4549-b0cf-fccd21f5bee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3310af1-a64a-4ec7-8e73-0392ccd0d86e",
        "cursor": {
          "ref": "1ba7688f-ac7f-48cf-922f-0025a11e9a89",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e4d74d7c-cd7c-4d86-95ed-77b52372abd7"
        },
        "item": {
          "id": "f3310af1-a64a-4ec7-8e73-0392ccd0d86e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5b8338d3-154d-4913-95d0-57c29d68a408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04273ba1-15de-45e1-b860-a3c731105df0",
        "cursor": {
          "ref": "0ad720ed-6960-4e47-b4ee-78c872dfbb88",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2de623ca-17d5-4f22-bafc-1c4ebfad5352"
        },
        "item": {
          "id": "04273ba1-15de-45e1-b860-a3c731105df0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3c67f75f-10dd-441d-9a7b-337e15c1dfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56884e09-4f40-4eb3-92aa-1fb0b35ce0e1",
        "cursor": {
          "ref": "e7553aec-3ec5-46ca-8aa8-72f9e4794f12",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a989c546-707b-40a5-a485-ccf432de760b"
        },
        "item": {
          "id": "56884e09-4f40-4eb3-92aa-1fb0b35ce0e1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3b97a2dd-afbe-4c1d-8c00-0c77f5dc977e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b183516c-d493-4247-90d2-ba7c0ca54166",
        "cursor": {
          "ref": "24387405-8959-407a-87d2-7397c45b802f",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4b801aab-c3a2-4ab4-8658-983eefd872f0"
        },
        "item": {
          "id": "b183516c-d493-4247-90d2-ba7c0ca54166",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c935fb95-491e-4184-aa6e-ee77cadb090c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25875e0-733b-4650-8ea1-8f3b9236b7b0",
        "cursor": {
          "ref": "9c4ff4ba-adbf-4743-a795-a8188fa7c848",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1535c275-9ce7-4a56-920d-658ecc2c0555"
        },
        "item": {
          "id": "b25875e0-733b-4650-8ea1-8f3b9236b7b0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "75d03fd8-e3aa-4869-8b27-4b6b05257162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d563100d-f16a-48ea-9148-f05cc11cfc19",
        "cursor": {
          "ref": "b5df8f9b-0e57-4f66-8345-7a2266a4070d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1fd53f13-bd7c-4cc6-99d7-dac4c2a5f502"
        },
        "item": {
          "id": "d563100d-f16a-48ea-9148-f05cc11cfc19",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c8eb0b03-a171-477a-8faf-9952d2ef0923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e9742f-d7b3-440b-ad9a-24eb359ee9c8",
        "cursor": {
          "ref": "9c657316-7070-4a20-8c3f-7b0c6103d274",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d09e79f2-223a-4dae-a26a-ad6bba8f3014"
        },
        "item": {
          "id": "33e9742f-d7b3-440b-ad9a-24eb359ee9c8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "16e82234-4cab-46b6-9bd2-b17698a0a113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e935230-6a34-4782-bb43-130b7886f53d",
        "cursor": {
          "ref": "6c487ad8-68d2-4694-ace0-20aea5121c59",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4d1fba2a-fc4e-4a94-b8cf-f07ebb5d6c90"
        },
        "item": {
          "id": "0e935230-6a34-4782-bb43-130b7886f53d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3a1bf1dd-120d-4c6e-8d85-45c9e9cc6d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbd1945-2aea-4842-a6e0-2b2c2aef189e",
        "cursor": {
          "ref": "cea71cdd-ee32-4add-a38c-c7d46785132b",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ce0fadb1-b007-4a7d-9e87-9f209a0e7fa7"
        },
        "item": {
          "id": "acbd1945-2aea-4842-a6e0-2b2c2aef189e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b48c4023-5509-4765-bec8-4c67b249fddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8657e067-bdc4-44a3-9211-2e678ef1a73f",
        "cursor": {
          "ref": "d54fa5e6-8516-4c18-8c78-ca87e0798ffe",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "88057f38-decd-49ff-9872-ae35c4c826a8"
        },
        "item": {
          "id": "8657e067-bdc4-44a3-9211-2e678ef1a73f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5a2ec40d-a036-4124-a42e-3c00e2d120a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b763f4b-fbb1-46da-9653-0b2818c5882e",
        "cursor": {
          "ref": "6d6e92ed-9e57-414e-ac6f-742e2621a7a0",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8cae27b5-0c67-4028-92d2-619d3ce618cf"
        },
        "item": {
          "id": "8b763f4b-fbb1-46da-9653-0b2818c5882e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "28046861-f34b-468c-b8fa-f8222d838ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eaab17-9018-4974-9d75-211d0e12f78a",
        "cursor": {
          "ref": "f9b7a8b2-e6a1-423d-bb96-8c19932f0112",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5ab0ce6d-a5a1-4658-9abc-de422dc9524c"
        },
        "item": {
          "id": "a4eaab17-9018-4974-9d75-211d0e12f78a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9bbc281e-ac66-46fe-9dcd-630a83812d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6984c531-68fd-47ee-bc8a-8c75f5a56785",
        "cursor": {
          "ref": "33ed4c91-7b27-49de-bd19-abe327b36216",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ad24fa62-6c79-4b39-b7fe-3b0218e86da7"
        },
        "item": {
          "id": "6984c531-68fd-47ee-bc8a-8c75f5a56785",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "52c6c8cf-bcc4-41ea-8255-898af8e64b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a34823-aad3-4df1-bb07-6e9d6562ccc6",
        "cursor": {
          "ref": "6e2f7be2-0145-4fef-adac-73c0e49c30b4",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1b8d496b-6636-401f-8ed4-5cb2e036e6a0"
        },
        "item": {
          "id": "86a34823-aad3-4df1-bb07-6e9d6562ccc6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f4993ba7-d811-4835-a108-af02248c11e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffb30bf-c649-4c00-a803-42752276727a",
        "cursor": {
          "ref": "6eff9958-cdbc-47c1-b1f9-010e00046f2e",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a9887460-055c-4ff9-a331-fd0e89641fe9"
        },
        "item": {
          "id": "4ffb30bf-c649-4c00-a803-42752276727a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ed288708-b131-4fb3-9c20-73bae39f2a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35337bcc-a8a0-4f51-a0d1-02b51957e9c0",
        "cursor": {
          "ref": "45544d14-970a-42d0-bcbb-71ebdcec9389",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dad5ee8c-bdda-4151-b6ca-2a1229e9e114"
        },
        "item": {
          "id": "35337bcc-a8a0-4f51-a0d1-02b51957e9c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7a443a42-38a5-446e-b4c1-4cecd02bd0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6f8aa3-e1df-4cef-8a14-7095c067073a",
        "cursor": {
          "ref": "2090f654-5204-4949-92ed-90f5b1dcd782",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c30121ce-6eff-4bd2-8420-e2419e8f0b53"
        },
        "item": {
          "id": "9b6f8aa3-e1df-4cef-8a14-7095c067073a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "29f83e09-5ebb-4d4a-b344-06a27af93f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71d3ee4-8156-46fe-b991-b55375b83c48",
        "cursor": {
          "ref": "07e30e6d-ca6c-43f8-9abe-fd1b5faa1578",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1223c7c0-a5f4-47c9-a4ab-33bb560a43a6"
        },
        "item": {
          "id": "f71d3ee4-8156-46fe-b991-b55375b83c48",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e3217734-e19e-46ec-875d-111a63a58e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3f0839-d04a-41cd-824d-d0b22d7af496",
        "cursor": {
          "ref": "41b3495e-37bc-4713-87be-0ee47b80b2f3",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ca4a7d5c-fa42-4f5a-ba31-d35e963b7ab9"
        },
        "item": {
          "id": "bc3f0839-d04a-41cd-824d-d0b22d7af496",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fd0300a3-7269-4651-b495-22d420369373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd78a48a-b747-47dc-b95f-cccbfd78a577",
        "cursor": {
          "ref": "f25730d3-a8cc-4ba2-930c-231562572101",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "488612c7-5afc-4cca-ad33-ac875f46063e"
        },
        "item": {
          "id": "bd78a48a-b747-47dc-b95f-cccbfd78a577",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f57740f8-bc96-483c-a563-09a3e1f826d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee5e858-2bf8-4319-9396-25f3b1f8f7fe",
        "cursor": {
          "ref": "2824338b-8ae9-43eb-aa4f-ae61e55a0e58",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4966e66b-0a31-4f0b-b5bf-e9c3697c9031"
        },
        "item": {
          "id": "fee5e858-2bf8-4319-9396-25f3b1f8f7fe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9792c5e8-0b6c-47b7-a3fa-882562844549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ff3853-261d-437f-94ee-d13e6988c67b",
        "cursor": {
          "ref": "d5081006-c005-4c93-84b1-4f5cffd0c03b",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cb3eea1b-72c6-48dc-8116-c5f158aa0da4"
        },
        "item": {
          "id": "25ff3853-261d-437f-94ee-d13e6988c67b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a9b4194d-aabc-45f9-9ffe-ba721fe1dd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 861,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db337bd5-146f-4a08-9006-54496868c578",
        "cursor": {
          "ref": "1243ff1d-5a56-4e5b-a4fa-559b54074d2f",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d73c97b4-b801-4509-9d54-3461b1dc67d8"
        },
        "item": {
          "id": "db337bd5-146f-4a08-9006-54496868c578",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "957a37ac-c336-4a3a-acc4-07646ed45342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c6bfd9-e4d2-499c-b9c4-5f01a8596546",
        "cursor": {
          "ref": "e4120964-8927-4fdb-89fc-fece396f59c6",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0224e751-f2b7-4ca4-99d9-f2730dbf3ff0"
        },
        "item": {
          "id": "45c6bfd9-e4d2-499c-b9c4-5f01a8596546",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "37e11d63-da91-4579-8ba2-c2b17f5c9bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1bb752-d843-440f-b819-0515b52f2c06",
        "cursor": {
          "ref": "061f6af2-f79a-4d16-9c0d-2d6135e3adb0",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9e7d99a6-f4c4-4ca4-ad32-f006c9ec62df"
        },
        "item": {
          "id": "cd1bb752-d843-440f-b819-0515b52f2c06",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7ae1cd00-f7a3-416f-aeb7-55192cacd375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b95ac3-82a7-48b9-83e3-f2d8b2ca5b67",
        "cursor": {
          "ref": "cc701541-9c57-4430-9bde-b81db77d6a58",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f8182800-01a2-4351-97a4-f067bca23ec8"
        },
        "item": {
          "id": "41b95ac3-82a7-48b9-83e3-f2d8b2ca5b67",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aefa7586-365f-4e3c-bae1-ed0f82f328ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23165dc-16fb-4c7a-9e99-f2d66bd08bec",
        "cursor": {
          "ref": "189620b4-612f-492a-b321-53a81330cc7c",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b98e7831-1c97-4482-accb-0fa2bc8bf18e"
        },
        "item": {
          "id": "b23165dc-16fb-4c7a-9e99-f2d66bd08bec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "407f57f3-9985-41a8-a7a2-0161eb7c6d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74704e2-eba7-4abc-a917-8bc3aa4ef02a",
        "cursor": {
          "ref": "5322a795-941f-453a-860d-8d6792dc9349",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7ee2d87a-6cf4-4cd3-a40d-4df48200671e"
        },
        "item": {
          "id": "c74704e2-eba7-4abc-a917-8bc3aa4ef02a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d032d63c-88ac-468a-81f4-147ba3440d2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 99,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "550510a7-ee0e-4908-8414-84b8a69541fd",
        "cursor": {
          "ref": "33a13b52-07c4-4623-b73d-14dbb66238b1",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2b457504-ce60-43b3-a264-424310d6b489"
        },
        "item": {
          "id": "550510a7-ee0e-4908-8414-84b8a69541fd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "604da309-5423-47da-9311-b6a1168173e6",
          "status": "Created",
          "code": 201,
          "responseTime": 1920,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b0c954f3-51d7-4f5f-a059-4d24741ef1b5",
        "cursor": {
          "ref": "d26d0bfa-4caa-4cca-bf6b-9ce28af7bf27",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9ff87ce8-4911-4163-8de6-facc2846cc30"
        },
        "item": {
          "id": "b0c954f3-51d7-4f5f-a059-4d24741ef1b5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "16e628b5-601b-400f-bfb8-50e6748fa906",
          "status": "Created",
          "code": 201,
          "responseTime": 2492,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddc7225-87e3-49e1-8d18-19aa9c15516e",
        "cursor": {
          "ref": "3e9c4bd0-3f4d-4eb5-8152-0c9af440a6d3",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "71a81e07-547c-48cc-8b19-4a2d547f112e"
        },
        "item": {
          "id": "9ddc7225-87e3-49e1-8d18-19aa9c15516e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "af2b61cb-d03c-4564-b738-c1ed07a95775",
          "status": "Created",
          "code": 201,
          "responseTime": 2064,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4605a8f-8fe8-4586-bd93-a907e1110f7e",
        "cursor": {
          "ref": "7fbd248f-1ccb-4315-96b8-5d8d690c8975",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2a2431cb-3715-4e39-8ecc-9f8ad68ddfd5"
        },
        "item": {
          "id": "e4605a8f-8fe8-4586-bd93-a907e1110f7e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c7e08abf-5673-4923-90c5-2742282b5cde",
          "status": "Created",
          "code": 201,
          "responseTime": 2059,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcc413b-391e-47e0-ac15-9275aaec4016",
        "cursor": {
          "ref": "534f5b71-f0a9-478b-b6e9-25ad027db9ba",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c3c2921b-74d5-4c94-b8f8-dd6146ba10ba"
        },
        "item": {
          "id": "7dcc413b-391e-47e0-ac15-9275aaec4016",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b56fb7be-4709-4e76-931d-11634285f6b3",
          "status": "Created",
          "code": 201,
          "responseTime": 2231,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a46a80-cdad-4481-8103-e175764ee137",
        "cursor": {
          "ref": "e3f56776-5783-4924-a1e6-406ff115beda",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "915860bb-fded-4545-b36a-4402ca6a929c"
        },
        "item": {
          "id": "38a46a80-cdad-4481-8103-e175764ee137",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e63a0f69-7946-4391-8171-2848a4ea6ad0",
          "status": "Created",
          "code": 201,
          "responseTime": 2076,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-20T00:36:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-20T00:36:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "0ecff3d9-fcbd-496e-a7b0-71ce3a259ea9",
        "cursor": {
          "ref": "5d001202-caab-4aeb-87da-dda87553150a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7752e34d-8f09-4184-95f1-33584e85e1d0"
        },
        "item": {
          "id": "0ecff3d9-fcbd-496e-a7b0-71ce3a259ea9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1aa04d1c-4a3b-4453-840b-6835a7d75cc1",
          "status": "Created",
          "code": 201,
          "responseTime": 2370,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2c6831-0c8f-4faf-96e9-b379f1242b2c",
        "cursor": {
          "ref": "e7be0e8a-9b73-488f-8067-429978b12a55",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d4113772-7d57-4c15-965a-91b658204d74"
        },
        "item": {
          "id": "6a2c6831-0c8f-4faf-96e9-b379f1242b2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e6a0f372-be31-4fef-aca3-7009a3dfca07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2c6831-0c8f-4faf-96e9-b379f1242b2c",
        "cursor": {
          "ref": "e7be0e8a-9b73-488f-8067-429978b12a55",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d4113772-7d57-4c15-965a-91b658204d74"
        },
        "item": {
          "id": "6a2c6831-0c8f-4faf-96e9-b379f1242b2c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e6a0f372-be31-4fef-aca3-7009a3dfca07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e3e891-338a-4595-82fe-c20615151393",
        "cursor": {
          "ref": "a00e1ae9-a9c8-4f46-8b3f-dc1c4dd7a137",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2acbbc1f-174e-4f7f-b4dc-fb65c66d516d"
        },
        "item": {
          "id": "f3e3e891-338a-4595-82fe-c20615151393",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bc05132c-72da-4479-a386-2e8eabe56188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98be4f61-dc0a-4905-b0c0-036d95504f6c",
        "cursor": {
          "ref": "076000dc-8c94-47d0-973d-fb78405df649",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "26e4a1d6-6a73-4388-a059-7102e559a264"
        },
        "item": {
          "id": "98be4f61-dc0a-4905-b0c0-036d95504f6c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8218166b-0810-400a-965f-f6c06819487e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b05f49-35f0-4cf7-8b2b-5600c9dee2b3",
        "cursor": {
          "ref": "5ed473f3-ce0a-4862-845a-e3c66aeaf5ca",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1460f61e-3a86-41be-9d5b-2d6e8dca0e05"
        },
        "item": {
          "id": "34b05f49-35f0-4cf7-8b2b-5600c9dee2b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "142e8be8-281f-4758-9569-868cf8edb59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2f1f00-42c3-40db-a713-18fb6efda3aa",
        "cursor": {
          "ref": "9cd4fbd8-1e2f-466d-ae1b-e9e7402407aa",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ee4e80d-0dc3-4e69-a3e4-4101e9d1394c"
        },
        "item": {
          "id": "bd2f1f00-42c3-40db-a713-18fb6efda3aa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "08065145-a590-4e5c-9f11-158040b16688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 791,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894a402a-f7ba-4b88-8dfc-3237335c050f",
        "cursor": {
          "ref": "d629d17a-b48f-43f4-a706-dfdec2c6d1cb",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "51002d6e-65d7-4ea3-ad23-40eddffcd40f"
        },
        "item": {
          "id": "894a402a-f7ba-4b88-8dfc-3237335c050f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4057d870-0e02-46f4-969a-cf95a57058e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d88d59b-678a-4532-b3dd-a6f8da0b1444",
        "cursor": {
          "ref": "680c4d57-b60c-4d17-a02d-2aee90210204",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "651a1127-a498-48c1-b5fa-2a420007909a"
        },
        "item": {
          "id": "9d88d59b-678a-4532-b3dd-a6f8da0b1444",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "98a907e2-a552-4fc4-90be-7de4966c242a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870948f7-862d-41b3-9fed-082d2d6dcfde",
        "cursor": {
          "ref": "527ea5c0-d51c-492d-9a7e-98314dc9a813",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "79a24c3d-5b78-4861-8175-fd568ad6c3b8"
        },
        "item": {
          "id": "870948f7-862d-41b3-9fed-082d2d6dcfde",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "914f7694-8295-408d-87e2-e89464629615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a1f310-89d7-4fd6-9107-b0c484c10e11",
        "cursor": {
          "ref": "19524be8-07a3-426b-bbc3-decc1e605fcb",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c51e5f67-8ed8-40a6-b9a6-ef7f40efe03e"
        },
        "item": {
          "id": "92a1f310-89d7-4fd6-9107-b0c484c10e11",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c23fbdd0-116b-47c4-9876-4ebdba6d2f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e306ece-8876-454e-b96d-35e87ebc709a",
        "cursor": {
          "ref": "4183dd8a-17c2-4000-9d01-76421980ec1a",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1f285cb6-e719-4d71-a546-263a229db9e2"
        },
        "item": {
          "id": "7e306ece-8876-454e-b96d-35e87ebc709a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d9979daf-9b63-42b7-bdcb-637329bc5644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c567e2-a099-44a5-a210-a100c5e7e7eb",
        "cursor": {
          "ref": "28ba5b41-18a5-401e-8ac5-d9393be05ef7",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f9cfa99b-059e-4cd9-aa72-5a111266789b"
        },
        "item": {
          "id": "28c567e2-a099-44a5-a210-a100c5e7e7eb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "58b15b39-29a0-45c2-8130-85857e9c5b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b807d5-32a3-40ed-81f7-209184f621c6",
        "cursor": {
          "ref": "232058b9-6982-4a09-a58f-ace5e0c556bc",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "282af17d-f6b9-4229-a719-a75e98cb3986"
        },
        "item": {
          "id": "30b807d5-32a3-40ed-81f7-209184f621c6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "242060fb-85d5-443f-bbd7-0be17bef59ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec3159a-84f1-4399-9227-01860dd229df",
        "cursor": {
          "ref": "cc086c8f-66ac-4b96-8021-b2ea1417fd80",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7c027713-cb52-440b-b051-2eed73d75503"
        },
        "item": {
          "id": "1ec3159a-84f1-4399-9227-01860dd229df",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e90209bf-8ba2-46f4-a027-8e788794e121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48a76ac-f7c9-4af3-940a-191c78301dba",
        "cursor": {
          "ref": "5a50f60f-ea12-49d6-80c8-38ef351fc26d",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9718a3ff-0fbb-4691-91c7-890d0f16d400"
        },
        "item": {
          "id": "d48a76ac-f7c9-4af3-940a-191c78301dba",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2726e840-8ce0-4861-bf4b-c8bc945f64a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55742df6-34d3-4012-a43e-8784bcdc07ef",
        "cursor": {
          "ref": "f0f108f5-c676-4fff-bb69-fda973694e2a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "abca959c-424e-4869-af39-ef8501bb112b"
        },
        "item": {
          "id": "55742df6-34d3-4012-a43e-8784bcdc07ef",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7de816fd-e653-46d4-9688-f337d6316544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885a6be4-c207-46c7-8ce4-51d1c348abcb",
        "cursor": {
          "ref": "57bb5b2e-076d-4fa4-97dc-58faae7488b2",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a1c5af2c-c769-41ad-8b10-a36709dbd86c"
        },
        "item": {
          "id": "885a6be4-c207-46c7-8ce4-51d1c348abcb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "272d7fae-913a-4933-b9be-1181a26a493c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed04afa-b9a9-473b-a99c-b9406d12532c",
        "cursor": {
          "ref": "4add3286-7307-4261-af7b-6ef4118f2e69",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "01b67abd-ade2-4424-bfd2-9066d8fb683d"
        },
        "item": {
          "id": "aed04afa-b9a9-473b-a99c-b9406d12532c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2864fb04-bd05-4c6d-b93c-8cd3e090545d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaf3412-285f-42da-b358-0bed9767f786",
        "cursor": {
          "ref": "42772d62-72df-4517-a7d7-8fce78ee59ea",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b7d9f50c-6ec7-4ac3-bc01-88d8f808d289"
        },
        "item": {
          "id": "0eaf3412-285f-42da-b358-0bed9767f786",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7ae3230d-1026-4c57-b341-c048e1db12d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad637bc-049d-41c5-8f13-46d67b088fe9",
        "cursor": {
          "ref": "c73f1653-3f00-475c-b4bb-7f6c86a70aec",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f6697ca2-ea40-48ed-b1d3-a56292e9125a"
        },
        "item": {
          "id": "7ad637bc-049d-41c5-8f13-46d67b088fe9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f2219e67-0056-4162-a9f2-fe2e7cc94761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87e5f77-bdd5-4923-8e2f-c4e4a3466c55",
        "cursor": {
          "ref": "8e7b17d8-a1fb-4aa8-b3cd-7ec6de651956",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "89e33369-e056-4b47-a4cd-57145fb64aed"
        },
        "item": {
          "id": "f87e5f77-bdd5-4923-8e2f-c4e4a3466c55",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3dcc8c26-6043-4345-b869-f97e2bf4ac4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c1518f-599b-4c9f-8741-9eb15b1fbcc7",
        "cursor": {
          "ref": "84b27ac9-cdd1-4c2c-9f5c-2344ae18dded",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1f8b6bfb-b50e-4f81-b8b1-a4e5580c0783"
        },
        "item": {
          "id": "67c1518f-599b-4c9f-8741-9eb15b1fbcc7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5419aa8e-11b6-4b56-a559-d93b7f2a6fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67087a2-bcb4-4309-8653-bdc4360575ff",
        "cursor": {
          "ref": "198bf27e-0b9a-4687-8cbb-7259ccfc8e8e",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0474b06e-98ca-457b-995e-0a8a8d15388f"
        },
        "item": {
          "id": "c67087a2-bcb4-4309-8653-bdc4360575ff",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "62bf0a6d-112b-46b2-8d53-2ab3e983c709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29d6bf2-eaa6-47c8-8c4b-9af03442369a",
        "cursor": {
          "ref": "f466460f-ab5f-48bb-b1b5-81b2f2916539",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "023f4644-3457-4bd3-a2c7-fb207cb14626"
        },
        "item": {
          "id": "a29d6bf2-eaa6-47c8-8c4b-9af03442369a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3baccd50-43aa-47c2-b010-62fbed7688f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e57771-4b13-433d-ae59-dbe9b29d3fea",
        "cursor": {
          "ref": "2d6c35bc-9484-4004-b17c-774e139daa30",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "29a156ac-1ff6-4a5d-85bd-c5897482222e"
        },
        "item": {
          "id": "16e57771-4b13-433d-ae59-dbe9b29d3fea",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53dbbeda-35b9-4f83-b111-a729adb62de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b194eba-d4c7-4bad-b897-aae0654c7701",
        "cursor": {
          "ref": "461c8757-44d8-4287-b970-90ff1eef4695",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5b484625-9455-4700-8137-139e72e896bb"
        },
        "item": {
          "id": "5b194eba-d4c7-4bad-b897-aae0654c7701",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4c93dd3b-9f6f-424c-8edd-c8ce3ec3acdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d33cd9-aa7b-4bbd-9f04-5666bb13b9f4",
        "cursor": {
          "ref": "bc4d78c0-bdcf-40ec-b90c-5e3d3a86c4c7",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9bb5a9e3-dfaf-4e78-824d-045f849f1192"
        },
        "item": {
          "id": "92d33cd9-aa7b-4bbd-9f04-5666bb13b9f4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "96f4bf64-9ccf-472e-9bcf-b7dd99b16230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0436d0b2-8821-43b5-aa48-d73765159101",
        "cursor": {
          "ref": "72b88127-dca5-4618-90e3-1939bf6be0b3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0ce90953-33ad-4e62-8dbb-0c60651f4438"
        },
        "item": {
          "id": "0436d0b2-8821-43b5-aa48-d73765159101",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f3ef3265-d718-4ffc-b193-0d6c748a6fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fba28e-3e51-4459-8e97-a98378c2096d",
        "cursor": {
          "ref": "32f0d49d-d242-468a-b24f-759b07d3327d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "65c753e8-7ca9-4b8f-9cc9-47caded3e665"
        },
        "item": {
          "id": "66fba28e-3e51-4459-8e97-a98378c2096d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "10613e08-e130-45bd-846e-515adf9d4269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf306f39-dc98-45b4-82d3-6822c4c5ee83",
        "cursor": {
          "ref": "ba6f84b0-a1c9-46e9-8327-3d2376affca8",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "80bda937-fa45-4070-9ba9-1f2eae440f84"
        },
        "item": {
          "id": "bf306f39-dc98-45b4-82d3-6822c4c5ee83",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fe3b0e8b-b248-4d6d-aa92-dcee6f5dc059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a794498-aae8-411a-930c-567ebd7942a6",
        "cursor": {
          "ref": "9608f2e8-a6be-4916-8315-e35f66d73d12",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d30512d8-1f66-477f-abe1-ebec00a9722c"
        },
        "item": {
          "id": "7a794498-aae8-411a-930c-567ebd7942a6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "564aae68-1867-4906-93a0-c2ca4586df56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd1e72b-cc47-48a4-abaf-074b3628aade",
        "cursor": {
          "ref": "57086527-4307-4f79-bd50-eb6e22ca7b8d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6746f705-9ecd-4007-8b92-7cbabbf7bc72"
        },
        "item": {
          "id": "6fd1e72b-cc47-48a4-abaf-074b3628aade",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "57d90389-7307-4139-b7e2-d866c2153195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec2384d-7e01-4c1e-b360-19465a94eec3",
        "cursor": {
          "ref": "817f5ea6-965a-43ff-b3dd-260f4eef91c9",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7b06364e-1a76-4006-88c7-f9d6e6b325c4"
        },
        "item": {
          "id": "5ec2384d-7e01-4c1e-b360-19465a94eec3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4946f4b0-7aeb-496b-babe-581ba709f61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcd26d4-5c53-444b-8d59-55bc64293d44",
        "cursor": {
          "ref": "8be19d27-3aa1-4dea-83c8-f3286bc797ab",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1de74488-5490-4f17-8fa8-58d516f461f7"
        },
        "item": {
          "id": "7dcd26d4-5c53-444b-8d59-55bc64293d44",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4ef0310b-a870-4c8f-9d3f-32a013940846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "691c9a0d-9a6f-4c1a-a95f-68e48c1df844",
        "cursor": {
          "ref": "ff38b8af-ae44-48a0-9975-d7874bb44032",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4058871c-7adc-42c6-a352-681a6c8800c4"
        },
        "item": {
          "id": "691c9a0d-9a6f-4c1a-a95f-68e48c1df844",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e0457b39-977d-478a-abe6-dbb777178cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9ede4a40-4ca4-4f4b-869f-c984841f9b8f",
        "cursor": {
          "ref": "b4eb669a-d784-4274-81ca-1ba963a49374",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ab0e77ce-576f-4482-ad4a-d8dcf12f393b"
        },
        "item": {
          "id": "9ede4a40-4ca4-4f4b-869f-c984841f9b8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3af31187-d877-44c1-a4a7-966483b8856b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ede4a40-4ca4-4f4b-869f-c984841f9b8f",
        "cursor": {
          "ref": "b4eb669a-d784-4274-81ca-1ba963a49374",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ab0e77ce-576f-4482-ad4a-d8dcf12f393b"
        },
        "item": {
          "id": "9ede4a40-4ca4-4f4b-869f-c984841f9b8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3af31187-d877-44c1-a4a7-966483b8856b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ae35f9-ff37-43a3-affb-fcd7230eb1f8",
        "cursor": {
          "ref": "2d580376-68bb-435c-a6ad-0161ae2fac72",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b3704a34-df18-4d13-88e0-74414987de36"
        },
        "item": {
          "id": "57ae35f9-ff37-43a3-affb-fcd7230eb1f8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "09593858-9018-45b0-896a-0c96423779a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fa547c-717f-47ce-b162-108b16c1e27d",
        "cursor": {
          "ref": "41ee2ec3-5b12-484f-b3f7-b492412f6ecd",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "706d8541-8dc1-4bad-a5e5-4cdc2ceacc6e"
        },
        "item": {
          "id": "b8fa547c-717f-47ce-b162-108b16c1e27d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "976abe48-40ab-479d-b56b-eb7605d8af8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d16fb56-00d6-4d00-a678-185e051f0055",
        "cursor": {
          "ref": "0f21debd-6299-42e8-b217-54d53859f66f",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d95ea311-3e93-4d95-ba63-e442b5461058"
        },
        "item": {
          "id": "1d16fb56-00d6-4d00-a678-185e051f0055",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "299154fc-136d-460e-801e-1f1b51b2e2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0013bebb-26a7-4430-a4b2-eda67b8cf36a",
        "cursor": {
          "ref": "97958729-38a0-4f9f-911a-9b5b20984bfa",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5e80203d-b886-4b6c-8393-8c6f240847ad"
        },
        "item": {
          "id": "0013bebb-26a7-4430-a4b2-eda67b8cf36a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6d2b8b0b-bede-4a7f-9c60-816f84895aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe8c3cf-25b6-4f75-867a-7d1fef77559f",
        "cursor": {
          "ref": "7dbcfddc-4714-4ac3-ab44-6c6b438c913e",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "08623a93-25cf-4a30-bafa-cd04c2810b91"
        },
        "item": {
          "id": "bbe8c3cf-25b6-4f75-867a-7d1fef77559f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "43540cc0-8bb6-4df8-b568-6185ecc3cd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c116f1e0-f6e4-4d1a-b86b-fd2f0b566e63",
        "cursor": {
          "ref": "aa252def-3bb1-47c2-b511-8952892c4720",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "02a70524-4321-48b8-830e-082daba915ad"
        },
        "item": {
          "id": "c116f1e0-f6e4-4d1a-b86b-fd2f0b566e63",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "54cf6ff3-67bc-4c60-8ed8-d05774c64191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17050cf4-1395-470f-9a5c-672e5c598344",
        "cursor": {
          "ref": "e3d119e8-b5ea-48e1-9455-5bfef449a06d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4f72fc4c-b079-4074-ad13-035550bcc155"
        },
        "item": {
          "id": "17050cf4-1395-470f-9a5c-672e5c598344",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fb5add5d-c898-4a13-8b1e-b71d941447c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2be6cd-8bb2-440b-bcef-8ac4a3330e93",
        "cursor": {
          "ref": "99d2e259-5193-4e6c-862b-97c7618a81c1",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9f6788b5-f962-462e-aed1-c9e646f6993c"
        },
        "item": {
          "id": "0d2be6cd-8bb2-440b-bcef-8ac4a3330e93",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "10e841c8-94de-4b49-a398-2caa7640f0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2eca765-2601-4f0d-bb30-24b4c5416138",
        "cursor": {
          "ref": "b04d1bac-1be6-474e-90f8-5b572fef77ff",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "22f85654-9afc-45ee-b609-8d72c80f0cbe"
        },
        "item": {
          "id": "a2eca765-2601-4f0d-bb30-24b4c5416138",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "65214715-a05f-40f2-b71c-f40904f08b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483a7f0c-451b-4838-a418-2835e8f57712",
        "cursor": {
          "ref": "b36c19fd-1e47-4d6e-8900-34a78978ef42",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "14a4b352-35c9-4520-b1b4-ad8a59a4c7ff"
        },
        "item": {
          "id": "483a7f0c-451b-4838-a418-2835e8f57712",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "545f2945-98e1-48b0-84de-889416abd91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd270ae-2989-4495-ba6c-43d9207de684",
        "cursor": {
          "ref": "63d0a7a9-8fdf-49c2-90db-76707455e523",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3a2bcf9-4c30-48c8-84a3-7e748e190163"
        },
        "item": {
          "id": "dfd270ae-2989-4495-ba6c-43d9207de684",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1d5a01c7-2e6c-475c-a436-aa0949b5368a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a31fd6-7a71-40dc-b355-947c89ddf91e",
        "cursor": {
          "ref": "ccc1edd2-96d1-40ca-9620-9d6062c57b64",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "28c22da3-71a7-41f9-8399-1478eea97753"
        },
        "item": {
          "id": "c4a31fd6-7a71-40dc-b355-947c89ddf91e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e8a74d71-5967-4799-944b-d32e24e95ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b331bc10-200e-46fa-b872-4c5e8360d11d",
        "cursor": {
          "ref": "68e10bad-dfc7-4c41-afe0-6a7c357e9767",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6cdd2fce-c6a1-47ee-ae86-cd41b39d84c0"
        },
        "item": {
          "id": "b331bc10-200e-46fa-b872-4c5e8360d11d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3babce4a-e655-45ac-8a1f-7b8bdb270e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d44d3b-52be-490e-8831-0fe6b4651568",
        "cursor": {
          "ref": "7e3a818f-6765-4ea4-bade-db422a6071e5",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ec482b44-77f5-43fc-b1a0-fd5453333d1a"
        },
        "item": {
          "id": "97d44d3b-52be-490e-8831-0fe6b4651568",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a1a05fd3-135b-4a39-b09e-3fd50d0267b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba6109b-2efa-48fa-8d55-a37a0ffc8b47",
        "cursor": {
          "ref": "db9868c5-542c-4fc9-87b6-2da35bffe54e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1edb00be-92d1-4b0d-87fa-728a6b617f5b"
        },
        "item": {
          "id": "3ba6109b-2efa-48fa-8d55-a37a0ffc8b47",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "93038add-939e-43ef-aeb4-0b30456f0735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f6759d-4535-4413-8ac5-059feece6e5c",
        "cursor": {
          "ref": "2a36ab4f-7802-434d-8b4c-4671d43cb79a",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a34e3c76-203a-4432-991f-6251612de861"
        },
        "item": {
          "id": "f1f6759d-4535-4413-8ac5-059feece6e5c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b4b5f47d-33e8-47bb-a4bd-92faaebe2802",
          "status": "OK",
          "code": 200,
          "responseTime": 642,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "67948fe9-d01f-4daa-a83b-a52ce048815c",
        "cursor": {
          "ref": "748296db-3637-42c3-b9f8-aca57e3954e1",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7cde1262-47f8-4f4c-a2ed-effcd2847813"
        },
        "item": {
          "id": "67948fe9-d01f-4daa-a83b-a52ce048815c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2d0eebb9-576d-49b3-b821-c52544f726c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc77306-679d-437a-a2e6-92da265d24f4",
        "cursor": {
          "ref": "9e145ccf-c54b-4335-a3c3-8d8419afbed1",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "159e88b4-86a1-42f4-b460-63b3afe2f7c0"
        },
        "item": {
          "id": "cfc77306-679d-437a-a2e6-92da265d24f4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cbac8b7f-0884-4fb7-9156-43b5243d1908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7405e5c9-e7b6-4945-a47f-862f3408a34b",
        "cursor": {
          "ref": "ff9fa459-8d49-4e88-9c6d-25c6f8628d94",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2ebcf21c-ddf2-4675-bb96-eeeb71140351"
        },
        "item": {
          "id": "7405e5c9-e7b6-4945-a47f-862f3408a34b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "93efa3b3-6808-4db7-b1ec-a13b4b1e079b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f81973-2148-4308-ac18-18c99a7044cf",
        "cursor": {
          "ref": "895911bd-4af6-4e04-bb3d-63d95dddc34a",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e889205c-b299-4bf3-92b2-bb1fb9cb5f26"
        },
        "item": {
          "id": "19f81973-2148-4308-ac18-18c99a7044cf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f2679aba-bfce-4987-a9ae-52f2e500da8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc75dc9-b3ea-4998-8b4d-1b5236d239f3",
        "cursor": {
          "ref": "1f5a4c70-9306-4979-baca-4a398d353146",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0882fb7c-f918-4226-a2a7-64779cfbd032"
        },
        "item": {
          "id": "7bc75dc9-b3ea-4998-8b4d-1b5236d239f3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aecf0699-8a5f-4739-ba67-3a5cdf363801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df744d7a-5abe-42b4-a5b6-34ec9d98c3ec",
        "cursor": {
          "ref": "c0f19aae-0c06-4e7d-bb64-745b95d7ab05",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4297f04f-69e4-42f1-aa6c-6a9decb7aa50"
        },
        "item": {
          "id": "df744d7a-5abe-42b4-a5b6-34ec9d98c3ec",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9747c085-0225-4fc1-b41f-1d3b2168a405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9af9b2-03e1-4647-8f46-bdce58947acb",
        "cursor": {
          "ref": "98ac5bd2-a846-4a45-87a0-f43bde813856",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f9f7cc41-6863-41ed-905a-866ac8fc7bd1"
        },
        "item": {
          "id": "2f9af9b2-03e1-4647-8f46-bdce58947acb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "29a7877e-0d62-4269-87e2-def8929559f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a625fe-fcf0-4f55-a6c1-257ee6316667",
        "cursor": {
          "ref": "8a6cf41a-e3b3-47a9-9fb7-1e01534f558e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0535f806-c5b8-4e51-84bf-1fec96c95124"
        },
        "item": {
          "id": "26a625fe-fcf0-4f55-a6c1-257ee6316667",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b59a486d-64e4-4fe0-a3bf-2350b537254f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9085e4f2-6572-4256-a97f-c522e5a49ba9",
        "cursor": {
          "ref": "bcd65414-a3c7-4992-ae62-122087f477db",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a3f56b2f-b1ed-4965-92fc-6c0233b46490"
        },
        "item": {
          "id": "9085e4f2-6572-4256-a97f-c522e5a49ba9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "948af71a-1aed-4e19-b664-f1cd4b1046df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3b9305-c794-4285-ab7f-a4303a5ca244",
        "cursor": {
          "ref": "ad12e8a4-8baf-452d-ad82-075d8b73bcf6",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "be9c13d4-8bb6-42a7-a500-f9e21ce103a7"
        },
        "item": {
          "id": "8e3b9305-c794-4285-ab7f-a4303a5ca244",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4dd7ab29-7641-40a7-8f39-958f2aa89f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d8f81f-fc06-4d5a-96ed-1a6bd3454409",
        "cursor": {
          "ref": "94c1a547-c3a1-4a37-ade5-6185036df44c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5999712e-0a23-49eb-96fb-fa98a5ca0c06"
        },
        "item": {
          "id": "05d8f81f-fc06-4d5a-96ed-1a6bd3454409",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c5100e85-df3b-4438-bc04-def2523a360c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd74e316-871f-4127-a345-f2f38f88cb86",
        "cursor": {
          "ref": "a4173bfc-24d2-46e5-bcbe-ce86a830d6d8",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a60abc1f-7837-4d1a-bb42-ca5a163165fb"
        },
        "item": {
          "id": "cd74e316-871f-4127-a345-f2f38f88cb86",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9298c32b-e52f-4bca-af39-d6f769c640ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c50f88f-c62b-4869-b08d-02b78b65420f",
        "cursor": {
          "ref": "d35cac64-2be8-44b1-b75c-6d4147460130",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "60ec47da-c1fa-4635-b616-e16943236ca6"
        },
        "item": {
          "id": "3c50f88f-c62b-4869-b08d-02b78b65420f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "99f4a16b-5635-4555-b8c6-dfd77698ced4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a53bdf-79df-4b9e-81f6-df82a7bb78ff",
        "cursor": {
          "ref": "2f21deed-dd26-4613-9cb9-0ceadff06523",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7e4945b5-0075-4e1a-9aeb-b5b8557acd5f"
        },
        "item": {
          "id": "71a53bdf-79df-4b9e-81f6-df82a7bb78ff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "db5b47f9-6547-4d3d-8496-1478932ea13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c402c5bd-649f-49ae-8780-fd00b7356910",
        "cursor": {
          "ref": "077e6898-0e5f-4552-bcbd-7c3de81fd3ca",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a8bdaecb-44f2-414c-9fc6-e3e3b56ac2bb"
        },
        "item": {
          "id": "c402c5bd-649f-49ae-8780-fd00b7356910",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0e0234a4-85ad-4c10-9a62-df5e4d0e1692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe9786b-5cd1-417b-b761-ea04b1abc5e4",
        "cursor": {
          "ref": "9fc2bce3-dae2-4ba4-99eb-c27f1c703d47",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5da6d7af-de92-49c2-8ac1-2d2a1cca9c69"
        },
        "item": {
          "id": "4fe9786b-5cd1-417b-b761-ea04b1abc5e4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cfbc07a7-6ceb-400d-abcc-5b01e469c634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deee0c06-4ffd-4a7d-b397-db113bb6c8e7",
        "cursor": {
          "ref": "c2d62fa3-9e1d-492e-a66f-7029c34d3036",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8fd63cc9-473e-4e91-b706-e2474c76e1a1"
        },
        "item": {
          "id": "deee0c06-4ffd-4a7d-b397-db113bb6c8e7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "502618c3-31ae-4ce7-affb-0df8b5943632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b262756f-78f2-4abf-aee7-ac99d2951cd4",
        "cursor": {
          "ref": "871bd181-cb32-408a-ae7c-cba1cb784f2e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "85b75234-e1f0-46f3-8746-167319da8676"
        },
        "item": {
          "id": "b262756f-78f2-4abf-aee7-ac99d2951cd4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "54cdbac9-456d-409b-abea-8464ca78526e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41d4383-731c-41b9-bbd0-5f3e4080ac37",
        "cursor": {
          "ref": "a5e28d46-8ea0-4e6b-99e7-15dde9d52315",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ba5372cb-017d-4240-b367-e2115b32e828"
        },
        "item": {
          "id": "b41d4383-731c-41b9-bbd0-5f3e4080ac37",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4e9af5cd-25b6-4e30-9110-a17d804e740b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 697,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf8b426-acee-49b9-8b88-6db6ed76cb28",
        "cursor": {
          "ref": "213d60d3-c027-4f68-b91d-97526d987884",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1922ae7e-c774-49c0-a227-0fcf9bf25738"
        },
        "item": {
          "id": "cbf8b426-acee-49b9-8b88-6db6ed76cb28",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4aec3250-e95d-43da-9652-72faf84e910e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6812a6-ed80-47e7-a134-122826c73ddb",
        "cursor": {
          "ref": "80f326c3-bec9-4719-84b8-a7ef6f7be7af",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ba18fb10-772f-4126-ba16-fcb69da4a780"
        },
        "item": {
          "id": "bf6812a6-ed80-47e7-a134-122826c73ddb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6b724f58-1177-4af5-8f6e-eb54a91b37d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1668ce3-59c8-4a32-a553-d24b3eacb071",
        "cursor": {
          "ref": "7bf3acf1-1fb9-4df3-8f9b-e974e6167297",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "26ea0318-021b-4a3b-bb33-a53b6dc2f941"
        },
        "item": {
          "id": "a1668ce3-59c8-4a32-a553-d24b3eacb071",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5712f532-252f-4e91-b4c4-63110e4bee32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d52256-6ca7-4b74-9288-cb61fdce53a2",
        "cursor": {
          "ref": "1cced026-93b5-4ebe-8729-1d9b7a519d68",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "edfc7bb4-856f-473b-8f12-a66d927b8a63"
        },
        "item": {
          "id": "45d52256-6ca7-4b74-9288-cb61fdce53a2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6f58d089-3ecb-4ffb-b852-2017d6b5f5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd078d5-29a1-40df-a051-fc0bb537ade3",
        "cursor": {
          "ref": "ed8c729c-070b-4b76-be41-0d72b143d912",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f652a4ab-717b-4ddd-a23c-2df28fda0ae6"
        },
        "item": {
          "id": "7dd078d5-29a1-40df-a051-fc0bb537ade3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "27718a08-e2e2-4d6a-9723-ef3197ace323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f80abd3-8e9c-4bbf-99c7-91a27f310135",
        "cursor": {
          "ref": "8143bda1-ef7e-4f95-b784-e984b44db794",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b4fe32dd-c035-456a-9bc9-b50efcd54d04"
        },
        "item": {
          "id": "4f80abd3-8e9c-4bbf-99c7-91a27f310135",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d578afca-a4b6-4798-8800-facd68f47d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b632a2-db58-4376-8dee-0a43eba1a225",
        "cursor": {
          "ref": "0f4f6b6c-7269-4665-8684-c4f55e75f73e",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c65da5bc-98b0-4930-92e1-425fc12f4d11"
        },
        "item": {
          "id": "14b632a2-db58-4376-8dee-0a43eba1a225",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ef64631d-9893-497b-9c73-aa60168ba7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3d2c6-0651-4181-94e3-2b82c700f5ee",
        "cursor": {
          "ref": "73475ace-a0fe-4143-a5b6-31097b1d86b7",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "765c192e-4bce-488a-88cd-bae9a97b53ea"
        },
        "item": {
          "id": "0df3d2c6-0651-4181-94e3-2b82c700f5ee",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "26f71f4b-17e6-40d5-80e7-f59ebdfba1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b65c5af-8292-4aa7-b958-e26eeb29907a",
        "cursor": {
          "ref": "61d629ef-985d-4b56-8d73-cf508744122a",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "42e337af-2410-4e5f-80db-c4acf7557be0"
        },
        "item": {
          "id": "1b65c5af-8292-4aa7-b958-e26eeb29907a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c161f13a-fb8a-4b7b-87c1-c3b1807ddc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f498922-0db8-4ee7-b8b9-806e48652182",
        "cursor": {
          "ref": "208b5049-2f43-432f-9335-d04c637adad3",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "81b9eb7c-15bb-4588-93fe-01eca037b804"
        },
        "item": {
          "id": "2f498922-0db8-4ee7-b8b9-806e48652182",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "834b08b3-0176-4e9a-b0a0-a5c165d9837b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4157c8-ec08-4217-b184-7ac0753216a2",
        "cursor": {
          "ref": "93356e23-b843-4734-9190-86dc1a156d7b",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "300f4006-9776-4bc3-a6fe-f3fe51b86c4c"
        },
        "item": {
          "id": "2c4157c8-ec08-4217-b184-7ac0753216a2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "32080b89-de2c-4abd-b5f8-a379ea859f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769c5749-9eac-4fc3-9490-6309cee416d5",
        "cursor": {
          "ref": "cb2c5598-f69d-4bca-b913-5ece7d9f242d",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c5fb9303-a978-4ca4-a166-de25d76ce320"
        },
        "item": {
          "id": "769c5749-9eac-4fc3-9490-6309cee416d5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f02700c5-46a2-4aa0-b8ab-064ebc160c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8999745-e267-46e1-ae4c-e5015cd5a8e1",
        "cursor": {
          "ref": "ebd2d0b6-f963-49e4-815c-39bb5c3193ae",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "74001689-d669-49b6-939f-1aa9436618e8"
        },
        "item": {
          "id": "a8999745-e267-46e1-ae4c-e5015cd5a8e1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6d335ce2-6832-4ba4-91f1-83c1df34ccb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35890e5-d994-46b8-8cb0-ee07275b2fd4",
        "cursor": {
          "ref": "0cbf1453-3309-4c9e-b5ac-c3b9186ff19c",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "56031a24-e242-48da-a6c9-2d6c45fbbb76"
        },
        "item": {
          "id": "c35890e5-d994-46b8-8cb0-ee07275b2fd4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ca7b1131-8691-4e9d-b499-5e6b18ebd397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7d5149-75b4-4b2b-8a32-1947888c837b",
        "cursor": {
          "ref": "ce3e3f69-ae9d-4974-9f63-032c4a03e64d",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8e014d37-355e-4aa7-8b7c-1fd03d039d53"
        },
        "item": {
          "id": "1c7d5149-75b4-4b2b-8a32-1947888c837b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21cd2bf2-1bfd-45e0-93c0-11d8e9b595bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe14f970-ab00-4b7a-b262-e6c9108d9265",
        "cursor": {
          "ref": "f206c7dc-cd2f-4ac0-b509-70482ef49d3f",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ad561fb1-aab7-4a39-90cf-53d2ff86aeaa"
        },
        "item": {
          "id": "fe14f970-ab00-4b7a-b262-e6c9108d9265",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ebe2e3d-3129-4129-b000-456522851844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc6da15-94bc-4c12-af86-b2f46e3ccd7d",
        "cursor": {
          "ref": "0e1005e8-4673-4adf-9204-013c4d3b3bfa",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "61d66562-170c-4eae-a18e-17a6a53e2bfc"
        },
        "item": {
          "id": "7dc6da15-94bc-4c12-af86-b2f46e3ccd7d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e52634b7-6b48-4169-8bcb-74ee6fe8befd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7861e519-7d3c-4344-827a-6ff73d9553f0",
        "cursor": {
          "ref": "1e16d265-1065-4aa1-a16a-ac978f358645",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6186de6d-1845-4589-a60e-8e1de0d3a2ad"
        },
        "item": {
          "id": "7861e519-7d3c-4344-827a-6ff73d9553f0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "108e829e-a468-4c72-bb3c-a610f13e780e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0862144d-4f7c-4429-9c0e-d50a35989595",
        "cursor": {
          "ref": "caa823f2-3061-40e5-8b8c-d70395a29861",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3c221f6c-4d33-42e8-8267-b930e3e158ae"
        },
        "item": {
          "id": "0862144d-4f7c-4429-9c0e-d50a35989595",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4bdd78ee-2b37-4a93-b113-c0fe41d8e612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0396f2b-ed66-47ce-9939-c2367897cff0",
        "cursor": {
          "ref": "1177646b-3b6b-41e0-8e92-213fc7ecf003",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "87c3652f-d73c-4789-955b-2932530b1968"
        },
        "item": {
          "id": "d0396f2b-ed66-47ce-9939-c2367897cff0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1cfae2d1-5089-4c64-b300-0539eba48953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c1e773-7a19-455b-abd8-4d36cc97db2e",
        "cursor": {
          "ref": "8eca46ae-ae92-4ef4-812a-957177809a50",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "67ac17d0-78ed-4db0-bb2f-68ae5973014b"
        },
        "item": {
          "id": "91c1e773-7a19-455b-abd8-4d36cc97db2e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3fe6f9d4-e63f-4685-9d77-242fc7fa70bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8a5f34-1d38-4465-8dad-e780e7dbe44e",
        "cursor": {
          "ref": "63078fd9-e56b-4042-9cc8-a9ab0719003c",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f795e4f4-8bf1-48a5-8bcf-39c0269e8f17"
        },
        "item": {
          "id": "3a8a5f34-1d38-4465-8dad-e780e7dbe44e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "13184e70-31ca-4a8a-a089-571cab075be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed73afc4-250e-4302-a76e-8f9ca72a0686",
        "cursor": {
          "ref": "f79ad5a8-8565-46fa-9e7f-86bfcbbebbf9",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9c79d066-588b-4879-8376-157e950f91da"
        },
        "item": {
          "id": "ed73afc4-250e-4302-a76e-8f9ca72a0686",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "34d48d32-385b-4b5b-923f-c013507185f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d4b0bf-5a22-4589-a2e9-102356d57972",
        "cursor": {
          "ref": "6aa66017-4da9-4c4a-bc85-d2b64717cb39",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f1fb1ace-7428-4cce-8052-8faefcba30b4"
        },
        "item": {
          "id": "a7d4b0bf-5a22-4589-a2e9-102356d57972",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b6ad824-a05c-429b-96aa-f79874b6c09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e42f202-ab0c-4a1a-8981-f0f37d90b13f",
        "cursor": {
          "ref": "43d87268-4a24-4587-af3c-a21bfb6aacd5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1f91d92c-f270-4f48-8efe-ec19ff6d3d2f"
        },
        "item": {
          "id": "7e42f202-ab0c-4a1a-8981-f0f37d90b13f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "555bffce-a741-4267-8f3f-8a70cf67dcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7eff18a-4749-4fa1-b58c-87918b506288",
        "cursor": {
          "ref": "c28e9502-2120-4819-89a6-dc16051d340d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "37415e49-face-49d8-b9b3-da186f34b7d6"
        },
        "item": {
          "id": "d7eff18a-4749-4fa1-b58c-87918b506288",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "82c7763c-7999-4a80-81a1-2291d72e52cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fd60f9-929e-44fb-8756-bf2455cd4d8c",
        "cursor": {
          "ref": "082b664b-c5c6-4ad8-b318-5fd0f619dc2d",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "61f1156d-4513-4852-a276-6956662be811"
        },
        "item": {
          "id": "c0fd60f9-929e-44fb-8756-bf2455cd4d8c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fffc086d-b368-4c9a-a885-9c1396502775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe38e319-4cb9-411c-a8c4-653398ad260f",
        "cursor": {
          "ref": "915a369f-9f47-4ad3-8f41-f7bcd1e5ec1a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c47188b6-fa48-4069-9eea-9e3600b42831"
        },
        "item": {
          "id": "fe38e319-4cb9-411c-a8c4-653398ad260f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "064244ab-e867-4203-b55c-719e599c8060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a997f911-c99f-4417-83ad-a9ae348a440b",
        "cursor": {
          "ref": "af0e44c6-8292-48bd-bbdc-3c705d96122e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "96bf2772-e49b-4175-90b6-da3987783e8f"
        },
        "item": {
          "id": "a997f911-c99f-4417-83ad-a9ae348a440b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1fbfa98-3014-49a2-a23c-4f3d700fede8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b6659c-776d-4259-9055-6ffce8e165f7",
        "cursor": {
          "ref": "f132134f-4a33-454a-9d68-16e8e6897ef8",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "64bcbe33-e091-4832-884a-511695b3fa0e"
        },
        "item": {
          "id": "32b6659c-776d-4259-9055-6ffce8e165f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3a78476e-b1c3-4878-bd31-208cefda9ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1368ed2b-837e-494c-acf8-0d2dc274804c",
        "cursor": {
          "ref": "d5d36e10-527e-467e-85fa-812a600dcfc2",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "723c19b6-2ce9-41be-ac5f-206cc0a412fc"
        },
        "item": {
          "id": "1368ed2b-837e-494c-acf8-0d2dc274804c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "753c895f-0608-4936-a02d-48b2608e9cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cfb797-0040-4ff6-870a-b7c4502cdb41",
        "cursor": {
          "ref": "93d2c95b-7316-4d69-a75b-09df57c02a7a",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "014a4813-24e3-4c54-9b7f-0fddb43d2d90"
        },
        "item": {
          "id": "57cfb797-0040-4ff6-870a-b7c4502cdb41",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "60996079-bd46-47c3-8451-bcbfffe1aa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a319c26-eb84-4be1-96af-92433479cf64",
        "cursor": {
          "ref": "83779f42-0ef3-4646-bed9-f7dd615aaa31",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "576b0709-3dbe-4214-a1e8-4673c85a8f06"
        },
        "item": {
          "id": "9a319c26-eb84-4be1-96af-92433479cf64",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8f555f3f-f52c-408b-99c4-d292633914d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468927a5-ef48-42ed-b996-87bd5a3d58a4",
        "cursor": {
          "ref": "d7261f86-29fb-4ea2-89c6-ffe1a14b3ca0",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "156e8294-a9e6-4cc9-88c8-26427bbfb118"
        },
        "item": {
          "id": "468927a5-ef48-42ed-b996-87bd5a3d58a4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e5e86b14-d906-4711-a680-854517d02589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784ec0f4-8700-46f9-bfb2-6cc39b632f2b",
        "cursor": {
          "ref": "4a1996cc-d0cf-4304-a1ea-9c1161825a96",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a919ad90-4077-4e63-8df0-a00758d1cddf"
        },
        "item": {
          "id": "784ec0f4-8700-46f9-bfb2-6cc39b632f2b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3c13c73e-73e7-424c-840a-721ebfb44879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d0c028-2c35-4766-bdc2-b3b0b7c040b3",
        "cursor": {
          "ref": "7133a184-fb19-4778-88a3-432ab69f2ab2",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9427ebc4-b812-4870-bba1-41634a751941"
        },
        "item": {
          "id": "65d0c028-2c35-4766-bdc2-b3b0b7c040b3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8d7ff1cf-05c2-417f-9349-0d18b290ff94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f2fddd-f96c-4ce1-a9f8-0519856e5b32",
        "cursor": {
          "ref": "f75984ef-11f9-42f3-9f98-a14451b78dd2",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2beacd15-8c03-4295-9299-5a3903b03021"
        },
        "item": {
          "id": "47f2fddd-f96c-4ce1-a9f8-0519856e5b32",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c0f3715b-9363-4737-a6dc-baa2e7ef3716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6013d890-901f-44ab-80a0-0d615fa52297",
        "cursor": {
          "ref": "be477a1d-acc2-4815-bc27-aebc36467615",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d9ab6b1b-848f-47e5-92ca-bbd2bdbdc7e0"
        },
        "item": {
          "id": "6013d890-901f-44ab-80a0-0d615fa52297",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "eec69ae1-6f9f-474f-b15b-313170eeeac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187ce033-927f-43de-a83a-69ab84aa0d9a",
        "cursor": {
          "ref": "1fafc18b-817f-4331-834f-f6cce1b8da9b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "23ce1c93-a714-4d23-9d1a-be6248d0aa3b"
        },
        "item": {
          "id": "187ce033-927f-43de-a83a-69ab84aa0d9a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "34dc25ee-f312-434b-b329-ca07a2fa86d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb298799-098d-4ce3-aede-5fdfaed55759",
        "cursor": {
          "ref": "ad52bdd6-a4bf-4193-bfa2-ced521145eaf",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "86f0df11-81b7-42bf-94c8-eec77f9a4dbf"
        },
        "item": {
          "id": "bb298799-098d-4ce3-aede-5fdfaed55759",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ef80d82e-6006-48ef-9f80-75baf2fd28c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ced646-dca9-42cd-8b22-97227d24ab97",
        "cursor": {
          "ref": "8e75af18-a750-4647-8c3f-e1ee82980422",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cdfbfe3c-7b17-47ee-aac0-e103f8f46f2c"
        },
        "item": {
          "id": "83ced646-dca9-42cd-8b22-97227d24ab97",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "25c7c484-d76b-4bc6-a727-cbc7cfd0d746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d012520-12bb-453e-897e-6dd2e3984dfe",
        "cursor": {
          "ref": "cafe00ca-0b2c-46eb-bcdd-6cb3bdb00881",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2ad81826-888a-4185-9a12-d5722054a467"
        },
        "item": {
          "id": "9d012520-12bb-453e-897e-6dd2e3984dfe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7493e4d8-2d1e-4b08-959d-d339bd8f2940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5d9115-0d47-4e03-a0be-56445d48165b",
        "cursor": {
          "ref": "a947205e-8806-407e-8e71-ad9cff5bdf91",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dcc226a3-64c5-4bc7-bed8-3bc6a7e44aa6"
        },
        "item": {
          "id": "da5d9115-0d47-4e03-a0be-56445d48165b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "79a7cc59-db84-482c-b3d8-cb84ce30ae79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fcdf94-fd43-458e-b049-70bee8d0128a",
        "cursor": {
          "ref": "a9e2838d-7638-4827-9bf7-e406371568e3",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f59ee37c-9067-4086-a3e3-8d00e1f45d25"
        },
        "item": {
          "id": "b1fcdf94-fd43-458e-b049-70bee8d0128a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "87b60e98-a8f9-44d3-b0bd-80026f33a0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa87630-de1d-4829-a844-8b2165323051",
        "cursor": {
          "ref": "ec0f4b86-b619-48e6-96f2-49a7a919a86f",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3c0e2aea-423d-4659-bdfc-458dbc41f219"
        },
        "item": {
          "id": "5fa87630-de1d-4829-a844-8b2165323051",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f4a2f17c-1bf9-4971-8b45-27bdd486c217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d516ef50-9157-488e-9712-7966b1c922a6",
        "cursor": {
          "ref": "fa3221cf-1283-40ff-9350-0826ede95710",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ecf1d242-6b99-4c49-b88d-ce8015c7c110"
        },
        "item": {
          "id": "d516ef50-9157-488e-9712-7966b1c922a6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca83d922-04b2-4326-8d20-afbd36bdc6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5ec7da-4268-457a-b441-853b44c0e326",
        "cursor": {
          "ref": "db6c052d-1415-41d1-b79c-84d7bad7655f",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "78d821e4-23af-4bc7-9e7d-0d3245b77704"
        },
        "item": {
          "id": "1c5ec7da-4268-457a-b441-853b44c0e326",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b35e5dda-e598-4afb-a19b-1deb87a88a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac83b58-0e5b-472d-8d2d-292c043cdb7f",
        "cursor": {
          "ref": "2a2fb975-309e-456d-b13c-db15eb0ebf25",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c93b97d9-3ce3-4cef-8f6d-e1e598f52bb9"
        },
        "item": {
          "id": "1ac83b58-0e5b-472d-8d2d-292c043cdb7f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2eae91db-bd48-4675-9d1f-83097ea80677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5c07bc-e5c2-41e8-a906-3894e4e215a8",
        "cursor": {
          "ref": "56e857b0-0b03-4486-9bd6-78f3dd0ac746",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e864491d-6324-4903-924c-4c580adc8bc7"
        },
        "item": {
          "id": "ba5c07bc-e5c2-41e8-a906-3894e4e215a8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "42282586-85c3-4bd7-8c8a-6a60869a187e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86a71e5-f5b9-4e4e-bef3-36210145a1a3",
        "cursor": {
          "ref": "4ad8369e-8467-4b99-a86f-ade174a26b31",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5e25de9d-b879-495b-9b8f-8023aa59ae3e"
        },
        "item": {
          "id": "c86a71e5-f5b9-4e4e-bef3-36210145a1a3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4cf46cf3-e87d-44c3-a988-dccc37de5174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a497c7b4-e771-4bcb-95c2-05bfa226b419",
        "cursor": {
          "ref": "27bd1949-36b6-4113-a8e4-3c798a22447e",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aa014183-6ce2-429e-ba44-e99606d7fdce"
        },
        "item": {
          "id": "a497c7b4-e771-4bcb-95c2-05bfa226b419",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08e2e9e9-22ce-48e3-835b-384279acce9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625453cb-f340-46da-80ae-68edeeb7945e",
        "cursor": {
          "ref": "08d67622-4c2e-4ba2-a191-528aad46babb",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c4f43bc8-8dbd-4349-958d-bd9f6deb35b8"
        },
        "item": {
          "id": "625453cb-f340-46da-80ae-68edeeb7945e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a2549484-1f8d-451e-ade8-c07238486830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5efeafd-00ab-4e3d-9534-ff25c4f3f300",
        "cursor": {
          "ref": "511cb99c-2afb-43ab-9511-985695b91ae3",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d2d73dba-ae29-43d8-b8ca-483a6084da82"
        },
        "item": {
          "id": "e5efeafd-00ab-4e3d-9534-ff25c4f3f300",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eeeafd95-fe2d-4eef-888d-6f72078a88ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a6b18a-3d19-4d18-9765-a2724ea24d5b",
        "cursor": {
          "ref": "fc5f5b0c-d5e6-40f0-928b-d747fa34aa1a",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a49b66bb-74ae-4eac-adf3-eee5a106d8fc"
        },
        "item": {
          "id": "f9a6b18a-3d19-4d18-9765-a2724ea24d5b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "41f2012e-7e62-4976-ae50-28b39cc0725e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26310dd9-c897-460f-a77b-c0750c9f6b88",
        "cursor": {
          "ref": "01ea8a9e-b243-4a2b-976c-6686fd8a3c39",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e9e02c31-61f4-47e5-bb19-7bba7bb847ce"
        },
        "item": {
          "id": "26310dd9-c897-460f-a77b-c0750c9f6b88",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cee0021b-b5b2-4034-8af7-2e5afaf8e15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417bb66a-6cbb-4964-84d6-6b40e5ff4692",
        "cursor": {
          "ref": "782f4c86-b038-461d-a8a7-e001015f0d7f",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b2ac61bb-c800-40a4-9dfb-cc252c22a6e5"
        },
        "item": {
          "id": "417bb66a-6cbb-4964-84d6-6b40e5ff4692",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "396cee69-d4ea-40d9-9d12-a5486e985ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6df81db-fe75-4765-af36-edab9077478f",
        "cursor": {
          "ref": "6f8cd712-b988-40a4-8412-9a995d948db8",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5006846d-12f4-432e-925a-55423ecc5985"
        },
        "item": {
          "id": "d6df81db-fe75-4765-af36-edab9077478f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f87dccd6-da5c-40e4-9b5a-6b1c2f449fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbb6b50-aa9b-4eaa-b9f9-d6c6d1245991",
        "cursor": {
          "ref": "d98d3d6e-46ba-4ac2-8d3d-f8dd817d72e8",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "156aa8cb-dd4a-4609-aa15-adee1b1aff4c"
        },
        "item": {
          "id": "0dbb6b50-aa9b-4eaa-b9f9-d6c6d1245991",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cd0db82f-0c41-4d8d-87d0-ed94de0c0678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c69ccf6-78cf-49ce-8947-968adabfe078",
        "cursor": {
          "ref": "f02ea2f1-c363-48f7-91fd-075b1398dbbd",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f20c5627-7a7a-415c-a314-e50f88ac77f2"
        },
        "item": {
          "id": "8c69ccf6-78cf-49ce-8947-968adabfe078",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "aebd771a-c7e1-4d2e-8ba2-c5acd5556745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069038d0-8877-468f-9a3b-2a2aa04a0ab3",
        "cursor": {
          "ref": "9777a2f1-86dd-4cb9-881b-9fdaff6a6c1c",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ce5af463-7882-4378-ad65-201247bd9db0"
        },
        "item": {
          "id": "069038d0-8877-468f-9a3b-2a2aa04a0ab3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "33336dc7-78d3-4f44-86da-0ce2777242c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72a6c88-545b-4e8e-a256-3f1bd49dd09d",
        "cursor": {
          "ref": "24f69ba6-e96b-4994-b2d2-c4d6b5d8c2ee",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f5916b23-1f34-4649-9ec7-ff006891e138"
        },
        "item": {
          "id": "b72a6c88-545b-4e8e-a256-3f1bd49dd09d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1f721fe3-baf2-4960-ba2d-7998b877db65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954d5444-5f75-4ac6-a45e-28aab7455a13",
        "cursor": {
          "ref": "21f7794c-ba47-44b1-ac9c-c9e51a31f695",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e7704be1-19ab-4e84-a335-22fd5e62581f"
        },
        "item": {
          "id": "954d5444-5f75-4ac6-a45e-28aab7455a13",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8d4a62c8-792f-419d-b990-1f3a1ddd863d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9a2de506-4d1c-4a4f-aea7-454300d9e324",
        "cursor": {
          "ref": "1e06c2b1-0a0a-4c5c-843f-d76d7374fe42",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e57e58d1-d253-4280-94f2-ae6d6600e8e9"
        },
        "item": {
          "id": "9a2de506-4d1c-4a4f-aea7-454300d9e324",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "befc6d47-10cc-4c7b-bb79-0b354a2cf8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "350aef4e-7dd2-4f7e-933d-2f610ce5d339",
        "cursor": {
          "ref": "114e68c0-ed4c-4e38-a9ec-7f1d9b8a9c65",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dce664e1-be2f-48ad-b70b-fa95a02430fb"
        },
        "item": {
          "id": "350aef4e-7dd2-4f7e-933d-2f610ce5d339",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9b0ff479-c399-4b4a-8d38-8f97faacac5a",
          "status": "OK",
          "code": 200,
          "responseTime": 322,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb86578f-05ea-4217-a042-1174e97b2b83",
        "cursor": {
          "ref": "f757084e-1c75-47b7-b5ce-36a65ceba4c7",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f5d8e625-4d5b-478c-87d7-75fa461b0ad9"
        },
        "item": {
          "id": "cb86578f-05ea-4217-a042-1174e97b2b83",
          "name": "credentials_verify"
        },
        "response": {
          "id": "32fcd185-ac99-421c-bf7d-d01a241da5e9",
          "status": "OK",
          "code": 200,
          "responseTime": 6462,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "282b5019-fc1f-48b2-a5e8-18c610254a17",
        "cursor": {
          "ref": "fd6649ad-1a0e-4218-8e36-d7d51b9cbc03",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "59879f5c-44e1-42eb-90d5-772e99232e0a"
        },
        "item": {
          "id": "282b5019-fc1f-48b2-a5e8-18c610254a17",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6ff50468-7665-43fe-bb3e-0ab393b2f3f8",
          "status": "OK",
          "code": 200,
          "responseTime": 2653,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "984c48fb-c72c-4a03-a057-48be91a32080",
        "cursor": {
          "ref": "81e871d3-9960-49a4-8df9-334b45cef9fc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "06ee1737-58f5-4651-a959-4ed4299d33cd"
        },
        "item": {
          "id": "984c48fb-c72c-4a03-a057-48be91a32080",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08280383-9155-462e-8255-4d12516d6d07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "984c48fb-c72c-4a03-a057-48be91a32080",
        "cursor": {
          "ref": "81e871d3-9960-49a4-8df9-334b45cef9fc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "06ee1737-58f5-4651-a959-4ed4299d33cd"
        },
        "item": {
          "id": "984c48fb-c72c-4a03-a057-48be91a32080",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08280383-9155-462e-8255-4d12516d6d07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "984c48fb-c72c-4a03-a057-48be91a32080",
        "cursor": {
          "ref": "81e871d3-9960-49a4-8df9-334b45cef9fc",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "06ee1737-58f5-4651-a959-4ed4299d33cd"
        },
        "item": {
          "id": "984c48fb-c72c-4a03-a057-48be91a32080",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08280383-9155-462e-8255-4d12516d6d07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "21487804-81ff-4315-a593-f2ebc37e59a6",
        "cursor": {
          "ref": "08410ef4-27a6-4ee8-933b-7f6ebc495fe5",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "74a87fdf-5cdc-4110-9100-035b74682aa6"
        },
        "item": {
          "id": "21487804-81ff-4315-a593-f2ebc37e59a6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "8ad2a1c0-e428-4aea-a0d8-9459d8f1cc76",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d7f2d113-ed07-4471-86e6-53f820ebd8db",
        "cursor": {
          "ref": "9ef5f8ac-309b-4cf1-9089-ff452c431527",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76d98827-64bd-4f3b-98a5-7f580473afa1"
        },
        "item": {
          "id": "d7f2d113-ed07-4471-86e6-53f820ebd8db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "09ec7fe1-4166-4a04-bd8c-e38fd545de2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d7f2d113-ed07-4471-86e6-53f820ebd8db",
        "cursor": {
          "ref": "9ef5f8ac-309b-4cf1-9089-ff452c431527",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "76d98827-64bd-4f3b-98a5-7f580473afa1"
        },
        "item": {
          "id": "d7f2d113-ed07-4471-86e6-53f820ebd8db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "09ec7fe1-4166-4a04-bd8c-e38fd545de2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "55550a31-10c4-488f-8ca7-a3c187fa7344",
        "cursor": {
          "ref": "4a4908c5-2f1a-4894-b8bb-8e2a889999b7",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e7f23563-8f37-47b6-82b5-ee1a9a3df814"
        },
        "item": {
          "id": "55550a31-10c4-488f-8ca7-a3c187fa7344",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5a7186eb-0403-4e8c-8234-0f086584b4fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 194,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "137bfd39-5e36-40d2-8ee2-fd71f560e48c",
        "cursor": {
          "ref": "7742cbf1-821e-44f8-a53e-fbe197e655e7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ed0b8cd1-c925-46ba-b060-186d8cf48f8f"
        },
        "item": {
          "id": "137bfd39-5e36-40d2-8ee2-fd71f560e48c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "414347e7-11e4-4620-86d8-53cb9d42f22c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "137bfd39-5e36-40d2-8ee2-fd71f560e48c",
        "cursor": {
          "ref": "7742cbf1-821e-44f8-a53e-fbe197e655e7",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ed0b8cd1-c925-46ba-b060-186d8cf48f8f"
        },
        "item": {
          "id": "137bfd39-5e36-40d2-8ee2-fd71f560e48c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "414347e7-11e4-4620-86d8-53cb9d42f22c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2cc0d055-728c-47ac-8bac-bcf1d54aa404",
        "cursor": {
          "ref": "994f88ec-cd0a-4460-9bdc-b467b30ca651",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d186ef77-25f2-43dd-881c-2d90b3b35212"
        },
        "item": {
          "id": "2cc0d055-728c-47ac-8bac-bcf1d54aa404",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3917c49d-dac8-4773-9621-dd06a561e009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 110,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}