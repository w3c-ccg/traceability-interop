{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "78425aa1-5466-4651-993d-07a32a5101df",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5984bba8-6e74-4056-9bf0-f137758e293f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "360be481-fb2e-47eb-a89e-db3cf3654d3d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7e7652a1-7af4-48d4-b407-eb3e3195bebb"
                }
              }
            ]
          },
          {
            "id": "23170635-4552-4f52-a655-5a4a587901e5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "392bd2b0-3e89-459e-91ab-6e461592ecea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0d486d7b-5a45-4568-bd9e-d6a8d6481637"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eb3e0454-76e6-48a7-b693-323c441757f6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "829ccc49-4391-482d-ab69-8e8d008c0ec2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9d3a135a-d31e-47ee-90f0-ee7f59861d4a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd02e49d-4588-4957-b6dc-5ea102261f3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b3de61f-bdfd-43dc-9756-fc3da075dc02"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d98abc68-7965-45e8-944e-232af06f6406",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "067b33de-2817-4e6a-8150-826c7a2ba780"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8d22ec4-4969-4c0f-8ed8-c3e0a06897d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e940fa9-57d7-4f69-92bd-2df2ed1fd030"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b966637-7a57-49b0-9b6a-6235571d175b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "22068b48-f606-4c77-94e5-e5bb80f0c31d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40e82db9-ecab-4c7c-aa0a-0091df970791",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b6c6c12-211c-46e9-a6f5-0525c8063872"
            }
          }
        ]
      },
      {
        "id": "c7b7f17a-4afe-4b15-9c54-ab0a5425b0be",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a4d63c84-74c7-4c65-9746-5fe9c509f8db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f6d4621-61f4-49f6-a5e7-aa07bf297a66",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ffee3054-85c2-47fb-8b76-20abfceb51ee",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6081904c-39dd-4a81-95ba-1aab7dc533da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d21db2ca-e401-4e26-ab72-0e03212d36fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1247d096-12fd-4b8e-b7a1-070794e08529",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7667f34a-f5a4-48de-b812-c664e6844833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b88a78b3-442d-46b0-a5b8-4bb30f959e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df42fb2-67e4-43b3-a121-9b6bd97c33ba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81363c1c-f885-435a-9cd0-b2dd9e5e870c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0acfc60c-8f05-42b0-8c1c-9e7e799fe354"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e827a257-2a22-43af-ae56-a028cd661d67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1913a5ef-0c2b-4060-8c40-7a5aeefd3fec",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7555a5a-b4af-4690-b21f-f29561b2404f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd9533d8-1a2a-4797-bd9e-89c665959a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e004f03e-9261-4c55-9184-ea541105ce8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9696dd0e-28fb-4c4e-b3fa-42e5519663a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "84e7cbe1-d251-4297-8f1c-a0b4f8a8f48b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9079a39b-f01b-4729-ac9d-3af5ff351e8f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cae05a55-f613-480a-8f3f-1d2a723fd086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "76c7933f-7c38-4109-8622-de7701827de7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6adc41f3-62ba-4a93-9f9c-c489ef40adc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ad2912c4-fbfa-42b1-9544-3937a53a3aef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f3f9c27-4d1a-4db8-87fd-8f9142e97e6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b5e560c-3496-4c11-aec3-9a71b1ae3e29"
            }
          }
        ]
      },
      {
        "id": "636e07d2-9e1c-498e-a612-8c4fc12331ef",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "60b8de56-959f-4314-8459-040e5797b75c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32320a3f-78d5-4851-a227-af7c9ae1bbc4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "97f73947-2e67-41f0-870f-090ded278387",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84a406d-06de-4359-a127-5224ffc024ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b8dbd3-3cd6-4554-b0b1-a6f068d0a283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0ec197-12f1-44fd-95b7-4f3e4d2bfc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c4ab690-6c16-445c-94fd-910871f60666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1afe08-62dd-4638-8cc8-498485a99be6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bb9fd9-888b-43c4-96df-70ef33a17afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c32a59-e058-45a5-8861-16a7881917d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c103e74-1dc8-466c-a645-a029f1da0653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6901d44c-543b-4c22-872a-6e6f70ba2cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c5aae8-63bb-4d16-af43-e748f1e47d35",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99788213-4fe2-4a5b-84b7-6c5cba306b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374ae5f3-80f3-471c-9ff7-57d23b502621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7be21d0-cab1-4a44-b78c-3ee03918d418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2bb928b-81fe-4b10-9347-0f80b5cabe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9387fca1-beb1-447b-bc86-5657c81b6c5d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08206934-fe82-41dd-8e68-5eb76efcc5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7c24a4-3674-4ca3-aeb9-2745abb83913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094b2dc2-88a2-4e0f-a614-302d40aa80ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ad64a0a-ea4c-40ca-8ca0-478e2b55cc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9eea94-75b9-4c87-b2d4-43c27c80f533",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fec400b-336e-4bb7-9d5d-445250af349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6075df3a-d17d-490e-99ee-942de618016c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d463849-e331-48be-a64f-ce2c056e22a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eac2bd3b-afe2-4f67-a27f-b9478761935f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b37fd4d-840d-4d42-a3ad-e5619fed174a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa5c492-588c-4a47-a7bf-fcce1ebf62bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0fb5ed-07e5-4f35-8ed9-fca28da6f6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdab1ce5-ae66-4449-b8e5-5b9b1a279c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64015ec7-f857-4c73-9fd7-cf446244e42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce98b2c-a951-4b43-9ccb-1d0bb7c45afc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db607b5e-a908-4501-b0c8-f657961f3478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d169bc78-95dc-487c-bdfa-cd143cc49715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a3c5c1-ad90-49e3-967e-3e1c2fca6ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db6277e0-7fc7-484e-ab4b-4efe09ed6ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acb90a5-faf8-459c-92df-b8fa579f3cea",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f15ba0-5944-45e9-92e5-7dc7f7e4faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798c0ac9-6715-4b08-885f-1e30101e7f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1b8ca2-32e3-44df-bf50-cb78c444ac34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e50543bb-61bf-4d0c-b4e6-3a3537046114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543c3115-5864-4ca2-ad27-b60ab87e5f05",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86eeb91-c6f0-4656-a64e-b02b02505367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452fc7bd-4cbb-427f-8740-1d636996b780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef9e145-8ae8-48f0-9d5d-51750337341e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff712c0e-2a64-4bff-841a-19ab869c9334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d46b75-32f2-462f-aa1b-0e5651b0c76b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6947cf-cc15-4e93-8412-2ce80240cb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3acb1762-539d-4149-b734-db947374dd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc5e906-4832-4749-9856-b99ee1e23924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ebfb1b1-ddda-49e0-96f3-d70f5fbc69de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27068886-fd3d-4d73-9f7b-14abaca1f332",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200594eb-1f7c-460f-9843-68d6782164ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d394fd2f-fd69-433a-9978-772ad28c11ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e448e35d-e66d-472a-b0d6-f6a9f2e1172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a7eb0f0-80d3-44be-bda7-c8b0f0a4bba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9960f71b-fdbf-4c3f-9f60-a40557f899de",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f10d85-4604-47c3-a05d-43dcf42cd7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2aa4b46-5204-4447-bc5c-72d7cf1162f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25eb1485-da2a-48da-874f-ff9701c7f2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ced91eb-c3b4-491f-a018-7657f96c44a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502d706d-c16d-4f3e-a2b1-46f3932f257a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc088b52-b595-4a79-92f3-e4f31af959c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da55c358-2ad8-4933-a544-ce73e7cf30e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21caaf7-995a-488d-9020-f9f8f71c0726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d999b351-9533-435d-bc3f-116f9188214e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4b993a-cffc-4b86-87ed-89af1129ce06",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373fea86-2c10-4a09-b093-30454c8e33ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85c47c3-7c75-454b-ade9-6c117b46233d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59dbbaf-4b60-4356-8614-825b9d2643b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78f0979a-c9fd-47af-b4e4-c14808beda35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca436f9-aed5-4d7b-9018-ccd28b41f059",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45db4240-c2b0-44cb-acc0-4e6063bb6104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441df69f-13a1-4228-af07-e0f15a75e6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600fb79e-4b2b-4b9e-93f3-0e0ad4359bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0064005a-5d5e-4c00-b9a3-49099d66aa90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8483b806-a73b-4a5a-b887-f90fc0f4ce75",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8328e5a-d1b1-4092-a01c-d4fe9de71c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beb2d2dc-2dc2-433d-a87d-739ea8378a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e218398f-70c5-4412-beb0-bafc63464ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6b48df6-fcb2-4234-9c14-a0005aa86bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39ad854-e77a-4daf-881b-3a5b4459ff61",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dc2278-aab8-431e-9b6a-398105480be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2756aec4-3a25-4a72-b5f1-844172b371f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b95fbbd-8520-46e0-b1d5-bd875b19a542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4da3b249-f5e4-4b7d-8a0e-fd04ad8c74ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30993266-09e0-4604-918b-3896515e86e5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e541c7-0c06-402f-b672-71fe2557a102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4f9e1d-a3d2-44ed-845b-f461bddf0560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666066b3-5f3e-4f7e-8ec4-94619e9e7188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "036c0d8f-94b1-4622-8e6c-db0cfef01c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e118046-0ed3-4358-b51d-451211e4df2d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8a0917-2660-4b54-9b20-3933e24021ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03398694-a55d-4937-8a99-a9bb34f0f5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3526426-74ae-4ede-8ea0-b53217359831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "791b3df6-cddc-4f4a-af77-a321106284a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f309aee-7f1e-4ef6-908a-afa90b3441e0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a46a48-897e-4b7e-be9e-ded5aee90fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e40a0d-65e4-40db-8aea-0fe98fc7cee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eade8270-6388-4676-b64d-c487518c866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b43728-8308-4fde-b07a-d256b3c2c964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0128962d-e0c3-431d-ba64-61aefc184c9a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee51a1a-b5cd-4d31-8ffe-0beb498bff4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5311c7f0-dd55-4d0c-a346-ef1611dc22bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9162a48d-7bc1-48a7-9680-7469c43d984c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "920e5846-4448-4cb0-9b77-02eafe078897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd7069e-78ef-4de9-b5d7-92248ad61361",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e39c8a4-37f0-4686-8c4b-8a3d38af8b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced83fb6-4ddf-4a87-9391-1acfb5a5789c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648354e5-4249-45f4-90bc-12d04703a805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "821ca39e-6c29-45ed-a87b-655d6dcf1463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b434fc-40c4-4dfe-a4f0-1b3dc54421b3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa8d872-ec46-4e4d-ba64-d05954c4ffb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9baece71-bfcf-458a-a99f-10a41345a6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4df435-054d-41a9-8a4d-c87a124d67ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f041ecb-54bc-40c8-88a6-0262087d2335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316ab2d0-fff5-4f5b-9425-e3871434c3c9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078a56a8-8fed-49f7-97ae-928aecf661f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0c45fa-f830-4168-851f-881db2e3a43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4458c27-919c-4a7e-a667-2e6a118a198b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8203e465-9199-4bb3-8bf9-a0b50028f8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be2918d-1f3b-4267-a435-248aade566e4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb94d1ac-7140-4e1a-b5d3-bafe0a3171fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83051ad7-14de-422c-bb5d-a8097d6db4d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67914d6-c263-477a-8946-02dcc2b9729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dbd293-17e2-447e-b524-d867ba5d20b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351b9e1e-e2e6-47c9-954e-d9d42f3d59a2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37399bb-7495-4979-bb25-80443b3c61b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3caa7d2b-2cd7-4ec7-86b7-c82d05cb4308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba05b321-ced7-4b1d-a8f1-9de860a2c4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6690d52a-b14e-4ed9-bf17-f0b3ff7fce85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766e86cf-51f1-4d8d-bdfb-79c3c2a98e04",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f91f10d-8ece-44f7-9854-48ce73038f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7876d1f-2d5b-49de-9b97-c349d94a1e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503c91d2-7470-4308-939a-272114fe04bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a420108e-cd02-483b-be98-8d1dc36acdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a01c06-6de3-4722-b7d4-cc009be94820",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f739b7-0fa1-4bcd-9717-e1b806e9285d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6f1947-ad70-445e-8126-d35b32213eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9c7a3b-518a-4f7f-a4da-24e409b8fe07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad153f92-6a43-4d37-baf5-0180dc9f2700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c358591-e96f-43a6-8ab0-207a34d0fdc9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bb7b49-4292-464f-a91b-08e30d1c3202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d5d0e9e-021a-4252-a03f-4d446c542ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586890b2-48e0-46f8-ac0e-a9d921f77ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "960024b7-f4e2-4f23-aced-1dc8ca15720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a20b72-6928-4784-bb86-9cf24402fbae",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bbe885-b4d9-48d6-ae95-52f00b2a565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fac811-37a9-4c19-a4d5-0707f572c0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aad5d4a-63d8-4638-88b6-2557cfdb26e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "084918fd-d6f1-49c7-ab6d-c223b8eb213f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2ccef5-4010-4bb3-adde-3cc48ea14397",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790656cb-9017-426b-864c-1ffcbf65d320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14477961-8211-411b-babc-bfbc0da5f4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849a48f4-0b22-4149-8691-a63545bd33ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06cec2f8-2939-4a59-aeb4-8ed6c33848a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fd5f3a-cf47-4009-b828-66db6d7b7267",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021f8c2a-8375-41bb-a402-440429dd0920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f4f3fe-b6a2-4653-a5b6-7835decd454a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06be7239-3281-4bb3-b495-721664887826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "929801be-545e-477c-af38-29bf0d5e5d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac98b47c-5d03-46cd-8b03-e302c0eb86dc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973ca8a9-51f7-40ee-9914-2bb734a2dadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee748c67-9a4a-4f1f-86df-e5ebfd8c9df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe38712-9710-440e-942b-57e646523d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56323f30-256f-492c-92ac-42d7fa7279e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497eda42-1703-43ad-b799-f7091e7e55f7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f6a70c-9e94-461e-8475-12519c15835b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5649d6e-1254-401d-9f06-7b54400be5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1976fc-e45e-4ee5-b44d-fbc57aea5499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29da6f4-76c3-4c55-8457-f8107e2b68cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3373b77-5f39-4406-990e-3a8984d5d67f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f3e023-c7a6-4426-8384-aa668e9e4e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d88756b-cdff-4655-a4f1-fe39fe3a79ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769becf8-dba7-4928-9290-7067d027a40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "82716e1c-ea00-42d5-a45d-8261ac32af67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e596a30a-7e62-45d5-931c-0749b8aca159",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86894935-d509-4e0a-814d-d9bef9bf03e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5698e02-b929-4566-afc5-c4a6c8bd028b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578eb83a-33ac-4001-85ad-207dce725edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6977741-c33d-4131-b90b-70e53fee4e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f92b46-2d55-4727-810f-53c5046c6acd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfbcefd-2bde-4d23-9579-7bba876168b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9799d0db-c582-46ad-969a-aad76c5b82b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1de569-a811-4f85-8196-4cf10fb44fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab57b21-b4ca-4757-9a3b-181a8a3bc545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5136b5-0c02-46a9-b96d-8f661b2014a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0947898-adaf-4aef-9495-9018271619af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b681da-7326-4a7f-b642-03558e90c672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ac8f87-9a03-4748-a2c5-825b97eb1e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c193e4c-9f34-4c02-931b-c6328eb69be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0929c1ac-6827-49f6-b315-1775b58fe5a2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad55f43-1a29-4eba-9e28-cffa5700838d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0089c8-5e21-40ee-b4aa-a6deed0180d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b71463b-46c0-494e-a88a-8181bb9f4ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc43bbfd-115f-4072-ad36-9b955076ed4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b478331-9ac5-4815-81d5-dca675fa7e0c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f372074-3402-4183-90e9-19843627b9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788609fb-0637-4eab-b23a-cc5912339598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2dfcd2-8959-4525-9387-ebe3ee98e318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "535b5cca-bb65-44db-8009-55c56c3e6d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b9035d-6399-43b9-8290-af5231cd7b47",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b117e28-4060-42c1-8228-0d7852fc73b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c29e03-89c6-4ef5-8951-582a5f90aa7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a1f62a-f4c8-42d8-bed4-b6af28418977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa4c820-854f-4c54-b64a-32b61ba88da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa241fd-5222-4918-84f2-426c850e7bf0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac1afcd-509f-4979-9084-45887d8eaace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4b6601-ab3d-4760-8914-1ec60be499ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dfe9a1-f47c-493d-8cff-51063d5b24c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "32d84060-9ce2-4355-81cf-04bbfed77f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5fd8c2-f8c7-4e7f-80bc-bbd5d756e5c8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb437a07-f827-414e-bab4-25b88ae7493b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d0ed93-f791-4d5d-adfb-7b78c8c8695d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d990dc-dff7-4bbd-9c62-a3f92aadfe70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "19c73b00-a373-4051-a1d2-ca5b8e3cef89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14741ce1-be42-41e0-b33b-7b4f561c79e8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f09481a-b7b3-4f02-9988-6695d98ba67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd700b1f-f90e-40a8-b4b8-b56014de7eec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3768ac5b-36d4-4450-b486-0c9ae444d885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5454b954-41b8-4b06-9c76-418dbea16f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830d2c54-b0ec-4dd7-a43d-c7c0662743d7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ee8f3b-c739-4a62-816c-e46bae361504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a64fa83-8b03-4171-8522-3a3674c7c86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc363fa0-0dd6-4eac-8d93-b4d66ffce6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1acb0d68-fbcb-4c28-9a75-f3a77e3bbf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90409422-da3c-4ac5-8b7d-b1b3218fc29e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2425afe6-1423-4625-89b0-c7ecaafd39d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bcda6c6-a740-4e7b-841e-f40ca1fe92a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e72a435-d40e-4638-a2ef-26d4e7373add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67521c70-10f4-4785-9cfa-2286fda45cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9d13f1-0ce2-499e-8de9-ba03fa7d02a4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37938bc-e588-42d4-a11c-b7817ea60110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b795f3-8a39-4f1a-88af-3346bff74484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e22c7b2-b829-4b21-a44e-2d15ad40f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06363c43-bfff-4974-ad9b-fa558ad04958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b67b830-1e14-4320-829d-0693fb513d4f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e0ddbf-0f51-48d5-b1a6-60898e560572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50858fbb-c037-4b0d-b5f6-050ffb1ca77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab57c50d-a891-4a5a-bedf-c24e63517aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89a768ae-defd-48b0-a893-7eef34ee9650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4951d3-b60f-4425-bb6b-18e823888446",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d5a759-fb95-49df-8d4b-dd9a03f415f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8079d86e-bff0-4978-b2de-846a1ecc3299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fec39b9-617f-4271-80e7-afa479caf0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8aea58-fdf9-4f77-9ab2-f9f8f9b3ff0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e218f6a-193b-4d54-ac40-aa4ced87973b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eaf3630-bec0-484a-abef-9eb73a5dcddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ad7652-c17f-4094-b2e6-392c3e63284a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639c9e77-f278-4274-b23c-0bb97f04103e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c19bb7c-c811-498f-b148-5c291476bc3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7148853-e1d1-4e78-87ab-8e4cff4ede9e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47740403-06cc-4d8c-a681-aa5af6675956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a013f8-a488-48a4-b9cf-e3b32b8e6a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b301ea-7e42-44f2-8432-a0e3dd3d9c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d756bf3a-0a70-432b-a705-194b43e75cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f31f774-da1e-43ff-ab90-b77cdc88aefe",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596dc068-5732-4ddf-ae15-21735ab8af3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26455759-ac56-41af-8ecf-82056466f403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a7b4c3-2d0d-4821-a2a2-6cd5902b8172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ae9f2e-6256-48bf-8922-fa3f6dd04ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fd7ac7-6e4b-4ff7-b245-692058587051",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9e36ab-d1d3-4570-8074-9ff75d7f1c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d14d6d-859a-4849-8d7d-d387a254e9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb601476-8014-4ed8-91d1-03b724c68de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b33d4ff-cb9a-4bff-b534-a337f51d34b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e626422-0ab9-4692-b737-02f475d6713c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676b32fc-105c-4a6d-9643-d073bbc16347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c33c2d-587e-4cfb-abcc-5b0d3cc23fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2e2784-4c12-46e9-a94f-ddf4234b59ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6df82c1e-6959-40e4-92e4-a24fe2820909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c18f8b-d70c-41d3-bc40-39a0660b9c0e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa47b99-e67b-49f0-a681-71cc273cdf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa8fcf2-77b2-4bbd-98e9-3367856dd1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcb832a-71b6-4c01-8ff0-c079026b3227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe34781b-a1b6-46ef-9a12-8640d694cc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734a1d49-e13d-4040-8182-ebc070f3b678",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07040794-438b-44f3-9e69-3bb05d9b0a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00281a22-67c7-4435-ae8f-1fe8198d6f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528300f6-8298-483d-8b22-ec7ea1493a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "33de26b2-f528-4289-a6e9-b6706b29cb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc82303a-5176-4612-bfce-2610f5d56aa9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7429dd-285c-49eb-8932-8d9fe32a7084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b61a34-96ee-4b2f-b705-b199e313cebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a107f85b-610f-4992-8a4f-8412419b140f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c13b9f21-ea6c-438d-8bb1-29da6e44ac72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b718bf-0a24-4667-803d-fe0fcb127343",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e3a74a-ee91-4231-b147-57c71004a02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3ad592-b4e3-437e-819a-964cd221ea2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960327c4-92d2-4baf-b414-a5f5ccd8d272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e73149e-0e86-4217-ab5f-99560934b054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91f552d-3fdf-47e7-8488-c80cc1b20753",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488ce64b-1ed3-4900-9841-b19ad1c6d2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27720b4-f38f-4fad-a2b0-5574150a627a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfaefca-377d-45fc-b85f-75e8fae163c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "536d8c50-a526-44a4-b964-856af9799830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af09d69-68f4-42b7-a87b-98961710ebea",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e04993-23a6-4146-b76b-56c361ba9657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0340bdc0-afd1-4765-83af-c115826346d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94273961-2a3e-4e65-a91b-7f84f7bb0916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a73bdc-c82f-4f24-9a88-eed35365bc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a143cfb-d641-490a-bf38-f15c57122eef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0a5e2-d7b9-45bd-9f63-f479cd707416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f15182-e2b7-48cb-9547-c601992e5958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62d9b8a-69a4-4410-933a-598272e751a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f54998b-11d4-4a1b-a1c7-449ffe94c488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca517ce6-7dae-4cce-922c-6d30600eb26c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff426b72-ad47-4a2e-9c15-505d3cd4f198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c182916-8712-4394-93d4-d1d7c8d331c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3cc552-1c58-4c94-b19f-254120b39ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9469ca7d-98b0-4c0b-8256-7f941149700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd8a889-ac30-4076-881b-14448ada3e1a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a818493-5c37-42b9-8bf9-d9bb0259d34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdd41d6-c4ac-457a-9aad-8c9bd479a0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb4156d-ceda-4ae7-ad12-82d26c35cadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc527ed5-bce9-4fdd-b77b-61142c1ba128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27cf098-2308-4302-9ac1-dcb0c68d09c1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734ef462-e343-4166-8bc3-96fee93657c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "190d7cff-16d1-4976-a106-ec5f7175ff76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5773af0-17ac-4247-a008-550484c91f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7ede6e-1382-4dac-bd12-f0bc9e861142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bacaa6-2a64-4fb2-9c73-494dd4c4a3ab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f93034d-cb5c-4a6a-83ce-bc79388ce6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f864602b-d320-4f9a-bf9a-7e77c6f023d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fda2ce-2290-4de6-96b1-533489d6cf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "661b9994-0555-4052-b47d-f22a2c5ae8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79770d04-68f5-46af-8b78-2a3f755e0fc8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79144427-0bdb-4ebc-8b4c-d9d8b5b405e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc90348-dae5-446e-b7d1-ff22814bfe1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbc3976-38a4-4f67-a22f-d175781a698d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ba344c-2531-4e2a-95ac-84bdafeb16da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d083ce-be81-4f41-bbda-c25eda31af44",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91a97be-59ff-45bb-a16d-2c7c02f028e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5da4453-1576-4203-9237-ba6d79447939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c107c3e6-4b80-4b80-aadf-5d5c632c601b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2a8f71-ee42-43ac-88ee-9bae00f9a371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66481be-654d-4c64-8202-0d06f916d58e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8084d61-5488-44f4-bda1-95c50a69b920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10511ada-0a91-4297-83ef-1ee23025db01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfbf301-5dc4-4216-842a-5e75a9aa2ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ec00b7-4963-41e7-9e5f-ee35e466ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6306b4-a92b-46e5-b7cb-fe0b42a8b283",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ac2921-126c-48d1-ac7e-66973a71893d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3aa5068-883e-4c62-9d79-6b41b81b3cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37133e9d-6c57-450d-a35c-66e2218ccce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98e33dd0-df06-4196-81b5-b83d0040c821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fffbef-d9d2-4635-9510-f69cd33e068f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e013d073-387d-49e3-b72a-65cccff5bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6052873c-a756-4975-bb4c-320862de421a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c6021e-1e0a-4788-8c31-7ac7a4127515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0736e19b-7152-41e7-ac09-cdf33867b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17e1bb6-7551-4cb7-bb30-5d66ab49cbe9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521fed06-329f-4081-9e34-567ddd433f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1a9c8e-e446-4514-8914-2b7a6d25bfe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c8b87e-0ee7-452d-81d6-e27bf34c5b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a42c1ab1-2a81-4c01-aa69-09f5c837ed8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c56023-1820-419e-a999-d1ece63be56c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d755d8-bed0-423b-a8ac-56e78950e205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03e1785-b06f-4631-9011-64e4b1ec6f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb74c54-1bd4-476f-8b9b-19ebb3fadee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35d5731f-366c-4c1e-a975-670be5efb9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64741f15-0f46-4cdc-9777-a86c9a8f6cf9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805da14d-17d3-4927-8ce8-9bcbfc7c540e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4876f588-9f9b-47ab-b919-f6cf33779117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058d9076-04a6-4695-823c-0158246f7db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d786312b-e71e-4b75-b5ed-d8c36a60fbee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4845ba-47b1-4442-b13d-45a739ea3e49",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1417c3d2-cd8f-4def-9006-390e84d56d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8260da34-5f88-4e9a-a45f-e7de2ce3eeb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6455755-8404-4ccb-8a75-1b9b0470bd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73e8cd24-acdc-4a8a-929e-dcc5235753aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fa193e-88c5-48dc-b743-2f58edafda4d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3812bc-5098-478e-aa63-52c5cc7adc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903f1972-3329-4b78-a5f6-94bba4bcf5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283b45ad-8078-4ddb-89f5-1a62cebfe86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db9a8862-204d-4ec2-85cd-ffef3b47dfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb59b5ea-02ec-4ba2-90a1-df2ebfc9e9b3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab45221d-dd54-420a-bb30-05e7c0328f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00d4558-50b5-48ec-b73f-9639e35d5055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f168ce69-90d9-4198-8225-05cff345a42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c6cc47-c3b2-4d60-98f2-0fda8e5396d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bab043-6cc6-4c4b-8acc-196ee9668e8b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e079cc02-6905-4d35-92ca-911251e74013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb65667-b81b-4098-8076-d716cfc9f7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077dc1e6-b1da-4340-b7d8-fe40c83bf0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22aabde8-ac38-4e6f-adcd-fdc6ac44e10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6478520-555a-44a0-b210-5af0e9b52f71",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a265f59-f948-4438-b47a-c6a271a9cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5becf5c-2eaf-410d-981b-cfea10e2a2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d78346-7940-4bc4-b6a1-0f3b6468c9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "094461dd-9c1b-41d7-b9d5-a30e903ed3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cddd6a5-9773-4426-a4b1-f1e25e8d9250",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ee5183-bcd7-4439-94f6-f65b7bcada77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f40e73-4542-408a-bbee-f6fe8a10b90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f3d1d5-d440-4819-a0e0-928cf5e9eca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75150875-917d-4da2-8fbc-a63416ecfb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96101832-cc45-4a9d-9e72-5b0326531669",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b52ea2-8b55-4ae1-9fc1-b465163adb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee98ba85-8bd0-4ecc-a9e5-3dcc44b8fcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b6340a-e726-4613-bddb-59ce69d5c57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f98227cb-15e8-446a-ba2e-364bf948a490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203c7662-6042-45e2-b254-706383a2c782",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661d8da8-8748-479e-ba49-7eecc99da168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed31412-5f80-46e2-9c9f-ce421330a4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0811dec3-cb83-4846-bae3-ca270ed26721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8995761-419a-4aae-8a80-3637adf69df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16923501-b603-4624-9d0f-8a0ccdfba7c5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffb165d-db66-48aa-9233-446b44d2ee36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88eb115-aee1-4c15-90dd-2b1326c99f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f431e9fa-f9c5-4c1a-8265-5eb8073c4944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac571fb5-1d4a-4484-b63e-596861bf52c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3a946b-8a5d-4a69-8afa-e3a7d566d0f6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d98e24-c116-4f9d-a440-cf5e2a5bf9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af72e05a-12b1-47b4-b7c9-e7d166812a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c476fdcc-46f4-4bb6-ac03-f6cf213f422c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1052737e-e5a2-4ef8-b483-619c276a5c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2b9807-ea59-40cb-b0db-89fee9f2f48e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfed4f5b-ffb5-448a-8c68-936dc5753759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d6de3f-4cbd-4145-95b2-22ecfdfc993b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f422bff8-8c98-469b-9ea7-bfbcea7562bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd2b7b0-f098-4047-a7a9-209f6e385039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7f347e-062f-4b57-9a92-3802706555c6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3df04d3-5379-4da0-8e40-ceb8672ad582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c2c26a-2ea2-4013-8981-e2912f60c42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f648257-6a76-42fd-bece-6c4cbcc4ed9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d976814-f952-4126-84d6-24e7b8cf8e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67776fe3-1733-4e15-aa93-c1a38eec4eaf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e7f74a-aed4-45cf-83a1-e987676bcb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625f5c65-a9cf-47b4-9f93-b019d9f9204d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c620ae-c641-458f-ac61-f94a2b080ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e57d6ae0-1805-4551-bfe8-08b8554bbe93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31229f8d-9f2a-40eb-8499-db92db489ec8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a7c0aa-705a-4235-9310-480a1a78d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f99776-96d2-4fb2-b98a-97b9209476ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc1cbfd-8ddc-4987-8c8b-554cb3fef773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "176f85ba-1634-48b6-86d6-9eb9f169be92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6de49a-403d-487f-ad35-fe69e876f056",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db4543f-1c54-44c1-98fa-a36095fe7b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b19b49f7-e7ad-4fb9-9b7f-8570ec86caad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8cc164-9e73-4410-a5cd-11519b4d65b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21501a85-5280-4a2f-8c33-95733b7987cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bb3d55-5833-44eb-8384-89e68dc0d97e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4c75cf-624e-4abe-8fb4-1d46bd7f2d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b809d1d3-b767-4e0f-9cf2-a8fae262de78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ee6c73-5d4e-4858-990a-3145e46972b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "334cf96f-894d-4271-8e35-60b8b91f6baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab378f1-ad22-42b7-bee6-456dad5bbc3d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e4e41-432d-49a6-801a-20b6e2e49a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d79c84f-c174-441c-9a0f-739daa47f42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c763e2-18c6-4602-8df5-a33d3d2d5afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7198ff04-c68e-4333-9341-f8a1fad10de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a73f2b-1222-48f5-8e04-d55bf42253ae",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecd0568-39e4-4f48-9a6b-31413f9b07ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e85ed0d-a49e-4a48-a72d-d326db4ebc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbcc724-ebee-4362-8ef0-0abf915bfe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "206858b3-2185-4516-9e1e-fcb84b554210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f750ee7e-fd88-4e03-b5b9-4f698ca5d19e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153b0ff2-549a-4d53-9fe3-81978f64342b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09bad04b-2bdc-4342-b686-81a530f73e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1779922f-dece-4f54-8116-9b65ccf9ae45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b8be23-2275-4c2b-b64a-1e416ea10d6e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f2c539d-65f3-4517-910d-4220eccb0e60",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d0b9ed7-403b-41ec-8e30-298df2d7c3f0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7f0dfa-0390-4bf4-80a9-f42d9d5dc6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b0f1c75-d7b1-4d2d-ad01-962bf9834040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603c7942-69e8-4e80-ac3c-4bda98bfc1c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "723179cf-029c-4e2d-bb04-d22ec0050aec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd76c06b-5f4b-421d-a915-7e74ab15a676",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86c7e476-d095-42d1-aa1a-4713375ba3d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89309840-8318-4314-83b6-2f5160f2f77a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76b5f336-b403-4dc4-9ac8-7c8bcf3f9b8d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa9715d0-5c09-4070-907d-a1dbba7122b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6c54799-d9d6-4ffb-8d1a-d664306a4283"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1faaf8df-36d7-4f38-b4e6-62420e74f443",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57fa7391-b980-41a4-8f1b-1f9d5386e7bc"
                }
              }
            ]
          },
          {
            "id": "01250c80-e322-4b7f-a27f-747515d1f7d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3498cb59-3977-4887-8226-135cb274984b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aaf887b-5c39-4ee5-ab9a-f4051e8884c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e16f5676-b925-4c9b-ac0b-b43d0f875b33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbc30c5d-983c-487b-af34-0cd31888766d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c9ba0f4b-f45b-4d55-a96b-253c58e68b52"
                    }
                  }
                ]
              },
              {
                "id": "2401ac74-13de-4f82-90ab-ae5a4043aeca",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91cb853a-c953-4ff2-9b9f-62b1d4707624",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44fe4f1e-fbb3-4d53-839a-147eeb1ec400"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "088c87d0-93c4-420d-8d37-2fdf41482872",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "104bae58-d765-42fe-bd30-7fe6b20c1368"
                    }
                  }
                ]
              },
              {
                "id": "78975d83-4ea7-40df-9fc1-a65348f2180b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9060a23-c8ac-452a-9e16-a0a2ffcd0c26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4b9eb76-85eb-4581-9a4d-07782d3ab16e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b13a8348-c2bd-4ea2-a53d-5018913c3ad1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ebe3ab8-c73a-4bfd-84ca-6a3a13415701"
                    }
                  }
                ]
              },
              {
                "id": "fc0a4f1e-cc43-4ad9-9f7a-3b7f4448a91b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "263c80af-edf2-4a51-83e1-41f0573847ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e2226cf-26f9-4c6f-8675-2706d2579a58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbf00701-36c2-464e-9be3-2691656f836e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "41ca3fa3-1b84-4dc7-bbb7-3fd6d725ac46"
                    }
                  }
                ]
              },
              {
                "id": "a8099b04-e44e-4de4-beaf-af8c68ae47a8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca5024c1-6e1b-4404-aa23-ca58163ac34c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0506b0aa-c3d8-4844-8255-2ce9ddff6228"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea70c386-11d0-46be-b160-f45032300fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a76ceb61-9eaa-4996-ae31-8f5a7fd091ee"
                    }
                  }
                ]
              },
              {
                "id": "4fc1772e-609e-452b-b757-1d7e528650c8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e77da39c-8da9-44c7-9e0c-7aa08d36a488",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd7dc9a2-4f47-49ad-8ad4-b9fad3d41121"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d8f2699-cfb6-4ed6-916f-17023737f17f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ccb7dfed-fb2b-48b0-a42f-1e6a5529c15e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea6331a9-d5fa-480c-b669-03aa3d46b4f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c5aa50a-485b-4272-a218-bd368a8cc377"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5230fc89-33ca-43cf-8d82-8f31ae2deaa0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9b1a97c7-07cb-418a-9337-029e0c912d58"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87fb0165-d137-4bc0-b944-c401da2a58d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "75942772-e893-40d6-a054-5f349ae3e5ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05ac532b-e01c-41be-99e4-b2c95e2cb4f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79dd918f-85d8-4ec3-a976-1ee9883ce614"
            }
          }
        ]
      },
      {
        "id": "1e8b68f7-be53-412e-9196-f589ededc4fb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f69eb350-4352-48db-930f-c66030028b22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30a9bd10-3c2f-4db0-a93b-5d9010c89f95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3566d271-c042-4e64-8366-4e324bff41c9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bea8d1-911c-4ad1-8398-e988649ace4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513f4fa8-55ee-422f-b4aa-25b95c0532e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9156c0b3-fc85-4444-a715-38fcb7fc2047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8921cc1b-b252-43ce-9ee0-dbee82cf1131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b348a5-ba05-4f67-95dc-07a87dfe6bd6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892143fb-a998-48a0-9ee1-bfa6cf431431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a2e0e5-d76d-4786-98ea-d8730c06b9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397d539b-40a9-4dd2-9e8f-63daf130830d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36901c66-ecd8-4af7-bbd4-bfbb18113c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3c13a5-537a-41c4-8736-02a088c44faf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a386c6e-a618-427c-89f6-6d48844ef696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2808d6ef-f36c-4143-b0b8-e31abe5f19d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231587a1-afff-47b4-a70a-3e0edb56ad3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "004b5914-0ae6-4f28-b248-b48d27566905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758297d2-2482-488f-9f0b-b7525c5164f0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c6513a-e119-4a2d-84dd-daea5c951206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a746d1f8-4725-4f03-9412-233c39045f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9ef1d2-30e4-4322-b0f7-32886ef5d30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1da5f4e2-2779-4efe-b828-90c57776b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e6c811-c7a8-447b-90c2-51dba545d558",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4047ff1c-7788-4f1f-8c58-05a6100b00b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe5192b-f568-48d9-becd-1d4688082ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a655fff-212f-4db0-ad4e-ba86c7a5db60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88717026-4015-44b3-9f13-84000bead1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf643d1-70f9-4298-ab4e-33ff52a2dd04",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7a29a1-4bca-4267-a067-e41a53805e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1611d11-a910-4a7f-bf1c-39e5d16977b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cf50d6-01e3-4b2a-8e1f-57b304ad67b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda92e70-2ff9-4b50-b488-ab8a9beaf4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7335d1c5-13ed-48a0-a979-b85c95546363",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ac3e03-3463-40b5-b10e-0538deb3ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f801bded-5500-4690-8151-6b7aaef21c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d59cbd-a83b-499b-a5b8-e17bbfcbf912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "269dfdae-29f9-43e7-beb4-8c89fe5ae7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ce61e0-2659-49ed-80ac-b5247fd6de78",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d30289b-5091-407d-92ad-5e3fa52e3a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e747178b-9fda-4870-98d3-d7c0a237ede9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb0bdaf-9fb5-41e8-9768-37ce3858dad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4046a94-ef0b-4afc-96da-7e1979bbb217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a5b53d-6ec4-45f4-a654-6bb61459d356",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7db1f72-5dde-414f-b0f1-71123fd24bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5cfbd89-45e6-4ccc-996a-c3387832bb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c637082-433c-46a5-9b13-a7b00c8da906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a111c568-6baa-4c50-b62d-e8948004cad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea79bf3-9e21-488f-9823-acdad42719c4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e0041e-fc1e-4bf8-8ff4-26395c0391be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66751afe-47a7-4a7b-b039-d1ff2d3be1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427a5ffb-0bec-4944-96af-28023945d6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "279a89ef-f990-483a-a5dc-f7de8d7b7627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca61650a-9800-4d1e-8dac-6f50c084ff10",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63db0c3-b496-424d-ad14-cc8f3c8e1c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9705ea-a693-4db2-bef6-4cdda91c6504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff9e56a-fbeb-4b9e-84ca-182865c19800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ed13c826-6b63-4f21-8db1-3b178df9db39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb78839-5d39-441c-9241-328b9e8ff9bd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797f914b-3fd2-4799-91ac-708128cb07b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98890a1-9f3b-47c4-98a4-2278cf525b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1addfd6-bcb4-483b-b9a8-c234b9fa4dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d735085-558e-4965-a9c0-917199c7b988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d23f1a-0284-4a53-8552-6ac3b5952b9b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148d37e8-7eda-422b-b87f-a8449db83a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c4629a-2ee3-44a5-8aa2-6d314e502275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc8e866-22a3-436f-946d-f59865be7a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "584b29d1-1bb3-4102-a89f-3323251b858c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9a592d-9ea9-47de-83a0-5e0dedbeb852",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9736074-5043-4ff6-a094-f02187865b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b94377-f16b-44bb-80cd-9d02c8e17180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbee2d9-378b-4e89-b523-8e38b1905652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a42386f6-0d7c-4b52-808e-2474aee4b29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911855f3-f34b-43d0-b4bf-f5477e7a2b52",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08ba0bc-c54b-4605-850b-55f8e3f4e8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd4eb1d-02da-45df-941a-258d2ca71bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda6a49a-7bd9-4675-90b7-5537a8390367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d714912-e06d-4e7a-90b8-80bf12bf43ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b9c597-4d1d-426d-b69c-f188437d12e9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ebd98c-e6d3-482a-ad64-007c963b37da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bf7588-8859-4fa2-b0e0-7825b13d9e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd91d874-4199-480d-a5eb-490f0c3a3cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d329902-8e23-4c08-bff9-c283d338dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b863a4-fdd4-4cbb-87ba-50cff0c00728",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0142adba-3720-4acd-8113-205fe10c26b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d2332a-63f1-4006-a8f5-547206c3b820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2486f669-5153-48e6-b2d7-99dee5f8a138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "56f9373f-ed33-4dd0-ad06-0fc2d2525e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad158ec-b7ab-46f0-894f-4c5f5d01eb97",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e1d6c6-0682-43b1-ac33-a5b2fe5feed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1c0f92-4ac4-42cc-b956-c4c21fc10c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d5e14d-d5f9-4a54-b9d2-8e6b2e9c6bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed627ac4-1e21-492b-bc85-518f3f29b7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90989263-63e2-4317-a379-4adba2048561",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59727520-5782-487e-93b4-00fb8ebb55cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ca8213-343c-48db-88e8-4ea7625d8baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80b5f2c-cd46-4b86-8b81-4d26b9ca9ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b25c0a4-ef7b-4bf2-b36f-970cccbda4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9093a53f-072d-4c47-b4a4-3170fb4e4ce5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a7dd93-c7bc-4387-ad87-789d27336e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4169a7f7-238f-44b3-89a7-619dcabba9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ab2943-6c6c-499c-8189-959bbb8ea951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e5f127-2ee0-41e0-8c06-d500dadf3f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b48e0b-ad92-4d69-be21-f9c30c765386",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bfe489-e512-4063-bea2-9ea19af6bc07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0eca2ad-ac98-4ccb-9b4f-3b78fa0b585d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e48a1b-5e50-4d94-88ab-f9ca4f26a075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "258db1b2-de01-4a63-9ee7-3c614a8ec0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab04c4e-6e6d-4fdb-b4e5-91f4a16c974d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d282b1-21cf-4c88-a2d3-50a519abb16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e32c852-3d2c-4f69-b325-07f2a07c960e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b472516-323a-426b-9779-2a442e766f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47362ba0-3208-493f-8582-c0dc0cf52c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9707205-4d99-42af-80bd-d5cca99103d9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb8aa89-42ba-473e-9dd7-3a626bf7f2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aab7edd-f9c0-424f-aa89-aa96956878a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e05163-c414-4103-949f-ff4c8b37cd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "753ca4f3-4f85-4cce-8543-7e63172ea08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118990b1-c8b7-42fd-81ab-56a40e321977",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114d36c-85b5-48b9-bc8b-0727d5823c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133918ec-412e-442c-8b53-2042f97b19b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca6047c-380f-4abd-b24f-3c8e7b034cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0eddfb-24a1-41fd-90f8-a88a4c2fc2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f13b9e4-3b26-432a-9216-19d5592a7e52",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f1c717-4366-4f27-b0a2-cf31297be639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6289be2c-d4b0-4202-b4c1-6238a27dd5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2cb2ac-2cbb-4b4d-88ec-8e1865b0ee58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79a8ea36-4594-45d2-a9d9-de70a94a39af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6381d043-a580-4795-89cb-a11c22fd8a5c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cd4b49-b913-471f-a89e-ab03dcc7eb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0de8a6a-3168-42e5-abb5-348a758075eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7324a55-084d-4d06-8efd-7b84024c0494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c015de18-b83d-4aff-a805-e665b7464aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1e0824-66e2-40e8-b6e8-129b0ccde578",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf4ce04-915d-4fd9-b91a-51927f34d824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e142f2c5-d3fd-42d3-9865-9eead67a6e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6031a2-f1fa-4d40-815e-103bc2be1f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0592da8-ca18-431e-aaba-378e70fcc213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f2955e-f103-4f0a-b5dc-f83c22c04e06",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5998db6-1602-41cb-9da2-f13b6da2fea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efee35c5-ff00-4015-b348-beb0172d174a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bc4092-1077-4bbd-9734-aee3fff0e2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a922c8e-f2ae-4651-9d4d-0038c9416f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e4b74a-7a5f-41ed-845e-045382c2fb65",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f076a47-13b1-4194-8df7-e87b80081d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25b994d-7965-4261-888c-12b58d2c2757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e4944f-6b75-45de-b144-bbdbb7d6d72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "445f0794-da56-4981-8041-4719a1ec8de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb6513d-6e44-4f35-8e96-4e0f948305fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045675d5-5b22-4d41-8a97-f8247b90adbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d761039-962a-45e5-8517-34d259d80212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9372603-a815-4936-82c0-96e92c0e0082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e966f7e6-9c56-47a5-a49f-ef005e5ae01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc0854d-65b3-4c64-b418-9425aefcdef1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7edcad-0782-492d-8b9c-b5801a182501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61de94fa-296f-4447-8be8-e602f6cd5a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa2588e-a097-45d9-8b19-92ceb564561d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fe1f28-9a6b-4405-9138-eed1b5a125f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9a961a-2c6e-4ab2-acd6-763054edb3d5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ca3620-98d0-4739-b284-57524a9941bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeef226e-d3ac-456a-8090-2da6263241ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6a0cc2-6da8-4e19-8705-a155053a12e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74dd9f39-cbe4-4361-a255-bcfc45c7cbff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0556667-7720-4de3-9bd0-6d53d2cfeabb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1696ea84-ec60-4dad-ba02-3ed0345e5fcf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291684f7-1c3a-4fd6-b9b1-7af805dbb1aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fde27726-3f79-467b-9c00-f8b219429138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f948b23-7d7a-413f-89c7-61b09f3f61af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1eb839b-e4a1-406e-b9b3-ea367e7b7e57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9151dfe-d03f-44e1-9a10-9a3f72ca72e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c6e817e-be83-45d6-9d2d-575ced6ca31e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "832bb3a8-6e8f-44c9-9e83-e8ad4a2fc2a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7960da72-a401-456f-8118-0bea861cb2e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c73e30f-065d-4822-a537-3b7d6a35df13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3a93c61f-000d-447e-9428-00231b156ad2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e05414d4-bda7-4cad-9764-73f1011d0324",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02012a3f-d40a-4346-9ea9-f91128e6b228"
            }
          }
        ]
      },
      {
        "id": "0f929053-d410-4455-bf22-1b0d5309b424",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c179ca2c-e7cb-4a0f-beef-bfbc6ca990a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f462389-5cec-43d2-bbba-dbed36538374",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f7312d92-5f7d-48f5-8ef1-5f3da33a95a1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad0e331-62ca-4a1a-8d2a-d548e20b7793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc26f6c-f617-425f-8655-a02b6c01fa9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ffc817-6e11-46ce-8aa0-5f32a0bc246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b10d03-3fca-473b-983b-9349f196deef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00597477-2288-475b-b2a1-898771335517",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e1e16c-25d2-4de3-b85c-92cd28f1e4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe782dd-a3ff-4d3c-8c7a-1acc0a1df689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b659011c-e09d-4918-aa3f-a61494163804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5e4574-3560-429f-82e0-06bf5d289c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485d49f3-60fd-4377-a6a9-d00d608b19c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce04c69-1e4d-4cac-b256-ee3e7cd7d594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765a22c9-911b-40f4-af97-798a4eb463d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdc9583-aeaf-4604-9729-94973104a7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26b2d496-e8a6-4d3a-a8ba-be64af49bfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26740c95-a37f-4020-ae3c-dc1d9ca3746f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b21056c-42f3-410e-9019-9fb2b9000216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c96bf7-7749-48d4-885c-84bcccb484b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af494e8d-e261-4f1b-8b97-8165a1b0bbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a4d57e-39d9-4167-b53a-5606ae23dcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d23f39-53c3-4699-a6a3-6421a1153e40",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c5acd3-17d7-455c-8f9b-9951e378a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bf7e49-917a-4fb0-a717-4408fbac8fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a6fc5e-37be-4a60-8a89-13cdd2cb72e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f969c605-486e-4486-8fb2-9a78e87f5139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58bf0aa-e7ea-4306-90d8-720a6b2a35a7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14640486-c3ca-4e22-a95c-d96b7d452d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534b4967-5afb-4518-aa70-79aa31969a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49da3f4-4590-40a5-8ff9-37a4f8bd284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "732a3c4b-bbdb-4d85-81b3-c4301c59ec1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0e0bf9-f3c8-4c51-9f4a-9a5a1d94b687",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752ff966-8c50-4975-ba21-38a6d2535379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ca622e-6f5f-474e-acac-f3656a4fae51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c91b2f1-d0f8-4250-8a51-def28f2c5e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "557c466e-1477-472b-b34a-5eed2ea94cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52ad75a-cf0b-4d25-a3b3-a9c2bc747722",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecd52dd-696c-48d9-b741-0a1fc22e3dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3eec5b4-8e91-4626-a429-654d68bdd1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5b2044-a063-4d0d-b141-0869d85511df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ded0b39-ef16-47af-aafb-b4d085898b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb48e9c-13d7-4dc6-a4dc-7d57d4ec525c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0fce74-e462-4f46-8177-1759c9460811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a49c672-0304-4eaf-a3df-0f2156d5e729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c661a42-91b6-4197-a6c2-3b646b03f1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a4b592-44e0-43ac-900e-566efe46e8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f053afe-4e00-43eb-b8f1-269cf4b592a3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e640dda-9ea4-4c3a-8bc0-e39054249272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4470effd-e87f-4bf9-9466-636012bf57fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b689209b-36aa-4f43-82cf-de3ffa9d0cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5830e35-e7e1-400c-a88d-9f7f04c251df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f767dc-89ea-4148-b06d-b21e5158fee5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919990d6-9627-44c0-a08b-45cdc18ae23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a091155f-5023-4371-8cc9-60623904bb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3db1f1-8ce3-4da7-a1d1-52f6d94b4678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f91a0f2b-6ce9-4ac2-bee7-f5856812ff6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f06547-a1fc-412d-9f63-a66d7ba9e723",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2d006c-4ea2-4468-88a0-48ecf5261020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfc10cd-2ac7-475a-b979-62cd22d85e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293859f-d151-4728-9494-6006ece2df4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0682da41-9986-4f08-b97a-7bf3381cfed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685d0281-c95d-4676-9826-9e3a4d3f1fb9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3e0490-e35a-406e-bddb-beda4e6d44d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ed8b77-e9d4-4216-afd2-5fa5a5e14a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c96da1f-7cac-46b2-8105-e31eaeb54ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b89cf2c1-bc28-46e2-b506-1ab2b543231f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b086a6-0e84-4984-8234-6cd8a4345596",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d7cf33-3ce4-4c4c-9ec5-1afb1c041326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b94f33fd-1b11-4cc6-955a-e2fe59ef0b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61040928-724d-4023-8d8b-d6972108d073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "26f4acbb-4851-42f5-9fae-a39b75b66342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfd1eb7-5e9a-4218-b503-22475bec21bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed4092d-43a0-47db-8cd1-c8fcb148b176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d3cdce-bfd4-44fc-91e6-7503af7e3d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80999ca0-1608-4c8f-8647-a319cde225aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2314289-cb9a-44ef-a6a6-c1a0a6b62702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f7780b-30ce-431a-9ba2-c532227cafba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d07580-b0da-45c6-925e-687442954417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48347c4a-e3f0-4a18-8c01-5e8e51785b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c30407-5f8b-4db2-a779-890d689e1509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6b6fd7-aa07-45c1-942b-e8d1a449c2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41750e7-8e26-488a-a9c4-8baa242e2cde",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0638e529-0cee-42be-84dc-4eb301733e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ad10c4-39e9-4e71-8ebb-aa57714f1dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfffcc8-a48f-497c-b272-6cbf1158688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d16b51d-ac8d-4b2b-bb59-99e55f8973dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1a6c55-de91-4eb1-945c-710a5db745af",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff974844-a4e0-4ec6-9460-4ee4a38fc640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea65b49-c54a-454e-9f70-4ba363019681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eed1b8-79e7-4866-8baa-8890aa75cfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f94ef3ee-62d7-476f-a39d-6728369b8e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f685688-87e3-49e8-bc31-afc283a1f0eb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd7fd70-d37c-4e38-9f7b-a6604d6e019b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2552664-2ca6-4726-8e75-9d25e8722dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da76e2a6-13d1-4bdf-a474-357f82c6f951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64769018-ef2a-47af-a6f4-9bfad01c80a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80c25bc-a3f8-4594-8294-1b45462ec8b2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1698786-9be6-4ed6-b256-52fb5e46a2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33e7be3-d4d9-4aac-b217-f96d8761c3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1c6836-ad73-4359-9723-568f79efdb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abd303c6-261e-472c-87d4-27f4df38a439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1d1698-e850-4463-b7ff-aba32d69c7c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695d7596-d9f3-4bf8-a05e-f30d0f8a18d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0602a76f-bea6-4b02-b99b-fcc0194b3c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccde86f8-f9a7-47e3-8dcc-a1dbdfba6f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1176c875-c1a9-4e2b-afb4-a99f287a3ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13415c9e-0727-4356-bf5e-6fb6df6551b0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e03f4-ed73-4591-8416-57115d9322b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f5018d-5d60-466d-9255-f8d013352382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8813cb24-9cc4-4dfc-b34a-643264a72fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "670e707c-4e14-4a64-b237-e3a1d5c81f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d7656b-1a0a-49e4-a2c9-c1a0b1232eb7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb89f69-59c1-4937-b129-fbb6dad08e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b48e7b-c0b0-43b0-99a4-fa5570470fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6df1ed-c35a-4b9a-b6b1-13bb85e4b93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01351fcf-49f3-48b1-96f7-b24af48c08d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6096d4-f43e-4ca1-8688-3e8cda745ac4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe587b6a-ba8c-4121-a7b1-227db820c0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1847d4d8-6393-436e-b1b1-7701ec214c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708c1524-78b7-43c6-8857-38dbb43a5310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e842b632-df22-425f-a678-14d0660be77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0a1cb7-e791-41a6-aa7e-6984f4e37242",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc870a6-7fe5-4402-a9bb-38c2571da904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6c6587-32da-4324-8937-edcc05411e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d796d7-5fb1-45ee-86bb-fafdcbb1c6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2102a3b-6609-4a07-bd11-3e024c140573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf5ad45-b2dc-455f-bbbf-c110868dee7e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa01b50-6cfd-487b-85db-95754a51571a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8808301d-41c5-42c8-a297-c1548bd74a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6d8b48-e2d8-4592-be3c-d2f5a731cec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b58bbd48-d200-4e0c-8af9-93cb7c381546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef2e12f-d00a-4dcf-9a44-fad376b9f4cb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa5d338-c40d-4601-86e0-d21610240eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6e0210-b91f-49ff-8bc3-9d0dadd6de39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8380c9-32db-4821-ab57-2ad6034704e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "449fdca2-06a4-4675-bac0-fe5d9457a8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bbbdd6-3a53-4e8b-8d55-4a7d482b6d24",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184fa666-1961-41fe-a6ca-4f7de74de965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879ae7d6-748d-4e0a-84da-c17b3cbbcf38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a1dbf2-15ba-4803-aefa-1c6da7b3b18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3d8725-9166-4555-b07b-21ecc1d2ace6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7569863-3de1-4e1d-a0a7-893874f7ad19",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c7fd36-742e-4379-b9ab-dd31d0c6604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924e77aa-6762-430b-9b7f-409eea34b0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9590f2-1fc5-42bd-90bd-6d198a353e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d765d6ae-cc95-4ba3-93fc-0be34c4a0a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c547fa2-162c-4508-afba-e7a9d5fcedac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28917b17-2094-4bc6-ac22-a74a6322b3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6552b2c9-0d56-4914-bdd2-adcebcd9c4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f11d9ec-93fb-429a-acf0-9135409a5d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c12a4e6-4ed8-4993-b081-54704c0b9970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23af6c74-41ee-43cf-8eaa-ed3ec63b3d00",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44239a5b-b46a-4900-b5ab-e22ccc4e4ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fb40a6-f10e-4b35-a0cb-8fde0546f749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a2ccc9-d95b-4b20-bb53-456bb63d39ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc5fec6-9f6f-4b29-ba61-d77778c9becf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4543391-860e-4b0c-a07a-5c78ba9e32e9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3118a5b7-e79b-44aa-98f8-70a152962b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16904ec0-c63b-4bbd-94a8-e8692048fcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b89b80-c759-4c94-b056-e5b22f8393bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "806cc704-4948-47bf-b006-1d7d2a636a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f37117b-2786-4b01-b77e-db4d48eb2d53",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3fed6b-5d58-4449-8751-7935184ffadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0774e7fc-7614-4337-a58d-11aa6787c0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f37d0e-d9d8-4a7e-8133-b1008c1e4555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca0c8c4-d44b-4b09-a974-32ce0bcb925f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01acfc3a-fd21-4560-af68-fe5b51b49739",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5f8e44-d555-4cc4-8ff3-ebd4604b1dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dc54c6-01bf-48f1-b4d8-82e8aa2f7e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a59a73-6944-4b93-9eeb-2919838b13e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ff67ff-6868-4a2a-a577-e824b9fb6517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284b5900-46f0-44e1-959f-00afed65ae56",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818e0131-f8be-4198-95be-12edc450baf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54e9c39-d61c-40b9-b026-d82e2f39268b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851b8400-77d2-4cf5-9f9a-765bb2cdb503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190578f2-3e3e-45b5-8337-772ba15b406f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159dee32-ec11-43d5-b7ee-9f40e6fa61dc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59118ae1-ce5c-444a-89bc-3d5a0624a460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9303a0-65c2-40f2-a844-dfb23229ba58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b60f1b-adbe-4d66-9f80-ac3b3677e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a99e8612-3f16-4448-a823-b7004b4ea0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59acdb7-aa2b-4302-8dda-007df73de74c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2915cb-1da3-47e5-b41e-d5c436d712a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ecf4db-18f7-4464-b325-f2e7bbafe2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb59dbdf-0505-445f-9b45-956309c1f198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f22f26d-b2d1-421a-aa28-9fcd2825509c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3d22ea1-d74b-45c6-9984-44a114c707f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2931a27-6d8c-4ff9-b22f-20889dba3df0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f142bdd0-1a42-4e4b-b678-bbe37dc261aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd81479-41ea-45c3-82b6-bc2a6df6be24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6974e32-c455-41bc-a8a7-871cea209d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca62c176-f905-4cd8-83c0-18e55cf4a4bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7bb279f-5ad8-49c3-96b3-fe0c653e4696",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d79f387e-77fd-4ff4-835c-0c890fd5cdbe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db1def5-4dd4-4eb4-8306-8028a565d5c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62f4188e-2872-493d-88f2-f13a1d78dbc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "031199fe-7c5b-4f7c-91f5-d225625e1720",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73250c31-9f2b-40bd-955e-f6a59d6ce8a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fb02fb9-0557-4907-8a92-0e9cc1abe29e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcc492c9-44fd-442c-bbd1-07b1e7f92480"
            }
          }
        ]
      },
      {
        "id": "5c5ee3c9-c89f-491f-89bb-b20e16f6c72b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ed49544-9e31-4565-b119-a428b8c72ed4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8897790-7248-49f4-91d5-7aa502624e4f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "42f3d174-9434-4312-bd16-29323be76d0d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d700e2b-d26d-49d1-828f-8a000d587321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84faebf0-78e3-4409-92d6-d12006a54df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80575dac-f948-4953-8b4f-34dbc823b77c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d2ffe3-8a3a-48ce-bc4c-7bc9fac344ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20587196-ecfe-49a4-bcd0-7d65532d64e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f39869-17aa-49eb-989a-6e82ce453bbe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb6fe77-b2b9-457c-bbb2-1a0253c6b8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b27eec-06ca-48be-b52c-9efb73c38d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092b4dd5-c6d4-4085-9443-f4684d11ae28",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3770de-f56d-4b2e-ab41-53b041df4733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8670d6-ef6c-4397-ba8b-7d77506513d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d173e2-0ee4-4e85-a3fa-dfa90582c641",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d580649f-2a36-4963-900b-1baff2749c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a8d28e-13e5-423d-9b71-74edda1933b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62b9b6d-15ba-4b83-938e-0727c4238d0f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fe5e39-7b80-451e-8a52-da00cde5faf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c024b727-0166-45c7-8ef9-7096fe3c91e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9483b00-8b5e-4b04-8aab-886b6bce3865",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecb370d-69de-41ad-a7a1-0952ddb8e649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd865c53-3587-4a3b-8975-47b9aa69bb12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee98247-9ad7-49f0-830d-5a41f3ee3040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316197a6-510b-4f42-a8fb-168d6408ce4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5714bcfb-e3f0-48ac-8ace-7b722b534289",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79580946-01f7-4958-a915-7ff4c9c7ee39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "849b85db-4878-4112-b67c-ea9b7dcb9447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375be52d-94e0-4f80-bc69-4d3f226a6e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38375a2c-0252-4065-b63e-c44ba54d5230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53354473-56a0-4aa3-9f96-d8bf8b3a655c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae9ba57-fb6a-4665-a3ec-6b8f291d4c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c7b2d1d-49ed-4230-8f97-233762e5a0c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d66987-60ab-4b12-8ce5-64b618610e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28b69b0-2bff-43ed-b69d-ede75ea09e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f898e69-565d-4c7c-a69f-11791fc8fb39",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a608db-4ccc-46ff-b6f8-7172766d30b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6dea619-c66c-4bf1-9e88-c614d41f6bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1209d4a1-ab8f-46c3-8253-e5c59fa8f70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c15679-bd5f-4158-895e-e0cde8bde776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9369e39-4654-42ab-beca-253eb2a5a148",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450dc723-329b-4e2e-94bc-186952c1d3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5aed4ee-1e4d-4189-b1c1-877912415fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad77bbdf-3a32-498f-936a-47954d4f063a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4e3c81-5a61-4099-884f-9b23422ec59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e11cfe-e7b9-4046-be1a-4b7eb15c932c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8479a24f-4439-476e-8252-34eafdbc3248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ffb796c-59da-4cfe-95ea-8c36d6b306bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b15487-c56f-4e0e-a6da-6230c177342f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4e1216-f5f1-4740-ba10-9a0e4a62ee41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b8cc3c-f23b-4cda-b795-f4b742fccde3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb055977-6594-4185-bc46-21d3521eb792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d838dd5-77c4-4da7-ad7e-ac2b6d216c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c80f5a-9cb2-4aa2-a1ac-8c6b179434d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80197fd-1906-40b1-aae9-2a4034d6c5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0515fb8a-7d1e-44d2-b9e1-70585e141aef",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b87c827-34e5-46f2-a7fd-ea2d1d54e51d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84a89a7a-a48d-499b-9173-2949698c51c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996e20be-357a-4526-aa56-861dc57daddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbab6336-9ff9-41a1-bb7b-7d909c4c99df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3605b759-bbef-47b4-8cb1-22346c471e03",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1b3786-7d42-4218-b0f4-bc646f1343b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d710cfd-cc1f-4137-8248-f725b97450a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ba55b2-e9d7-4b3c-b37d-477323eeda68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccb76ab-b1e1-4708-b713-8be9ddfdaa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4df80aa-74c8-402b-b580-2b85e4edb3bf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e70ceea-6ef7-4299-b776-b5cc8d728367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe600a3-68d9-4b58-aef6-c5f51640a6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec02e35-0254-4969-94f0-ad1fd1ec5102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9f3e85-bc7f-4009-9efd-5dbc59220d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1e42f7-3bc0-4649-80f8-e5e267f832d7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06879b2a-6deb-47dd-a9eb-f1761fa99ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f31c0c4-096b-48a3-bdc2-d952e1539cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37b48e1-71ba-47fa-896a-d1f7d0fa7f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4f3515-cbbf-4b4e-921d-4d6ab3792fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b612b5-36af-4c92-bdbd-27c01648b4aa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7428b4ae-8de6-434e-be6b-43a72ffce69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f267d4c-2c71-4616-b5b9-1493dcd4779c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05055ca-79b4-4787-ad21-b3b51a9b71ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63505207-6504-4b87-bd92-57cdbdb096f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8dad20-96dd-460f-a281-228de20dffc1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89fd416-194c-43d6-bda4-c284571bef79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c72970d-c3bb-4d18-a059-ba83088af9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9bc549-d22f-4066-9e5b-2cde2c6ca59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7da183-97d3-4003-a282-add46c9bf30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18368bcd-6a87-44df-a7fd-dd9c2ef7a415",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ff3a0b-6754-45e6-8b15-3cce62306385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4484208d-5b59-46f8-9f9f-0436cc79f166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98ec6ef-eb8a-468e-bfdc-3360b84d28c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e8017d-4ef9-4403-8ef1-717bf939c99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6080dd3e-82c4-41cc-86b6-42a429958c4f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acb0755-1a4b-4ce5-903b-6ffc1f01632b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b33083f-9d92-4d87-a379-89a1f61fb581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89913771-9851-4cdf-afec-7e45631439c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b8b1ae-909a-4d96-95b0-8ffe1856733e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79731847-1d11-4ddc-b29f-3c0dbb6aec25",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d4e44f-eb9a-4d05-8e70-a3ec2a76e016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb842799-7cee-4ac4-94dc-7e320e8d4f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadfd123-3c97-4632-b74c-508ddf8d57c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218f8216-c988-4bff-b6ec-afc0d496e598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603b2b5c-2828-4725-8d32-96ed24910585",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40346e84-75e2-4605-9def-90e496ad098c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b486aa1e-471f-4d9e-9a79-ae5efd6d154f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd66108f-63d4-427b-a7df-b5ea7440741d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8313b5c7-c152-4d4f-8d89-e8b0234d1130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a4860c-b0e1-48a4-aceb-329a7583dd9f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2f1665-8db4-4176-850f-5698346ee04f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e1f1dc-6220-40a7-a998-edce2baa943f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba985876-718e-404d-9546-8604e12ab1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49afb58-b3b2-4063-a156-308f5e2f1983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750c889e-484f-49a5-9b10-a70e80ff7721",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b12a0b-c0d6-4a49-bea3-b24fb87d9a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2cb26a-9f38-4891-a06e-dc69e1605201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ce92e8-02df-45b6-bca2-9ebae524fe68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fb8aad-69c1-4337-8397-96940bf6844f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00932de-2416-4833-b0c6-9afb114abddb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe740ff-1fe4-48ea-857a-93fcab6240da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe195c8a-7ec4-4f3d-8e58-9af9b43df06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6873bd-b76f-4702-afb8-4092fa5217af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d8c8c5-21ef-4b24-887f-6007519a303f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca02cd63-cb1f-47ea-992d-197e27e29cdc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faa3907-7467-4cf4-ac38-ecee2462cd4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ec79f33-edb4-4474-a948-1c81e0160995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2a5236-0662-4f73-8b76-5abfab8c5af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f80eef8-6ca2-4550-af5f-3175a16af920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50e501f-3b21-4631-811a-7ed12e481217",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7d2bb3-a038-43bd-b411-33cebf47ca05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6287cf25-c774-4d4c-9c99-5dee8af41695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc686145-dd73-4697-a384-a81773cf18fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97786f2-9cc9-40b3-8337-7f9e0bedda72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a598bb-fadd-4344-a845-2a0fea88a9bc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b3986f-a0e1-4e0b-9b72-5eef98832b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "262bdce1-7549-4428-b262-fcd0848943c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4db44cf-7632-45b9-b4d1-09618c66dc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bb8297-8df9-4b2c-9b61-e49abc545eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1777bf4b-e537-4e0a-935f-641c87f27c64",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb39ddb2-a754-4037-bf9b-1e865ae04dd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "145253f3-6d67-4899-ae97-019a6421c40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47713fb1-94d0-4668-8ccb-55c2aed45ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7fffc93-3f6f-4d4b-b59d-be360f7a8e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380e54ad-cfa9-47c5-9974-6ed7e6328813",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f651ac1-4a2c-438d-9122-29e59d0caabc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "639fe01f-6792-4960-a4f5-639db71aa1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922ddeab-b84e-4e56-abe2-f5266f2487bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0d8846-723f-4857-ab7a-5c1e6e78cd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0701577e-13eb-4736-8dc7-ff4b1c1097fb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767f06aa-9abf-4624-8850-5983650162d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "313baf93-4b1e-46a3-b6c3-91abcaa0ba77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4775cc33-477a-4665-a9f7-de13a1957980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8ee3a1-94fa-4d43-902c-ed1fe6a9b610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b92b08f-ce0b-43be-a2be-8685e919845d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c411e283-4ac6-4911-9781-2a091d4d85de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "316a2b14-45ab-4788-bfad-e0f331fd46b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c912d927-bfae-49c5-8bc4-aa1e550a848b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1890ad-53d7-4e47-bddc-66b02b8ecd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3144c3d-700b-4a39-a1b7-7f1b3f81a39b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a6f093-8c17-45a8-b548-37d4b83f4ede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6244f5b0-4fe1-494f-973a-fdff43a4a0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684acce9-c0f9-4e7e-9399-69ce0c8b1041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb392222-7eed-494a-b907-819ddb5495b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4de4b-53c8-429c-84f3-1007874408ef",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d52f0c-1e76-42f3-8156-aa655077bdf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f051b2-e930-4bdf-a365-0e0565f344d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee0e072c-8f4a-47c2-b71b-807681fd1134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405fb67d-ceeb-42c1-a8e6-637522cc148f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e946f8-8469-4841-9676-9c485fe81f4f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2025f08-bc64-43a0-b0b2-c0e131e6f005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186cd0f5-1d5b-4139-9500-5c408417e4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8834c4e-4f14-4f52-8a10-f9fa804b457c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab29a54-e76b-4435-a0ba-7fb05e0dc1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5059109c-67af-4585-bc9b-5e8273e3ea0a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6c0292-7766-45dc-8b19-39690ac627f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e902e2-e81f-48cf-b664-5c38cf6db1fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589726c4-f356-4761-a71a-89d9d630dcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee7f53a-f5d7-46e0-b7e5-9a9231c03e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aed896b-b52b-45d9-bc92-b862b0522adf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bfc7d0-b481-4bd1-9106-e84b410e08e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf750cf-a6a7-4119-8bfd-393a16883dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e606aac7-8eb0-4c87-93cd-def3f5649363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398542da-2ca3-4cce-a596-6dde5285212a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a626b3c-7aee-4f47-8644-073a8e3cebab",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aef7da5-10b6-4152-8ecc-45b024889905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b713819d-702d-4213-a8b2-2d6d6e13a283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a672b4-3272-4cfc-bd72-6871224499ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda0da33-1b20-41a4-b378-2af44d0b1969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cd2063-93ff-40ef-a855-7560f29a1f5a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965f2c0f-e009-48c7-af95-6aac4c246c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622d2996-f912-43f7-a32f-b25297698082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf193c2-679a-4fc0-adc8-32c8969deda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aec0157-53fc-4bfa-ade8-9503a9099cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c41dcf9-930e-409b-884f-6cd4cef54d90",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ec8d76-9207-400b-a809-6eae4fe96469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cca9e7-433f-4bda-8ace-a257db307bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867a3024-b897-4bc9-88c1-dce4abf150a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae6215e-0a1b-48f2-918c-4572f7192bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa526117-976f-4492-8cf0-f812cdeb22e4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6707ef8-f400-4a31-b7f7-e15ce29cf986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39387ac1-6dbe-43ab-bd68-f71d671c4601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce93840-7aaf-4638-b769-9169caed4045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2633121a-1e6c-4db3-9d3a-93412481584f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c37d20f-26b0-4936-995c-28b9415515ac",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f31b24-3e2e-4efc-b0f7-cf033fa783e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e51ecf-8e50-4c35-a327-b74ae0fb27ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5481527c-0ee6-413a-a83f-343a556367d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5902c82a-4149-47d1-8dbf-834cf54c682b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ae3e47-c9ed-4a67-afd6-b01c8f960de1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba362fbc-4f7e-4238-814c-973ebeceb066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bb22ef-c9cb-4ee2-bf15-705e1884fd10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcd2c88-250f-49bd-8921-47353d7b2c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e11554-6855-45e8-9733-ded7154bdcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc703a7b-2355-45df-bac3-56343cb14847",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0b02b5-8249-4c68-abe6-8f55efef0482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605ea4e7-3228-4742-b2e8-42e3b7f7e382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cf618e-6390-49c4-9b61-3d8ac2514c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0e11ab-f539-4748-b2c6-25b24b53bdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2665d01-bfd9-4f28-be67-d773c99207ba",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9604fd-0e4f-44da-b405-57756248219b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9c22f4-e663-4cb0-95a3-81e24b753c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d682cc7-d5f7-4aa1-979d-dc6fd8524ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efe53b3-da6d-4436-94d9-8ef8eee79fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1316ee5f-0a14-4f88-aca4-388d4ce90701",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308625c0-b0fb-4231-aae1-ecf3346aa5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc8f808b-3e9b-46d7-a064-df0435057a0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117961af-4cea-4db0-8338-f5364e978705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1084e9-9563-4dcd-a848-c5efaec8f967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa2555f-c058-4625-bc63-b147cffeedaf",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0054f9-8f75-4297-85a1-de3e5ca7a0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652c39e9-3e25-40d9-913c-65f1e7a4299b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709a1389-7bb0-405e-bd42-0c6dfd156a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ea0ebb-00a8-4d3f-802c-95cd10d23690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8827c220-13ca-40a3-b0e0-b096ace0f3c6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236d0652-56d6-4fbf-bc2b-290285db7a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20fce0a-9e82-4b3d-ba93-d2c2e2dcd02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681a60a0-bd60-43e2-b3d0-f8a6956d4051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eedeb02-128a-445b-b69b-b271290028ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe330d9-670a-4396-8c21-a1d4b3d3309f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8863c5-e812-4c71-84c2-80a623764b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c1d713-3709-4ba8-89f3-5996a8a9af34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a7b1c3-8343-4bc9-9f3f-79e8610f86c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5121465a-244c-4316-8535-5b738dd1c9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2697ee7c-56c6-4ba2-9dcb-5e9718a6309c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c18d795-ac37-4c2c-96ad-bd352faf7fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2472835-b975-4059-aa06-1a3ea6ab9ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f70e3b7-1475-4a3e-a6a3-dcc07a3f8d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c78d278-1df1-46ef-ad4b-7cb9391c1c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a03ccd0-bff3-48d0-b147-6095da24221e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832ba770-719b-4c00-9b8d-d97fba0b2e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78aa073-1d88-46d5-ab4f-e3b9c24632dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dc4810-9ecd-429a-80b8-8c1f1fa353a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fd27e7-0bba-4e5c-8a1a-3b86000fc441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ccbc50-4460-4a50-b6c4-58809bd79d6c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be06639d-f350-456f-840f-a6493d53c4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78833692-df6e-4b3a-a4b4-c052d4bf5173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d0cbe-18ee-4fe1-a3dd-3af7593745aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1018326-d356-4be7-8155-2d29518886b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3389e20f-c409-4661-ab03-39d6305f523d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8551dac-f1da-41c9-b454-b8931ace2933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6a1b48-c3da-445a-b2d3-43c2713453c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4962c3-2c60-4c25-b957-9300dc08a3ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c4d399-90b9-4255-bd11-082716040e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4505dc77-e687-491a-b168-5d61c83fe250",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef816ecd-197c-47eb-b5ad-1186c19ea251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a1cbe7-21e4-4014-a470-675c35f8292d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c07d2a9-621d-4fc8-a42a-6794659a0e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e1c8a1-07a8-44b2-86e7-ca36d29c3372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2983112-504d-44c8-9085-9d1ffb6f914e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8befae82-b1af-457e-b638-c66e91173b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23fbf14f-2290-4037-8112-2f1a319ee4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c222cb5f-86e5-43f2-b6a2-bb1f5a3ac597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad91304-e18a-45c8-908f-695e20f112dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80533be4-25f7-4ff9-bf09-cfed86b279a8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a08320-4ece-4a5a-9130-e58abd1bad6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071b2d44-e02e-4eb8-ae46-8bf4140e548f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15802621-d3b8-4375-9bad-c6f6d5c4a06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c783e146-957c-4d97-8f54-26e2d509dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c584b9-6af1-4fe5-bc58-a0789c1271f8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb1e2d0-76b9-47ed-ad40-fa195b43190a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3590f32-2a48-4720-a14c-ed8eabbc675f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e917b0a-7e40-43df-8a80-a3d261e37f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d06206-89ad-42ff-b030-01e5cdf1e67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243d9363-b522-4115-ae9c-42e46fbd6d79",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd04abf-47c1-4b1c-ac3c-87582a531bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf47fc5-efb3-4918-b6db-1dee4389ad5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdfa2ec-0777-491a-8373-63031e53d89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4f847b-c11a-491e-8970-571609cae8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8841d63e-bb2e-4ee5-bc14-6390c0dae896",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3576ae01-e8ed-4201-92f7-ae08896c1c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c13396-1db2-47d6-8f56-25175f064549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5608f5f1-1031-4f7e-9a78-c0b7ec40b796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91db8da4-448a-46ac-b552-c342a8ed247f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f045d233-48a8-4a68-a12e-ed03a6c70e1d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f370bca-c304-4c4c-a3a3-a145d9d7ba99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b7f3d2-25a0-4763-9be8-543370aca1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e26a32-4c2b-4c78-b834-c43fcd97e4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bfd0e1-65da-4079-8d3d-1e96224e11a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd064c1-edd3-48cc-99bc-2005189b3254",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a326a99d-c771-4cec-82cd-a20fe2080319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711a9d20-3bfd-4030-9860-e6e07dfa8493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d248e658-3799-46a1-8bbb-6d1479962cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082612be-e6d6-455f-9ff6-3f36e4f87219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4513dc11-e044-4002-afbc-59d15cc5ddcc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cd8d31-f963-4c9c-8925-a3b55b64dccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157d6a9a-f3e3-489d-8c29-034c0738139f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2ee580-56fd-4d2e-8756-89780188d585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc1858e-a41b-46e1-93e0-fce008b0f3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5fcaeb-faf2-4f8a-9ba4-2ceb003b6d33",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ddd4cb-9a49-4f5c-a0e9-2ff7cc50e69b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84719e35-09df-4b00-af0a-9d0fd58821d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f6c366-102f-4a44-a457-c5a566f4adbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad1045f-8e07-4d53-9ac3-8264e157ecd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24564d62-c862-462a-a515-bdf0e000d823",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d97258-816a-407a-a4e2-6f6602ffdcc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c0dd8b8-c95e-427f-99a2-2e5c3073f250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9023773a-d740-41e7-b240-d12bd9e7981c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2d7ac0-6e72-4fee-8724-7ecff25e885c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1995fa-1ca2-4246-82b3-d79392653d54",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a40046-35cd-4c8f-90da-34d9323377f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "233ca5a1-6421-4944-adfd-45ee6e999b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a52bda-811f-494f-8970-04aaf73ce7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71abcba-d945-4557-9345-6e5c6d35c296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2630f4e-1cc5-40fe-856f-8873664e43eb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1645dac-6385-4ae4-bd09-00ec13a397e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a427a3c8-43b9-410d-bc55-9a22d62934c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6154b332-be26-48d6-bed1-7885ed82cd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8ae77b-7d81-46ea-9d4f-b65c88ec9218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975ca6d1-17c9-4132-a6a5-53b2d36cd2db",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b70ac2-7bb1-46b3-ab85-4ef6fd6326a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43baa38-cc61-4519-84d8-1ba14e5bea36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70332b78-c800-48bf-9399-c88b770b7021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3a6684-6821-4848-af46-705613054946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d668e4-b129-4541-b7b7-3493a9924ea7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e5eb24-e3fe-40fd-8843-96cc26448a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969b28e2-0ec1-4c8b-b3cf-a7af6d07a010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20345720-6e13-4e27-8821-8f7f670be3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008581ba-fde7-451b-8610-108d6712a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ccc8ec-05eb-457d-80f9-589c2f8711f8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f022129a-5c0e-4b09-a6d6-a209cb4f6f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c531f2a2-efe5-45aa-8efa-676723fdf7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f278505-3149-411e-82ba-59990b1d3c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43750bc-f4bd-4836-8f97-0eea064023d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123b7e25-6c96-4837-9def-8a875317f1df",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46af3492-4561-4818-ab20-a9dd4a7e1f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d776af54-e080-4c8b-aabe-b0a9f2c4d4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2a4288-843d-4de4-a45c-91b3553d3080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51c7709-dc1b-4362-9c53-02a96c13194b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9515bc1e-313b-472c-a3db-a752372ff436",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700109e9-ad77-41d3-8a00-e0cc8a3224a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c526b42-4043-4525-8099-aa21fa3fa422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bb8ffe-cd53-44c3-a593-c013bdcee635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b78ce4-1734-4773-aaec-fa9f41df62c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd1c8bc-afd6-4c4e-87d4-f91eb102e5da",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e74afc-0521-4ac6-ada8-2ddd6f7e6560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb55df1-702a-4641-92a8-7e0ed04f6134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126249c0-8814-45be-b6c2-c02a4f334d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8662f2d8-574a-4dfd-b499-4baaa7c2eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33760412-3c1c-4b63-bd8b-40192a2cb1c7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e914a40d-bee9-4074-8036-3ccd9fb5d480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c6b9f0-ecfd-4b27-b385-ec3d51bb923a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5af8a79-1738-4be8-a09f-cb47e7ce97f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa192247-3ee3-4a30-9532-ddfde58e5f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ecd362-912d-4665-a577-a9035d2187e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff38879-f783-433f-ae4e-d43ffffeb0ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a331b0a5-2a40-4903-8e8b-ae6acb26098f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900e799a-bd41-4956-be89-436b561f7aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7119e25-b066-4f95-85c0-9d1445bddfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6165c32d-79d7-4151-b360-50e39ab900ad",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7288029-a24a-499f-befb-34262e277928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "671a688c-148a-4018-96f3-5bf5f01e7f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d48e91-2348-4462-8b88-c0deab6711cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968c528f-75d8-4b8f-a8a2-9ec3b28c0010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447663dc-41ec-4b80-acdb-7c17394f9874",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf029c51-106e-4270-be2d-f9695173b7b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23f4c590-c3d1-4963-be69-bc3f6d9de498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d59add1-024e-435d-aad0-13f46b267918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871f2c39-c9a1-493f-badc-61fe69c36be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a99d74-c5aa-49f5-86f7-e1d3711f46ca",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192cefa0-b51f-4b43-9ca3-08507a5c71b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ad2891-ec9d-4247-87b8-858829f79d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9974345e-099b-4d83-a611-e7b2c40b0ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139a2224-225b-45ac-9865-e673b6ee3c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b9e31c-d5f9-4e44-b06a-b8f97ef4abfb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7709c040-0640-42c3-92a9-da52f502ab8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b73fe67-afc6-4f63-85b0-c86f203382a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bdf998-4475-4746-bc46-7e0da6e01064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c0b038-c08f-4e13-b816-f9e98f541f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d7b3eb-21ce-485b-a2c8-b7c6a03be3af",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63291332-8b3a-45a4-b15e-a945a865a114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a94e79-f6e8-4ac6-97ad-8c655ac5ea73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d019610e-c3a6-4a54-8bee-45584ec8042a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f375be9b-d221-4cbc-920c-42103f8c339a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cd2ac9-8372-4968-9c16-66e0735dda91",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b865b3-fc59-4171-8325-dc722a15a435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "573a9798-628d-471e-86ba-cc0f9a7304c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88b25a2-c079-4cd9-8aab-98a6baf6990d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a6e6d8-9d49-4ca9-8f6e-edf163b1644b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0904a4f-90ff-497b-9ffc-c6278f148ac8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269c919a-2ab4-42f0-bccb-9b6cb153b023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9edf3917-41cc-4b1f-9e20-36c1ac7fa85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f925a4-1765-4e38-a417-f7bbe73f2d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5acedc5-8af1-4f97-a5ff-caaef7bc7f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7d9867-f56c-4352-b2d0-bc110ced3774",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35a0c2f-5677-4885-8fe0-d7f185ee3e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea75bef-5b0a-48b9-8d75-3abc8446323a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50472ec5-6bf2-49f2-ba7f-72a633cb9d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d73fa53-77a5-4465-b396-81f91189b40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe478fe-d2ce-47a7-92e5-b5befec19f3e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce58e230-248a-4bea-b4b0-6ab5006dada5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed358480-3dd2-46cb-b27b-9166414995b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e0f742-6c4f-46ae-b2c1-054529e68388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9e5d28-0155-41f3-a05b-94bb43018dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7eedaa-7ac1-45da-9e84-333ec1de2879",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b34796-7905-4d2e-8ba9-967178431025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e2744f-e727-4391-8021-81c191e42030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e92d635-9374-41d3-8530-cf305ed3a005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393bf2d7-7b6a-4fa2-aae7-876f0265b39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1833fa7c-02b9-4d77-a1cb-7417f1067148",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aa3003-cfd1-4a04-8b21-667706030dd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62e7e79-5dc3-489f-b372-485041635326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c90174-5e11-4699-9d3e-113720f60a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c161538-f1dd-4e16-ad14-a5582d79cbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96f66e0-74a4-4631-a866-401bd78e58ce",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed470a9-aeae-47a1-aa3f-846d306558e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a3bed9-d407-457c-8510-5df535783d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8735f3b7-faee-4819-be06-93dcc2bcbce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cde069d-690e-44e1-99c3-6b60a563f6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5f1317-7d4d-49f0-9591-5ae4e1531b51",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d438e8-8f7b-4d9d-a873-3ed8e2c74d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53762fb3-77cd-4a66-9290-cb062dc031ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412dcda3-bdc0-4d99-8886-bdded1db94ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4cb106-1add-43fd-9bca-38b5a5130040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d6815c-39a9-4ba7-9eb0-318e56ddac84",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706a56ac-1d52-473c-b455-bc291ac40c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b84822f-632c-4303-86c2-fc021519f55f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfb6b29-29fa-4f77-b9a4-082a39088725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57184b89-6f71-481e-ae84-2b0de5467e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f1c33e-8bce-467c-9833-353c9fa2fd11",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2724676c-0b1d-40c5-b799-6bf14b3f3d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2fa192-aed0-46bf-90f6-1ca5a341da32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1979bf-c7db-4c8c-b28e-75c00c79aeb6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118b6dc9-1760-430e-a478-eeac5968cba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556e351d-3a08-4072-b608-324fd9a2f7b3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c5f357-d780-499f-8799-9e0e4f248e85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1879469a-7de5-4739-a268-1b987e4caee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb89d41-db95-4077-b3a7-7f85b51234cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d46bb9-17a2-4be3-9eb7-d0c3b63486f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22229293-d42b-44d7-bae6-092f1a8aa8e7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6e48f0-ac9e-4aa7-b4f9-a3b19015ba0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779a22c9-2b91-4290-8a23-71e6c90faa6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8292cc51-7784-4f2c-b348-62bd696f9a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb3eb62-9bf3-4436-8b02-63b86f7b9ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c7d347-7e56-4827-bff4-75eb762aadea",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc3d988-fb24-4755-bf21-2f439087f69a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2f85c2-6d8a-4403-98cf-7639b7bf4295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dee9721-7910-4a93-886f-131c53a1087d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573333ba-8711-45a0-b699-2484125d843a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7fdeda-3436-4b4e-923c-7e2e3957f8e9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f9b4a9-af21-4168-9c32-da24e28d42f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c2a7b7-b4fa-4cde-8996-8749f9594d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ae6eb7-a510-486c-818f-2604461cc794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755e2755-7516-44a0-a1bc-13adcb62fb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "215ea4e1-3a03-4e4a-b665-0da6a2c1e104",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761e18ba-cd6b-4f05-ab56-a712e511f425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1887fc90-d947-49a3-a622-138a8c4b180b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8abfee6-fb9c-49af-b2b2-626f005ff4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb710e22-76d6-4781-9f66-decef3875a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fa615c-b4be-486e-9b1c-7d0728662fa2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ab8a84-f48e-40d8-95bf-6d8db3e5644e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b2ace4b-7b24-451f-b5d5-a0b2698d4da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f096520d-790e-4312-a7b2-9594db337dee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfd14d3-57b8-46bd-926d-471fc6d8f7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc859bf4-a71e-4ad8-bd04-32c5cd350de9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2502303a-ef07-4321-a9db-622cb09ac5c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db492003-ec2c-4047-a19c-5fc93ac36017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d3a9a5-0211-4002-9993-ca76f909131b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ee39ee-111f-4103-9580-fe0ad3afd463"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8460b65-96d5-4964-ba84-c8d87cb328f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "affac2c0-0b55-42a9-838a-bab5312f6209"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0445a3c-d370-4a55-a299-8b26d7f6e587",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7542095-212e-4260-b2a5-701f98cdbd24"
                    }
                  }
                ]
              },
              {
                "id": "e9da3210-e423-4c89-860f-3bc0013a58dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dfed8ad-70a8-454a-bd71-fcdf8c80ff77",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b90746e-6dcc-4269-95cf-23611795e6ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aba71f32-58b6-419e-a07b-dc83df8685dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed30b81-f78f-4d71-a0a2-0f1f57ffec9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "003d85d8-b992-482a-8e62-98b229f7fd35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0caa8207-f8f5-4fe8-bd63-cdccfe4ffae1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2011c21-31ca-4142-aa86-e7b24ba25959"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29885eed-e4fe-4866-b395-5b44b50b60f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59eaf8d7-6ab7-4ae5-a937-819da9354e63"
                    }
                  }
                ]
              },
              {
                "id": "f7527437-bdcc-4ec1-93ec-4ec0ce66e9a2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5b337015-32c6-40f4-8f61-3f1ae7165b9d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b66c81e-4dae-4026-9187-46d87c0ed40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "16f81e69-5e36-4498-8640-6fd825cfb220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9264e57-9f8d-45df-9396-4b7695b0d745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ec66cb-3b48-46ad-a596-18e321946dd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5105deb5-dafd-4ef5-b25e-42a9f02398a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e27e38df-50a7-4ea8-a9d5-fcedd4fc74a9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad936374-c97c-426d-afa9-d00f2dd0c86b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "389245ac-f036-4779-8ebf-a3f9256589a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4482d9a8-4312-41a1-9060-70ba70ffec23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8e133f0-befd-4cbb-8491-a6b7049261e3"
                    }
                  }
                ]
              },
              {
                "id": "ecc166ed-eb4a-4c8a-90c1-f4d5d1c573c4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf1d39dd-e4bd-4d37-bc25-43e8e5aa4bd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2d02494-e795-46cf-a3cf-0172807c0779"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1bf8b74-2278-4273-ba58-03978e43520d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8670d2b-e58c-4a89-b91d-63ac99d39351"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4723d05a-5bd7-4caf-adfc-903010a5a42c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7e2adb72-7c21-4769-a435-a5d639bd0c0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65b94cd8-fe44-4516-a05b-379bb036c484",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "216db7a1-0085-4582-bf51-88b950508e06"
            }
          }
        ]
      },
      {
        "id": "ef35903a-1f8c-4dae-abc3-9be7292897e3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f0ec84cf-b263-4976-ae1f-816c1a08301c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3f8989d-5023-49dd-a552-a7b1977d7a0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "323b4690-5528-48fb-bf8e-a4d8772ed0ce",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d304c813-b140-4947-bce4-aa4e18d58904",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d3938a31-6851-4493-bba2-2eeef9dc3cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fd1787-385b-47d2-b0fe-b554722385ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dd42384-36c5-4e88-86aa-087dbfa93369"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4628a03f-80d7-40c0-bc58-e6c8c14067d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54c1b63e-2bfa-4377-8163-f9eaa2073ae5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b4f2e3e-f7c7-4f9a-99c7-5621ddbed04a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bc7b29d-f446-46fe-bb9a-4c5c29a0b3a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18f6c140-0fcf-4ceb-be67-77c16307958b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "da51253c-7329-41d0-b55b-80798db40021"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca89a35f-372a-4188-a458-e800571f28ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49c4e3f2-4624-454f-bea6-eb9d6eae8b6f"
            }
          }
        ]
      },
      {
        "id": "f76daff6-2be2-419f-b62a-00c95badc54b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a7b3f111-72a5-4b14-9c54-a321a0193adc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ddec4bd-6056-4d7a-a714-ac559cea7efa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1df9e529-5fcb-444b-863c-13241fffdec9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79bc465-7d2d-4fb9-8137-d474d73b3ca4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bb795ac-b134-472d-a042-8973362a8758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b1af07-4657-41a4-8f4f-77454a997048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2edfbfc7-22e9-4761-994a-83e73af88009"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f328538-4f4c-4da5-a759-580726a23735",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "369b5763-2fc3-4ec3-a91f-7737e0b595b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d6e4a54-e7a3-45bc-bfb0-1712f1ee513d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df37749a-8923-40c1-a3f5-5a1874c194ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71cb4201-6ec3-49a2-bfbc-457631cb8ee3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42284508-f89d-40da-a7a7-ef3f725b6d85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22e0aaec-aefc-484f-9641-fd4cea4e3971",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ef871d7-32cd-496f-b1c4-e70b921a24ac"
            }
          }
        ]
      },
      {
        "id": "67b2226e-6483-46bb-9351-08834277ce27",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f2326149-a562-4ee3-b3e3-7e42ca8071b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a5a6c21-fe83-423d-afd8-78d01165b9d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b799c5e7-04e0-49dd-b9be-8e6b970b5f5e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7700ddf-52ff-4807-8a9e-923158162e36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ecc54cf-88e9-4565-bad4-84c36cd7f4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55b15ac-f87c-4ada-8e19-b9c8bf3fc1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "787bf22c-f7bc-43a0-99d3-c2b42513da7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "156f7bb1-9592-4e39-840a-34dd769d655b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67af27c8-4a0c-4c16-96e4-26ebc190c525"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4cf1f57-be30-4be8-b203-078d337950d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d6ac2c-c355-4119-997c-f840c867f960"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08d3b1e6-8963-4e0f-9d9e-7c603c8a25da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4114fd7f-2181-4410-a862-e9bd4c3ba273"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1633846c-73bc-4428-8cb6-cd06d9305603",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ea46810-8233-4131-9713-5a09f5e9ebce"
            }
          }
        ]
      },
      {
        "id": "76f16b44-6a3b-4138-b632-2a11f9e6b41e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5234987-e91b-4a1d-9182-98ab395f0120",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba3a9807-3f58-410d-a062-91835447f290",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e46cfc46-3ddc-4983-a724-b9ae57c42142",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56e3cf5c-5e12-4dc6-b936-caeed154e2bd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95f56bb0-becd-40e0-bba2-d77599e44891",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 124.63380281690146,
      "responseMin": 10,
      "responseMax": 1733,
      "responseSd": 323.5343327858309,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694737985757,
      "completed": 1694738032864
    },
    "executions": [
      {
        "id": "5984bba8-6e74-4056-9bf0-f137758e293f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2f464273-ec31-438f-9956-88583613e2ea",
          "httpRequestId": "b0b61955-865e-4098-854a-c4705c939cc8"
        },
        "item": {
          "id": "5984bba8-6e74-4056-9bf0-f137758e293f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e28e69c0-7ded-40eb-b910-0f79990d5193",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "23170635-4552-4f52-a655-5a4a587901e5",
        "cursor": {
          "ref": "e9ac8350-9e98-4884-876b-31e14f92dce9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0d217da6-5d4c-4150-9961-a8dd576d74b7"
        },
        "item": {
          "id": "23170635-4552-4f52-a655-5a4a587901e5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "387d489c-639d-43be-b9f1-473bc409ff06",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "9d3a135a-d31e-47ee-90f0-ee7f59861d4a",
        "cursor": {
          "ref": "0ecb9dd9-0043-45fa-bdc2-64442a99923f",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b7a099e9-35d9-42af-93d5-adb54e317004"
        },
        "item": {
          "id": "9d3a135a-d31e-47ee-90f0-ee7f59861d4a",
          "name": "did_json"
        },
        "response": {
          "id": "97d5042f-38d0-4d01-abd6-b51c4dad5a0b",
          "status": "OK",
          "code": 200,
          "responseTime": 229,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffee3054-85c2-47fb-8b76-20abfceb51ee",
        "cursor": {
          "ref": "8a32fce0-8c0f-4d01-b937-d92540c5eafd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e0565d83-28b6-4db8-8e9c-e7794818f509"
        },
        "item": {
          "id": "ffee3054-85c2-47fb-8b76-20abfceb51ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f728cf0-152c-432c-80b5-673d6242129e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffee3054-85c2-47fb-8b76-20abfceb51ee",
        "cursor": {
          "ref": "8a32fce0-8c0f-4d01-b937-d92540c5eafd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e0565d83-28b6-4db8-8e9c-e7794818f509"
        },
        "item": {
          "id": "ffee3054-85c2-47fb-8b76-20abfceb51ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "9f728cf0-152c-432c-80b5-673d6242129e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1247d096-12fd-4b8e-b7a1-070794e08529",
        "cursor": {
          "ref": "ad7257ca-224f-4749-8578-93a0f5c92e15",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4dd2f0e7-eab5-44aa-a329-9b76d1223da0"
        },
        "item": {
          "id": "1247d096-12fd-4b8e-b7a1-070794e08529",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "990d3a34-e558-4479-9bc6-ef1ca2742645",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df42fb2-67e4-43b3-a121-9b6bd97c33ba",
        "cursor": {
          "ref": "562d4013-a6bb-47a1-98d5-6a0c0092f47f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5ac0be29-1580-48b4-82ad-5bf0f03682a3"
        },
        "item": {
          "id": "4df42fb2-67e4-43b3-a121-9b6bd97c33ba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "65241b14-c6e0-4ddb-92c4-9fd34048e9dd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1913a5ef-0c2b-4060-8c40-7a5aeefd3fec",
        "cursor": {
          "ref": "5fc045cb-309a-419f-9ec0-37ab38da80a4",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "22bf65f5-08b3-4659-8b52-5cfae0fa6207"
        },
        "item": {
          "id": "1913a5ef-0c2b-4060-8c40-7a5aeefd3fec",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a2d19127-ae50-4a99-9765-ce3a566ea557",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9079a39b-f01b-4729-ac9d-3af5ff351e8f",
        "cursor": {
          "ref": "0db954d5-92e7-4f06-a430-7d9fbcc40f71",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dac939ef-df93-4da1-8378-c2cd12c1e49b"
        },
        "item": {
          "id": "9079a39b-f01b-4729-ac9d-3af5ff351e8f",
          "name": "identifiers"
        },
        "response": {
          "id": "68b567b6-3df6-4e43-9d9b-52fba8c83170",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f73947-2e67-41f0-870f-090ded278387",
        "cursor": {
          "ref": "58daf130-f112-4cf4-9c92-e6ddc7eafabb",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1d47864a-1abd-451f-b07a-c36da6e2b32e"
        },
        "item": {
          "id": "97f73947-2e67-41f0-870f-090ded278387",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "912e1c95-bd4b-4fa5-8d4f-f71995d345ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1afe08-62dd-4638-8cc8-498485a99be6",
        "cursor": {
          "ref": "4bc79215-a82c-434f-ad8d-e6610c7df9b7",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b82a87db-ff66-438c-bfc7-97c110fd78d5"
        },
        "item": {
          "id": "2c1afe08-62dd-4638-8cc8-498485a99be6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2e021ef2-7ad5-42f4-b9f0-47e93c433fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c5aae8-63bb-4d16-af43-e748f1e47d35",
        "cursor": {
          "ref": "f56997c8-ad5d-4069-9ad4-3991f50721bb",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dc7c6a7c-e6e1-4d87-81b8-e86f0620bea6"
        },
        "item": {
          "id": "32c5aae8-63bb-4d16-af43-e748f1e47d35",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6f213975-01cb-45a7-8f11-1a0a7db53ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9387fca1-beb1-447b-bc86-5657c81b6c5d",
        "cursor": {
          "ref": "563af900-7a0f-44f5-89fd-24ea08acabbe",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ae1a571e-9bcc-47e6-bb20-7aa0d2b2aa18"
        },
        "item": {
          "id": "9387fca1-beb1-447b-bc86-5657c81b6c5d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7ee043c2-49a8-48d3-8b11-1cf331b98d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9eea94-75b9-4c87-b2d4-43c27c80f533",
        "cursor": {
          "ref": "6f23a0ce-319f-40e2-9d2e-636bcc2845b1",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "35cbb16a-487c-4b46-a592-f661764f33e6"
        },
        "item": {
          "id": "ef9eea94-75b9-4c87-b2d4-43c27c80f533",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a84cee83-0b0d-409c-895a-121f2f418943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b37fd4d-840d-4d42-a3ad-e5619fed174a",
        "cursor": {
          "ref": "13197646-d1ed-483e-822a-351b3eef7162",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8f089789-d189-4ba4-93f0-009e3bb98c18"
        },
        "item": {
          "id": "2b37fd4d-840d-4d42-a3ad-e5619fed174a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fee9d7c4-45ff-40a3-a4ba-c5d78c62d07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce98b2c-a951-4b43-9ccb-1d0bb7c45afc",
        "cursor": {
          "ref": "f9c29f2b-4554-4c9b-8916-e6ca913d7e80",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4dbfb452-7c70-41f2-a1e2-306b61213fe2"
        },
        "item": {
          "id": "dce98b2c-a951-4b43-9ccb-1d0bb7c45afc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "191ebd8b-6501-4a94-879f-db2ea8f89a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acb90a5-faf8-459c-92df-b8fa579f3cea",
        "cursor": {
          "ref": "a0d7e25d-68c1-4dea-8765-99d51329390b",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b1880b06-9e28-41b2-857b-30480fb4751d"
        },
        "item": {
          "id": "0acb90a5-faf8-459c-92df-b8fa579f3cea",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d0a04c30-ea13-47b2-953a-1deb82b24ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543c3115-5864-4ca2-ad27-b60ab87e5f05",
        "cursor": {
          "ref": "a5d2b470-37b2-4788-900b-757c2a6f8f95",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ecbab8cf-81ae-42b3-b5de-b0b613845898"
        },
        "item": {
          "id": "543c3115-5864-4ca2-ad27-b60ab87e5f05",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "80992b80-810c-4f75-a670-256393012e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d46b75-32f2-462f-aa1b-0e5651b0c76b",
        "cursor": {
          "ref": "3ea194c3-218f-4304-80d1-129b225791a1",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4a98774c-4f9a-4f86-a1c4-408e61ef2182"
        },
        "item": {
          "id": "71d46b75-32f2-462f-aa1b-0e5651b0c76b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e6ab4270-f2b7-4ca8-9381-0d89f9a07eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27068886-fd3d-4d73-9f7b-14abaca1f332",
        "cursor": {
          "ref": "718225a5-0209-4bbb-8ef8-a6d8c5996d32",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dd373d83-0606-4916-b5f5-24dfb728e6ef"
        },
        "item": {
          "id": "27068886-fd3d-4d73-9f7b-14abaca1f332",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "80480903-7e17-49da-8326-801b04ed8ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9960f71b-fdbf-4c3f-9f60-a40557f899de",
        "cursor": {
          "ref": "17318c9d-a99d-4d1a-aa1e-1c6408ca211f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "174d81b9-8a60-493f-8a16-61a25e62e6ae"
        },
        "item": {
          "id": "9960f71b-fdbf-4c3f-9f60-a40557f899de",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "16ae03ac-03e5-43f1-97fc-231581d505e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502d706d-c16d-4f3e-a2b1-46f3932f257a",
        "cursor": {
          "ref": "58070d27-1c72-44b2-be3b-7773ac5c2f62",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30fe701a-52d7-47b6-8de6-fdd0c34827a7"
        },
        "item": {
          "id": "502d706d-c16d-4f3e-a2b1-46f3932f257a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0ddec3d1-21bf-4213-b62c-c9ade398a826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4b993a-cffc-4b86-87ed-89af1129ce06",
        "cursor": {
          "ref": "b51d5919-4cfe-472c-8010-2a8e45fd2c1e",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c4842c17-cfaa-4562-9b89-822a404ef7dc"
        },
        "item": {
          "id": "8b4b993a-cffc-4b86-87ed-89af1129ce06",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "575de676-5dce-4a7a-845f-61f763a1e213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca436f9-aed5-4d7b-9018-ccd28b41f059",
        "cursor": {
          "ref": "75926dfc-0185-4258-afbf-b0ec8ab41781",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5462241e-06ff-4342-92aa-e8e6d119616f"
        },
        "item": {
          "id": "7ca436f9-aed5-4d7b-9018-ccd28b41f059",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "87ba9771-a61c-461a-9b4d-8ac6201e6f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8483b806-a73b-4a5a-b887-f90fc0f4ce75",
        "cursor": {
          "ref": "f5a12491-55e7-4ed3-8d17-ff404b9ca185",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e3d08233-6850-441a-b12b-9b83950ffdf7"
        },
        "item": {
          "id": "8483b806-a73b-4a5a-b887-f90fc0f4ce75",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b943a873-d269-47eb-9859-160cb10a022f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39ad854-e77a-4daf-881b-3a5b4459ff61",
        "cursor": {
          "ref": "db9d05e6-fe8f-48b5-92ac-f53f17145f61",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "472a42f3-17de-471a-9b15-09f85b59f804"
        },
        "item": {
          "id": "f39ad854-e77a-4daf-881b-3a5b4459ff61",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1812ac37-6fd4-4fe4-939f-6f5c0ba0af12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30993266-09e0-4604-918b-3896515e86e5",
        "cursor": {
          "ref": "b4aacecd-6520-4e6e-9fdb-6baae33b6821",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "45c0b9bd-abfc-4ef2-8382-059b9efec1a0"
        },
        "item": {
          "id": "30993266-09e0-4604-918b-3896515e86e5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8c4c7d3f-43c0-49ac-b804-9a03ad7c097d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e118046-0ed3-4358-b51d-451211e4df2d",
        "cursor": {
          "ref": "5913207c-f641-434a-8a5e-f463d9e7dc08",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8dda1c6e-5dd8-4348-88b8-41cce88d5a86"
        },
        "item": {
          "id": "1e118046-0ed3-4358-b51d-451211e4df2d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1d636075-409c-44b2-b351-7881311ed1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f309aee-7f1e-4ef6-908a-afa90b3441e0",
        "cursor": {
          "ref": "d34f76d1-644b-43e3-a58b-77f5488d3ec0",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8076f14f-bde0-45c3-9b95-3c346c0e605b"
        },
        "item": {
          "id": "5f309aee-7f1e-4ef6-908a-afa90b3441e0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "263b6389-c57e-466a-adb6-902108dde742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0128962d-e0c3-431d-ba64-61aefc184c9a",
        "cursor": {
          "ref": "3e31dc37-60c2-4860-8817-150fab1cfbac",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0bd24185-c41d-4b58-b93e-90c7ff474115"
        },
        "item": {
          "id": "0128962d-e0c3-431d-ba64-61aefc184c9a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5753aca7-4502-48e5-b03c-bc3391d1e7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd7069e-78ef-4de9-b5d7-92248ad61361",
        "cursor": {
          "ref": "3394d139-564f-4674-bab8-ac29054395b8",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c3aa665e-f52d-43aa-8038-a9329e08a2cf"
        },
        "item": {
          "id": "8fd7069e-78ef-4de9-b5d7-92248ad61361",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7635e24d-a026-497f-a5b4-8b9e607f8584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b434fc-40c4-4dfe-a4f0-1b3dc54421b3",
        "cursor": {
          "ref": "a85e9d32-20c2-4518-92fa-3bb012cbab9f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0715c0c3-e932-407f-957c-6ac618578002"
        },
        "item": {
          "id": "25b434fc-40c4-4dfe-a4f0-1b3dc54421b3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c75c6a1b-b6c0-479d-b515-0046f27ef3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316ab2d0-fff5-4f5b-9425-e3871434c3c9",
        "cursor": {
          "ref": "9fceeb5b-0d9d-431b-8c87-2e243a2bb6b7",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6277be65-6a84-4f5d-b02b-b5c7e8ea6c17"
        },
        "item": {
          "id": "316ab2d0-fff5-4f5b-9425-e3871434c3c9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "063becf7-c36b-4ed9-b5e3-5f5ed2279aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be2918d-1f3b-4267-a435-248aade566e4",
        "cursor": {
          "ref": "65a195aa-f48e-453e-a5de-75aba7c502a9",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2331a9ba-4cbd-4df4-b128-b2061101a2ae"
        },
        "item": {
          "id": "5be2918d-1f3b-4267-a435-248aade566e4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d10d75f-8863-4ef3-a3dc-f88d50ad4a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351b9e1e-e2e6-47c9-954e-d9d42f3d59a2",
        "cursor": {
          "ref": "1a7e908f-1274-48b7-861e-c6836534696d",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7f61f0cc-c2a6-46de-9791-ddaf8baf63a5"
        },
        "item": {
          "id": "351b9e1e-e2e6-47c9-954e-d9d42f3d59a2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8a31ace3-8663-4bb8-b199-f834784ce0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766e86cf-51f1-4d8d-bdfb-79c3c2a98e04",
        "cursor": {
          "ref": "76f8f3cd-5ee6-403f-be32-986962a7e2d9",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b4c71f43-4578-457c-8825-3ce42bd05017"
        },
        "item": {
          "id": "766e86cf-51f1-4d8d-bdfb-79c3c2a98e04",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "feef389d-a011-4b9f-ad23-58d8c1a418d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a01c06-6de3-4722-b7d4-cc009be94820",
        "cursor": {
          "ref": "7b22c82f-8196-4aa1-9b2c-7d17b8831a40",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b32a2e05-c9f2-4b2b-9367-7bbb1c178322"
        },
        "item": {
          "id": "e2a01c06-6de3-4722-b7d4-cc009be94820",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0006a4e3-ae06-4595-ae1a-26a6be4afd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c358591-e96f-43a6-8ab0-207a34d0fdc9",
        "cursor": {
          "ref": "e2e4a953-a754-4f40-b135-18f956717596",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c7de6dbf-6935-49d3-a790-97db7406c2d5"
        },
        "item": {
          "id": "6c358591-e96f-43a6-8ab0-207a34d0fdc9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ffa868d0-8756-4941-83c3-c3d1be96e9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a20b72-6928-4784-bb86-9cf24402fbae",
        "cursor": {
          "ref": "1ff8df87-a690-4fd6-83d8-ae7aba677825",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cea160c4-0d29-4dba-956e-a39db7760471"
        },
        "item": {
          "id": "11a20b72-6928-4784-bb86-9cf24402fbae",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6842dccf-255a-4aeb-9881-dd9c1404d374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2ccef5-4010-4bb3-adde-3cc48ea14397",
        "cursor": {
          "ref": "ed4415e8-c8e9-43ba-9bc0-dc4eaac3ced4",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9b27560e-7afb-4414-b2e1-366b0a6c4704"
        },
        "item": {
          "id": "cd2ccef5-4010-4bb3-adde-3cc48ea14397",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a86318b4-aafb-474c-b1ee-b5872c99c38f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e6fd5f3a-cf47-4009-b828-66db6d7b7267",
        "cursor": {
          "ref": "f223b3f5-67b1-4334-8adc-8e81154db365",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "73476896-9e83-4984-9f73-2e56df5a23c7"
        },
        "item": {
          "id": "e6fd5f3a-cf47-4009-b828-66db6d7b7267",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "898bd2d7-520c-41ba-ad90-8c0fb7d526c7",
          "status": "Created",
          "code": 201,
          "responseTime": 1733,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ac98b47c-5d03-46cd-8b03-e302c0eb86dc",
        "cursor": {
          "ref": "9a8228d3-f0b2-4370-8aa2-c2f87dfe7af7",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5124f314-690c-44e7-8c05-ce79354ede80"
        },
        "item": {
          "id": "ac98b47c-5d03-46cd-8b03-e302c0eb86dc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4aaf9cfb-ee2e-42b4-a2b6-a41cd02ef69b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "497eda42-1703-43ad-b799-f7091e7e55f7",
        "cursor": {
          "ref": "f540da14-6273-4856-8d60-3f623ddf6191",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8122ce8a-88f3-401d-ab2a-24bb08cb7a05"
        },
        "item": {
          "id": "497eda42-1703-43ad-b799-f7091e7e55f7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "14d31067-7827-463c-b363-f9257107cb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3373b77-5f39-4406-990e-3a8984d5d67f",
        "cursor": {
          "ref": "760b2c4c-65a6-48ab-a84a-38233e6df58c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ff93e2ef-d3ad-4226-9bbc-4fa2bb4ab57e"
        },
        "item": {
          "id": "b3373b77-5f39-4406-990e-3a8984d5d67f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b726731-9d29-4f9b-bc32-caee84c67cdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e596a30a-7e62-45d5-931c-0749b8aca159",
        "cursor": {
          "ref": "b97ba931-a367-4b23-8439-50414a6891f9",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0aaa39bb-971b-4a17-9ff4-608fc321b9b1"
        },
        "item": {
          "id": "e596a30a-7e62-45d5-931c-0749b8aca159",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "875f28fa-2a81-40a6-982f-9d5a7e8a15e4",
          "status": "Created",
          "code": 201,
          "responseTime": 1591,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f3f92b46-2d55-4727-810f-53c5046c6acd",
        "cursor": {
          "ref": "739d6f70-79e9-4c1e-afc8-0dbab53d0102",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ef27a74c-6c23-47ba-9a1b-edd3422dcb4d"
        },
        "item": {
          "id": "f3f92b46-2d55-4727-810f-53c5046c6acd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a5494395-5893-4c93-810e-2cbeca038f59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7e5136b5-0c02-46a9-b96d-8f661b2014a7",
        "cursor": {
          "ref": "44e4cd38-0e15-43d9-b835-e77a166518d1",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea9e7a4f-91f1-4d38-8134-d73f8b9f250f"
        },
        "item": {
          "id": "7e5136b5-0c02-46a9-b96d-8f661b2014a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a15b8226-aca8-404b-95dd-d48ae338471e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1178,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0929c1ac-6827-49f6-b315-1775b58fe5a2",
        "cursor": {
          "ref": "662dacdc-2441-4aea-8636-784c6e754b94",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f01364a7-a4cb-43db-b6b8-484e33a6f7dc"
        },
        "item": {
          "id": "0929c1ac-6827-49f6-b315-1775b58fe5a2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "844aff9e-294a-4604-aa50-e4a4501accb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9b478331-9ac5-4815-81d5-dca675fa7e0c",
        "cursor": {
          "ref": "4a124940-918b-4cfe-b134-13a4176a5289",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3ebd6d0e-e11f-4cb0-ad5a-a9d63172b74b"
        },
        "item": {
          "id": "9b478331-9ac5-4815-81d5-dca675fa7e0c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1d1390ab-86dc-4aa7-99c3-aee4a08cc975",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "67b9035d-6399-43b9-8290-af5231cd7b47",
        "cursor": {
          "ref": "ca849d19-a316-494a-b676-b3cd4c5c26ee",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "050ed610-63cd-481b-98fe-6739396d4daa"
        },
        "item": {
          "id": "67b9035d-6399-43b9-8290-af5231cd7b47",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "93b80eca-5230-48e4-98bf-ae6e5988ba42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "daa241fd-5222-4918-84f2-426c850e7bf0",
        "cursor": {
          "ref": "be17c80f-0a5b-4aad-97ee-8678e7abf507",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "76e66267-e12a-4c2e-96a8-0d3c9b4481fe"
        },
        "item": {
          "id": "daa241fd-5222-4918-84f2-426c850e7bf0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3068aeb4-cf1c-4a3d-aee2-4d1300d26382",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ed5fd8c2-f8c7-4e7f-80bc-bbd5d756e5c8",
        "cursor": {
          "ref": "65789861-66e4-442f-a1c8-52d70305e633",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0746c142-5e7f-470d-baf9-31d38fcab5d1"
        },
        "item": {
          "id": "ed5fd8c2-f8c7-4e7f-80bc-bbd5d756e5c8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "eeea7617-65d7-4865-bb47-afad59833a3a",
          "status": "Created",
          "code": 201,
          "responseTime": 1437,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "14741ce1-be42-41e0-b33b-7b4f561c79e8",
        "cursor": {
          "ref": "78193bd4-7fb7-47fe-a6ad-a559c9ac9c9e",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "68490a66-58d8-4088-a2e9-1b2655f23c9d"
        },
        "item": {
          "id": "14741ce1-be42-41e0-b33b-7b4f561c79e8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "36433db1-08dd-4234-9ba5-050274a31c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830d2c54-b0ec-4dd7-a43d-c7c0662743d7",
        "cursor": {
          "ref": "8b3b858b-e33a-48a0-ab10-a131f73d32d2",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e7031590-b6b2-4621-8ca5-bbc9d356b7c9"
        },
        "item": {
          "id": "830d2c54-b0ec-4dd7-a43d-c7c0662743d7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "08c8680a-55a8-405f-ae13-9a4b21c1f047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90409422-da3c-4ac5-8b7d-b1b3218fc29e",
        "cursor": {
          "ref": "68961bf3-6334-4050-8036-4d475b551685",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "72f29703-d90d-4edd-b88c-408543652f93"
        },
        "item": {
          "id": "90409422-da3c-4ac5-8b7d-b1b3218fc29e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "66cfdf20-6715-477d-b6f4-bd2099a517e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9d13f1-0ce2-499e-8de9-ba03fa7d02a4",
        "cursor": {
          "ref": "35715722-eafe-4e3a-8a3d-3517af171420",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1d393021-25a6-452e-916a-b71939757c42"
        },
        "item": {
          "id": "1d9d13f1-0ce2-499e-8de9-ba03fa7d02a4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a51c1b8e-e393-4472-a3c8-01b99183b23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b67b830-1e14-4320-829d-0693fb513d4f",
        "cursor": {
          "ref": "a90864a6-f496-4590-aefd-ee3282ea1777",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3ee33a0b-6233-49e7-89e8-e5c0fe8ec2a9"
        },
        "item": {
          "id": "5b67b830-1e14-4320-829d-0693fb513d4f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "280714d7-a998-4395-bcce-eddebcb332b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4951d3-b60f-4425-bb6b-18e823888446",
        "cursor": {
          "ref": "63e9de75-6c01-47a7-ba0c-2b181004a5bc",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6d9a5462-cf19-4dac-83d6-345943f35962"
        },
        "item": {
          "id": "bc4951d3-b60f-4425-bb6b-18e823888446",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "382865d6-a3ef-403f-be63-57f048a8c964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e218f6a-193b-4d54-ac40-aa4ced87973b",
        "cursor": {
          "ref": "0e332fbe-b965-4774-bcd7-8ebabb23e2e5",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6ea009a8-ea7c-463e-a672-baa1da5312d7"
        },
        "item": {
          "id": "3e218f6a-193b-4d54-ac40-aa4ced87973b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0bada169-c42c-4e86-8c11-604e35295d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7148853-e1d1-4e78-87ab-8e4cff4ede9e",
        "cursor": {
          "ref": "ef7e79d6-a7a6-4edb-950a-cd74826fabc3",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a3ec6145-3a32-4d6f-b007-da1cd6bae41c"
        },
        "item": {
          "id": "b7148853-e1d1-4e78-87ab-8e4cff4ede9e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3b459cb4-b793-47cd-b715-59425ffba776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f31f774-da1e-43ff-ab90-b77cdc88aefe",
        "cursor": {
          "ref": "79d5db5b-7fcc-4df2-9f7f-2026d81d273b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2eda08de-52c0-4e28-91b7-27388bb36dd8"
        },
        "item": {
          "id": "4f31f774-da1e-43ff-ab90-b77cdc88aefe",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "50c4ad1e-833b-40c7-aa70-244a9c8a2ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5fd7ac7-6e4b-4ff7-b245-692058587051",
        "cursor": {
          "ref": "2f836336-621d-464e-b4d5-3762e63e3b5b",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7285d867-4de0-4df3-b784-4848975cb946"
        },
        "item": {
          "id": "c5fd7ac7-6e4b-4ff7-b245-692058587051",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "20ca65d6-a46a-4cb5-a80a-74b6c09001f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e626422-0ab9-4692-b737-02f475d6713c",
        "cursor": {
          "ref": "e0231ab7-a1d2-4594-92f9-cb2c2159c706",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d3710db7-6a2d-4bdf-8cfe-8c09192c09ac"
        },
        "item": {
          "id": "6e626422-0ab9-4692-b737-02f475d6713c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2c3f1913-4c0b-4408-a5ae-cbab5d6847d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c18f8b-d70c-41d3-bc40-39a0660b9c0e",
        "cursor": {
          "ref": "31c38f19-5ce2-4f3f-b4a9-fc5297bcfeaf",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e4c3deb8-0272-4836-9e3e-fbe10c163b1f"
        },
        "item": {
          "id": "72c18f8b-d70c-41d3-bc40-39a0660b9c0e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2a52dc20-0546-4f9c-8d4d-71daae54c776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734a1d49-e13d-4040-8182-ebc070f3b678",
        "cursor": {
          "ref": "b6ce514a-e9c9-4bbf-ad60-14256f0b53cf",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "30e8f45c-931f-46c0-98b8-64d42af51c54"
        },
        "item": {
          "id": "734a1d49-e13d-4040-8182-ebc070f3b678",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2d05fb6f-3239-4009-9c8c-1916d94c7fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc82303a-5176-4612-bfce-2610f5d56aa9",
        "cursor": {
          "ref": "c230d6bc-0bf1-4972-a0e5-480f2b6adde4",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "509ef46d-d040-4d41-a974-bb2202d87e72"
        },
        "item": {
          "id": "cc82303a-5176-4612-bfce-2610f5d56aa9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "814ad956-28de-49e6-8b43-494401138ac8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1156,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "62b718bf-0a24-4667-803d-fe0fcb127343",
        "cursor": {
          "ref": "7f7bd7df-bb07-4d02-9d0f-9db1b961fa3f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fe84f795-6b0f-456b-b017-43f97077abb4"
        },
        "item": {
          "id": "62b718bf-0a24-4667-803d-fe0fcb127343",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3cd6b5c1-9cda-47c4-b816-720d93707bb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1184,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b91f552d-3fdf-47e7-8488-c80cc1b20753",
        "cursor": {
          "ref": "87aae1d6-f7de-4ff1-b57f-aa9ab83682d5",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1687083e-34fa-43ec-9f50-f7a5dba98378"
        },
        "item": {
          "id": "b91f552d-3fdf-47e7-8488-c80cc1b20753",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a32e2594-8e93-416e-b789-61ca1254472e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4af09d69-68f4-42b7-a87b-98961710ebea",
        "cursor": {
          "ref": "4436075e-e4e7-4517-b48b-84041738e566",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a3b099b5-11e0-44fd-a86d-79f4629a38da"
        },
        "item": {
          "id": "4af09d69-68f4-42b7-a87b-98961710ebea",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8e123e27-c36d-44cd-967c-b745096dea55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1160,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2a143cfb-d641-490a-bf38-f15c57122eef",
        "cursor": {
          "ref": "da234321-41d3-4d9c-ad8b-52907c69a644",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "35a19050-f2eb-43e6-99d1-1f4cf1d68ab4"
        },
        "item": {
          "id": "2a143cfb-d641-490a-bf38-f15c57122eef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f5b8b3da-168c-4de3-98bd-26f4fad501bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ca517ce6-7dae-4cce-922c-6d30600eb26c",
        "cursor": {
          "ref": "6e43bec3-1aa2-450a-8a34-636471d4abdf",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f387e786-e562-419c-ba6f-d01d53312bcb"
        },
        "item": {
          "id": "ca517ce6-7dae-4cce-922c-6d30600eb26c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "94b1e1c5-7993-4919-953d-6312277b876d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd8a889-ac30-4076-881b-14448ada3e1a",
        "cursor": {
          "ref": "ae1382ff-9f97-46ed-a6ec-c557fa58078f",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6efda062-c70d-46f8-ad04-5a7de99cd5d0"
        },
        "item": {
          "id": "1cd8a889-ac30-4076-881b-14448ada3e1a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9d1646e0-033e-4c39-86ce-44bd956cbd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27cf098-2308-4302-9ac1-dcb0c68d09c1",
        "cursor": {
          "ref": "2dcf114a-49a5-4b96-9927-23728edee7e4",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b5fccd0e-2e6d-4cb6-a5a6-ed149299016e"
        },
        "item": {
          "id": "a27cf098-2308-4302-9ac1-dcb0c68d09c1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3fd8eec6-3d64-479e-b10e-1e77d96b2a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bacaa6-2a64-4fb2-9c73-494dd4c4a3ab",
        "cursor": {
          "ref": "23513e7e-8f07-4877-b726-528269e4c8b4",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5afe4c99-458e-4324-8faa-ff382fb32325"
        },
        "item": {
          "id": "29bacaa6-2a64-4fb2-9c73-494dd4c4a3ab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "db604088-d2e4-41b4-b9e0-d9909711392e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79770d04-68f5-46af-8b78-2a3f755e0fc8",
        "cursor": {
          "ref": "f5552afc-a1ef-46cb-8739-e0fa82eba936",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4396b38e-e05a-412e-9203-d1020d4303f9"
        },
        "item": {
          "id": "79770d04-68f5-46af-8b78-2a3f755e0fc8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "de148aff-21bd-4d2a-b073-3a07be6dfd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d083ce-be81-4f41-bbda-c25eda31af44",
        "cursor": {
          "ref": "add624b1-3579-4f97-b9d3-4adae073490e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4f1445d4-6a67-442f-ba7b-a6b2d3aa7571"
        },
        "item": {
          "id": "58d083ce-be81-4f41-bbda-c25eda31af44",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f64278a2-28c1-45e4-8c6b-c45ac37a1b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66481be-654d-4c64-8202-0d06f916d58e",
        "cursor": {
          "ref": "c8173760-6474-4a87-a319-2cbd5c4fdb97",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cbeefba9-6e61-4721-97bb-a9455cc633e1"
        },
        "item": {
          "id": "a66481be-654d-4c64-8202-0d06f916d58e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b28d2a9e-0082-49fa-969f-afd398d73619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6306b4-a92b-46e5-b7cb-fe0b42a8b283",
        "cursor": {
          "ref": "736e78c5-3e64-4e7d-9d29-73a8ad094e6b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a0d788ad-df2e-4cce-a5b8-508b027d5a60"
        },
        "item": {
          "id": "2c6306b4-a92b-46e5-b7cb-fe0b42a8b283",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "845ba20f-9cce-4e08-bd36-50406f93fa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fffbef-d9d2-4635-9510-f69cd33e068f",
        "cursor": {
          "ref": "5e48c424-1ed6-44a4-b9ed-7bd241fd3c71",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ec5771b1-181c-4e25-ba21-ddb3d87fa694"
        },
        "item": {
          "id": "b5fffbef-d9d2-4635-9510-f69cd33e068f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ee035da8-f6bf-482b-ae15-aa02f9b44914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17e1bb6-7551-4cb7-bb30-5d66ab49cbe9",
        "cursor": {
          "ref": "80a7707b-5ff5-4a16-b009-a0e57ace20b4",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6b5c8e71-8fe7-4824-b10c-fec1613e7d93"
        },
        "item": {
          "id": "f17e1bb6-7551-4cb7-bb30-5d66ab49cbe9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6706eed6-f968-4177-97c5-bc7eddef2733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c56023-1820-419e-a999-d1ece63be56c",
        "cursor": {
          "ref": "84fdf5c4-6695-4a0d-a437-d3a2bca86e82",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e576a2c5-11b9-442b-b6fb-ac7d121c3b20"
        },
        "item": {
          "id": "50c56023-1820-419e-a999-d1ece63be56c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a9034f80-c487-4ec7-8d63-d26e4be82eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64741f15-0f46-4cdc-9777-a86c9a8f6cf9",
        "cursor": {
          "ref": "0bec64af-43b3-4b34-ba49-e79fd8ceaa33",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "df6ced31-021d-4126-a3e6-7822ac0db596"
        },
        "item": {
          "id": "64741f15-0f46-4cdc-9777-a86c9a8f6cf9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d316def7-5b4d-4615-95b9-c8b39825b1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4845ba-47b1-4442-b13d-45a739ea3e49",
        "cursor": {
          "ref": "3e88f9ea-bd22-4d04-bf61-1eef7b2e8c06",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8b162e8a-a6ea-4de1-bcee-b3ff3eaf0f0f"
        },
        "item": {
          "id": "0c4845ba-47b1-4442-b13d-45a739ea3e49",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "796d17c0-e3ec-4c24-8d98-fa22b65bb360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fa193e-88c5-48dc-b743-2f58edafda4d",
        "cursor": {
          "ref": "99dd23f4-7c54-495a-be2a-679ffeb5cdfe",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "86c0f49e-38cc-4cc0-a859-6a6a86d8296d"
        },
        "item": {
          "id": "77fa193e-88c5-48dc-b743-2f58edafda4d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a794355b-2ea6-4884-aa7f-5191ef2042a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb59b5ea-02ec-4ba2-90a1-df2ebfc9e9b3",
        "cursor": {
          "ref": "dd3829a8-2d89-436c-9909-53f25e7d3bf3",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9f31d886-e79f-46b8-ad65-4ce99615585f"
        },
        "item": {
          "id": "cb59b5ea-02ec-4ba2-90a1-df2ebfc9e9b3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b8d1b52e-9acc-4d1d-8179-f04b3b207d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bab043-6cc6-4c4b-8acc-196ee9668e8b",
        "cursor": {
          "ref": "fc71218b-40c4-496c-a288-5c1e95c8df2e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d92e025a-c0e8-48c5-b3e5-6ca1be7e2f31"
        },
        "item": {
          "id": "80bab043-6cc6-4c4b-8acc-196ee9668e8b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ec6f606d-375a-4ac1-a946-afc7e0b34e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6478520-555a-44a0-b210-5af0e9b52f71",
        "cursor": {
          "ref": "c520268f-04d8-46c5-979c-0678964ffb10",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5e9e3643-d0d3-4243-9069-df5757479040"
        },
        "item": {
          "id": "e6478520-555a-44a0-b210-5af0e9b52f71",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "feb57b88-564c-43b2-8905-01f92c4eaef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cddd6a5-9773-4426-a4b1-f1e25e8d9250",
        "cursor": {
          "ref": "01d93e27-4def-4051-99d4-5ac8b2a2b001",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1069bb4c-e7f7-4ef5-b04e-88099300f0f9"
        },
        "item": {
          "id": "6cddd6a5-9773-4426-a4b1-f1e25e8d9250",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d220667c-e633-462d-aa9a-b64305bbc49a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96101832-cc45-4a9d-9e72-5b0326531669",
        "cursor": {
          "ref": "5d043483-bb02-41a8-b83f-152c393efee1",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7731363a-79da-4116-a102-8803cea2028e"
        },
        "item": {
          "id": "96101832-cc45-4a9d-9e72-5b0326531669",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0e6254cf-601c-4e71-b229-688cafa392b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203c7662-6042-45e2-b254-706383a2c782",
        "cursor": {
          "ref": "f34845c9-ff5b-40ad-8143-7ad9ba12e2a1",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "875faafd-119c-40ac-be58-043a6f10a12c"
        },
        "item": {
          "id": "203c7662-6042-45e2-b254-706383a2c782",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ea6fb341-7ba4-405e-9c2a-7f1d3b47a0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16923501-b603-4624-9d0f-8a0ccdfba7c5",
        "cursor": {
          "ref": "c06e93a5-b7f5-4865-a733-b98d3690ee7d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ed38aca2-8f80-4709-be0e-d96bf4ee30ad"
        },
        "item": {
          "id": "16923501-b603-4624-9d0f-8a0ccdfba7c5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "41e8fc1b-def8-4dc6-96bb-78a24ab6e11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3a946b-8a5d-4a69-8afa-e3a7d566d0f6",
        "cursor": {
          "ref": "09567387-4ebe-4426-9669-16e03a8a63a0",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aa34f381-c289-42a9-aa8d-a699b7918d15"
        },
        "item": {
          "id": "4f3a946b-8a5d-4a69-8afa-e3a7d566d0f6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eb4adc20-6820-4e0c-a5b2-d5eaf8cced26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2b9807-ea59-40cb-b0db-89fee9f2f48e",
        "cursor": {
          "ref": "9b42fa82-0427-4662-a2c0-36e700da1864",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b509ba63-1eb0-4595-a0fc-c27877a32f30"
        },
        "item": {
          "id": "ab2b9807-ea59-40cb-b0db-89fee9f2f48e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "61b7f32f-36ae-448f-bebd-4ff5731045cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7f347e-062f-4b57-9a92-3802706555c6",
        "cursor": {
          "ref": "ec037fef-56f1-4380-beed-c27229c64ad3",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "56b1bc86-e64e-4740-8591-fd0dfb2a91ca"
        },
        "item": {
          "id": "2d7f347e-062f-4b57-9a92-3802706555c6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a7e9cf37-3097-439b-9a09-4ac0bd6797ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67776fe3-1733-4e15-aa93-c1a38eec4eaf",
        "cursor": {
          "ref": "3b75e328-e077-4e66-8bf1-911c060a6cc4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a7d03cfe-c56b-430c-b4af-faf189b7a6be"
        },
        "item": {
          "id": "67776fe3-1733-4e15-aa93-c1a38eec4eaf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f172a577-6440-4cdf-a53c-0195266fdaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31229f8d-9f2a-40eb-8499-db92db489ec8",
        "cursor": {
          "ref": "903436ba-a481-447a-bb87-c8e9631a1999",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "30a32092-2c74-47d0-a50b-a8a2b0455c2d"
        },
        "item": {
          "id": "31229f8d-9f2a-40eb-8499-db92db489ec8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8f9bdc82-a3c6-42cd-bcf5-6ba6cf6e0a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6de49a-403d-487f-ad35-fe69e876f056",
        "cursor": {
          "ref": "7388bb1c-c2e4-4897-bdea-1faeeb92df0a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "285bda2b-d0e5-412c-a80c-3c8d753bae54"
        },
        "item": {
          "id": "6e6de49a-403d-487f-ad35-fe69e876f056",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c02fb741-1a12-42c3-9966-20dff53e006b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bb3d55-5833-44eb-8384-89e68dc0d97e",
        "cursor": {
          "ref": "64a1b6cc-24d6-4e4a-993c-afd4468aea7d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "94d7d9b3-9b06-4e8f-b383-0643b257bb75"
        },
        "item": {
          "id": "91bb3d55-5833-44eb-8384-89e68dc0d97e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d4cdd42d-0f9e-4cc8-aabd-659c7dcdb33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab378f1-ad22-42b7-bee6-456dad5bbc3d",
        "cursor": {
          "ref": "a629e5fe-5d10-4bf0-b62e-ea94b0bd76f6",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e9a200d3-6fdb-4217-9938-4028e6ffe12b"
        },
        "item": {
          "id": "5ab378f1-ad22-42b7-bee6-456dad5bbc3d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "488e4bb8-cf56-4c21-abf5-574e8dd14437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a73f2b-1222-48f5-8e04-d55bf42253ae",
        "cursor": {
          "ref": "4d18a45d-3434-45ae-84de-b6cbf81a81ed",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1b32bb1a-e6e8-4d50-a46a-4ddb21869e9f"
        },
        "item": {
          "id": "29a73f2b-1222-48f5-8e04-d55bf42253ae",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f4efa244-3eee-42da-9f56-9a57227c5d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f750ee7e-fd88-4e03-b5b9-4f698ca5d19e",
        "cursor": {
          "ref": "ceca4a7e-6553-42ee-b0eb-198db5cd3b3a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0745ceb7-109a-42af-8517-5fd7b5aa9622"
        },
        "item": {
          "id": "f750ee7e-fd88-4e03-b5b9-4f698ca5d19e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "595859f4-0143-4cd7-903a-ca0c5eb9bbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0b9ed7-403b-41ec-8e30-298df2d7c3f0",
        "cursor": {
          "ref": "92ea022f-eeb6-428d-926b-f9f1a46b5817",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2d954bde-3a57-450a-b295-c116e6907305"
        },
        "item": {
          "id": "0d0b9ed7-403b-41ec-8e30-298df2d7c3f0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32b3e914-e7e3-4d99-8276-0f350103dd1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3498cb59-3977-4887-8226-135cb274984b",
        "cursor": {
          "ref": "ff00baad-f644-4652-972c-6370f676c13a",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7171a6fb-1523-4699-b973-b0595a80f42b"
        },
        "item": {
          "id": "3498cb59-3977-4887-8226-135cb274984b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "39d4aa5c-0b74-47ae-a200-08aa59c20171",
          "status": "Created",
          "code": 201,
          "responseTime": 1530,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2401ac74-13de-4f82-90ab-ae5a4043aeca",
        "cursor": {
          "ref": "4b73f7a1-a740-4a9e-9b55-fd0a30ec2325",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "46e815c5-e95d-4451-9ac9-54110220825d"
        },
        "item": {
          "id": "2401ac74-13de-4f82-90ab-ae5a4043aeca",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "92b41e97-8737-49c9-a762-7bfc8c061c00",
          "status": "Created",
          "code": 201,
          "responseTime": 1407,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78975d83-4ea7-40df-9fc1-a65348f2180b",
        "cursor": {
          "ref": "bc3464cc-dbf1-45f7-b415-37ecf843ee91",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ab5dcb45-6daf-4ebc-b48a-7e40ec4f7a96"
        },
        "item": {
          "id": "78975d83-4ea7-40df-9fc1-a65348f2180b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "24f52de4-21a8-4a3f-9d68-fef68306cba3",
          "status": "Created",
          "code": 201,
          "responseTime": 1447,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0a4f1e-cc43-4ad9-9f7a-3b7f4448a91b",
        "cursor": {
          "ref": "de6b4136-b8a8-42aa-97d7-ea4d605397eb",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "87eef08d-54ce-489f-8f47-333856792956"
        },
        "item": {
          "id": "fc0a4f1e-cc43-4ad9-9f7a-3b7f4448a91b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "26ac64c0-f21a-4657-ac8d-ccb69405c8b3",
          "status": "Created",
          "code": 201,
          "responseTime": 1412,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8099b04-e44e-4de4-beaf-af8c68ae47a8",
        "cursor": {
          "ref": "aa0c2812-9268-4425-87e8-784a1ed6af84",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "66e79d51-17ca-41e3-b466-b983b44c5151"
        },
        "item": {
          "id": "a8099b04-e44e-4de4-beaf-af8c68ae47a8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1e1927ff-3b6e-4bd9-96dc-cda5341ec9f5",
          "status": "Created",
          "code": 201,
          "responseTime": 1414,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc1772e-609e-452b-b757-1d7e528650c8",
        "cursor": {
          "ref": "43f6a703-5969-4fa8-af33-ef482ed18229",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f073966f-5ffd-4e53-985b-c723253f61ee"
        },
        "item": {
          "id": "4fc1772e-609e-452b-b757-1d7e528650c8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0dcd3cb5-4954-4718-9a94-e7421041831e",
          "status": "Created",
          "code": 201,
          "responseTime": 1412,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3566d271-c042-4e64-8366-4e324bff41c9",
        "cursor": {
          "ref": "c8b0d7d9-e8f6-4d42-abae-78d6f58f37a7",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e8a7cbfa-1d54-418f-98a7-6363da4b70aa"
        },
        "item": {
          "id": "3566d271-c042-4e64-8366-4e324bff41c9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cf65d98a-1dde-4c66-8c06-d3e2db78a969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b348a5-ba05-4f67-95dc-07a87dfe6bd6",
        "cursor": {
          "ref": "33ea36d4-6b74-4418-927c-545e4db1abfe",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "db897f7b-512d-4db2-8275-fe2ec04a9ed9"
        },
        "item": {
          "id": "73b348a5-ba05-4f67-95dc-07a87dfe6bd6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "30e8f884-ae91-4ef0-9ec1-e6fdde761aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3c13a5-537a-41c4-8736-02a088c44faf",
        "cursor": {
          "ref": "5481cf02-b86b-4ee3-8682-f01194cc1ac0",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7d2450dd-f98c-4ebe-b12f-1f4aca469e42"
        },
        "item": {
          "id": "5e3c13a5-537a-41c4-8736-02a088c44faf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c241b27-4bfd-40fb-b7ac-8ee2fd96dcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758297d2-2482-488f-9f0b-b7525c5164f0",
        "cursor": {
          "ref": "74636fba-1850-4bbb-a1d3-7d72cdf35feb",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0f791c40-fd8f-4731-b8ca-5e810a99ca3f"
        },
        "item": {
          "id": "758297d2-2482-488f-9f0b-b7525c5164f0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15b6cba7-c216-4e9a-b62c-dec13653197d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e6c811-c7a8-447b-90c2-51dba545d558",
        "cursor": {
          "ref": "4ad55cbb-bdc2-4aa3-a1a9-db14d7933a1e",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "485a9003-ae4d-41ad-af8e-1531644a3c0e"
        },
        "item": {
          "id": "49e6c811-c7a8-447b-90c2-51dba545d558",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2535ad0a-270b-46e9-bb7b-58e1f9afc8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf643d1-70f9-4298-ab4e-33ff52a2dd04",
        "cursor": {
          "ref": "2e80547f-d455-4ac6-a18c-faeb803e5fc3",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d4fe83c4-4c43-4873-9372-dfc00780b7a9"
        },
        "item": {
          "id": "2bf643d1-70f9-4298-ab4e-33ff52a2dd04",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "076277ca-281c-487c-9a69-cd22a06f62a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7335d1c5-13ed-48a0-a979-b85c95546363",
        "cursor": {
          "ref": "ccfc56bc-04dc-4f7c-a461-be54004e0c94",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d6fde2bb-cee9-4f4e-b8c7-eae996edb1ae"
        },
        "item": {
          "id": "7335d1c5-13ed-48a0-a979-b85c95546363",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1492bccf-f2e6-4d37-bab7-67bb65770eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ce61e0-2659-49ed-80ac-b5247fd6de78",
        "cursor": {
          "ref": "5ab1dc58-e349-4772-a41d-787d35c4ef90",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6cf3c355-2eaf-4509-827f-041bc72dd19a"
        },
        "item": {
          "id": "d6ce61e0-2659-49ed-80ac-b5247fd6de78",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "420790d8-4d2e-4078-87f2-a3f7227fb1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a5b53d-6ec4-45f4-a654-6bb61459d356",
        "cursor": {
          "ref": "1fc699d0-a49b-4b01-8b2d-65c48b1e5b04",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ef87b182-7565-4700-8cd1-86e21626b3a3"
        },
        "item": {
          "id": "e2a5b53d-6ec4-45f4-a654-6bb61459d356",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c333b3c6-b9fd-4e48-b8cf-99db4438e569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea79bf3-9e21-488f-9823-acdad42719c4",
        "cursor": {
          "ref": "d8c9c255-8a78-4778-8756-7a978c04fbee",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1215add1-d6e3-451b-8cd3-6dbe701a4b7a"
        },
        "item": {
          "id": "3ea79bf3-9e21-488f-9823-acdad42719c4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ff05db04-f1d2-457d-998b-e4042cb214a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca61650a-9800-4d1e-8dac-6f50c084ff10",
        "cursor": {
          "ref": "cc522509-a421-4aca-9455-7dcdbcbd9853",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3ca0df42-d4ca-49a4-aa04-2665c0162b21"
        },
        "item": {
          "id": "ca61650a-9800-4d1e-8dac-6f50c084ff10",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "90abd1d5-d167-4d4e-a697-4f79b4da315a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb78839-5d39-441c-9241-328b9e8ff9bd",
        "cursor": {
          "ref": "57dcbe34-d9ec-4431-bd95-fa3a6ec09ed2",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1c2ccf56-c77c-4cab-86a0-47c7d9304994"
        },
        "item": {
          "id": "beb78839-5d39-441c-9241-328b9e8ff9bd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e3a77797-3661-48e5-8831-71ac3bb5abbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d23f1a-0284-4a53-8552-6ac3b5952b9b",
        "cursor": {
          "ref": "f3fca859-3d7e-4545-8859-ce6fe207e4d1",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ca74a802-57a8-41b9-b298-93b84202c302"
        },
        "item": {
          "id": "c1d23f1a-0284-4a53-8552-6ac3b5952b9b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "69b2a0de-485c-44d7-92fd-8a7233ab292c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9a592d-9ea9-47de-83a0-5e0dedbeb852",
        "cursor": {
          "ref": "a871ad59-797b-48dc-a8d5-9eedac275aed",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ba511953-12cd-4654-8e7b-2e05abd16bd7"
        },
        "item": {
          "id": "0a9a592d-9ea9-47de-83a0-5e0dedbeb852",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6d9259ac-8842-40be-a05b-d38a7bad3694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911855f3-f34b-43d0-b4bf-f5477e7a2b52",
        "cursor": {
          "ref": "c4dbc346-5f92-45c5-b743-f5bc67629b91",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "27c2657b-f4ea-44ec-bc87-2f0a4cd39a7b"
        },
        "item": {
          "id": "911855f3-f34b-43d0-b4bf-f5477e7a2b52",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ee7b9b2a-6164-42bc-9369-9cc4e3c23475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b9c597-4d1d-426d-b69c-f188437d12e9",
        "cursor": {
          "ref": "5a81ddd0-9190-4d94-a1a8-3aac417b6f36",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ee899f1c-8a77-494b-a0c6-7c8067c23416"
        },
        "item": {
          "id": "90b9c597-4d1d-426d-b69c-f188437d12e9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20502eb5-70b1-4fea-acce-30bcd60e8be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b863a4-fdd4-4cbb-87ba-50cff0c00728",
        "cursor": {
          "ref": "8124755d-b66a-467d-b056-0cc27028061d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fec1e9b0-f5a3-413c-b670-7d0584a32aa6"
        },
        "item": {
          "id": "24b863a4-fdd4-4cbb-87ba-50cff0c00728",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "434c556c-7bd3-4976-8a06-33ea6afc98b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad158ec-b7ab-46f0-894f-4c5f5d01eb97",
        "cursor": {
          "ref": "a318d21f-deb7-4a6f-8a2d-983970b9f4d9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7e2e6a2b-5d6f-4097-bc97-87ad9feb0942"
        },
        "item": {
          "id": "1ad158ec-b7ab-46f0-894f-4c5f5d01eb97",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b68a07b0-668a-42f3-b377-3a470f74524f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90989263-63e2-4317-a379-4adba2048561",
        "cursor": {
          "ref": "c2e5448c-d3e0-4b97-92d5-bf3d8d144fad",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c33fb5b-5f8e-4cfd-8c89-0f5abf04269b"
        },
        "item": {
          "id": "90989263-63e2-4317-a379-4adba2048561",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2e4b020a-9d7a-432b-95e5-bfb31c40fcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9093a53f-072d-4c47-b4a4-3170fb4e4ce5",
        "cursor": {
          "ref": "4a8e3c13-38fc-4543-94d7-8c002b1836e5",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "76450cc4-0127-431d-800b-b4e9dc60322f"
        },
        "item": {
          "id": "9093a53f-072d-4c47-b4a4-3170fb4e4ce5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6332bb68-dd79-4733-a726-f599a06074a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b48e0b-ad92-4d69-be21-f9c30c765386",
        "cursor": {
          "ref": "b4cc56d7-9ee4-4135-8e95-baabcbdb663f",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e779d421-2592-406e-b409-7e4d34a90384"
        },
        "item": {
          "id": "c0b48e0b-ad92-4d69-be21-f9c30c765386",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe7cecad-bcab-41e2-93f0-26dd58db35a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab04c4e-6e6d-4fdb-b4e5-91f4a16c974d",
        "cursor": {
          "ref": "1ef7e32f-0d20-48eb-8da8-2b1138f3b1b9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e7b2079e-5692-4a14-98e1-6defadc3f1bd"
        },
        "item": {
          "id": "2ab04c4e-6e6d-4fdb-b4e5-91f4a16c974d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d7778a94-9e98-4ba0-bbd8-674fb854225e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9707205-4d99-42af-80bd-d5cca99103d9",
        "cursor": {
          "ref": "8086cde6-1f13-48f6-84b9-5d057e710433",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f30de12-1681-4d2c-b32e-721edb01b472"
        },
        "item": {
          "id": "f9707205-4d99-42af-80bd-d5cca99103d9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a5d060c6-d138-4c8d-bea8-ffe991f1699e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118990b1-c8b7-42fd-81ab-56a40e321977",
        "cursor": {
          "ref": "6bd0646d-0294-4cca-9856-beb2f6855955",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a6a2b105-8119-4001-9791-9323a5dbaebc"
        },
        "item": {
          "id": "118990b1-c8b7-42fd-81ab-56a40e321977",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "decd85e9-7117-48cc-af2d-0a5e841ef80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f13b9e4-3b26-432a-9216-19d5592a7e52",
        "cursor": {
          "ref": "e4c3736c-282c-4d12-b6a4-1444f640fa28",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a70e52d5-847f-4e56-91a0-a470d5d5063f"
        },
        "item": {
          "id": "2f13b9e4-3b26-432a-9216-19d5592a7e52",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f87b5d05-ff83-4ae9-aaf6-3d919c230189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6381d043-a580-4795-89cb-a11c22fd8a5c",
        "cursor": {
          "ref": "4cf6ae15-e6f1-4870-b48f-a937379ff00f",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "77dbaa5e-985f-4ad1-876c-a0132ed63190"
        },
        "item": {
          "id": "6381d043-a580-4795-89cb-a11c22fd8a5c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8fc4422c-f35d-4c63-ab37-53fb1228278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1e0824-66e2-40e8-b6e8-129b0ccde578",
        "cursor": {
          "ref": "9ca5c273-6d10-4d02-994d-ce177a8fe42e",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b7d5a41-042b-4f5a-ab37-5e40e65fd132"
        },
        "item": {
          "id": "5e1e0824-66e2-40e8-b6e8-129b0ccde578",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e565af6a-3eea-4705-b3e9-0800f3dbe364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f2955e-f103-4f0a-b5dc-f83c22c04e06",
        "cursor": {
          "ref": "a98c5fd4-403e-4be1-9d21-38957d57cbef",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8090da76-acd7-40ea-92de-f389898e93d2"
        },
        "item": {
          "id": "56f2955e-f103-4f0a-b5dc-f83c22c04e06",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b05f0cb0-fc17-48a6-9b7e-ee2034206d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e4b74a-7a5f-41ed-845e-045382c2fb65",
        "cursor": {
          "ref": "87fb9677-8ffe-4f19-962c-e298a6d40e2c",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "099ade05-0265-4c04-827f-a1b7331c50d5"
        },
        "item": {
          "id": "63e4b74a-7a5f-41ed-845e-045382c2fb65",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "49e45255-168d-43e0-ac15-76c92ae6eadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb6513d-6e44-4f35-8e96-4e0f948305fe",
        "cursor": {
          "ref": "7f4ed8bd-c5c3-449f-b7ab-6afcb0f68829",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6e1ef6d4-ac4e-4817-aea6-8fa496e54312"
        },
        "item": {
          "id": "deb6513d-6e44-4f35-8e96-4e0f948305fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cb7fafb7-a18b-4331-ac6f-86a3fe3c46ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc0854d-65b3-4c64-b418-9425aefcdef1",
        "cursor": {
          "ref": "7eb4b3ab-75a8-4bd4-8756-553a3ae56879",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b3db0ce5-b859-47cf-b560-a2200d1ee004"
        },
        "item": {
          "id": "6dc0854d-65b3-4c64-b418-9425aefcdef1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a43695b3-e1bf-44f5-9cc0-2bc3bb9e4d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9a961a-2c6e-4ab2-acd6-763054edb3d5",
        "cursor": {
          "ref": "b1f772cc-f00d-4c33-9fe3-e0c8b32ffe0a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3a309255-b6dc-4fbb-9714-e6febc7cc003"
        },
        "item": {
          "id": "1c9a961a-2c6e-4ab2-acd6-763054edb3d5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d7afb39e-ca63-438d-9e90-c5472db5a2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1696ea84-ec60-4dad-ba02-3ed0345e5fcf",
        "cursor": {
          "ref": "0edc6062-e722-41bb-be6d-ec234d394196",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a6faa464-56d2-4765-8115-a5db389b8b4a"
        },
        "item": {
          "id": "1696ea84-ec60-4dad-ba02-3ed0345e5fcf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "420ac54d-04fb-427e-bdd0-0d591e9f7bc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7312d92-5f7d-48f5-8ef1-5f3da33a95a1",
        "cursor": {
          "ref": "97b87105-701e-4d02-b382-23f079977272",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "56f8571a-18f8-4ec6-9e32-a9ecec066c98"
        },
        "item": {
          "id": "f7312d92-5f7d-48f5-8ef1-5f3da33a95a1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "65ba9516-1eb3-4643-bee3-44914907430e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00597477-2288-475b-b2a1-898771335517",
        "cursor": {
          "ref": "b3553636-67de-4ea4-85f5-9fcd95ef8d2a",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ca164689-57d0-4da8-a71c-2720e50472b1"
        },
        "item": {
          "id": "00597477-2288-475b-b2a1-898771335517",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f6603f7f-ac16-4b6e-8dba-e9b20049c628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485d49f3-60fd-4377-a6a9-d00d608b19c5",
        "cursor": {
          "ref": "9bf411f3-aad7-4de9-b643-565c2ecd4816",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "661acf6e-28d7-496d-a106-d2ccb55404b2"
        },
        "item": {
          "id": "485d49f3-60fd-4377-a6a9-d00d608b19c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fe871126-03c9-4bbc-8ed1-9f4ce8f37d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26740c95-a37f-4020-ae3c-dc1d9ca3746f",
        "cursor": {
          "ref": "f3cd22b1-40b7-4348-a77f-5c1966a660af",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8619b77f-a563-4587-ba21-70a59275084a"
        },
        "item": {
          "id": "26740c95-a37f-4020-ae3c-dc1d9ca3746f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c26a4193-0849-48ae-ad73-a509daa46f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d23f39-53c3-4699-a6a3-6421a1153e40",
        "cursor": {
          "ref": "e4b00f7d-44f8-4e62-9991-8b0bc1e36765",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e307eb3d-86aa-4dee-ae17-8c80ec200f80"
        },
        "item": {
          "id": "81d23f39-53c3-4699-a6a3-6421a1153e40",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e943f960-b0c9-46f2-b22e-d6bc103114fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58bf0aa-e7ea-4306-90d8-720a6b2a35a7",
        "cursor": {
          "ref": "3fb0b5d8-5971-49a8-84f0-15a78011d605",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "87be0c46-f998-4b71-8c08-d0ab9eab9d2c"
        },
        "item": {
          "id": "a58bf0aa-e7ea-4306-90d8-720a6b2a35a7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "71ad1b45-be78-480f-93b1-c5f785003538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0e0bf9-f3c8-4c51-9f4a-9a5a1d94b687",
        "cursor": {
          "ref": "fccbd442-c4f8-4943-b4ac-533ed3f05d75",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "750c45ea-a9f0-4aa7-8c74-7c350adab2a9"
        },
        "item": {
          "id": "2d0e0bf9-f3c8-4c51-9f4a-9a5a1d94b687",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c1571488-9027-4568-9141-9cf99900c439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52ad75a-cf0b-4d25-a3b3-a9c2bc747722",
        "cursor": {
          "ref": "b57a34cc-c07e-48eb-b680-4b0359277a9c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e58770b4-21bc-4aa4-b611-7bb08cfd97b4"
        },
        "item": {
          "id": "b52ad75a-cf0b-4d25-a3b3-a9c2bc747722",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0c72627b-fe7c-46ed-ac0c-668489391df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb48e9c-13d7-4dc6-a4dc-7d57d4ec525c",
        "cursor": {
          "ref": "fa46db8f-7b95-4219-bff7-8ced39a0efcf",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bde256d9-358c-4de3-9dd3-f3d9b6ef33a1"
        },
        "item": {
          "id": "6cb48e9c-13d7-4dc6-a4dc-7d57d4ec525c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9a6de0ac-cd97-41dd-b2f3-7d71d7c38836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f053afe-4e00-43eb-b8f1-269cf4b592a3",
        "cursor": {
          "ref": "3bf7ce86-5d37-40c4-af20-ea83ef10b433",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8d72d53d-6427-4a1b-9f1f-763a1d9e1d4c"
        },
        "item": {
          "id": "6f053afe-4e00-43eb-b8f1-269cf4b592a3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "67899aa2-6e34-4f06-8147-967cd02a0caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f767dc-89ea-4148-b06d-b21e5158fee5",
        "cursor": {
          "ref": "9e1a1fba-424d-4c74-8d89-56b532448115",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "836c06e6-7cb3-4638-92e5-88b52c814a89"
        },
        "item": {
          "id": "13f767dc-89ea-4148-b06d-b21e5158fee5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fcfd283a-6703-49f4-8ea1-67283e0f6147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f06547-a1fc-412d-9f63-a66d7ba9e723",
        "cursor": {
          "ref": "94fd29b8-de61-415f-955a-b0132a3de30c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acd5afd1-403b-46fa-adf4-87b3588c0c7d"
        },
        "item": {
          "id": "51f06547-a1fc-412d-9f63-a66d7ba9e723",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c7ae416d-201a-4a06-ac3e-e1bb0064b899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685d0281-c95d-4676-9826-9e3a4d3f1fb9",
        "cursor": {
          "ref": "d82b706a-4cf8-4a1f-aa1a-d3caabf9772f",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9111894d-a818-4667-acd5-7d9d2248e363"
        },
        "item": {
          "id": "685d0281-c95d-4676-9826-9e3a4d3f1fb9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ba8534a-ad1c-4da6-bc04-0d11c16bb9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b086a6-0e84-4984-8234-6cd8a4345596",
        "cursor": {
          "ref": "5020d9cd-a4f1-42ae-8b45-527451f3f265",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6646ac96-4a4f-4803-b89c-fa504e48b237"
        },
        "item": {
          "id": "a2b086a6-0e84-4984-8234-6cd8a4345596",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5be07670-da87-427d-ac1d-0e9079853624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfd1eb7-5e9a-4218-b503-22475bec21bd",
        "cursor": {
          "ref": "aa8a051d-5782-4c51-942d-f99563dbe7d7",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "685d714e-e404-4980-aa7b-48c3f9c4595c"
        },
        "item": {
          "id": "edfd1eb7-5e9a-4218-b503-22475bec21bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6bee3869-7599-482b-933a-2306e9b81a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f7780b-30ce-431a-9ba2-c532227cafba",
        "cursor": {
          "ref": "56a0ff14-42b4-48fa-94bc-ab5b2423cbaa",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "79f82b8e-7896-4ef3-a5aa-955a596241c6"
        },
        "item": {
          "id": "65f7780b-30ce-431a-9ba2-c532227cafba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "025ac100-a0fe-42ef-8d01-18244abbd7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41750e7-8e26-488a-a9c4-8baa242e2cde",
        "cursor": {
          "ref": "f46b7d2f-6c31-4bb0-bdaa-324f16e642f8",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "91db8d17-f640-4fe6-aaa3-f381cb54e055"
        },
        "item": {
          "id": "d41750e7-8e26-488a-a9c4-8baa242e2cde",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "86c04a1b-d438-4f7b-8bb5-7398efc9dd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1a6c55-de91-4eb1-945c-710a5db745af",
        "cursor": {
          "ref": "08bf885b-7722-496b-ac55-d03340ffd991",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bd1a1fbe-9218-4a86-86de-261e2199a2bc"
        },
        "item": {
          "id": "cb1a6c55-de91-4eb1-945c-710a5db745af",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c07ee1f6-d1b4-4c04-8816-804e00b054b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f685688-87e3-49e8-bc31-afc283a1f0eb",
        "cursor": {
          "ref": "5142dece-03c4-4a0a-8e8c-9ca90364381d",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6a03e2ba-4bfb-4df7-9eb7-e1bbc3db8786"
        },
        "item": {
          "id": "7f685688-87e3-49e8-bc31-afc283a1f0eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "79caa700-2e02-4891-8699-29f0d6d8efc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80c25bc-a3f8-4594-8294-1b45462ec8b2",
        "cursor": {
          "ref": "b2c29c22-c203-4b61-8473-419aaf05d1b6",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "269f9b0f-60d2-49d5-87d5-6a2b3e33133f"
        },
        "item": {
          "id": "c80c25bc-a3f8-4594-8294-1b45462ec8b2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "00daa06a-6b14-423a-ac4f-44d75ec31d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1d1698-e850-4463-b7ff-aba32d69c7c0",
        "cursor": {
          "ref": "6904291f-6980-4dec-b349-03c0fb7e1129",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b41f7d24-056c-40ee-bddd-239a184e8974"
        },
        "item": {
          "id": "bd1d1698-e850-4463-b7ff-aba32d69c7c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4a0180a1-9534-48c7-b097-fc54769dd515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13415c9e-0727-4356-bf5e-6fb6df6551b0",
        "cursor": {
          "ref": "d1fd09ac-901f-4595-815f-ecb929f03c37",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "865e9047-bc77-4df4-8088-9fbe097400f8"
        },
        "item": {
          "id": "13415c9e-0727-4356-bf5e-6fb6df6551b0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "45209bf8-7cc0-439a-84ab-865bd906f61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d7656b-1a0a-49e4-a2c9-c1a0b1232eb7",
        "cursor": {
          "ref": "2feb563b-6127-4d94-9228-bcc40067ae97",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ff07ba03-75a8-41d3-9e63-8f8f02676ac4"
        },
        "item": {
          "id": "13d7656b-1a0a-49e4-a2c9-c1a0b1232eb7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "df3822de-a15c-44ef-a656-58311b7758fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6096d4-f43e-4ca1-8688-3e8cda745ac4",
        "cursor": {
          "ref": "69462b39-b4c0-4b84-976a-f4d872e108c2",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5eb7595b-76d6-411d-8756-a0815f3abcfc"
        },
        "item": {
          "id": "bd6096d4-f43e-4ca1-8688-3e8cda745ac4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bd2a43b7-456e-4434-ba38-36bd3cb7a851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0a1cb7-e791-41a6-aa7e-6984f4e37242",
        "cursor": {
          "ref": "1c5f60d1-c6d8-428a-a9d5-92c20f2a7582",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd78edd0-51f8-432d-b0c5-27ab05bb2b45"
        },
        "item": {
          "id": "1b0a1cb7-e791-41a6-aa7e-6984f4e37242",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc93b33c-72e4-46f6-9653-465e14ec8b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf5ad45-b2dc-455f-bbbf-c110868dee7e",
        "cursor": {
          "ref": "cf9b395b-58aa-483b-99eb-8f25fe2dae7b",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ea6015f3-9922-4eb2-bbe9-5d04db39a33a"
        },
        "item": {
          "id": "7cf5ad45-b2dc-455f-bbbf-c110868dee7e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e9bf2446-a0d3-4f51-8093-7c3a67dd1369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef2e12f-d00a-4dcf-9a44-fad376b9f4cb",
        "cursor": {
          "ref": "c6ad1d90-499e-4322-8c8d-727a32201ded",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "38a2a7de-fabc-4c3d-a224-1e1bb9fd8d67"
        },
        "item": {
          "id": "7ef2e12f-d00a-4dcf-9a44-fad376b9f4cb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "145c16d2-d91a-41fe-8f47-a1b1276242d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bbbdd6-3a53-4e8b-8d55-4a7d482b6d24",
        "cursor": {
          "ref": "de51bb47-7b13-47c4-8868-a65844a40202",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9e118950-abcc-40f2-bf21-bb551049b382"
        },
        "item": {
          "id": "a3bbbdd6-3a53-4e8b-8d55-4a7d482b6d24",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d476893d-4f19-4915-a5e7-cb5e006c5086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7569863-3de1-4e1d-a0a7-893874f7ad19",
        "cursor": {
          "ref": "22cfff18-0ab7-4ffc-a68c-4824199d50bb",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c837afbe-e3af-462a-8fc6-6804a0a00002"
        },
        "item": {
          "id": "c7569863-3de1-4e1d-a0a7-893874f7ad19",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a293977f-dab6-405f-a535-092d8db2237e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c547fa2-162c-4508-afba-e7a9d5fcedac",
        "cursor": {
          "ref": "07659a77-0bcb-4910-8bc6-cb5833b07e8b",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4a6fd541-d1c5-4319-a2fc-8c3c7591f726"
        },
        "item": {
          "id": "5c547fa2-162c-4508-afba-e7a9d5fcedac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "819f8313-3189-41e5-bd51-d3e0f5968231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23af6c74-41ee-43cf-8eaa-ed3ec63b3d00",
        "cursor": {
          "ref": "07ac9ae3-9eaf-4c0f-853e-e8b8b0c8cdfd",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6f252c2d-189d-493f-9288-10e037c1a167"
        },
        "item": {
          "id": "23af6c74-41ee-43cf-8eaa-ed3ec63b3d00",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4988c5da-4ed2-4b95-bc59-aee611ffc39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4543391-860e-4b0c-a07a-5c78ba9e32e9",
        "cursor": {
          "ref": "707dda91-7672-42a9-a56f-09c57519778d",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7d40e05c-f114-4e72-a9bd-a27dbbcc4ea2"
        },
        "item": {
          "id": "c4543391-860e-4b0c-a07a-5c78ba9e32e9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c9516109-3133-4806-a28c-394cacb84ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f37117b-2786-4b01-b77e-db4d48eb2d53",
        "cursor": {
          "ref": "4e155619-7fb2-47bb-8db3-12a6f6f8d14e",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5823018a-9793-4134-9f08-81a1ba0bb4c3"
        },
        "item": {
          "id": "6f37117b-2786-4b01-b77e-db4d48eb2d53",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "29981a49-7972-4a19-8c01-a0349bc010e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01acfc3a-fd21-4560-af68-fe5b51b49739",
        "cursor": {
          "ref": "c42aa8f6-93d2-408b-9d0a-434c30d6031b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0c2d20a8-d3d2-456c-8c54-3910060fcedb"
        },
        "item": {
          "id": "01acfc3a-fd21-4560-af68-fe5b51b49739",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "19fbdf85-dc98-42b6-b96d-356b75d7cf15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284b5900-46f0-44e1-959f-00afed65ae56",
        "cursor": {
          "ref": "f6700398-9a4b-4a53-ac00-e698efb9c524",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "65ae850f-c98e-4f7f-8cf3-4dd452ae418e"
        },
        "item": {
          "id": "284b5900-46f0-44e1-959f-00afed65ae56",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "33a8107a-3398-4ef8-8a85-1ce6e82b0b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159dee32-ec11-43d5-b7ee-9f40e6fa61dc",
        "cursor": {
          "ref": "288effbd-2ea1-45db-9636-420859b4d539",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0c84e8e6-8c31-4755-b241-4bb32b9426cf"
        },
        "item": {
          "id": "159dee32-ec11-43d5-b7ee-9f40e6fa61dc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "11ddd26b-e2e7-4705-9092-c4c28578a06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59acdb7-aa2b-4302-8dda-007df73de74c",
        "cursor": {
          "ref": "2a4a9023-d58e-4318-860b-710372a6696e",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a67dd2d7-dfa6-46da-9c83-a66ea0eb4464"
        },
        "item": {
          "id": "c59acdb7-aa2b-4302-8dda-007df73de74c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9b49d887-a987-403b-bb3b-2529c7e9f7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2931a27-6d8c-4ff9-b22f-20889dba3df0",
        "cursor": {
          "ref": "53acdd2b-0204-429b-a04e-1f60d794515f",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8f1c439b-33d7-437e-8f2a-48f2d120e133"
        },
        "item": {
          "id": "e2931a27-6d8c-4ff9-b22f-20889dba3df0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c433ee93-9b23-474d-ba32-c44905d301b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f3d174-9434-4312-bd16-29323be76d0d",
        "cursor": {
          "ref": "31488f8f-bbef-41a0-923c-a0aeca35e5cd",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b71e8c5d-4d68-4673-863c-f12682898586"
        },
        "item": {
          "id": "42f3d174-9434-4312-bd16-29323be76d0d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2823f68-0044-4f31-b92b-91c9e2cb9f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80575dac-f948-4953-8b4f-34dbc823b77c",
        "cursor": {
          "ref": "3632f2b2-c93d-477d-a867-5a3c442e26cf",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bfee1c5e-3eca-4314-8cfe-1925ac0db4d1"
        },
        "item": {
          "id": "80575dac-f948-4953-8b4f-34dbc823b77c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fb4f4178-b4d9-400d-8ec2-3ddd21aaafab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f39869-17aa-49eb-989a-6e82ce453bbe",
        "cursor": {
          "ref": "c3826619-d39a-4e6d-b175-0bfdef491223",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "99e238ef-7e69-4d5f-a478-bce8de1ac4d4"
        },
        "item": {
          "id": "25f39869-17aa-49eb-989a-6e82ce453bbe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8cb8067c-01f5-4d1f-b98e-f69b3f64cad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092b4dd5-c6d4-4085-9443-f4684d11ae28",
        "cursor": {
          "ref": "f1ec4c41-2815-4489-be86-b07b60426c4b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "36236eae-be56-4039-8eea-e8e85725cee2"
        },
        "item": {
          "id": "092b4dd5-c6d4-4085-9443-f4684d11ae28",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5a647998-be3f-4359-8253-9220831b2078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d173e2-0ee4-4e85-a3fa-dfa90582c641",
        "cursor": {
          "ref": "b485450b-bda1-43f4-97a3-6aeca15cf57f",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a7c6b63d-c358-449a-8ad7-e26813de1266"
        },
        "item": {
          "id": "49d173e2-0ee4-4e85-a3fa-dfa90582c641",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2879b527-9bcf-4fc0-b1bb-85192e61486c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62b9b6d-15ba-4b83-938e-0727c4238d0f",
        "cursor": {
          "ref": "8fc7299a-ddd9-41ed-bff4-6195182f5f87",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b7c3d25e-9909-4065-ad7f-899dda11f93f"
        },
        "item": {
          "id": "d62b9b6d-15ba-4b83-938e-0727c4238d0f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4365088f-6489-47df-a1b6-f718926a12f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a9483b00-8b5e-4b04-8aab-886b6bce3865",
        "cursor": {
          "ref": "bff33889-867b-4253-a81c-338816293497",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e6768ed1-70fb-47c6-967f-cd6583896577"
        },
        "item": {
          "id": "a9483b00-8b5e-4b04-8aab-886b6bce3865",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a8d775d5-20d8-4f0c-afbe-d9975505efb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5714bcfb-e3f0-48ac-8ace-7b722b534289",
        "cursor": {
          "ref": "c98f1f0f-3108-4949-9286-a2e914d7c497",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8000926a-e554-477d-940b-a8742963b681"
        },
        "item": {
          "id": "5714bcfb-e3f0-48ac-8ace-7b722b534289",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d443a439-898a-4940-8e69-6d812038a985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53354473-56a0-4aa3-9f96-d8bf8b3a655c",
        "cursor": {
          "ref": "fe6d90b6-4d2c-44b0-ae28-4f8c7429df2c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9d51cbf4-015c-4281-bd6d-86efd42af38a"
        },
        "item": {
          "id": "53354473-56a0-4aa3-9f96-d8bf8b3a655c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f98159d5-838c-4b8b-a22a-24f0b308bbf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f898e69-565d-4c7c-a69f-11791fc8fb39",
        "cursor": {
          "ref": "667cdf3b-1ed1-4263-9965-a0585676ffad",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ec3fe925-e72b-4d9c-a9d9-9b8b42a9dc22"
        },
        "item": {
          "id": "5f898e69-565d-4c7c-a69f-11791fc8fb39",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "63f35695-4620-4f01-8539-7893e96a069a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9369e39-4654-42ab-beca-253eb2a5a148",
        "cursor": {
          "ref": "c9a54723-18c3-4fac-ba8a-8d6a6d73224c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "75f15169-0da0-40ca-bf2f-32d435a6f7b0"
        },
        "item": {
          "id": "f9369e39-4654-42ab-beca-253eb2a5a148",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "29c09e07-e22e-4e6c-9ef9-777aaef3d392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e11cfe-e7b9-4046-be1a-4b7eb15c932c",
        "cursor": {
          "ref": "b85dd1ac-253c-4291-abc6-3a9c19acd49e",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c5e39ecc-14a6-439e-a9df-b65e7ae8e9c6"
        },
        "item": {
          "id": "f3e11cfe-e7b9-4046-be1a-4b7eb15c932c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f53d14a1-836d-4f21-8790-a39aafa6011a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b8cc3c-f23b-4cda-b795-f4b742fccde3",
        "cursor": {
          "ref": "cb072321-75c3-477e-a515-00ee70d7cf2c",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dccfbbe1-8e5e-41bf-a5e6-24b7376c3bd3"
        },
        "item": {
          "id": "96b8cc3c-f23b-4cda-b795-f4b742fccde3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "91272e53-a9b6-4a54-8b46-1abc014b4a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0515fb8a-7d1e-44d2-b9e1-70585e141aef",
        "cursor": {
          "ref": "e2346f11-c8e6-49ee-bb20-909ec56bb09d",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1a205a09-a8a2-4e5d-801e-4b53c9da4d20"
        },
        "item": {
          "id": "0515fb8a-7d1e-44d2-b9e1-70585e141aef",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1bf59bdd-0cfe-4c2e-a469-5d32161f4570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3605b759-bbef-47b4-8cb1-22346c471e03",
        "cursor": {
          "ref": "5d2e0e10-1022-478f-b3f6-d135801a30fd",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e399471a-e7b1-4df7-aecd-356c4effdd8b"
        },
        "item": {
          "id": "3605b759-bbef-47b4-8cb1-22346c471e03",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3f6716c2-331e-48b6-8f12-4c352fb325d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4df80aa-74c8-402b-b580-2b85e4edb3bf",
        "cursor": {
          "ref": "b9f8f7d3-f4b2-49aa-982c-26ccf98e7535",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d90aa7e6-edf6-4cfa-89ce-3b6c79c56c9a"
        },
        "item": {
          "id": "c4df80aa-74c8-402b-b580-2b85e4edb3bf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "064cecec-8dec-4724-a4c3-1ce3a82291ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1e42f7-3bc0-4649-80f8-e5e267f832d7",
        "cursor": {
          "ref": "e0377741-375f-4931-9520-9878736a09a6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "06231cb2-964d-484c-9e26-abe5cf3cc779"
        },
        "item": {
          "id": "7d1e42f7-3bc0-4649-80f8-e5e267f832d7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3a115f1d-fdd9-43e0-9fc7-d7aaa88c4f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b612b5-36af-4c92-bdbd-27c01648b4aa",
        "cursor": {
          "ref": "b6a4d54a-bda7-409d-8d77-13f711c2a00e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4bf85aa8-a8d5-4eab-8484-396045b58f0f"
        },
        "item": {
          "id": "69b612b5-36af-4c92-bdbd-27c01648b4aa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ba38cec8-f1f9-4a17-a855-a1aad5295926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8dad20-96dd-460f-a281-228de20dffc1",
        "cursor": {
          "ref": "3f3a6777-9b24-4100-8be9-5c5741046bbf",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "17eb0579-8a34-4079-a507-bf6a99a8280d"
        },
        "item": {
          "id": "7a8dad20-96dd-460f-a281-228de20dffc1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "752b1f44-9d74-43ae-85aa-4187aa6bffc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18368bcd-6a87-44df-a7fd-dd9c2ef7a415",
        "cursor": {
          "ref": "bd472c61-a593-4609-8e66-bb5aeae45f23",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a6406cd2-d038-46d9-8468-0b76177a1b63"
        },
        "item": {
          "id": "18368bcd-6a87-44df-a7fd-dd9c2ef7a415",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f6611bd0-cf0b-4084-ba09-1c57d0c2a117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6080dd3e-82c4-41cc-86b6-42a429958c4f",
        "cursor": {
          "ref": "aa098169-966c-4f45-b62c-d8322d6abd8b",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "834c126a-9cc3-482e-95fa-bde8af36209b"
        },
        "item": {
          "id": "6080dd3e-82c4-41cc-86b6-42a429958c4f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "39d9bdb0-302c-41c3-96aa-88c679fc363b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79731847-1d11-4ddc-b29f-3c0dbb6aec25",
        "cursor": {
          "ref": "dcefb22f-c9ae-4c31-bd98-e6cbf849874f",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3398d63-fff1-40af-9b4a-94e2942c3818"
        },
        "item": {
          "id": "79731847-1d11-4ddc-b29f-3c0dbb6aec25",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e4050419-39fd-4e2f-8a52-aeb23cb1fbf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603b2b5c-2828-4725-8d32-96ed24910585",
        "cursor": {
          "ref": "1e841b71-dc2d-47d9-bf50-5890552a984b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dec5133f-e0fa-472c-9785-69970bac9669"
        },
        "item": {
          "id": "603b2b5c-2828-4725-8d32-96ed24910585",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cc32507d-2c03-4edc-91ad-1a8f8436f09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a4860c-b0e1-48a4-aceb-329a7583dd9f",
        "cursor": {
          "ref": "d5ab9abd-cf99-4fdf-b914-1bc5b6d264e5",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "021510ff-e606-4677-a5fb-e949521023fb"
        },
        "item": {
          "id": "82a4860c-b0e1-48a4-aceb-329a7583dd9f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2df59f80-731c-4a5c-b5ae-c3bb69590698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750c889e-484f-49a5-9b10-a70e80ff7721",
        "cursor": {
          "ref": "ad20f788-2650-4a41-8ce2-3718dafc45ef",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "08c8d360-5629-4938-ac37-6b3600da6284"
        },
        "item": {
          "id": "750c889e-484f-49a5-9b10-a70e80ff7721",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b32d06d1-a164-46fe-a4d0-74751404777d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00932de-2416-4833-b0c6-9afb114abddb",
        "cursor": {
          "ref": "5d3734ae-6c88-4c2a-afb2-e0a8aaff7fea",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0e3d2016-e63f-483c-ac08-4c1bdce59388"
        },
        "item": {
          "id": "e00932de-2416-4833-b0c6-9afb114abddb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "03c6bab3-e34c-4872-8e00-6248f45c04ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca02cd63-cb1f-47ea-992d-197e27e29cdc",
        "cursor": {
          "ref": "3190ae1e-01cb-47ab-b678-53eb17de689b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "93cd6062-bf29-42d1-9a09-c45986bedebf"
        },
        "item": {
          "id": "ca02cd63-cb1f-47ea-992d-197e27e29cdc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c9615ff3-cea2-494d-894e-172b6c0cfee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50e501f-3b21-4631-811a-7ed12e481217",
        "cursor": {
          "ref": "83816a12-2c9b-4f5f-813e-f2a4841c913b",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1b33f98a-f88a-439b-ad0a-bffb52750edd"
        },
        "item": {
          "id": "d50e501f-3b21-4631-811a-7ed12e481217",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ab40432d-e840-488d-9e19-b8130efa1775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a598bb-fadd-4344-a845-2a0fea88a9bc",
        "cursor": {
          "ref": "23cf343d-0985-4b7e-862a-b853fcb54a24",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4e2d0d13-b697-4468-a9e8-c80f38a8be27"
        },
        "item": {
          "id": "f4a598bb-fadd-4344-a845-2a0fea88a9bc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b99dbc5f-9e1e-4023-bc39-18de8ced5edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1777bf4b-e537-4e0a-935f-641c87f27c64",
        "cursor": {
          "ref": "ff4ef4e3-5bfe-49e2-a15b-24eadb5fafe0",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "49597e89-75a4-4e5b-9b8a-eb6722b75bf1"
        },
        "item": {
          "id": "1777bf4b-e537-4e0a-935f-641c87f27c64",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "53e517fe-ca8c-4554-bd58-4392195eacef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380e54ad-cfa9-47c5-9974-6ed7e6328813",
        "cursor": {
          "ref": "ac70c41f-9296-4c52-87d5-61b1a63b533e",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bfe2d4f1-5dba-4b4c-a4f8-2cdcaced2550"
        },
        "item": {
          "id": "380e54ad-cfa9-47c5-9974-6ed7e6328813",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7c749147-331b-4c54-a0b4-e2c2f436c6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0701577e-13eb-4736-8dc7-ff4b1c1097fb",
        "cursor": {
          "ref": "9f7f73d7-2433-46e6-a8e2-605ea1971442",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8fd6a78d-4686-4bf8-8f4e-603af1d8428b"
        },
        "item": {
          "id": "0701577e-13eb-4736-8dc7-ff4b1c1097fb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b27aa237-2b3d-4365-920c-c81ebb898011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b92b08f-ce0b-43be-a2be-8685e919845d",
        "cursor": {
          "ref": "3528dfd3-abb2-4eb3-8fc0-658a216e0862",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8911aa37-8147-4d14-9fb9-1b5e17a1526b"
        },
        "item": {
          "id": "6b92b08f-ce0b-43be-a2be-8685e919845d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6f1afee9-03d5-49f0-8e0f-16712a98b89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3144c3d-700b-4a39-a1b7-7f1b3f81a39b",
        "cursor": {
          "ref": "55c7d4c0-b6ef-4105-abc8-0ef88c815fbc",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0590daf0-1e1b-4d4e-abed-09428689ae22"
        },
        "item": {
          "id": "d3144c3d-700b-4a39-a1b7-7f1b3f81a39b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ec2e0b86-1c6a-4f46-8604-949788c32ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4de4b-53c8-429c-84f3-1007874408ef",
        "cursor": {
          "ref": "03e6b1d4-832b-4651-9416-50f971a5269a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "df485472-15d8-4a08-ae78-4cd8e1fe80ec"
        },
        "item": {
          "id": "27e4de4b-53c8-429c-84f3-1007874408ef",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1295cdf-bb19-4806-b795-a4fa4c6bace3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e946f8-8469-4841-9676-9c485fe81f4f",
        "cursor": {
          "ref": "f769bc64-6a99-4bb3-b27d-f728ac1a446c",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0e7fde73-0a60-4160-af62-984223d08702"
        },
        "item": {
          "id": "05e946f8-8469-4841-9676-9c485fe81f4f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2984007c-a72e-4a6c-b381-d7b9dcca796d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "5059109c-67af-4585-bc9b-5e8273e3ea0a",
        "cursor": {
          "ref": "cd93e39b-540b-4f22-acfa-3bd7f2611089",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "abc0b519-96f7-4c9b-aab6-4f5195cb9e39"
        },
        "item": {
          "id": "5059109c-67af-4585-bc9b-5e8273e3ea0a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ed8442d1-ae48-4c78-8f44-49a75abab483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7aed896b-b52b-45d9-bc92-b862b0522adf",
        "cursor": {
          "ref": "853adf00-886e-47ba-8306-559868ca5a41",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d6d42fe1-eac9-42eb-95f2-64039a185156"
        },
        "item": {
          "id": "7aed896b-b52b-45d9-bc92-b862b0522adf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ab20e6e8-d82c-4426-aa41-529bec1373e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0a626b3c-7aee-4f47-8644-073a8e3cebab",
        "cursor": {
          "ref": "d14c689b-0513-4cf5-9210-7e17c97a1b57",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d03e23ec-b323-49ab-b142-536e7f7868a5"
        },
        "item": {
          "id": "0a626b3c-7aee-4f47-8644-073a8e3cebab",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6e28c7da-dee5-4d7b-8531-78b80d9de4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cd2063-93ff-40ef-a855-7560f29a1f5a",
        "cursor": {
          "ref": "b00d6219-1589-4047-b78a-f2d93b26eeaf",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8d8db5b1-6c1d-4353-a56a-29f26e1d39b7"
        },
        "item": {
          "id": "65cd2063-93ff-40ef-a855-7560f29a1f5a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "acee7eed-7fce-49d6-9c1a-a7edee2057c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "7c41dcf9-930e-409b-884f-6cd4cef54d90",
        "cursor": {
          "ref": "07365283-e6d3-4c48-a4f3-5c8dbd3c6508",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ad6d8adf-d5d3-48cf-94f5-45e1667c06a8"
        },
        "item": {
          "id": "7c41dcf9-930e-409b-884f-6cd4cef54d90",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "453d15a4-d4d4-49a5-a397-905ec277ed77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1233,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "fa526117-976f-4492-8cf0-f812cdeb22e4",
        "cursor": {
          "ref": "db5557a3-cad4-4504-af22-192b4e7dba73",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "29bc4b86-6fb5-4184-825c-d14a5da71e04"
        },
        "item": {
          "id": "fa526117-976f-4492-8cf0-f812cdeb22e4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "36e7017f-f736-4723-82dd-bd73f6905c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3c37d20f-26b0-4936-995c-28b9415515ac",
        "cursor": {
          "ref": "99f6551a-3715-4006-8037-192d867e45bc",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4dcf1caa-b31e-4e54-87e4-0710e10c6954"
        },
        "item": {
          "id": "3c37d20f-26b0-4936-995c-28b9415515ac",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6d970435-88b3-4379-a8a2-c5b9fc742d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "48ae3e47-c9ed-4a67-afd6-b01c8f960de1",
        "cursor": {
          "ref": "e6990c7b-95db-4754-9d07-78b6c2cfb0bd",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "721a2094-4931-4a55-a0b9-c10697a2e4ff"
        },
        "item": {
          "id": "48ae3e47-c9ed-4a67-afd6-b01c8f960de1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6e81ad54-ddc6-4957-935f-e7ae419a6554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cc703a7b-2355-45df-bac3-56343cb14847",
        "cursor": {
          "ref": "7ab9a8d5-a76e-4745-9aed-05f39838b8e8",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "256a508a-2aca-4bfd-b5bb-eed670b0c7fc"
        },
        "item": {
          "id": "cc703a7b-2355-45df-bac3-56343cb14847",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "11ea8c90-99eb-4bf5-ba51-ac0f96d0961c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a2665d01-bfd9-4f28-be67-d773c99207ba",
        "cursor": {
          "ref": "9199e152-a65e-4327-8021-beb9a35a82c7",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3d6132b8-cffd-437e-87ce-39d138d7f795"
        },
        "item": {
          "id": "a2665d01-bfd9-4f28-be67-d773c99207ba",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d93e843b-099e-44f5-8477-04a7d208ebd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1316ee5f-0a14-4f88-aca4-388d4ce90701",
        "cursor": {
          "ref": "44add1b2-65b2-41f5-8701-71e035ace414",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6478b21c-8f31-4bd9-ba3e-6ba0478c5ec5"
        },
        "item": {
          "id": "1316ee5f-0a14-4f88-aca4-388d4ce90701",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2309612e-5380-4b5a-960f-dd7e562d1926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa2555f-c058-4625-bc63-b147cffeedaf",
        "cursor": {
          "ref": "c20dbd9d-d20f-49c0-b1df-13eead9621fc",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "09403ac4-eb8c-4c62-9aa3-09190590da6e"
        },
        "item": {
          "id": "bfa2555f-c058-4625-bc63-b147cffeedaf",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e38b7c23-59a9-44c6-bd2b-0bfd9a71f3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8827c220-13ca-40a3-b0e0-b096ace0f3c6",
        "cursor": {
          "ref": "7ab1e8c6-626f-4eb6-ba4c-dd0241b7ebfd",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9680f518-416f-410f-81ae-fcd9382a1927"
        },
        "item": {
          "id": "8827c220-13ca-40a3-b0e0-b096ace0f3c6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7b3a43d0-4df8-4f76-b81e-782d9c6d7d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe330d9-670a-4396-8c21-a1d4b3d3309f",
        "cursor": {
          "ref": "aed9178a-c8a3-4ef3-bed0-e21b21f536ba",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ceecec74-b28f-4130-9f84-2a32932df78b"
        },
        "item": {
          "id": "3fe330d9-670a-4396-8c21-a1d4b3d3309f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c93146b6-fc48-42b5-9fac-7fbb6ed0af3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2697ee7c-56c6-4ba2-9dcb-5e9718a6309c",
        "cursor": {
          "ref": "83dc68a0-e027-4e6c-9042-f1b957fe25d1",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3df59aa8-b546-411a-8973-7a3185a9d3c9"
        },
        "item": {
          "id": "2697ee7c-56c6-4ba2-9dcb-5e9718a6309c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5dca54b9-8785-42c1-8e25-9397e6844de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03ccd0-bff3-48d0-b147-6095da24221e",
        "cursor": {
          "ref": "ce6cc4ce-b392-46c5-b475-fb345f8d98bd",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "36711a27-2bc3-433e-b845-00f2cef13329"
        },
        "item": {
          "id": "5a03ccd0-bff3-48d0-b147-6095da24221e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9ad897a8-9670-4259-b830-d52916940d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ccbc50-4460-4a50-b6c4-58809bd79d6c",
        "cursor": {
          "ref": "ab00610a-aa34-4565-be60-fcbb699a0acd",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7d5ea61f-9481-45b5-bd29-91dd0e9c137a"
        },
        "item": {
          "id": "c3ccbc50-4460-4a50-b6c4-58809bd79d6c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "be7f8029-475f-45e3-a829-e0907d5d36fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3389e20f-c409-4661-ab03-39d6305f523d",
        "cursor": {
          "ref": "bfff8efb-01ae-4cf6-82cc-3af7350a61b4",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bba0190a-4bd0-4eee-a905-d81448064e24"
        },
        "item": {
          "id": "3389e20f-c409-4661-ab03-39d6305f523d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4bd745a5-3a34-43b7-bea3-6795800b125d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4505dc77-e687-491a-b168-5d61c83fe250",
        "cursor": {
          "ref": "de0943f1-291c-4ae3-954f-05cb542057b9",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "47bd84e6-757c-4783-968d-e6eb7fbc9a76"
        },
        "item": {
          "id": "4505dc77-e687-491a-b168-5d61c83fe250",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ab7d48dd-7b63-4a3c-8e4f-65d55768d658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2983112-504d-44c8-9085-9d1ffb6f914e",
        "cursor": {
          "ref": "75c80c81-707d-45e2-8c6c-6fe5e1b53911",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "87636094-9044-4908-a2a4-c4436e0474a4"
        },
        "item": {
          "id": "b2983112-504d-44c8-9085-9d1ffb6f914e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cdeb43d5-7ec0-48f1-b1f1-602e03bbc3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80533be4-25f7-4ff9-bf09-cfed86b279a8",
        "cursor": {
          "ref": "1d3368ac-87f8-4128-9a0c-383715f8a3bf",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c8668f03-9010-4e40-ab59-b6d98891d19c"
        },
        "item": {
          "id": "80533be4-25f7-4ff9-bf09-cfed86b279a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bb2b8e79-7ec1-49ec-a66d-3c0e895dbac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c584b9-6af1-4fe5-bc58-a0789c1271f8",
        "cursor": {
          "ref": "d9306c4e-4ca4-4741-a001-9e988d80cf45",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d22765e4-3499-4534-9fc8-e0e2b8d43e4a"
        },
        "item": {
          "id": "f5c584b9-6af1-4fe5-bc58-a0789c1271f8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b36b373f-3dfd-4a96-9638-ee28d3b32419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243d9363-b522-4115-ae9c-42e46fbd6d79",
        "cursor": {
          "ref": "5c8bf04b-02f4-40f0-97c1-90cf9ce5bf8d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bcfb5e9d-7ccd-4778-9ce4-27f6e5c16497"
        },
        "item": {
          "id": "243d9363-b522-4115-ae9c-42e46fbd6d79",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8fbabf60-cc0a-468e-a968-ae68bf4f6c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1133,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "8841d63e-bb2e-4ee5-bc14-6390c0dae896",
        "cursor": {
          "ref": "f7d6e48f-2a6e-41b6-92e5-933c0d3e62c0",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "27c4243e-7268-4eb9-9ad7-2e916fea7791"
        },
        "item": {
          "id": "8841d63e-bb2e-4ee5-bc14-6390c0dae896",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2dd4e47e-8c2c-4a2f-b02a-9d692e172aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1148,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f045d233-48a8-4a68-a12e-ed03a6c70e1d",
        "cursor": {
          "ref": "792ae411-7002-4cbf-8891-46fab4b802a1",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7528f9b0-4fcf-41ed-b7f9-ca3b80806540"
        },
        "item": {
          "id": "f045d233-48a8-4a68-a12e-ed03a6c70e1d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c80bac12-2cea-4be6-ae47-2da96dd9b6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ddd064c1-edd3-48cc-99bc-2005189b3254",
        "cursor": {
          "ref": "2598922a-7da8-4d0a-9c8d-56ac432b267a",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5e1f7670-1ba5-4dfa-91cd-c3765dbe54ae"
        },
        "item": {
          "id": "ddd064c1-edd3-48cc-99bc-2005189b3254",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "77b2fcf6-5583-4c0d-9541-a8f9f9ac6085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1147,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4513dc11-e044-4002-afbc-59d15cc5ddcc",
        "cursor": {
          "ref": "983357ae-ae25-4050-91f1-d4b3db7de231",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "489965d0-2373-43ef-91af-f59a3e104bbb"
        },
        "item": {
          "id": "4513dc11-e044-4002-afbc-59d15cc5ddcc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b15bd2c1-8122-4934-87e1-13e401c7cef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "aa5fcaeb-faf2-4f8a-9ba4-2ceb003b6d33",
        "cursor": {
          "ref": "5a78a20c-7713-434c-8228-59a30058b35d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ccb34f15-6695-4a53-97a8-23bc344e922e"
        },
        "item": {
          "id": "aa5fcaeb-faf2-4f8a-9ba4-2ceb003b6d33",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3483488e-9a88-4a43-a62c-f159bce87495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24564d62-c862-462a-a515-bdf0e000d823",
        "cursor": {
          "ref": "7eff57ac-a924-415d-b3ae-65207bad1193",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f883ed25-ec4b-4706-bacb-eaaae45c75e6"
        },
        "item": {
          "id": "24564d62-c862-462a-a515-bdf0e000d823",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a38959fa-9586-4796-afc2-b01bff6a75e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1995fa-1ca2-4246-82b3-d79392653d54",
        "cursor": {
          "ref": "88ca98ac-613c-4ca1-b8c6-b8f79b265e63",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fb4acee9-faed-421a-9e43-4f593bf4dcd9"
        },
        "item": {
          "id": "ee1995fa-1ca2-4246-82b3-d79392653d54",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "83702d1b-0f92-4630-beb0-1020840ff4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2630f4e-1cc5-40fe-856f-8873664e43eb",
        "cursor": {
          "ref": "f4367afa-00c4-40e8-a4ed-3c83d9e8d184",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f74ebbc4-760f-42d8-98e4-13b5f0e0e6bd"
        },
        "item": {
          "id": "b2630f4e-1cc5-40fe-856f-8873664e43eb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f7ae096a-b914-4dba-abc5-2e32a0578686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975ca6d1-17c9-4132-a6a5-53b2d36cd2db",
        "cursor": {
          "ref": "b96df52b-f5e9-41ce-8a35-c07cdedc4eeb",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6558c930-0018-4254-bd60-533f96fe32bd"
        },
        "item": {
          "id": "975ca6d1-17c9-4132-a6a5-53b2d36cd2db",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d79aac35-72ec-42e2-869c-88de58278d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d668e4-b129-4541-b7b7-3493a9924ea7",
        "cursor": {
          "ref": "19a4c0dd-ff29-4109-b5d9-b500ea697e1a",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8f97d04d-1457-4397-8d3f-665e70378e7b"
        },
        "item": {
          "id": "34d668e4-b129-4541-b7b7-3493a9924ea7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "21385aca-7b3f-4c9e-ab56-6d997856a6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ccc8ec-05eb-457d-80f9-589c2f8711f8",
        "cursor": {
          "ref": "9ff82b84-838a-4af4-8514-b581aee4e6ed",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c4854086-d9d8-4c68-9cc4-d6c118c1ce26"
        },
        "item": {
          "id": "b5ccc8ec-05eb-457d-80f9-589c2f8711f8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4319435e-69f3-4075-b72a-9cb5e9f70fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123b7e25-6c96-4837-9def-8a875317f1df",
        "cursor": {
          "ref": "8d863b74-f03f-4ebe-8dfc-fcfb39f68ecd",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e8fbf6cc-72de-40bd-9b81-bdabd9d3648a"
        },
        "item": {
          "id": "123b7e25-6c96-4837-9def-8a875317f1df",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fb7a9821-103d-417f-8395-43eed0cdfd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9515bc1e-313b-472c-a3db-a752372ff436",
        "cursor": {
          "ref": "861e3f1a-ad81-4619-a364-eb426ec1483e",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "23c2fab7-15dc-435e-8098-24c30a3438df"
        },
        "item": {
          "id": "9515bc1e-313b-472c-a3db-a752372ff436",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1849982a-1f22-467f-aecf-e73f19bf7352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd1c8bc-afd6-4c4e-87d4-f91eb102e5da",
        "cursor": {
          "ref": "eaaaa28d-91e5-4b08-a5e6-0b10ffd61849",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d89982dc-392b-4f82-a8e4-1f7610dd380f"
        },
        "item": {
          "id": "2dd1c8bc-afd6-4c4e-87d4-f91eb102e5da",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9b10b9d8-430e-4a4b-8a8a-0683ab7cf350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33760412-3c1c-4b63-bd8b-40192a2cb1c7",
        "cursor": {
          "ref": "d8ed3e80-ec2a-4e64-bf1b-a71527a0ee38",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "405010ad-fa53-4f93-a968-2c32d1cc566d"
        },
        "item": {
          "id": "33760412-3c1c-4b63-bd8b-40192a2cb1c7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "59463613-e65b-4b7c-8622-6eed357ac99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ecd362-912d-4665-a577-a9035d2187e5",
        "cursor": {
          "ref": "7b8158c9-9c32-430b-9533-cab8adbaa326",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e17d291c-cf51-4056-b142-0a8982600440"
        },
        "item": {
          "id": "f1ecd362-912d-4665-a577-a9035d2187e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "831f1162-b12d-4ce5-a33e-00154a588e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6165c32d-79d7-4151-b360-50e39ab900ad",
        "cursor": {
          "ref": "d05611a4-4227-43a4-96f7-a63ada7d5f43",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4a89eb25-1604-42c1-b3ea-e7c0d8d7eb4b"
        },
        "item": {
          "id": "6165c32d-79d7-4151-b360-50e39ab900ad",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "41601110-6e69-4bb5-968f-319977410818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447663dc-41ec-4b80-acdb-7c17394f9874",
        "cursor": {
          "ref": "3ec703ea-9fa3-444a-946d-57e0aa3458e7",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1e35c822-154e-4f4a-995c-4d9ca4753463"
        },
        "item": {
          "id": "447663dc-41ec-4b80-acdb-7c17394f9874",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f30dfeab-8804-48a8-83c8-524f434ebd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a99d74-c5aa-49f5-86f7-e1d3711f46ca",
        "cursor": {
          "ref": "4345a3b7-a98e-45e3-8b52-e5f9355a7d30",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "16fb493e-c6a2-42a0-a29a-6e7e53065d56"
        },
        "item": {
          "id": "48a99d74-c5aa-49f5-86f7-e1d3711f46ca",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7ed199d1-231e-4716-8ac4-1b33fc13bc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b9e31c-d5f9-4e44-b06a-b8f97ef4abfb",
        "cursor": {
          "ref": "8ebdb2c7-1508-4a4a-8f49-e2b3aa8c1c47",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d1ad2fd4-6c7f-4463-b6c1-e01319d163b6"
        },
        "item": {
          "id": "a1b9e31c-d5f9-4e44-b06a-b8f97ef4abfb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c6c1aa87-7097-418d-95b9-a3b2966cf20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d7b3eb-21ce-485b-a2c8-b7c6a03be3af",
        "cursor": {
          "ref": "973c71a9-9224-4d49-a56c-c9ac1d8e3fd8",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c6c330b2-df98-4f59-b77c-5d143f7eb4fb"
        },
        "item": {
          "id": "96d7b3eb-21ce-485b-a2c8-b7c6a03be3af",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "139f10e4-6dce-4e2b-af66-861171bdde72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cd2ac9-8372-4968-9c16-66e0735dda91",
        "cursor": {
          "ref": "47553baa-b739-4e83-8759-933357b4a288",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "aa9c29eb-a106-4999-993b-6ab61a96c274"
        },
        "item": {
          "id": "79cd2ac9-8372-4968-9c16-66e0735dda91",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5326b497-5532-4a17-9af7-e3eee67357a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0904a4f-90ff-497b-9ffc-c6278f148ac8",
        "cursor": {
          "ref": "fae2041a-7e33-48b3-b765-cde491369e0e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5ccc6c5a-bccf-4e7a-a5a1-06eacc317d53"
        },
        "item": {
          "id": "c0904a4f-90ff-497b-9ffc-c6278f148ac8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d676a8ad-6327-4abd-adc0-a900bca346b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7d9867-f56c-4352-b2d0-bc110ced3774",
        "cursor": {
          "ref": "7a84790d-5856-4a34-a17a-79439c5fd205",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "58861532-bac8-4e39-a55d-8f3280c4838c"
        },
        "item": {
          "id": "6b7d9867-f56c-4352-b2d0-bc110ced3774",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a8486688-7b8e-48fb-a82c-c2b8ec2a7c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe478fe-d2ce-47a7-92e5-b5befec19f3e",
        "cursor": {
          "ref": "d40458db-49a9-478c-99ec-a149d4053783",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b569c15d-24ad-4656-b2ee-e1a8131e9117"
        },
        "item": {
          "id": "abe478fe-d2ce-47a7-92e5-b5befec19f3e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "51910d8f-056d-4ddc-947d-fb256a247fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7eedaa-7ac1-45da-9e84-333ec1de2879",
        "cursor": {
          "ref": "f9b7c7f4-bbd2-41bb-9749-4dfa76f5cc3e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "53b2b53e-aa04-4b08-94ba-a67676d755f6"
        },
        "item": {
          "id": "8b7eedaa-7ac1-45da-9e84-333ec1de2879",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "266ee9cc-3f03-4734-8b21-9dba9911e3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1833fa7c-02b9-4d77-a1cb-7417f1067148",
        "cursor": {
          "ref": "cb658e7c-3e14-445a-837d-7c69c97be8e9",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5995a38c-230b-4be8-918f-5ae344b4a741"
        },
        "item": {
          "id": "1833fa7c-02b9-4d77-a1cb-7417f1067148",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "161d42e8-b463-4e53-83f3-18ee41d8f8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96f66e0-74a4-4631-a866-401bd78e58ce",
        "cursor": {
          "ref": "ae9d255f-d357-45e7-a256-6aab4acb42c1",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b116402f-5188-4563-896b-1c2b37c96fcb"
        },
        "item": {
          "id": "b96f66e0-74a4-4631-a866-401bd78e58ce",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b6e6f7aa-4250-47bc-a706-73f17366c324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5f1317-7d4d-49f0-9591-5ae4e1531b51",
        "cursor": {
          "ref": "af74400a-891e-43fb-a11e-cecacbf26b23",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6542c353-0ab9-42a8-8b35-f78deb8ce88b"
        },
        "item": {
          "id": "aa5f1317-7d4d-49f0-9591-5ae4e1531b51",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "769565c3-a4bd-4961-bf8e-8a5248550a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d6815c-39a9-4ba7-9eb0-318e56ddac84",
        "cursor": {
          "ref": "aed890dd-ea88-4ed9-b13f-19f21dd6b596",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e88d7d91-f1a9-4784-bd87-780546ae8c0b"
        },
        "item": {
          "id": "92d6815c-39a9-4ba7-9eb0-318e56ddac84",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a159516e-b88b-46dc-8ded-a0381f55ad6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f1c33e-8bce-467c-9833-353c9fa2fd11",
        "cursor": {
          "ref": "95e94ef5-70fc-4244-ba8a-04050f9f7ed0",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7b19dd13-80ba-4b3d-b0a2-ac6c72826828"
        },
        "item": {
          "id": "66f1c33e-8bce-467c-9833-353c9fa2fd11",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "40de9436-4827-41fa-ad1d-0c42b73a7146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556e351d-3a08-4072-b608-324fd9a2f7b3",
        "cursor": {
          "ref": "b6279527-29cd-49cd-ae6a-0e4e6f6a279b",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5c5b2b41-459e-4647-9bbe-ddd72afc1f3e"
        },
        "item": {
          "id": "556e351d-3a08-4072-b608-324fd9a2f7b3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2ec25202-c76b-46ec-a631-8712bed2160f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22229293-d42b-44d7-bae6-092f1a8aa8e7",
        "cursor": {
          "ref": "76116a9a-f51e-4b45-af98-846ef25d6938",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2e0a17da-a7aa-42a0-ad0f-817468728019"
        },
        "item": {
          "id": "22229293-d42b-44d7-bae6-092f1a8aa8e7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fce7f35e-b1fa-430b-ae41-f1649e4a1593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c7d347-7e56-4827-bff4-75eb762aadea",
        "cursor": {
          "ref": "d8958093-7d9e-4a36-890e-32406d4649c0",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8c00482f-56a1-4a14-bcc9-058421a5ab47"
        },
        "item": {
          "id": "71c7d347-7e56-4827-bff4-75eb762aadea",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a73ddfc0-928f-4e91-af2d-25255bf6e666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7fdeda-3436-4b4e-923c-7e2e3957f8e9",
        "cursor": {
          "ref": "34c5f195-db27-43a3-ab00-a8e68d3b140b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5d8ae2bb-249e-4c86-8104-d3da2ac83fe4"
        },
        "item": {
          "id": "1b7fdeda-3436-4b4e-923c-7e2e3957f8e9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2af35327-5190-4bbb-9a3b-fb6ee42ecb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215ea4e1-3a03-4e4a-b665-0da6a2c1e104",
        "cursor": {
          "ref": "89417483-0a2d-4500-a283-a9559ecb4769",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5e89684b-b4e9-47b1-828b-e56488e19e93"
        },
        "item": {
          "id": "215ea4e1-3a03-4e4a-b665-0da6a2c1e104",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4189dab0-619a-448b-91a3-2c6725edaeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fa615c-b4be-486e-9b1c-7d0728662fa2",
        "cursor": {
          "ref": "e3fc39bf-771e-4590-9920-75e9d88d99fa",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "165db6b6-cc27-4410-8787-34ee1de814ee"
        },
        "item": {
          "id": "17fa615c-b4be-486e-9b1c-7d0728662fa2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "46ba5907-2466-4796-9137-ce01c63fd087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc859bf4-a71e-4ad8-bd04-32c5cd350de9",
        "cursor": {
          "ref": "1e628dab-8411-4ae6-9c57-b8248c38c6ad",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "254c78d8-3ffa-4e37-bbb7-be15a10c3716"
        },
        "item": {
          "id": "cc859bf4-a71e-4ad8-bd04-32c5cd350de9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1f3cd1c0-d044-44e4-ab6c-7923e9809407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfed8ad-70a8-454a-bd71-fcdf8c80ff77",
        "cursor": {
          "ref": "f2b887f1-2593-43b2-a14c-55d9d62ee4d3",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "fdd5ee3d-ce6f-48da-8efd-3005af0111d6"
        },
        "item": {
          "id": "3dfed8ad-70a8-454a-bd71-fcdf8c80ff77",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "032a976a-c9bd-46dc-b564-72980666c606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b337015-32c6-40f4-8f61-3f1ae7165b9d",
        "cursor": {
          "ref": "9e21f4e3-4bcf-4abf-a6ab-40e03f1bae68",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "38748608-dce0-4e95-81d6-c1268fba7164"
        },
        "item": {
          "id": "5b337015-32c6-40f4-8f61-3f1ae7165b9d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7249c4f1-e27d-40d9-9aeb-5d5231ce6dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27e38df-50a7-4ea8-a9d5-fcedd4fc74a9",
        "cursor": {
          "ref": "d76db668-a2b9-4899-bc47-7d5ec9f45196",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "11e6daae-fbed-402d-9ab8-c2332cc52ab3"
        },
        "item": {
          "id": "e27e38df-50a7-4ea8-a9d5-fcedd4fc74a9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f10064d2-2df8-4dc6-8167-6b90e49fc7e4",
          "status": "OK",
          "code": 200,
          "responseTime": 1168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc166ed-eb4a-4c8a-90c1-f4d5d1c573c4",
        "cursor": {
          "ref": "9f392a7f-ebd5-4619-a526-8a9b17ea7a50",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ef5f9f70-0eaa-4b32-bf11-efce1016f2c4"
        },
        "item": {
          "id": "ecc166ed-eb4a-4c8a-90c1-f4d5d1c573c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "62f9b963-c35a-455d-a69b-a834f1a35673",
          "status": "OK",
          "code": 200,
          "responseTime": 1177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "323b4690-5528-48fb-bf8e-a4d8772ed0ce",
        "cursor": {
          "ref": "3272ccca-1806-4e05-9f52-60cc954ef581",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c6e151d9-7caf-4b16-b155-165eb57e888a"
        },
        "item": {
          "id": "323b4690-5528-48fb-bf8e-a4d8772ed0ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41bdfe64-d868-4185-9971-6228ad8b9425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323b4690-5528-48fb-bf8e-a4d8772ed0ce",
        "cursor": {
          "ref": "3272ccca-1806-4e05-9f52-60cc954ef581",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c6e151d9-7caf-4b16-b155-165eb57e888a"
        },
        "item": {
          "id": "323b4690-5528-48fb-bf8e-a4d8772ed0ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "41bdfe64-d868-4185-9971-6228ad8b9425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df9e529-5fcb-444b-863c-13241fffdec9",
        "cursor": {
          "ref": "2b07ea2a-a1c0-45d1-b134-e6bf350548b1",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "abd3eff8-89f0-4047-9f87-208f33cf7a2f"
        },
        "item": {
          "id": "1df9e529-5fcb-444b-863c-13241fffdec9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1ebb114f-6bbe-4e7a-8cf6-f13f1ac66f85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b799c5e7-04e0-49dd-b9be-8e6b970b5f5e",
        "cursor": {
          "ref": "154ce52c-7fe8-4f7f-9a81-9d323d432fca",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "e8b69d2b-cf41-4ec2-b2a7-bbc83473e0f8"
        },
        "item": {
          "id": "b799c5e7-04e0-49dd-b9be-8e6b970b5f5e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9f907c47-188a-45c9-89eb-5825ba7fcd76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}