{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5833aa84-58bb-4d45-bb39-fe993a8117b1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2d7679a0-0f94-4a89-b697-a4307cb122ad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f983f6e-d8b8-44fb-8baf-cdd0965254df",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d0c818c6-7f50-4da5-8f2e-8db6f38091df"
                }
              }
            ]
          },
          {
            "id": "26fbc438-da79-425c-9906-fcee2187fe40",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e707b675-14f1-424f-ad46-1d976571e009",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d904cdfd-bf52-4910-ad43-49180521cc70"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bf2d7ae4-79ce-42b5-a915-917b35257eb5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1dbe763e-0000-4a15-8bb3-5d14ab8e8197",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ddf0874-4521-4faa-a6dc-ca196dc2e63c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1de48ef3-60d4-4b3b-9a56-b231e024c2b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "244cdb7c-f905-40f4-87b3-f0efa3d15999"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ca0e83e-150e-4032-a310-9a2490e2e709",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85942d64-1da8-44dd-95e4-839b43ee148a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c810149c-138b-4587-aa64-9a1bfbf44d1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0e2b9a8-266a-4da6-8450-8bbf4da9bfdd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a3ddbf8-6f4a-47d8-8559-76a4c4894e9f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4784e02f-886f-4f36-962d-8f16639a4a0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9816fd16-220b-4592-ad67-41bee5c69372",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de5f2109-ff99-4caa-97eb-8f5a1a5050e5"
            }
          }
        ]
      },
      {
        "id": "50fb8e15-34c9-4120-a500-feff10ddd816",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7a1aa74f-d7e8-4f6d-b822-5bff5efcd532",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8504339e-1779-445c-8d81-50e859305c16",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5a163bf5-7a48-4179-9814-c09bba885221",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dec914-785b-436b-b638-18d6a906c1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1420781-5435-4280-9f06-0ac4db0d3b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6e5cda-100f-40cb-aae7-1b6fe43dbe1e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ba39cd-542c-4c79-97be-30aa213b1a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "543147fd-770b-4480-8457-280dff516c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb49bab-27a8-4f27-b0a3-72a6fc0690cd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101e568b-e33b-469b-93aa-c08378237de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "302978ea-41d9-4641-b6b8-afbec8caeff4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e5763f8-736f-48de-b014-47ef2b2aa569",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f63d7df5-b127-4792-9c36-d35a2f45ee56",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b7416-1729-4528-9888-a58d336fdf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e1d3cfd-56df-41d6-b7b4-947d199f6915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b0088-7c3a-4686-9735-f6b05edce07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e825645b-7ddb-4006-ad37-fdbbfbc1909e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ee4f4880-64f2-4edc-8e9e-c801069da2a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00d1d745-e63c-40f5-9a0e-d6c33bbb2f02",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6d5c0a7-43da-43b1-8910-2cf90537202c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5b437b98-4aaf-4c54-bd41-863fb9749ab3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4313dfd4-5127-42e0-b7c1-157624a03a63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "24ec4e92-e9dd-4379-80c1-57febdc12911"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef0d1a84-6735-4294-9ba2-0c07ae901359",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbf208f1-0ea5-4fc5-92c5-53a9aa8b7b25"
            }
          }
        ]
      },
      {
        "id": "9d8cd792-c36c-4934-b96e-1f13acd5c1c0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ad4e238c-4b6e-44f3-8ca7-b65669fb8855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7e72769-8d2b-44b3-b869-f12ce3eb06b1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "74dc2817-0a69-48d4-8b7a-c4a2f4545718",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0efc024-c3d1-402b-a981-2ba02a7a6aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acac6192-6d53-4146-be23-e9d796e2d605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c067bcd-b86b-4dfb-8f54-c0ac92b430da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56051356-0aba-4467-a6aa-7c3e9ab51b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051bb17a-f72d-4a17-9b4f-2dceefbebca0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16db1e55-460f-4539-aabc-33271d5d9c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997e973d-d2e3-4d5b-b011-b243b17bccfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7862a88-34b0-4442-99c6-fbb3d0c48212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03addc4f-9691-4587-806a-1b22b0847cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9472dfaf-70f2-4b66-b6ba-cc76821ddd9c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1048bdb7-dc02-4902-8ac7-d53c138e0387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9518c998-ff9d-4fd7-bbd0-310f7804e8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb68ffc-8f5e-4144-869e-3ffe24db9610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5aeb677-add2-45a6-bdcf-93a7038f0b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0c46a4-3491-4373-ba2e-f95965b8df06",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ab65ce-46e9-4103-898b-c7cec1ad8bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a0042f-98cb-4abb-bad4-f5b6d6ddec31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d74ce4-d7ed-450e-8dce-bee455ff3688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e1f9f9a-9836-4d05-adc4-b0389c54b0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00efd1ba-00d4-48e8-895b-84f112102eb0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cde08c5-12e3-4ff7-bd14-15f550d02452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c365d9c5-6998-4857-bdbb-d4e64731686f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa2e543-1414-499a-9828-fddddac044e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0b528d8-5e84-48a7-99c6-347a7dd53f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8272217-504d-4f94-bf08-c1f27a325d00",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbd52c4-c6e6-49f4-8ce3-b688049c0dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4066bd-0394-4512-8e2a-74567587862f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c74080a-0c63-4619-8e34-81cef67106ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6379b9e1-19e4-46db-8880-ca9161e0fc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c3acf0-5036-42bd-9217-a638f3e5c806",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcd96ef-f004-42d2-ba46-acd6d240a931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbea0a7-4bd9-4769-88e8-bb3ee7f8a2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfd6eaa-65dc-401c-87e9-35186f994ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "315c54ee-47b0-4f46-afe3-a7c41ee72035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d127ed45-08aa-465a-9d5d-fbda8c518605",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e986c806-c846-4119-8181-c715056eb34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ce148d-c385-4e91-8607-9e8b6566565d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aa0392-1c94-449d-8651-6867de06ac5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "281c9bed-8beb-4ca0-84c1-522540b68dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b041364-17f1-449f-8e94-16430e0d1cb5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2df70f-1fe6-40da-afd1-f30ca84281cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd971f2e-035e-44c6-a0a7-e6419f44ab60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12754557-4bac-47f4-ba2b-42aaf0d42619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94c1cc38-e1c4-476b-9cd2-31052693a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8cf179-ec95-4aa1-a8ee-9e684ab0460d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3bc664-ed2b-47e5-ab61-238fd838d754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5558860b-cd42-4098-87fe-718bea5c13b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ce8aa7-5ebe-435c-9673-2f90ba9f49a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ca74c16-14c4-416b-b943-13d16f6307de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8076ae37-5fc8-44d3-a686-71a2f2c047bf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50797e3a-197b-4197-b23b-9fcbf06e7919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9371e1cf-6cfa-4192-a77c-c9d00dcf3d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96aad272-8e45-4ccc-93fe-66b5f9887af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddf6f138-b011-42ae-aa77-71cf46532292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09c1e8c-1b77-4e8e-bd73-632c833345ca",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebba95f-b000-4c34-9dd2-3a4474ba9b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23babeba-e132-4f13-8183-429394983f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d80e088-0e29-41de-8624-81c1a9c75949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "946ce2be-a52a-4ddb-9242-3e1abad46e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dac81a3-f4b7-44bb-8715-4e46d6bd930f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9c4e7c-3f24-4057-a979-aa2d6724f9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c1c853-28e9-4a49-b281-c3bd2c2951b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353e3601-dd27-4917-b985-8ecc3b6171e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25c3e1d6-af74-4e9d-b495-fa3642f0b7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4abd191-7a5b-4c00-8c65-0be4949d5cda",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020d754b-453d-4ea1-a971-2e97dd6406e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc093c8-f87c-47dd-adfb-3322e3a2f2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad19742-e519-460b-9bf1-ff9ad6eb80ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6548377f-fb70-4ebb-aa2d-d879bdd9d852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ab621d-69ec-4379-8791-03af5ba320e3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89e15b1-e249-480c-943d-fc750c581b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ab983f-4cc0-4f36-814d-61797434a9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4a03b5-db8f-4c65-8d3e-8df0e7b5a8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbf788e2-dae2-4579-a49f-f0f27557656a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ae8d71-def4-4588-b424-29564c45bbd8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca215ea-8a7b-498f-a272-f66db3138582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1accbfd1-3d33-4c12-b1f0-27a7c699c5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e36684-4e43-4219-adb0-706fa15ad3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ce791b0-50ec-4f6c-9b4c-048a0a789d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c54d7ff-d258-4bbf-b03f-3dde99fe4bec",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3693e361-0aff-490d-a951-3bb28d0d0dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93ae6a8-3824-45cb-a4d4-c350659a7ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72c278e-ac09-4152-bb1e-bb7d7dfa6ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15311b96-1346-4412-acb2-4954adf6ec26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9da3b6-b55e-4927-84b7-c4a22af97131",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5c7c6b-5a6e-4d34-a6d5-fee622762108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b5ad3b-2a0a-4f4b-93cf-ea1e82612756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ad87f5-8c7a-4241-a8bd-1365200b2e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9a0886-ab8e-4862-9378-6d11f84ebc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4d4a33-c2da-40a9-85c6-08a40c2bdd01",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8e3800-990b-45e9-9866-a0aa64b19e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9347befb-dbeb-4585-afe6-a89ee02eec23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297d6e1e-c1c7-4c78-9581-add4d11e6290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cce10418-7b00-4721-876e-208d6b698296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14017dfa-b660-4887-b610-1d526de09ebc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60255dde-0d12-4f84-833d-4ae061e9b540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436a567b-808d-427c-98ca-14f5b731cd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69745cc9-3560-4d03-a04d-4311089dbebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d07fbcb-1fb6-4db6-83eb-ec2e813d1de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0342fac3-adab-4e8e-bafc-1bfad8195a42",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973065ef-4d62-4645-9d94-2b96d4a31758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0866b7d-5dbe-42c4-81e4-2ce1a177c98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79d09d4-2560-4091-beda-2e0d3e09ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b13898-8a3a-4f8d-a197-73de72b19727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b678c652-6abf-4d0f-a73e-fcf40bd5842e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a9dde0-a550-4ebd-a2df-c65c71e4e005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb1230c-edee-4558-b0dd-ec6ad76f1a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a664a175-3179-49c1-b515-ed895f85624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd40486-9aee-4e4f-b2f7-dddaf654de57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ebe5fd-e027-4737-a95b-5f710955253b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abf9af4-4241-4f5a-bae5-d2cc5ffc0dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fff7d4-b869-48a6-8fe1-a452ee962204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e9d152-0028-46ba-afa7-5cd3c33d64d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a356b8c9-1aec-415e-9b16-1026e1ec156d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26a66a5-55f9-418c-9942-b1be71f244e1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af28fe15-beaa-4699-9f56-349c0da8158e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb762f81-f495-490e-907d-9f2bb555242e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9f9bf4-9ff5-4458-9d57-ad8bb1ed9ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21977e0e-c9f9-4ec7-b2b9-1026dca8bd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80876c1-f01c-4bf1-b0be-c08aa3e5999d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee6f6e6-9ec5-45e1-84e0-cdb416890f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f776bd20-6465-4844-b7da-650c60317d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772e2153-d3ec-45e2-b693-66bcec3f299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a119c6b0-7605-416d-9417-566d06e8dcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cffcde-c01b-4cd1-9d64-f7c1c41bae30",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bbb01a-7eb8-4749-920d-283a1171d6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c79ad20-a021-4236-9faa-af44c2723a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff10ca59-8723-4f84-ae9b-3c7f59825132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6622aa-faa0-4e92-8e4a-f7406c1775d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89ea28f-8465-4a7b-ae78-f1c7fc5c415b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f81bf2-de29-4ecc-9ea5-dc7421a7c077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ed7e09-9135-4483-b8f9-b49400e8327c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4298a2fd-7d33-4475-9422-7308678bcafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b163ba1-306a-414b-ba36-62ce15b5e728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2494c2b3-ff93-4b1f-83fd-6fc82323fc7b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce48ecc-d4b2-492d-8a2d-8b91ceb45094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbde1799-3883-4e6c-bc3b-78623e701e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f65ebdf-0718-43df-ad55-d7f3f36ac4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c19b57-66c2-4d42-b033-546637143244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97a4a70-805a-4911-8504-a33f21d11230",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb02d2e3-cedf-4850-9f7a-6af64b8ad12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a5e3c6-8e9f-4feb-914f-e721f62525d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06637a50-781c-42db-b2e9-ec83ca124ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "45353fd8-2dee-4938-898c-2b7978f7e3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0368eaa-def7-4054-aa1a-3e7f0265ecb9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac1ee78-1476-4c13-be09-e826e0b67430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae65c5f-83a6-4bcd-86c1-8c1c30c4a048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76898fc-cd5f-4675-84dc-e0604cefbad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd2c491-d7a8-440a-9070-c5f8155083fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4aa3078-be43-42b4-ac00-8f565299a57a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1de8874-bc73-4937-8dd5-c23e035284d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffcdaeca-a6e3-4a63-86aa-edcbbb6e1488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdfe863-4bc3-4017-85ef-be0238f5ed24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da682ee-93a7-49d5-9501-7f4f07cc873d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80da3c3-bc16-4b39-ab2b-759bb6663657",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59108f6b-edc4-490a-bed6-665de7edb027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26d18f2-5193-4cb2-b589-33322f60ff36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7d0b1a-91d9-4924-89b1-68f7477b163b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b29f6742-6ee6-493c-8e20-026fbd495946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba72ddea-21cf-4c2e-a7dc-afad259cd94e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7847fd63-cf7b-4dac-bed9-33fbc61a25ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01203237-e764-473d-894c-926a7f7231cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd300e08-fc76-4c65-b59f-cbe789aaf1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f613dd8e-ec55-4457-a52b-f4c62bc83ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be84680-f0a0-4567-884a-f165437782d3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05a5758-5a13-40f9-8233-983955b006b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885aa158-d978-41b3-9c26-9b2bb5e6b7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d36952-98e5-4d21-9a04-6c0c4a228351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c17357d-9b85-453b-95a9-7a53ff7e5451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55ece13-ff77-407d-8492-1dfa4df7ed2e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ac1a8f-82a2-473a-99af-cffb5ba38a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38c97be-94bc-45b1-9d33-fb03f289ccde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aacf052-c023-409e-a06e-47392d4751a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d6048982-785a-4904-ba81-2b7a9a61e3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ebc2b0-5a36-4fbd-a552-ac19ee10315a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3005ba4f-93d2-4633-988a-698bec3671a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34fa981d-8cc1-45de-b209-0d95cebbea47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed37227-b02e-420b-9160-7812be9faa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "132a4af3-ab15-4c9c-855c-911859e65385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7644a0-f97e-4707-8b2a-66b8469cc284",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefa85d4-2055-4f2d-a499-de54544e722d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b21e954-daae-4159-97a2-ff3eeed71561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8786fdb-e68e-4f3a-a1e7-794def8f207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea24a58d-70a1-448b-98c1-8814dcff9fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e78e9-74c4-4e0f-8884-710acff05c21",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95e08ab-b81d-4344-9ab2-5c03fc8eedad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba96605f-01b9-4b86-9482-6cd0d58a66a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191de2e6-4b43-4588-98fc-391b1161aaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e6c6e9-8df5-4533-866a-803a356ce23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038afee1-e1e4-43c8-b887-2297259fa005",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b11f57-f398-48ae-8cf8-4979d39b388d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acaef940-3859-4d26-8e46-83c4c1d6c40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a122ef-733c-4a47-89c4-18b1a27e8a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "57dd7c59-e324-48e3-bcbc-cbbb83355d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e422d68-d15a-48ad-b82b-d464b3306eea",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2fc80b-f2d9-41e1-a9d8-cd74b18d4c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943e76d4-dbb5-4d49-b438-0b841f16726a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a457d38f-afa7-478f-9ea3-7b0a44b4d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "137140b1-6975-4186-a2fd-52a2787926f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434174e6-2aa7-4855-8781-03b867dc2a19",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969b12b5-6467-4589-8d98-575c4b686c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d214db-9c01-40bd-85c8-e3dc2f0b1815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f3162e-f10d-4b39-8a9f-8e62fead9b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f73456c-7cc3-40f3-972e-144e5ebe21f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76b6671-8716-43a3-b355-deb1b36021c5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92658a28-43fb-4da5-a475-6f99a167029d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29157721-4ff8-4bb2-b3e4-a7e953377126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa5f35d-62c9-46b7-b649-753ea6744200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "55cfe2ee-2411-49c1-bf96-1c3baaf7a9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bd77d9-05e9-4067-9596-9f0f180bad4d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2134260f-0050-454f-a267-ebaa7cd83347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec9cafc-17b2-45a6-b9a0-ab69d45693cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8b233d-b2ba-4d94-91fd-98b0daac3899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fca6dc4-d7b2-4191-81f5-09d1eadaaccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8255f17a-b213-45a2-b927-be8a1e685e6e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3ac956-bd5f-468e-bb4c-5d7c53c8038e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1311c43d-4df7-469d-9928-af43917df01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f52b457-37cc-49c9-844f-72d29544fe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "94d97a47-239f-4cad-83c2-cc2a4cd4dfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bcaaca-bf84-4553-8696-e37bdafcf0f9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc999c39-d67f-4667-917a-f8a49429d4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40eef884-b820-4ae3-af69-1e0e63d01043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5262c5-d071-4d3c-a942-ec98958aa3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5096e82-c573-4531-922a-b2d8f0317fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2d1c5f-afbb-467f-8993-36ff5f623aec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4355b2f5-100b-4291-be5e-ce03ae3c43b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c31a67-a13a-45ae-ac7e-0b9a29c36d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fdd2d4-88c1-4b56-8f37-ecc6f05d4134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "454958ba-e428-4c97-9963-1d93d61a4664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db83348-3a98-459a-b4c1-27cea02262ed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca150a54-7b4e-4b02-9e0e-d173adf1715d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737e4fba-7dbb-41da-b227-d27bda7f3326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeaf16b-ac0d-4601-880a-396dd573d53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd786cd7-adb5-46b2-b867-8004a31a86b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c575252-f140-4925-856c-458b6a3845af",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124e425a-f65b-4349-9dff-f633b8d89022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c69a9c9-c505-43fd-91e6-7c35647474ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c61773-2e88-465a-93e7-c771e74eaf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be348a50-608c-428e-a786-f74d957dbbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4e4cc4-5757-43f7-8c97-2eb31f1641fd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68486dd5-fccb-4af6-9936-df4eea215331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be0883e-1756-49ca-889b-4dce18327b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1193ce-9133-47ad-a31d-ca2f3252b833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e258d5-3ceb-432b-963e-e281e2399552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd638e4f-6261-4df5-80ca-c2df1e405fe2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f62a0-8194-4d57-a121-f4110b5cf3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f472d9-0038-468f-b179-3789d1b0ebfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ec0951-b4a7-43f1-a240-2de102814af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de90dcd2-d488-4816-818b-aae32e12af91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404f89c9-8f32-4cb1-802b-a4d532567c43",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44604c7-ef64-4953-8de9-ef0bd1922714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f5cd41-efcf-464c-81c6-71247019e686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c7e4bd-0e13-465e-883c-e271fc2123f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "649301bf-ae09-4dad-9bd1-dc6c51b0d07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6563cc2d-bc75-4e53-a1e8-82d3f71013b9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c38284d-b136-4c75-a9fe-8a74c6752471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1ca7f9-268c-448f-96f1-0ccfe13007d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb86dce-ddf7-4e3c-a74c-024d65b9aa68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d29ff9d6-480b-4a56-b26d-d4d7cdc3577b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9189c3-e058-4a29-8369-68d37b6c0091",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec02619-39ae-4b00-8616-b854288f119c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb18766-0ea0-41bb-9f0d-43b93e0f2f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b37cfa8-8000-4ba5-be8c-a06dfcd7293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6adc26d-71d1-4376-83eb-806da92a2c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaca298-4fa5-45b7-80e2-bc3e35bec8a6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab46b39-1407-4871-9e4d-3a48c097e14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1075b4-2648-4030-bdee-fad15db09e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5bf9ee-2934-4763-8b8e-58abfaadc0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f8e0f93-a9e2-4e6b-a97a-e0325f18a986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afeb2c12-809c-4d5c-a69c-1915ea7b04b1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60e0b05-6686-41bb-a3e8-4cf008edc768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe05623-08a9-40c2-9428-ffc2f5f8fd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e16a745-f32c-430a-9de1-177d94ff942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0d19dd-dd01-4c58-8f8b-f581168c3af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b001ec-9139-4c67-ad7d-ceb7db72e98b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1130c95b-c25e-40ab-b7dc-5bfb218fec6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8882c0-f658-4e71-aa79-6005b096c86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c270f0a-6d6a-4de8-b192-3ccef0a95719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b944c48d-9264-456f-a040-52758dab7b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb2fe1b-bda3-44dc-b713-78097cb60fde",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3f34d0-97f1-4120-8efd-b0f795c8f7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413e8253-c0e1-48aa-89c2-aee3f0c7c061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e067da09-64f5-44db-ac18-84cbcdfbe1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4845cfcb-433f-4bca-8115-362bde73382d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c52dce-0b19-4216-98e6-7e2a4e719c63",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2601a552-6b12-4fd7-b302-d80669234fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea39bf66-b1a7-4354-942a-f4e5d74a0c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceb4beb-490a-4594-8e15-01a710c1948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03a91f8c-9b7c-4661-8e5a-bc04598b02f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb3cbba-e0f5-40f6-a13f-4f71a6149c5d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81cd7d5-ddac-4c23-bcbf-cd01fe18ec10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70a5b04-3c56-474d-8b49-845e65eb903f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c951120-525b-49bc-9883-c82c13cc6fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e58fba36-895f-4c53-94cd-ac1078f1d9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa5e5db-96ff-4f1f-ab0f-1aac047ca00e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5d0b8b-5ccd-4e40-b5ed-4ed7cb6fa5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c9ec94-7575-48bc-8877-6b291f35fa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d42d7ea-b35b-4ebe-9743-84a378f94286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e30fca12-adbc-4015-8662-84d4b8620836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d62173-8ea8-4f8b-a5ab-7ff965ddfb43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83341f3e-f5a3-4469-980a-7862abd06040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8094b660-035f-4dac-94f0-c845cdc84817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b484fea-64f7-42e5-8c06-be68604d90c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4cfd35-a5aa-4bb8-8e55-03585e1f7518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c81c925-dcc4-427a-be9a-d3067fe1acf9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65204fe-b7ab-4b83-9b05-4beb4a910c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddc7ac2-437d-4553-bbed-f8339d5abd6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9d0ad9-2f50-4345-936c-fcf7f06bfe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "74eef879-db94-4197-8e52-c2a69c16df55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6387ca-ffd0-4d07-870f-536580d424b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720fbe72-33f9-4656-89b0-b72d6fccaf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b26385b-f229-4f21-9ef7-7a60957a371f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54daaa69-b9e9-4768-960c-79c1e31d1df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "379d027a-63e0-4b7f-aa76-bb572584991a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaaa0af-b1ac-400e-b663-04274465e45a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10bd573-8725-48e6-b5e0-fa4bf60a9f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87317bb-ab2a-4f16-bac2-45814c393f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27800cc3-db1f-4aaa-b9ac-72aebb4b6803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "547466d1-3e69-4df8-a9c2-995d7921b745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8ed694-30bd-42c0-835b-c379fb5aa058",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2befc67e-cdaa-4202-b0f4-53df60183927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbaae9e-e860-4528-a9b7-7145d6a817af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda2472f-b87f-4ff6-b37d-184ca39b6821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3deef17-28d4-4608-aee6-79920b4d4888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f7d72-71d9-4727-8476-a34357f4b2a9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbaae613-0eba-4c65-a996-7e338c8790c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996a5f9f-88ff-411b-bfdc-4a2dc67de685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a7031a-5e00-428c-aa0e-202223d0e223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f15f19-ba6c-423e-b03c-a6b049a32cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdd11bf-8160-4ce4-8e29-5819a9f51be8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82788b8-9976-40b8-9a69-3fcf8a1508a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edac2f1-ddcf-4e1b-9039-6080fa433af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0518578-a5cd-428a-9cde-6f72ec0f85c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e150be7-7d06-463c-9fb1-473612f5fa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5748c2e-f027-435f-aebc-32669c14ed53",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f694d2-668c-434a-b29e-a85862510e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb41935-8fd4-4df4-8436-f871298458ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f2c051-85ab-47f4-9089-6eb23d85ab3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "826a0f8d-8abb-4959-99c6-e0ce3cc2aad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24204ba0-959b-47f4-9976-8f5ebf64c662",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f23d719-8175-407f-ad51-80c0018805ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338566ca-f650-4ff7-a7bf-e672ca52a6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3999c533-69a3-4502-8f07-c2309fc0e980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b021d4ca-c852-41ab-8b6f-848e4761ad15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95141e9-894b-40bc-8a25-39ab52774ee7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47b159b-4114-4166-a48e-3d663d2aa1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c0ae1f-9f54-4453-8ef1-d30d20713b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aa3ade-c28a-4684-9c58-54658e902a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88d8a559-921f-4599-a745-92526b07fb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d9a924-04f1-4e4c-8627-51dd3c9f302a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4b66d2-196f-435a-b98a-e21af65a708f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccc6b84-7df8-4ddc-a5ef-1b77db36cf84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a047234d-aae9-4940-b447-3f531d9f6762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33b59124-bdbd-4eab-b007-796092daf31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dad475-56a5-4456-b029-58b5bbe40bed",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1d322f-071b-4b5f-95cb-4dd708df01b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b079fd50-802e-4db4-aaad-588e2c1e1b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eade1fa7-1e3c-4f6d-8806-b445b5352b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61403ec3-8c17-4d1c-9c63-c9d549441be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22371f8c-4c5d-40be-b0ca-a3c38bdb3ca7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6978e075-9978-4816-bb3c-6a7bdff22a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e079af-92a9-4c0e-bc7e-85fb0c85780c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ecee5d-a4e2-442b-aaa4-f4ca052bbe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62de2c65-38a2-4b67-bcd4-185be083ac4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d46168-c79c-47b9-bb3f-913ada82d679",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c3d23e-5949-4b46-ab01-40f562941321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2501efb7-0086-46bc-bd89-8f8e1df0be69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bb5b62-1dae-40ff-8c25-5287f6432820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "07bfc84d-c4bf-43ad-bf0e-44151ee214a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845a3ab8-01c4-4792-88f2-66db3a6f5bd6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b66c9e-b5e6-40d7-9852-fc36cac17c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4731bec4-bd25-4acd-85c6-b4ad871d1968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c1a228-420a-40b8-aaa0-3040e33d407b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "037b2aa1-c7bd-4e59-9c66-d11afa38e363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0e586f-1d90-40e3-b3b2-10ec6b1ff860",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a3da41-6fc4-4a5e-8b3d-4394cc9b6e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfef26d-7bfc-4e99-9d87-dd2b539eb8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860a09a0-f736-45cc-a277-05b3936adbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5677a881-e1a9-4708-a9f6-baa2a6ed6617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfba378-b0d1-4e39-b4f3-eec063c49a19",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124689e4-e24c-4181-bbb7-59c6005a5628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26eb45c-c945-4fb9-8020-bb0571cc384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c8ec41-4be2-45e2-9d46-d5ba9817f436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "864aa298-cb1d-41c8-9ca8-f459cdcfe1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d57f19-a87c-44d3-afe6-04ce522ea4f8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1fea8b-77ac-4ce6-b38c-c96a652f4c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e1faa4-f70e-4393-8d65-bd111dedc11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de9da6a-e0db-4acd-916f-0275ead7373f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e707b642-6030-4496-9a40-12e5ae508665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb24fd5-d1f6-4afd-a542-6e0fa50eeaae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6421f7-36a6-4691-a4b7-9e13df354b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7c0a4b-4451-45ba-8ba1-5a07e1c36493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf67abd8-b5f0-4657-9a15-301342bf64cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81f96eaa-f883-4351-a79f-6ac57ae0210b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d725876-1186-4965-9f71-8ae66451aef4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d1b753-7d72-478f-9657-231e229c7eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419a7856-c168-4352-8b49-e29c031f91d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665f310a-f7a4-42f1-90c2-6c43ebe0b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6645eb59-f391-43a6-bc6a-b91cc0c8be9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae34ff7-a81c-4a22-83fc-dc20075f73de",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6158700e-4e52-4cd9-b331-f84c06c5a54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76200c56-557f-4b29-bae2-a8aa19342441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ec0889-23e9-476f-bb1e-b3afcaf1318d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c163b69-1d6e-43c2-b37e-ef1cde2c2be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e46287-6780-4757-b87f-0c1862a3db0b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8260e3df-0ef0-46cc-8e07-deed68511bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a17a52f-ecf3-46af-8d74-085aca65fa2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a59e98-c54c-4a56-838b-d335dcc0763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e0b340-f0ce-4ec1-a1cf-3cdae03791eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1459e8-83f5-46bf-be01-bc52286c03c1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdda731-f196-4c7c-bb2f-abfbc3ee1d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68b42e5-b132-4306-bdbb-d09bb0a927cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56b743d-c633-4aa1-84bb-8cdad4e674ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d8858c-f9f2-4cac-b1ff-e646be2a140f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc20ce84-a961-49e2-9f2a-15d57c11245d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51ba7a4-45c8-4b88-a643-c36bb1da3a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b398e1ee-c746-4428-9132-455c207f004a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125ab2ff-f7d8-462b-a443-fecb9a3d35df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02fb1abc-6c40-471a-beca-9c4af5eb17e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0b441b-832f-41ac-bf65-10dee1b801e4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8f204e-b018-4aca-a1cc-d29fb71625cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f077b1-7484-4086-b9a0-c2f2eaab2c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ba1484-b6c9-47e4-af94-682fb6272353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41a1a620-a4d1-4659-8e76-291c0af3b8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06783357-d503-44eb-ab9c-c03deb813a62",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1aff056-7778-47d6-8866-52d7458e2b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7b0dce-a2a0-4bd0-bd8f-07f5ec9ee420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e538849-1495-4295-b725-e2e570494c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b676dd1-028d-4f92-8405-34925fd1409b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4587af-a0aa-44b2-be9b-ada7da82c101",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd7a561-9ec7-4775-bb34-1d49e200dddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb77a6aa-7e36-4bea-962c-752d69592bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17f5158-aa48-4cf8-8f89-37d0cbbf519a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf4dc6e-a112-4347-aad1-18e5cd30f90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb14bb8-ce3e-4ccb-aa2a-87fb17a7c6dd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573ea8cd-759b-4469-82a2-56584aae8e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef551dc-fe1a-4698-baa6-822182d9d52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627367d1-ce60-40b7-be1a-ffb374693776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb745b43-fced-4382-8f8d-8697945fb6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd9cd12-9833-45ac-b59e-0dbe4a877ba8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df09b84-5aec-407e-8cb8-2327d492b93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf85a1f-704c-42f2-9d07-12514c3cd08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5416f9c2-fcca-4c03-b60b-7df7e105ec8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4c6270-5e1d-4ddb-b693-ff689a15d061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c899572-3cd1-47cf-bebd-a585274574bb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf54d23-e455-473e-a018-f60db0ccca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cf8589-c9ae-45bd-8be5-1afd08e08964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daafbf3-c08e-4545-9bb5-cd520c73ba3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80d78986-cef3-4ffd-8c77-28b19d63a169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa180317-4bcc-4494-ab13-94695ef00c9b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85748c7b-69a4-4f30-8098-d7e2a7e6aab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f2002b-f65c-48f0-82ef-9c4587426e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fabf74e-12b6-459d-a2a3-4b8eb35bbc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad2a0cb-2b5d-48a6-b72a-ddbf2807bffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5301536b-71ed-45bf-b926-d02e1d66b41c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482c8fe6-1d76-4e5e-b107-7bd6c854767e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "91a56669-e822-4132-9bb3-edf1452d44ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222b4a88-7193-4601-9f9c-5956b7dd04bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "39af8180-296b-4396-ba28-7a3ab8154bb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0176d4e-99ca-4de7-933b-f23be66d664e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4df2d59-6399-4966-8388-b9d056a35e38",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90685078-8cc9-41ba-8d43-2416b69a6504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "200ca4f8-d787-4153-af45-707643d45792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7c4d81-5b77-4345-bf20-c91379c9f039",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61600b62-0233-4701-912c-d4a7beb10873"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2d6a4ae-749d-4a8a-991b-a815cdc17da0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ade354-03d9-4b9d-b9cf-2d110794b731"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "766380d2-cf4d-47cd-8096-bca9f7713885",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60231919-3982-4f47-a3ff-7ad29b80e046"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4873ffea-bef4-4dbc-a518-6e8c16ab184a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14e8ab6c-f346-4dff-a3c0-30367c602b72"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4583ea35-c61b-4026-9e4e-f5db840d67ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3086cc1-44f5-4430-8bf4-b5426b6bba2a"
                }
              }
            ]
          },
          {
            "id": "f7bbeccb-1ae5-4272-9a44-65596a78bb6c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "990414e5-eae2-418f-aefe-9a215f6aa4e0",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5947358d-a08d-427f-af27-73b8c700f3f6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890fda2b-2eb6-4e21-a3d0-24b1ff9fc1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "32d8d1ab-6482-4673-84d4-49a31e81cb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c613dd0c-2c4f-49ff-99d4-5645269b2f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfad3e92-d923-472e-baa3-84b8fd860bec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5af54ac-499f-439b-8b3c-e42e9adc1088",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f642847f-1d6f-4e09-a266-13fd39c9757f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d755b555-c2f8-4c09-9caf-a389844a51a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "199a3fc4-06e2-4585-a72b-5655637b8962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f93fe6eb-ed45-4486-8d1c-536e26b5639c"
                    }
                  }
                ]
              },
              {
                "id": "7ea65736-893f-4ce2-96be-e488e1897243",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ddeeafb-dd88-40b9-86f1-1b9c17be2853",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb9f237c-6285-43c6-bcb7-4a929cadd23f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bce7b7b-63e0-43cc-9422-cfa44dd6caf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08336b0d-b958-4ea7-8637-1bed57551db4"
                    }
                  }
                ]
              },
              {
                "id": "406862b2-2542-49ff-ab53-49f4926e74eb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f19327a-3b5e-4075-8949-c18aa35b11ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08ef5803-23e2-488d-83bc-13e539566b2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd93a85d-8626-4751-96eb-c489714918ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0669e7a9-72e7-4c55-936a-647c59bd5016"
                    }
                  }
                ]
              },
              {
                "id": "47edb9c3-1742-41a4-8979-4a0d36355db4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee2d335a-ee0a-4f75-a78f-19ba02a6faf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5d0e9e1-df13-417c-a2dc-46e96c51db39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4fd4d73-50cf-4002-8a74-9ae6e596368f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b929bd11-4f7e-4e9c-9ab3-9de506d1d009"
                    }
                  }
                ]
              },
              {
                "id": "d9e69a71-bbef-46c1-8b6c-ef954146eb16",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "face533d-77ce-4fa5-bbf9-3c3be1d24645",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7baa7a83-46cf-4574-9733-7de403116f94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65cef731-125b-4f8c-b508-76ed7d3ad3fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4a477edf-d2c6-499b-b0d3-cc46b46a06a6"
                    }
                  }
                ]
              },
              {
                "id": "972ff634-86b8-4ef9-a22c-2c02f9f34e66",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77cd8fee-a3ca-41cf-914e-4b3aaab09e8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "062c80c0-e89e-4563-ac16-0353c30d1ded"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1a1b3b3-4a90-49af-86c3-39b698a89889",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11a79fb6-b3b1-41cc-9724-78e885a46f4a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40653035-8cfa-4f70-8104-3536d055eab9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b57839a4-ae9d-4f10-894f-da027ab92d04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b026c9b9-937d-4843-9f91-59ecc2f90240",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca965074-8b95-4ecc-a5b3-dd902188c266"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11958b87-7a61-477b-93ed-69b516af9261",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "04f84317-956f-45d0-abe5-41edcc1ff8e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce1813c3-ad51-4eb7-94df-a8c18e991720",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25cd216b-9de2-4b9d-83ea-06c1df717ead"
            }
          }
        ]
      },
      {
        "id": "fb7eade0-b7dd-4bd2-966a-7bd7fde3362a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0003f59f-5008-45aa-b424-902d12659a99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1715e85c-d0c2-4e27-9fe9-ce652ba0a8c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7caec49d-69be-483c-950b-028e53a69f91",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ed4125-280f-4138-8d7c-a7e28d90ce3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cd6ea9-bda7-47d9-ad61-3d11ce6b381c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec370c0-9fd8-4390-9c58-b1a1da31160f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "88499c50-62e2-4577-bfe0-af105ed3c162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6156582e-74b3-47a9-9cd4-aa02db6ee72c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1eafc09-dcf4-47f7-b811-68bf9b27b179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97377f4-7461-402b-9c64-95947a33d1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb42820-4b91-405b-9e69-91101ffd2999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1ad663-ed68-4ee3-94d7-08292dd36792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e07afdd-ff68-4239-a6ca-d02ae6d10eae",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52f87c-ec1a-418e-a049-3bec6c08f67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f4585c-8543-4002-84d8-175f1e804db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60bdfd1-d0fe-4a2c-8681-a617f14edb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71a311c-687b-4dbe-a22d-4464b5723464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca477f4-fb99-46b7-b92e-498cccb20ed9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda99ed2-fa5f-4a0e-a8aa-d89ec6585949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c8e2a8-4028-4406-90be-bc3f940bde3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979428e4-e942-4201-a923-ac085f8bdc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7dbdbc-ca04-4586-943b-e39381336df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5f6f5e-0445-4950-b61b-bfb41758b8cc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b200b0fe-1666-40e7-934b-5603dcf002b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d893d7-c1bc-4f57-970d-c93367b02b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a387ae-7113-473c-b7b4-c817f9645e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "167d9017-30d5-4c6d-8c26-ccc363793537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be857028-82dd-4a50-96ed-15d460177049",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bb08bc-56b6-46fe-930c-369208e1e17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c7fb3b-6903-4c62-8b4b-c71cc80368f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c02e90a-95dd-44c5-b337-1b3431d0a759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbd543d-f1f8-45e4-b914-4bbfefe0c41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d3ce51-7007-4a32-9d1d-552de7179e62",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfbdbf8-8ae1-4454-a933-8b5b292569d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c1fe62-6cba-46eb-95f9-ff77e3c625dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc1a3f9-ea62-423c-b701-a591dbfc8f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "642191fa-2d62-4a84-8443-d1b1084af844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bf6cf1-07ce-4f29-a464-0a372ad5a20c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be260e6-3988-4b86-bdb2-003ffc7b8bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158be229-ecdc-48ba-a7a9-8045639506af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceee845-e9d6-43b6-ad84-95948e02a206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34e9006-4d4f-4bbd-8ef2-58009afbc97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8e6ab9-8790-41f4-9669-6f317ff5739e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6164c276-a3aa-4eb6-95a9-9a851955b809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60194ed-bce9-4e8f-af1b-53d3758febda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ddba39-ac23-419e-b519-05764dd65a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb6055cd-38b8-43d7-8625-0c2d77b3f3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cacfbc6-bc8e-45aa-b8c2-f33ef959405f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139650f4-6c65-48fa-a8bc-5d9c3590bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e756ffad-17c8-4589-800c-ac70c48ba247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11450212-3202-43cd-83bc-9298d137e62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b67c39d-979b-44b3-bab1-3dca0bacd238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516fdae7-6e02-49b3-a4d5-da360f57c91a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67bb213-88e4-4275-9e8b-febaf01ca4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599ea035-0f05-4d80-8c4b-733776ddbc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c97b374-f475-4431-9188-61a5c569797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "595bca01-aa2d-4097-b953-5827ae8600b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcb1fc5-a215-4cfc-819e-2bc8a46b66ed",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a92ff1a-7c6d-4590-85dd-84f5a992365d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec27bcc-f50e-48f7-9275-de3cbca637b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8b31d9-5748-4928-9fb3-dc3f7b602531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca95177-8593-48fb-8d47-a5656393e2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b52f90-3c5b-4eeb-a515-751185863c22",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682f9d71-054a-4f31-b175-bca41c0b11df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2b35ca-be27-445d-9524-424696e6d53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0374e3-b26f-441e-9556-7e8f93ab392e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90f3593-0f69-43bf-9bd9-e4d81bc75c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ccbabf-2104-4d09-8c30-c80c0cf5f2b3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091fce89-fead-46d2-ba0d-6d5c41e4ee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b6dd24-b0ee-4faf-a1bf-c31d0e0accbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626dc5fa-121d-43cd-8d52-da3bd63ce5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "446997fb-d672-4956-817e-420431ba213c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7905cfc-a485-4892-98c5-7d3d76a51761",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd02bb7c-aaa4-407a-99dc-ba2fabffabc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb767ef-375e-43be-b6ba-93de5b6fe8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf9c3e9-8d37-4e4b-b5ca-f7a4cd30a7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d74a8c-fcd1-4aba-9110-09de171ce8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553a3698-45cb-4f40-bd19-a113686c346d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100c9a76-669b-4354-8556-83617331ec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5861c341-cb3c-4f83-9a1c-732b513d80fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452f8331-23ce-4ecd-acdd-3e35bede4bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d65c2d91-480c-4374-a6af-8c046ebb9cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfb8dfc-f7c8-43e5-a294-51301b2f153b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9222dcbb-4d8d-4b6b-9bbc-dfa3f36c1b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9159a5f6-09d1-4ff9-9be4-2311674a93ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebddd1e2-06c5-48ca-b3e3-73473faa2287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5897588f-9f20-4eb1-a766-5a928fcb5432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180e9b18-647c-47c0-b283-13f61beef665",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94e0f6b-0f05-4376-8ad9-a7ce03cc5d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70425af8-de86-4c92-bb5c-860bb86d4a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f3d575-c12d-4434-92b2-d9bf4c4774c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3439902-0630-48a5-8b72-f3feb2781fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e20622-9dea-49d0-9da5-c339f89e8366",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447870d7-4a29-4300-9f3d-ab1d7735cd37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8030fa6-0fc1-4aed-96ab-8cfe643696f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051c30a6-8165-4e19-8b2a-4058606f53ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "489241b3-809a-4f4f-bcef-3f4f322b2e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891c62a4-5569-47bb-8776-fca3c30947de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ea4389-c63f-4278-892a-33ea9ffacf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc153997-987e-45ab-8a97-006d842fd2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fbb2f8-7e8f-42a4-a366-06e1f999ee1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "807f6da3-f7e3-4823-bd95-ba719c714912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e088bb-8550-4f8a-ac71-27755046d0b9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713bde2c-0fb1-47c1-9fdc-cada4d612575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257bfcca-aae9-405c-879d-d91aafbcac43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf42abb-52e2-4917-ad17-952e95e8a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5694ab0-6a00-4070-ae8d-1b976eaf255d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193f3a54-4077-4905-ae03-41c20b903174",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda2184b-d872-4744-8ba9-2ceaa95cfb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b90729-6271-498c-a6c6-bbeda50fe1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9976f905-9d6d-462c-b68d-ff846d5e98ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3db3ca0-292e-45b2-a93b-aec9098640ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c005a5-9bea-4d2e-8168-53ab85b640cf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0946c197-594d-4310-840a-5a1c0aaa9644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676dfb81-6a3b-4f41-b2b1-977165f10e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03e2a07-f9db-41cf-8499-1bb24e73bf34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54b3cede-d924-4247-be70-ef8a6a1e98b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703a2fdc-3943-4c6a-af5a-713a3a091e2d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75baac3e-ec85-4020-a186-31a0f1f2d7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41d89a7-d2c0-4fff-b556-828cd1b3d849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b360b4-2c9f-4879-a867-60b07d8ad011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2139e21-0ebb-4c1e-bbed-b1f9e634bb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4641a170-a5cd-4d20-9cc0-6155fc9280c8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb30d3fa-677e-4815-876e-058cd14cc157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa81281-c6b6-4bd6-8619-11dbe74d1995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02f1784-c9a9-4788-89a5-0344c4e8bec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12f0c32-322c-4fec-8d71-bda90c6e5c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18eece2a-be7f-4357-88f0-6d4718a83d80",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26038bfa-6efd-417f-92e0-878133b52e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed90207-4583-4330-90e6-ee6b3ae2b75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78bd290-b481-43f7-a886-b1bd873c56ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b38f00c-99d5-4f2f-a0f4-271d6648501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160860c9-6ec7-429d-8de3-74851bd28cfa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7734ed88-64c6-479d-9424-31663891e213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a67bdd-0012-4ae9-9945-c633c95b603a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829e557b-0ac3-49d0-bbf1-b1f730b9b325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f92f946-bfe9-4f95-8809-f650435205ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fedd4b-5cc1-4c8b-b091-e8345c254ce3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20afe83a-b1a7-4d3d-9f32-61ad3f56f709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48639df-d865-4f8c-b643-71a38a52ed94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98abd15-da9d-4e20-ba70-061a87258d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77b8e2d8-9552-49c8-8f08-ed819a76fd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f1a406-c536-43a9-9b47-a85dc3077d14",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c4e16e-ab26-4ccd-a3ee-b52554964814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68335c21-8feb-4656-97b0-73a3564e7cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541e4932-4239-46e9-be9b-d536f0d9f4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c237c85c-a852-4be1-818a-e6cab4ca7f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe922c8-a33d-4abe-9285-fa110fc742fb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5351a26-3779-4a07-9178-c1cba1a999c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726c3b52-0cef-4f08-8a1a-973592ab54c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf976fa-9c9d-4588-9737-2a5301abcb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8fbda6a-c3e9-4993-ba1b-ff47a76f1f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2529c497-da81-41c2-85b4-b965806afa69",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d3c7ec-0d15-4806-8448-6ebc9098ad56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e522e9-a3ef-493a-a39d-11386bbcdc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e30443e-78de-4587-b5d6-3f1cdce37a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc21edbf-9b74-40df-83f3-6b4120d7eb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c90ed9-dfb0-42a5-8ff7-61abb0f83037",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621b8fc2-d906-4a6d-888a-8276eb146dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24404060-3b07-471a-9e6a-f06aace133c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837756c6-d78c-41ee-a9e3-2d86111099f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78cfdf15-cd09-4c88-95d6-82b05fbe2dd3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6b0e8bb-9c61-42b4-b622-c0a4ee41d8d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d6341ff-6223-4de9-b894-ca01d5e8dd41",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5950d315-c7f3-453a-b01b-a096a36e9466",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b9f634-7222-4b20-a8ba-00e56bc1558a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97c67d7-f21b-4422-833e-876648dbe3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa269658-6603-48e6-9b59-67d1be488674"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43e704d6-96de-4c4f-a991-9bf09f87e920",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af6dbc39-73ab-4334-a67a-f2b832feaa4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b274ca99-a895-44d7-a8ba-83de4ba93f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecec36eb-b5c8-4730-9bbe-cb2ce6321273"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95d336e6-4f53-4d5c-a626-c379460187fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "947379a2-9bbd-4961-8aef-a4aa09432831"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f7ed3d8-ccbe-4730-bdcf-5f48c943dc76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4ee8012-1b04-47f2-ba1a-1bcbce2b423e"
            }
          }
        ]
      },
      {
        "id": "7275e038-567a-44bb-ac5c-3dd780648725",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "dffb89a8-76b7-489d-b0a5-704001c87289",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81eebc2b-155c-4935-8d30-e9c0a0166f08",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e32f630e-f50f-41fc-8c29-50cd44cadca0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a72a41b-63f4-4ec5-bc63-4fd747b0a00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9de520-2e86-4357-ad6e-5f3bd935b3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d421579-2d32-45df-b5a2-3be1f9da73bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b513786-2a8b-4150-93ce-817061670508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f46a09b-f26b-451e-b5f9-fa4b385fe73c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9897e6-1f9d-448e-81e2-f3e5fa4a0292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97ca3738-d9a3-41ae-9043-8d9967959964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841a44ef-ab75-413c-8934-35e4cf45cd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "309b4ded-ede5-4258-9375-dee8e20a64a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf544bf-a28f-4ee8-96cb-23d59d989c74",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c3fa60-b4ae-4da8-b325-c20797def5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8a1039-8e09-4f49-a5e6-7faf20d1a91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f64452-3ba8-46ed-9318-dcc18c5d2151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb40ca0c-8b6b-45dc-949e-a40db64f62ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a1e854-a618-4cd4-aeed-1a16ea456cf7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8cd14f-d84a-420d-9183-f48ae6284daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5190946c-4896-458d-977a-e6bd0c763efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3879ce18-d428-439f-ae91-cdc72caf8dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a10d6d5-c29f-4490-8b7f-c0e80d064cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27b8b42-ffbf-43fd-bb73-46a87bff081f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a31e0e7-b411-48aa-b031-645f38322d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade5de2b-00e8-4765-b322-81490d648d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c402eb-2a12-40fb-a8e6-f2205b003824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53790fd8-4340-4fa8-85ed-fbfa65668ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd08f4e2-6d7b-4bc6-b74a-c0d50b2ccb23",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55634cbd-31f1-4796-81e7-ec3ae30c06f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ca7556-c0e5-4f31-86ee-fe27ec93728f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2009aca7-e640-4bc8-a6ef-a7cccbc49fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "958b2959-6611-4e2a-a529-e33db02e2bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d1ecd1-3bf3-4ed1-9f83-7141878aa0c5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d4090a-54cf-4f63-9afd-b912c0387bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fe12a5-19c4-4d79-84b9-7c9cccdf9ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3857d0fa-e789-437b-a363-5bbadde85662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5c953d-0f40-4fed-a077-64922a01e283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c0b1e4-ce3a-489a-ac95-1eca6d95a4f7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c823f3d-9732-4656-b57a-6f2d95408814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3773f62-ef7a-404f-a2b7-e3f6519a7460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0695221-b5c2-4344-a497-d873b3c431a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9289e216-615e-47ff-b867-624706393d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8144a937-c33f-4e78-801c-437a93f7f7ab",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92973948-254b-493f-b6a0-90a41edaa74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e7ef27-2d65-41ce-bc0e-9a5be7db64ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1af410-9edf-4397-9dd8-33ee4847caaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "409b19df-236b-44b6-83e2-2ce4b0dc43bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ff135a-9ca1-4a9f-8d80-b178f6252c52",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0cf74d-10e8-4f0c-8389-40c4d13b9e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d6041e-c5f5-46e5-87b1-61a1444c9864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b200b-9948-4c97-89fb-1b361d5d6dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd1abaf-6579-48af-98f4-1cbba3ab0d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ef485d-5283-4fe4-96c2-25bc140ca1a9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a69dc2c-7870-4137-9b4d-fce0711ae980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7ffca0-6df2-4d24-8995-a3a5088fc350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ed7e14-ed49-433f-8db6-3410c48f557c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "14f73b98-57fe-4079-8b5f-9fa9f3c7a960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2963439-c86b-4926-8e92-cc8c5df321a5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de050b8d-048d-4769-995f-9334c9071c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc68ac67-25a2-4fe3-8fd7-c4eb01f93245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f164c92-da42-45f1-9695-83194227116b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4041ae25-e09b-49d6-8267-002e0bcda471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e543fc69-577e-4c11-8027-0c7f07d0c112",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d24249-be45-44e4-b736-c051b54f8508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7457111d-84ec-42e0-afa7-a8f1e57719a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f4d008-025d-4255-828a-9f4b4ba3ec50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df17cde-1fed-4d38-a8ad-b8471b98f43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c80e86e-0482-40af-a9c9-6abf4034660e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b2b539-8b1d-4e8b-92f8-70c89b83c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cf717f-6258-42ea-b434-b8570a40951f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe4ba78-edc8-466d-a330-c1b3d2c91cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ada5ec-eef7-45a7-818d-933425c7851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d26f0fa-c29a-4fc3-a818-51aaef102de7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ec5f1c-a552-4267-a783-3232bc76eec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63111655-4bd4-4d28-9819-a65b3e3a809f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca8a782-9a40-4914-916b-5374e28d56ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef68a90f-73e2-4ea8-a7a3-4eb1f05d0a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f556c2c-254c-43b8-b599-b2ce1a782987",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e94837-7ff8-41bf-a411-b39c155f813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26eb7e13-6d3e-4bd9-a85f-d1521cf38ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f44771-be55-4742-89b6-c721f92da27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d9b89e-9c16-49bc-a430-ab1d3a31d951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d6cdf3-e9b8-4d7c-ba75-66294e55bae8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f479fa87-d00a-4e63-87d6-ce733d9f15eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71412132-a302-468b-b58e-ce302f7a6b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7477977-6e8a-4734-b49d-ee9a8ba928b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1a1756-4f0e-42d6-b75f-2a7440d4b374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8819958e-f11f-401b-94ae-de0bdc083c28",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8d4298-aa25-432f-a915-73a4ccab47dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a5ce5c-3aa8-454d-a46f-87a223976f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af451b81-0cc5-4127-9bc7-9d518dfa3ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ec2325-d5b6-4430-8c22-030468f5de21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515fc4ee-d686-49b9-a9f8-9ae70c2eba4a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6df6e8f-72da-49a6-ba8d-26e5ecb9571b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de3b26a-873a-4ead-a098-a7bef0fa4b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a425b343-ff2a-4f6e-908c-e82a175721b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e919a9-1509-4b21-9f8c-e5a220404fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a211982f-f196-423b-918b-5aa76219af34",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624abb5b-ec46-4199-a830-563d6a547970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b6fe5e-dc88-4312-926c-1241919048e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf256ab-964f-48a9-9fde-519d46eb4762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be7e7237-e53f-4681-ab77-fd1af5435fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03151c3c-a949-4cf5-92be-70c705cb7203",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb0a01b-8d49-4303-807b-d24b57262980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd1e1d53-7289-4309-abec-fdddf1d83a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d88abe3-0f63-47c8-9bc4-1ae62a2e5914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb4a79e-f3e7-4019-b36d-5b819dfbe28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0134db-1c7d-473a-a09a-cc8733ff36f9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb24d16f-096c-4786-ae00-5a3bb2dde77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934d65d4-4b76-4d97-92f7-3832657e8406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36803616-7684-4895-ad97-4434dca40174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "500d7044-4249-4422-a673-6e7702852e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20812f64-a4b3-47fc-9400-dbf2382e9140",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133344ab-bc90-4955-8b20-57871f5eb6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08febcf-b363-4dd9-bfe2-332c86425fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646551de-6a8c-4117-9349-390808dfaea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8de4907-918b-4c44-8dd6-50f868621ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655342d2-303f-4d11-a2fc-58828cbb3bee",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a762e0d7-63e0-4874-92d6-94611b99f218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162fb134-17b6-4fad-9cc9-037ceede09eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74a682d-48d6-4b33-913a-554fea8eadf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2edec429-ae2f-42e1-88d0-90885324a229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67fab13-8a80-43e8-8c38-16cf266ee1fc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6169bd2a-c5fa-407a-a0db-e7aa953a6df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67be4d61-9a50-4ea2-b690-5a95485611ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cd6d31-4141-4a53-9888-05cb88b99851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbea5207-3015-4b74-919f-b605f2137958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4c6c8d-31a0-4942-9dd4-cfc539c0f730",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dbdf5e-8aaa-454e-bea2-dba0f00e9aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e90015-ce62-42da-9cc5-340eb538e6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfa1a86-9710-41f9-b396-169e8d8df0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f350ef5e-7cd6-4227-9cbb-2390deec3dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050321f7-44e5-4848-bcdb-5410569cc718",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddfe47a-d976-4d34-96e3-03abec23e431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b392a8b-7b41-4a33-beab-479e8c0d2db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2ce335-8877-481f-9ad2-42df50f0af56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "504f0a37-c234-4a8d-9b15-b156a5bf59de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cffaaa46-f541-4dea-b6f7-51f173b42363",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c940689e-394e-48b4-8cd0-4fa37197c4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8498896-deff-4857-a3b3-021a1721f31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35a7177-45d7-476c-ac99-9970935cecf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eef135d-5ff4-4222-8559-f6954043a0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0774b599-a209-470d-bfcf-1361fc113105",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e253a4-b034-4d3d-96a9-f10383bb6fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2818d922-f25b-46d1-bfd8-9ee4ecb8efb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8cb19f-2c3b-4080-8c7f-6d62ef519648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c27e5468-c68f-49b2-8257-d277a97f4a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5246f87d-dc1d-4807-8ea0-5b1556f4cbb9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae8b0a2-7909-4867-ba08-af66105c8b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea78a01d-365a-419b-8fb8-8ad867722da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b3059b-8268-4bb6-b83c-629f04935c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "617c3394-4199-4caa-a1e4-571ab58dd41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8167f805-6c1f-42b9-8176-1b31ddba48ee",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf40af02-3d9a-46d1-99fc-4a95688c0cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8a4032-b5b6-4d95-8453-c8d208f9b259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781afbc5-895c-4880-a940-3dd7f90a89f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b17e378-2235-4602-80d0-859bcbe41160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff04048c-ec04-4ebf-9f97-c3d6350f947a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c319a22-538b-4d45-b81a-9a48edfb8414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c28532-0120-4a75-b5b6-93d424ad432d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02b9f15-d896-4c62-8338-54c6e55fe204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1af7e4-eea1-4fd3-8dfd-15a626cc0f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c32bbe9-405c-4f90-b65e-6b66b188b521",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d049223-83bd-4175-9173-279274c9220a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8595c17-e830-4dcf-b5e7-20bbfd9506bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d29b13e-7f58-417a-8caf-5182dae31173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6318d96-502f-473f-99a3-f536278ea7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1df65b2-f3ae-4ee2-ae85-e9f832a12b3a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6082bb-c990-480b-ace6-65aa4342e2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf65904-4951-45e0-95d9-5085f92f40c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f435d23f-9e73-4a5f-8d92-fa8c975841d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b16e85e8-b82e-4eca-ba85-9a67176a6388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f7d490-8e80-418b-a907-ff67f81e9eba",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f26f20e-d472-4cb1-8ff5-e37fb30102a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e67bbd-4596-4d17-8e90-2266e80a9775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9da7aac-7010-49d0-93b2-4d0b3925890a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d165431-d33d-4217-baef-337d65b26390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5aa221-6794-47a0-beb3-94065b118a64",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8565730e-d25b-41c9-b7d0-fd51c04e66c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef9c32f-03f6-4cc0-bf14-92d95e5ffbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed6fca2-7bd1-46ac-963c-7045b94cde1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1931213d-f353-48ea-ae42-172431fa9b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9beb95a-1967-42d6-bdfb-1b90751b152e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3a0d28-34a4-4873-bffa-bfacb4bf78f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399645f6-0e83-4848-a7aa-4432d4ceebd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2523e3c-8663-4252-89a4-bcc6690cf88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88f2c3fe-2d21-4f55-a51c-3a0c82e8ae74"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "200cea09-fe35-466a-8fe9-e36b8f9adb55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7371bcca-2463-4eb1-9f40-d246fc44b239",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eda009-6155-4026-8332-043b7b3b85c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "46c0602d-dcb4-4482-bdba-58a92c0b5851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720d24f9-c922-4fbb-80ba-22b211fc1608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4e53042-83ad-42fc-8ed4-f93ac5ee607a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c97ef16-03bd-4fa3-b8e1-43dee954f27d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca5dc73c-3ecc-409b-b57e-468b528bdb41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "324a3702-d89b-45da-ace0-bf5da1845a79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0ce92c8-4a6c-4adf-964e-3f2d774b3e37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d301758-d4c7-4a29-828a-dbca37f5006c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "55659fdf-3b89-4984-b148-d590233819f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3400070c-0431-469a-a596-42771ecc0e41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4115be6f-fbb9-4955-ad87-c56210b7957a"
            }
          }
        ]
      },
      {
        "id": "696a4b56-5c3f-426a-9512-ae454edc0b70",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "918068e1-a2b7-4b2a-8673-a0c60eb09b73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca1504ea-5aa4-443b-bd3c-01f254928e27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "22e04210-835e-4c44-bdc2-02b36b7d11e4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0950c3b2-9901-4af5-beef-9ba6503675da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126e3b6e-4690-4f5f-85b8-cbff8303b5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88865411-93b8-436e-a869-068975c7cc06",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984c0606-0b31-4033-926b-aa2ef847f4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a41a27c-b805-432e-aeac-f71bcc07a08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce49b38-c26e-4569-bd1e-67dfe9e2a99f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178c0486-973b-4a45-9189-52a7b8eed9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c3d294-65f7-4dfe-9d34-722d38bb5807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928bc6bb-9ede-43ee-85d5-d306ae8ff1ba",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec460437-48e7-4cac-8f30-d977ebfdff92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6a23d2-716f-4aae-b169-a0b138fe758f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f1821c-2255-4efb-bfd9-92177e9f3a4c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b656fe2-cc2d-4031-b147-4af914d89d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0709be5-bcbf-4afe-b9b1-cc865b26466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e220fde2-28e3-4feb-aedc-ed4e12fd4e98",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af182f90-fd65-4f74-adf1-f624b4fd40fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab2e9be-839f-4b57-a674-21eb27f47418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8799ca7-2614-4ff3-a9a4-a04b5407e8bb",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb3029c-670a-4d65-b083-fca92f9acc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e61f17-b1a0-4a46-a4cb-61b4d026bcaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55619b63-1a9f-44dc-af03-f446c14901d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ac2d32-4325-42aa-bb87-e2b42c767f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19741ed8-d33e-4fae-98c6-d024a0fb8191",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a83468-644c-4923-97e8-5aef253377cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c2e2660-78db-4d63-b176-ee49ecb9d576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5408a2-8afd-49d4-ab0b-8adaaea9511c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa14100-124d-4c5e-9e86-0cbd3e653313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b03e7f7-f004-4d69-819a-1401e4c50b65",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7664bc5f-4b1c-4131-b6e2-f5b197f28555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44dd3b93-7c14-4438-bc5e-91bb1d7f173e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142ec1ee-f160-4020-8c77-1081d7c6c27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198e55e3-c648-4d67-92d8-0c048839061e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2043224b-d4fb-4b21-99b6-3323ba8ac06d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afab826-bd3b-46f8-9577-4c38ff0489dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39b8b0f-4a5e-430c-98d5-e1f9fa644a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c7437b-3834-41df-a04d-82cd42335019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad576e0-ac82-4fe1-9695-bd83dfb38912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175134a4-1e04-4334-ba78-bf48ba457b78",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80b41cb-cbe6-448a-9944-1248abd22f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1225c71c-ba17-4ec7-b878-fd1be75c41a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c501ef-cb9c-4240-aec8-75bdb8fb1656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeca2ad6-c947-4b83-83ee-63e167511ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1619a9-6c06-4b1a-8760-a5470c8b369a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2532a5f-1ad9-48a5-9721-dfd0667f4580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3debe1c-f2b8-48f9-bead-4cfd42c7dcf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cda5210-7cb0-48dd-88dd-b688477b184e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901dc627-8b84-4a48-b99d-f63164f74b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0955cc42-c6c9-4e73-b219-bacbe6afb122",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2327c5-ed04-42da-b961-37a096b005d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15e2da7-ade6-47db-8264-8fb707e970e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb8374e-20d8-4848-a393-62490c673a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed0d02e-95f0-4071-8b1c-2674d02b7849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7269102-c903-4367-b4d8-f3b3a5285e48",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab6881b-7ed3-4581-99f8-359f76c33a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b537b7b-879a-495c-8d6a-b6efae2a7742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc4da69-6c3a-435b-a9c0-282cedd3927f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e015c1-1aa0-45df-bbcc-ebafabe86918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b8f051-0e3d-45db-93dc-5b0146e3532a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e13d77-6c99-4b91-8d81-5fbae5dc170c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2302ec3-5b05-4c3c-bfbd-84d131bc30cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fc262e-23ce-4f65-9dd7-914a3653e2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02c11cd-f908-471d-8027-ab9b34db10a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ecedf4-2996-4362-a7a8-5702bec107ac",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff5a221-4296-4950-b2a2-37cd14f27f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e7f515-11b1-42b6-9385-5c78df8a5747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f2d99b-e770-4bd3-a4b8-5c9dc0774c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bc0d7b-734e-4cf7-a01f-e95991ea1e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96cc451-e77e-4418-b54d-4dcb1c295f93",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ad6d8-f8d7-4a25-8872-33399def0046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7234cbe1-a987-4fb5-80c4-f42237005da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58540bd5-9cf9-442d-a5d4-5ce84142e432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4686d615-0344-4412-ad4c-4897d6a21ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef397d1-81a9-4edc-aa25-56c25c12ffe6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bc1397-834d-4477-8287-5ae7cdfaa80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95dd842-3250-48c7-a788-463774e8cc64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4a9f3f-c49d-4b80-81ca-3a5efe0788f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2163a6ff-0f62-4289-8405-802d93ef1e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473f6230-9a16-41ae-acc7-617e777a3c0b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd399b7-b6a3-43c1-a0d0-6133a0d39da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c530209e-d1da-44b7-ad92-8b95c0e9048e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c404b5ce-c205-4f61-a8e2-4eae118422da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21aed0e-2e36-4505-bc22-37afa4b330e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7696f484-1ea6-4be6-9b9d-261f2d95603f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975d9137-6583-4b3e-9922-0e8c17076969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b92c9d7-edad-4588-ab63-ab56d0969107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0208b3-941e-4f2c-a64f-a507d7538c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82b4de8-dc5d-4f4b-9406-b323012ef389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e994928-8717-4f82-ad44-ca790945c871",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653f9489-398d-4fbb-981f-8278cdd22bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1dce04-6387-42e9-88c1-de860f09e137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0899f0-96ec-4293-8ccb-54d4ca5cbf72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f09277-87d9-4aba-95da-c5fc7fae9706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4f0127-03e3-4c5c-a1c6-f7c38e46afcf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211c0084-cba4-4156-b2c0-8d1be0fbe950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821c5593-3c11-411c-8787-84c4d9015863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb04464d-ff40-4002-a333-7405b634eec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46708a51-ebb3-413f-92ff-5e11e4b4e711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed699f6-6685-4660-b7bb-ee3722e4f424",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab961dfe-fbed-4e93-b17a-ae5512068929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4dcca0-fbd8-4041-8478-cae73ff48e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ee9521-9d63-41f9-ad6a-d2e85d36a1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69ed4721-3e09-459b-a3cb-cab2f5e0881f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0af5838-9908-4555-9011-63e4d612ae29",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb6febc-94a9-4a26-a832-ff95de8e97ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fee996b-f401-4d19-9565-02e648a30b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7677e3-6f5a-4135-920b-58cca7ee4951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb8f478-cc12-4e31-b557-b35703944bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d1e564-4bca-4cb7-949a-851288efe882",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2dbfab-fcde-4b4d-9e43-ac6a9f5232fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d997fd6e-3d2a-48d6-b6aa-faf12bd306bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12e6587-f4c6-42d1-8ce0-8317b39882c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01db195b-ec01-4d66-956e-a1d50ba76e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b41778-dd31-4e03-9cf7-8eb6f034c810",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7af52ed-0eed-4118-8010-38e4355ba187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7f05b2-9245-4037-bdef-67ae14684c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d332440a-e274-400a-91ac-80da555113cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd84aef1-4f95-47d1-98c6-bf60066b9e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb35e813-83c9-4915-94e1-5ee88d3948c0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5ad2fb-b9e9-404a-98da-747a192bae8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cff4d6-4e7d-49b8-84df-5f0636c6e2b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7499d37-c647-4246-b324-06164778755d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9a6578-3a35-4700-b055-3d875f0a8cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3308ec-50c4-438e-9774-b1c2a740ccbd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d8dc5d-1d0a-4c97-beec-91e250d42a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e23f44-25fc-4b15-9f30-40487341b6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66023810-6c6d-42f5-8b58-ab194102e8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41a3391-713b-4fc0-96d4-68d6db64db4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbabd16-35ff-426a-bd4a-b8ab2fa0f11d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e55c97-eebf-4276-9d02-a67ade15dfe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb63d25-964f-4954-83ce-0fb5c46dd18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66990bc1-800a-41ae-b10e-8ac2d66af290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97108e0e-f971-4a70-9250-774aa7e98ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc01f461-dcd9-414f-9c2f-3b86cdea97eb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f6b435-bdf8-44a9-8c40-6e966bc998f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec5acc7-1071-4200-b1fd-884cfc790395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb616f9d-f186-4015-ba1c-bfb59e1a0fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ab22c4-7796-4f31-801e-6f3320ec9c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1998bcb-e250-4bf4-a0c9-9bbb76f8b442",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ea659e-b53a-4a09-8579-aecda1531d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82621fa1-c6a1-46b6-9152-d1a39d5b3793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9ea7f8-a3ea-4383-a84f-3ec7416fac7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baefb446-ad15-49bc-83cc-e86c32ccfbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b771d518-6168-462e-a3f3-5b7b3e4b8a07",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc66087b-9134-4694-aef1-cbc8300f1fb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c13dfa23-1f88-4024-8a4e-bc778b10c5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e61bd6b-33a3-420b-9ce9-b27115b88cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bce060-e280-474d-9da6-8a91243ecbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a4fde4-d7f9-4c61-92a0-81d359a87579",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a853ca-56cb-43de-85c1-d7b85c4009da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40d6d13a-f68a-4299-bedf-a3f2b1902d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61b5650-5572-4c62-b273-c28d57463ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafcbe99-3a0b-4d87-8a33-a9a61f8437e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3026aad3-bd0b-498f-b696-cfd88f3679ff",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcfb821-265a-4342-b7d0-081c4fd454a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8e5bc1-2b6a-40f3-9c10-b28fb802aca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3571e1a-4926-4d41-acf0-3e275c3a292e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b392a228-e6ed-49bc-8d84-eadca19040da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6196df84-d1b3-4b40-bd74-11c59940c759",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7762e60-8ded-4dfa-900a-b324473cf280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da0cea8-079c-4bc7-8c43-b36b8536a4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b9a3b1-b247-4bab-abce-82c9d1c1c126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d12f05-7060-4264-a6a3-0abb6aa3a825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd92fdc-61af-4fce-8dc9-055ffa7180b4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92056b58-2fae-4eb1-a11d-b58c9022a785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad321da-9bfd-44f8-bdee-6337fb936ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23528bf-dc76-4e06-9ba9-705c12b85f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc5d00c-ade3-43a3-8088-a6e592e5b49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf772b0c-941a-479d-b22a-b43e586bc534",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dfe067-f30b-40ef-b4cb-2ad2651d88d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9ad068-6901-4933-8db6-7538b4cbf45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afd3265-d96c-4db5-89a4-d9afae9d417d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d63d369-4082-4bd8-b11f-9f8cf3e31619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753a8adb-26f2-4d36-bdca-b9853fad65ac",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a89fd3-020a-47e6-ad31-ecba087627ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a7f301-80ec-4a5d-8331-e92bd111c8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed969cd5-078f-4b77-9a42-05ee98e45d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e26958-63dd-47b8-aa6c-70424ace64ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95b211e-ccbd-4030-a7a5-4deeaba959c0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e4a7c4-5fd6-4532-8e84-9260163d73aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b088b86f-f61b-4a34-8fc2-a0106e3d6d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe4280d-c85b-4eb2-9596-0b994911111a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7db3f5-7d1e-4b34-a672-679291d7720e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f2dced-b82d-4aaf-9994-fc535859f812",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220bae3b-ac01-4c48-a8a1-ff5fac7d0220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83367bec-6e86-4a69-ba9a-3dba246c7249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0556664-d679-457e-91f1-511624b3e141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17134b30-702d-4708-a3e8-fa366ec309dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2dbbc3-dd15-430a-a28f-3a5119030857",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764e13bf-288c-424d-983e-49bf1408635a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99302a7f-664a-4307-af4b-410507c3640d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105c6e37-4fd3-4cc5-b6a2-84224206b0fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b947961c-86bd-45ee-a480-8bd3a0b5a1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5893c8-c40d-4231-8652-829e3cb7d7d1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e84ef8-6c64-4be0-a781-1a71c2f46658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80855e17-f340-4406-a44b-1e14be15359a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa8754-af5c-479d-bac7-106babf2341c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fbba8f-3bae-448d-a4a0-0e1ae4ed44a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2da1afd-0bd9-4ba0-895f-777f04a7f766",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e218dc03-d428-4003-9674-d2ca25f1797c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f075958-486c-4550-96ba-5e28a97f5521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d34228-4637-42c7-9284-9a307e8f7815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2398e890-9ccf-4d30-8f1e-f033d94e972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6192c2a0-fa5c-4c98-8663-7ef0a941f69c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28e4cf6-57f6-4d43-b6ab-2fa4c374abf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2479ccb4-c3f6-4ded-a001-12d81edb43c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bf6b96-7dfa-4368-be5f-ac250dbd6a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8acd88-1baa-40fe-96b6-ab0dfbda5116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04aaab59-6f81-4c4c-b26a-a2c24664c732",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94d90ac-d4f0-4850-bd3e-b061e58fc081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187e722c-b22d-4dfb-98a8-be59f11e681b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf8611f-402d-4a67-9484-581dfd412675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88cf6b74-fb67-4b3b-8e3d-be14a2eed520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16215e10-dae4-40db-8faf-aa7ab08378ae",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b383301f-3b92-4882-9ce5-5a68ba407ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52de805f-bb34-4a75-b119-d22d479303a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d881d76c-df7a-4299-9a0c-963bf6e64429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3fb995-97f4-4d03-b691-52473f0e3551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31150f9-d625-4631-be2d-4380f02cf48e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd8a02b-323e-44f5-8491-be1aa07e6d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736ec8e3-0e47-45a5-bf3a-022400a0740f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4f0c00-3c0b-49ff-b0e4-3f0bde35664f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09202471-9b48-4405-bd5f-962811c12d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fde6718-c499-478f-8103-8018d1eba40d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9473dd-c12d-4f55-b151-7fe21f33f0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b99bd4-f81c-4b5a-aa30-beb78096e136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccce8a09-dd48-4d11-86d1-7d0d02f43ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc790efb-2c2e-4442-806f-113ec2e980af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada2747f-0d27-4880-8e69-4110b425cd12",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ed883a-e19b-4cf8-8acc-810efca1ce6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c537d44a-a3b8-4c68-99d2-a2b410651610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db9f074-17fc-447f-b19b-9a74ac487f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1083326a-2ac6-4cfd-9e09-b26c1b078bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4601e81b-9bfb-4566-b82c-a15d7a5c0ed8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae35e488-4eb8-4baa-bceb-25786437048b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067f00de-fbcf-4040-b3ac-d0988b7bc986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3db401-1ce5-42da-b800-66b2107272f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc9571ea-d6c8-4337-a54a-2bae25dea155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf59cb8-20c9-4fe2-a9b2-3936fdb6b998",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd5be9f-7e2e-488b-9e75-78d88f1c762a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70593fe4-64dc-4ea6-9f00-f58b2a281b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f6f3fa-df7d-4bc6-a38e-5ca9edbed0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f985cdad-118a-4393-aab4-c550cafb7f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2612125-64ac-4af9-b314-ec085faf4612",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c897b0b2-0d92-4e3c-9b08-cc3e066d72cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fa47a5-68bd-4f29-b216-2c3f75586be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecabe30-0a5e-4c16-8547-10f6db5e9dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91188126-3866-4ed7-82b1-6d14e9e44a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0117df03-90a2-42f4-bd59-5a1995a813df",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5aab9bc-2d87-4d0a-aef4-e1c4c5166f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657b5ee2-4a67-4fe8-a6ed-51acce066166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b259c26d-075e-41c5-92aa-17b47cad1c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8c358a-f40e-4c04-af2d-7c3474639395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00060796-8878-4e07-b768-97d3d585c1d4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a26088-c115-4e42-9366-e8deafa3795a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3b3c7b-61f0-48e8-b2d8-7b110012e5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d7a0cc-503d-4f18-926f-4e109a5865c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9014b258-f6ad-44a2-865d-839c7eec14ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fdbecd-6fdc-49d9-8f9e-92d671ace124",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176c1800-a724-4849-8688-a6982b97b1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59041a2c-fb17-48a1-bb36-a964ddc96bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af99e90a-8fe4-485c-a41c-150473bf36f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3dae52b-5e39-4ffa-b331-3a9b842dfbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a118f07d-ffde-4011-82e8-f88397a9d976",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b27954b-0558-46e9-8645-592565240b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd0aae7-61a8-4a1a-8db8-f0f929da8935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1989aa-a3ac-4281-bc3d-9b254259c5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8439be-9b59-4e99-8ff5-c14a75cbac27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9d0507-365a-4303-90d5-088a4d861d0d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53f27b5-9fa2-48ba-953a-c472caaac890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d4d6f1-0a1e-450e-9e96-0ef9ccbafc7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73808f27-5542-455d-9c68-1a81653fa7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411f0aea-e9a9-455d-98ba-b37e879d6624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77abcfa-5a16-41ab-ac67-98c24f2a0c38",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbc6f1b-8f8e-4586-b5d3-41724afd945c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478984e2-6129-4a5c-a3dc-e7c35b6de77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccf735f-509a-4537-952b-f22480b3f1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fc6da5-4a40-47ab-9ac6-55d330d31bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0013f89-30c2-4152-b037-c70d78484016",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29df3f49-29c6-44bd-a527-ffb0895452c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26330d4-47aa-43d1-8650-586ec427bb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a403ac3f-71e9-4b1c-abe9-121c6ae57362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae9ea8f-dcdf-4d3d-a9d6-8ae553fa3c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087147f4-eb04-4c75-a9d5-e4b472765210",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855fb8ca-8d46-4208-807e-74022fbbd640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9faae9-2f7b-4ce8-8ed5-59cea194070d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d499b7ef-1a19-4df8-8102-fc39dcf6a77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea423f92-48c3-4105-8032-2ab91797d54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b8b9f6-e05b-44f7-90ec-07d11f70f8ee",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed005f4-8d96-4b5d-9db1-f327ffd1b5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05572024-0969-4662-8d2d-4fafd5ae577b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42d8246-653b-4590-9371-e444a62cb9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a945930-5c38-456b-8460-4743782f4200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dd5f8f-76e6-4240-93d7-5c6955689f2d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5271b0-5a9f-4f9d-b1da-fc79a580d6f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba229876-428e-4d20-b782-8334c9580dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5f5011-d042-4e9d-8cd7-6d77928bf736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468b17e2-e15a-433d-9e60-9e877c8d064c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd45b71-afb1-4841-9e4b-dbe8666b9e8d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691a1b92-79e7-4b0b-a7f9-77c3bb008d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce8c4b5-7f52-4ad9-9e12-5cad41a57d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501ae211-4be9-496f-a524-3b91278bc987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e19639-6755-4ce4-9b1b-ae68a69a9bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81e420b-6dd0-4059-8cb2-7bafaa8d7c89",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c93ce5-a8b0-4d23-963d-5441e04ed20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b32d03df-fa99-4acc-8497-91820994f5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50abf4ce-713d-4e38-bc4c-14c0c71b0ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2891d007-1174-454f-b084-3dbc7c762223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b7fad0-539d-4fb8-83cd-f7eb5848936f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171739b5-7b3c-4fdd-a35b-43589a0b6aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4164786c-5293-46b8-be15-c5d4f5515f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6060d1-e6b0-48d5-a326-d062b27ea97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbeabbc5-9d70-4da3-8440-c6fdbeda1bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1a1681-910a-4884-a540-2b3e9e6a8608",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c48bb2-11cd-4a62-b747-e88e4bcafe5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d516b25-d971-44bc-bdb9-a2449c08b333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42764cb-2511-4a44-9731-cc20545615a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2f852c-a122-4f0a-b3f3-70066ec64c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51002d0f-65d0-470a-835a-42631111bb9e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f861f6-76a4-4036-b88b-992d133b30eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff0c64f-d04d-45fe-87c1-e9f30259b675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61658ff1-faae-4ceb-9e92-4120f021d342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f243e649-eb9b-4b03-a50d-6e6c13f4b489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fe74d9-f69d-4e0e-a581-6b8847bfbac8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2df459-c880-4365-b738-198fbce2def5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033bea7c-1a53-41de-96b4-281979ed781d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e978674-a497-4577-b431-5b7360c5f72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc23cfb-a288-40c5-822b-958606d02847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2520ce6-17b8-4fd7-9395-5c55942fff94",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3115ea86-ec97-4de4-a8f2-1c5bcb63ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1313ae74-e703-4cfd-851e-5fee7ad1898f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ae2a2c-0562-457f-b33d-6dbdd5aa201c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc598df-aac5-4f8c-a87e-ab4e207a1193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9004a3-1e23-4b60-bb28-6dc53f085ce2",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36571ef7-fb7d-451a-8bd1-124448bae8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86579b1-472c-405f-9b18-f8e60ddf8b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3484c65d-3df8-445d-919a-9c32b6fd0ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e719877f-8771-48df-a565-01a760385e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8742d54-18c3-41ef-91b6-bacaf4445ac7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0b6d83-2ed2-43f8-9c6b-bb53a228733a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570ef4d8-44e1-4dfc-969e-b728953739b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdfb424-8c15-4245-bf7d-fb17270105d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18ca0ef-d4f3-4432-8d64-e8507e286376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87e0ad8-716b-4d83-9c9f-a4285de29cd4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8534f975-b547-43a5-b60c-16d7ed0ce990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a6f2059-c072-4357-841a-d525fa6d2106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce7fa8c-ee75-4192-9bc8-f1426f977cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871ea41c-06d9-4c1b-b1ae-13cf04e92259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11f8229-094d-4c59-a2b8-0d32a8da2a19",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c717530a-beb1-4ca5-b4af-eff109a2d9c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c640c250-2287-43e6-a79a-c89f31671986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ff824b-171b-4a4b-a7f4-31bf27fec065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e836997-2ab1-45dc-ae65-0805d062d6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ec30dd-c125-4537-a0a2-0ab5f7fef1ad",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c76796-c785-4982-8d47-c9474c0a6051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40f3c40-b636-4cd0-8f63-9f089e8a5f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33b4ab3-3577-4615-a3b7-c2212af3f7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1a5bf1-fbac-4e61-afd9-c5546db74a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d9942e-df4d-4880-a94d-476d6f42e35c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387d5c64-00c3-4207-ad24-75e2533e9f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b0f013a-ae61-4fe8-81a7-22635647b67d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4b011e-34bd-4f42-a0ae-9c669d9d305b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960a11b9-42a4-4362-a0eb-b65e6bef0286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9197661-0adc-4549-94e0-279391e8fd19",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5a5724-730c-4dc5-9f46-ddcfab86c9cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2efcf3a9-692c-4d26-a791-efc0e0312443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa256532-8da3-4daf-9f42-4128bd6a11e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56304c41-3a7c-4184-8dbf-c36812b2e582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70a9306-4506-488c-a7dd-19753d368a92",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a547c80-9fbd-4371-9117-91f4cc46bfde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76bf4ab1-1bce-4dab-90b5-8ebfdff4aaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745eece0-67d1-4d99-9028-ac829d3c752b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e56de1-cd65-4931-95df-1515d732b21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2d50cf-456f-4034-b646-9f7ae46ede09",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d5d7d8-5c2c-41b9-a42f-3a6531452245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ce076f-0c97-4964-8a25-6894c6db9510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f4b4ff-bc1f-4571-a17e-93baea8e38c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0739a37-14b4-4326-ba9f-d46428e5e5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0a14b9-3290-4742-98a8-c87726fd2215",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642fb6d0-a671-4714-a8f4-28d19d5873ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "695a962a-8952-4c63-8f56-2bf3fa58e852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c503e5f6-9155-4029-ac72-46c042266cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5840f540-0e0e-4c5a-aaaf-16c70913f702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dee2445-a53e-4b65-9338-4f28d3dcf166",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37295d05-b628-4522-bc8c-3da73012bfe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b4ce821-cbbb-41d4-8f87-97a3dd053b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b5d5a1-32cb-4633-af3a-93e6a401672a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ca1da7-d85d-4719-a063-fd777003823c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba398e3-2eea-453c-a138-9546d4c10d3d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e22c4a-f39d-49e4-aa37-f8ba56c2502e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8f2b92-21c0-4373-8557-e3ebb6009b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331dae88-ffa2-4b15-8865-96afb71fd67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d224e31-c946-4290-be47-219d182ed69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915092fe-490c-4665-b553-7ee584b361bf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f2cda4-722a-41e8-a2e1-3154b9359a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a405c1-9c76-4679-9bfb-4baff94b572a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2196fa-32cb-4698-b4d7-891ac0febabb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c0c1c2-5cb6-4e63-8ae7-7ca9f200509f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662d89ca-3499-4da9-bff3-711b1d918c2f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a675fb47-fdb8-405b-9b63-3f0508f29e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c81c9c4-96f5-4edb-8f60-2e45376b532a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30383568-8a45-4dc8-b82c-84f0051d10a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879b9984-5d33-4c64-8fbd-196f47e9f81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0918c100-2c87-48ea-b14d-0d2be88f3f06",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fa1d47-b505-4d1a-a573-f33e0cec8e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "240f5a9b-f85a-478a-95f8-110a718288fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345c2562-0c2d-4eb3-92d3-3b3eb858c369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e08359-1950-4bd8-b063-90491de02530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b097e7-293b-4735-92e8-58813ddad312",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a036cd-47c6-413a-9adb-89ea00a34606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbbd2978-cef4-451d-9b01-bd75b169b0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ca8a32-bfa7-4718-92a9-c9ea8f8efb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62418862-c48d-4f64-9953-3d1ef2075481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d55fd8-dc99-422b-b627-9d820049f815",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dba017d-760d-4cdc-b64e-63c305ef4e9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97178496-45b1-4b19-b76a-40302029ab0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cc73aa-e7b6-4105-9e97-c21813c430b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76694281-0b17-498e-98fb-a4ae78f3348e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf52ef10-7fe9-4f45-9e0b-6e5dc90839f8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803bb97d-8ac6-4801-8398-adf8bdd98bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6109467-51f7-4c45-836f-eada6da1cf1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede00ca8-bf7c-40de-a094-c9d2803973e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f47e1c0-239e-47fb-8309-a43589607799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91ef6a3-4d8a-4c6f-8e97-9ef19ba7fdaa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0d129d-8a2c-4a82-bc99-9b0d70f2174b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0945a35e-c83d-4cec-a582-3f628a6ace8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5833664-e6da-42d0-8f5d-599bf03b74d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e439bf-012f-4b37-8081-2a42623771a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97019c7-728f-421b-acb9-9465c82ae9e1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69176470-eb24-459c-aaea-af1be64cc00f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e5c8596-ec63-4f68-83db-1d332139054a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4924ddde-d5f0-491a-9a50-7a48af295e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b46986-09c5-4cc7-be5f-f1756e71f6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68810b8e-6fcd-49b1-9ee8-db8cee76d029",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d50c16-3420-4282-aa43-eefd9b97f4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8a9ad0-f581-4fd3-b42e-6e3e336d9572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40ae640-2697-4184-a014-5d7fdd6f8764",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de414756-5856-45b7-b97f-f18cb5ae7ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec7ed49-485c-4d74-b378-1170e04fa27f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7b6564-50c9-4f23-9ef9-a11c281b797d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77033197-bd82-4ce2-ad5e-ee0eb54e726b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f6c3e2-62d5-41cd-af66-745e54ae2261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8997fc8b-fd2f-494b-b23a-4e63df124def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec11ec7e-dbb1-489a-a853-3772dfe6efef",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972008cf-31ff-4a7c-8959-37491c8c11d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c8b36a-2eb8-43f8-a5dc-8a4d9603e170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702ddfbe-a62f-4839-a845-2b2908a55681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7731ed-210d-4d6b-8b0e-395864f9f242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670250e8-21c0-427d-846c-1529b4b84541",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3f0d8a-34c6-4865-90f0-f2adaf9aaa3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b04a9e5c-ec50-4e42-9f97-845f11496a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54125601-9e85-42ce-a7a6-dd909a52d197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ea2271-25a1-415b-ae2a-3101ca12ce6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f4fc25-3e5e-4f10-b309-8c98f8b99811",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34f4e24-7af6-4433-a2cf-58c5fcf735d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe724075-bbf0-454b-a7ed-e5e506577f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e97a02a-3fd8-4e8e-91f2-1846e7296740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e298e4-cf09-4fde-8aad-af9399c157f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a60ec9a-35ba-4228-821b-ba21a97bd7b6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434c71a8-8836-452c-9a97-d9e4140457a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "497625f8-73ed-4df8-ac61-0058ea30e7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4154e124-3a66-4ce3-b449-f91fb79bc647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cc7c14-203a-4dbe-9f3b-38eb2c4db8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281f382a-d01c-43d6-ad59-af86740d2d4e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387a4f4-74ad-40ff-8bfb-ce979d8afec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e8e5b3-0354-49d0-aa82-cbd0315fb3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd7ab02-af67-4fcf-b94b-4f55dec3bc2c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93041351-7b64-4608-8686-b440c9220f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c4d41c-475f-41cf-ad93-35a614d685af",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889beada-4d1c-461f-bfe3-14ecb766eaf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "636141e2-b422-4621-9a48-b3b3ffc0aae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb9423-15e4-4d6e-80af-e5076d50e31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d4e69d-9e16-425d-af3d-7647eb15d592"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd32caea-f57f-4774-bcd7-b570228c497e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee692650-e0ad-43a1-ade9-0f26e41d1126"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac41933b-1cba-4ff0-9019-f4ebb1d248aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e2f2a1c-3b12-487f-8ba0-298641baa7f5"
                    }
                  }
                ]
              },
              {
                "id": "9d7e3096-97c0-44ab-a28b-cd6dc77166c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28b4d241-a1ad-4dc7-ae71-8f63f9885122",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844344c1-ad89-4487-b891-2cb594ed0405",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9ae067bd-0c19-46d1-9fb2-cbbcd4edf0dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308eb487-51d8-4753-b2b8-1058e84b8006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87bbe2b1-2ad8-4084-8aa8-c12464d1e0de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1db4170-b4ca-49d6-9b6e-113fe651fbec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7129c175-d053-4a75-9175-afcc210bd232"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae01e1cf-c049-46df-a246-fb553520b89b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7256baf0-d584-4f25-b6da-c04cf8c4f2aa"
                    }
                  }
                ]
              },
              {
                "id": "08bf0aa2-e952-4c8d-8518-70a1d9e88efa",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "890236c8-04ba-483a-8ccb-ca4b48187673",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ced769-9da5-4e84-b00d-7c40c77bb75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e0a6c10e-e78c-4de9-b1bc-de910dc7bc15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1884c26a-9956-49c0-ad39-0b5f534938f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca90405-39ef-4920-905b-32081b13d779"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "906fb81d-6009-4662-aecf-8de4c8d5ff07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "84266f3f-7336-450b-a5a0-0ead64963476",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d09581d-7559-4711-b11e-322bc25c9abf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f82647b4-2e17-4fee-b654-bcf0a7b9e535"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbd548d1-e8dc-4dff-b4e7-0d645c2bf54e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e82c153e-87e5-4d3b-b4c8-fc9f1751e7e9"
                    }
                  }
                ]
              },
              {
                "id": "5e7b9a44-c606-46fc-a872-464334b0684a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af86d845-f95d-4fc3-a0bd-a54bfd8da94a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "437e301c-e2b5-4b97-8ca3-be7d93e54d61"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4415cc24-c20a-46ea-84f9-3710ba877b00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92f56e21-e3c4-4011-964e-2f403c5ff881"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a84d40b8-4653-4145-9510-df70f3ced2ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "38a07595-0cc2-4e6e-9605-aa4b1bbded5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "749c0ae8-db9f-4ec3-b07b-b4c9d846607f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eee045b1-5143-4d81-84dd-c7dc58e30da2"
            }
          }
        ]
      },
      {
        "id": "f543a339-3131-4ecc-b92c-a06d98f1ca36",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "041dddc2-2061-458f-9eff-4fb87adba8bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6d3a4af-0e0b-4d9a-b625-9e7a7af8ecb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a96f927-8f9c-4ec3-a64a-e8e0c70cb849",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883465c3-1fae-4fda-9a93-a449f1f23966",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "96a46612-6137-4fb2-a351-9586c53dffb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d53d221-37b5-41f3-b007-c02998ef1b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c75a0b51-e875-4ef3-a749-7ce575ffb41a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3fb0fc1-eda9-4382-9fe7-9c305900f0d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b988e40-e607-4774-af22-fabb7e8fa0b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cad180e4-b78e-4640-a873-2506157c1cfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb12cca-3f1a-46d8-8ad7-4ff5aae632d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2b1a2d5-2880-432a-a1c9-71d11d58749b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c66c9d0f-a138-44eb-8f21-6425bcbf663d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "addf43f4-0a9d-4bdc-b5c4-023851be55c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49fb472c-0ca0-4b11-a963-03bcfc8fb99b"
            }
          }
        ]
      },
      {
        "id": "7208c6db-b097-43d5-94db-60cc9b82e730",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "36d95643-b164-4120-86c4-21c5c64f7f10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc32f181-608a-497b-9556-519b3c530e51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd0cba83-482e-4922-b82a-4dbb1fe1b46a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98a0c3e-60fe-410f-a344-ee5983108d30",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b1980ac-32f0-45fc-a4e9-21d5bb7f48d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbdee60-5cba-4cf5-9a4e-c6d8714e9a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcd868a1-5e2a-4f41-b546-da84e5d58049"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f753198-c13f-43c1-974c-815f5f73d9de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb0b4b66-8971-40aa-8764-f38026f237a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0153af77-f017-48c9-9d01-ef72df2ffe33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af7dc3aa-19d6-4792-92c0-3f4553beacd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cafca1ed-40da-404c-8d26-d04c318e33a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27efe07d-499e-4946-a35b-1187164c1fbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2638529-3800-4619-8f0b-73f1f9077971",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f012ff16-1399-47f5-bf6d-f909f4c7e9cf"
            }
          }
        ]
      },
      {
        "id": "31cf5c63-5287-4f68-af1b-cb4f3f00db98",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e577611e-1ded-4d93-9835-a098a153ae89",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61636522-6515-48fd-997a-da1020d7b49b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec0dad89-3caf-47b9-9661-64e421992aba",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915eeb95-9ce0-45b4-b5be-453a8468edbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db3d75bb-78ec-42d9-b5d1-1329003861dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443ec8b9-0866-48c9-9f18-1a16fab7c7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f0975f9-e641-4c55-8d9f-62b6d544dff2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd267aaa-de72-4145-9dde-91a3a5426b22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "686c6c78-ef0d-4900-ae66-76db70c940f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e06a95e7-8bb1-4290-a3e5-e9387f73272c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d92377b3-255d-4a37-b0cf-96cd22e9386a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bcb3f14-21f1-4e07-b379-f6b1c406f732",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8bbc0a50-39c5-436e-9a74-88d1439210f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23507238-d2c6-4138-a7dd-4760836307c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31cc0ccb-339c-4273-92c9-57d058794ebf"
            }
          }
        ]
      },
      {
        "id": "02b77046-5f67-47cd-910d-e753bd1e18e2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "453e2052-786d-4ea5-88ea-29c895b8f9ca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca625b93-787a-44fb-8d78-25c86584eff8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4e130ab3-b9bc-446f-b9d9-3c6bb212c2ff",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e9ce80f-3ce1-4efa-8aaa-6d6ce5dda91f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "805a1749-1173-4684-96d8-9b348dac2def",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 88.29824561403508,
      "responseMin": 6,
      "responseMax": 518,
      "responseSd": 80.13014959498764,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710376408148,
      "completed": 1710376442879
    },
    "executions": [
      {
        "id": "2d7679a0-0f94-4a89-b697-a4307cb122ad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e79fc28-0d5d-45cf-bffe-ca4630d6d9e7",
          "httpRequestId": "2ea2f26c-1773-4c4e-add8-57740c0ee599"
        },
        "item": {
          "id": "2d7679a0-0f94-4a89-b697-a4307cb122ad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d65f1a5d-f944-4f0d-93fa-e654b31279f8",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "26fbc438-da79-425c-9906-fcee2187fe40",
        "cursor": {
          "ref": "a7878554-4391-499e-9491-4132badf2339",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "77a6cbbb-9169-488f-9b67-77aec1e5af9c"
        },
        "item": {
          "id": "26fbc438-da79-425c-9906-fcee2187fe40",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ef65efbf-97a0-4481-a25e-573b4a2cff04",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "2ddf0874-4521-4faa-a6dc-ca196dc2e63c",
        "cursor": {
          "ref": "52026556-622b-4362-81fa-08815baa7fea",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf8ae687-660e-42bf-98cb-eddcc3ac62eb"
        },
        "item": {
          "id": "2ddf0874-4521-4faa-a6dc-ca196dc2e63c",
          "name": "did_json"
        },
        "response": {
          "id": "1b375551-5ccd-4154-941e-106c8d54d9c9",
          "status": "OK",
          "code": 200,
          "responseTime": 518,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a163bf5-7a48-4179-9814-c09bba885221",
        "cursor": {
          "ref": "b87f2c56-c80b-4ae7-ad3a-9076525078e6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4056e446-9d6f-49a5-b8fb-3bd56c574d02"
        },
        "item": {
          "id": "5a163bf5-7a48-4179-9814-c09bba885221",
          "name": "did:invalid"
        },
        "response": {
          "id": "e00095af-5653-4e2e-8ae8-2a84ca10b1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a163bf5-7a48-4179-9814-c09bba885221",
        "cursor": {
          "ref": "b87f2c56-c80b-4ae7-ad3a-9076525078e6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4056e446-9d6f-49a5-b8fb-3bd56c574d02"
        },
        "item": {
          "id": "5a163bf5-7a48-4179-9814-c09bba885221",
          "name": "did:invalid"
        },
        "response": {
          "id": "e00095af-5653-4e2e-8ae8-2a84ca10b1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6e5cda-100f-40cb-aae7-1b6fe43dbe1e",
        "cursor": {
          "ref": "7f06a2ba-7720-41c7-bed9-2318816d0b2d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "73e31ee4-83a8-458a-9a39-1008532903db"
        },
        "item": {
          "id": "aa6e5cda-100f-40cb-aae7-1b6fe43dbe1e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cba5007c-a367-4159-a670-34a1c5a564dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 107,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb49bab-27a8-4f27-b0a3-72a6fc0690cd",
        "cursor": {
          "ref": "b4e31c0f-8949-4f2f-b996-2fcfb171af22",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f2e0760d-de7d-45cc-bf63-4b80586f1aa9"
        },
        "item": {
          "id": "ddb49bab-27a8-4f27-b0a3-72a6fc0690cd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "44480358-77ac-4f22-938b-7b406c53ba97",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d7df5-b127-4792-9c36-d35a2f45ee56",
        "cursor": {
          "ref": "50491e41-4073-4225-a3ea-06291e1000af",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a7943055-819e-406b-8751-68a168fd2486"
        },
        "item": {
          "id": "f63d7df5-b127-4792-9c36-d35a2f45ee56",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd6c774d-2f24-4ce9-b486-62e7a67bb647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d1d745-e63c-40f5-9a0e-d6c33bbb2f02",
        "cursor": {
          "ref": "19c76701-ae79-419b-87ef-dc9351f4747a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b8c4dc53-5bda-4265-98e3-0eb6fb6e24ff"
        },
        "item": {
          "id": "00d1d745-e63c-40f5-9a0e-d6c33bbb2f02",
          "name": "identifiers"
        },
        "response": {
          "id": "db7db202-f7b4-4534-975e-f62280f62479",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dc2817-0a69-48d4-8b7a-c4a2f4545718",
        "cursor": {
          "ref": "b7ae84ad-390a-4d0e-89b0-5c42bc598ea3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "31fc6b06-cb81-4520-95d0-c0518e0d7cf5"
        },
        "item": {
          "id": "74dc2817-0a69-48d4-8b7a-c4a2f4545718",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd61dd77-66ca-4b43-bc2f-9c268b7c5076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051bb17a-f72d-4a17-9b4f-2dceefbebca0",
        "cursor": {
          "ref": "6aba79b7-0cac-4380-b15c-308036c60e4d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ff9b4dfc-14e7-4371-8c0a-a7509932492a"
        },
        "item": {
          "id": "051bb17a-f72d-4a17-9b4f-2dceefbebca0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cf0d9e2f-0a79-4c25-990e-1d04e5c566ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9472dfaf-70f2-4b66-b6ba-cc76821ddd9c",
        "cursor": {
          "ref": "1a36de25-6c18-4508-b2b2-99b83b319b1f",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "408d444e-0132-4b68-b568-277ac0b47808"
        },
        "item": {
          "id": "9472dfaf-70f2-4b66-b6ba-cc76821ddd9c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5f3434f5-5978-4deb-b174-2575824e4aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0c46a4-3491-4373-ba2e-f95965b8df06",
        "cursor": {
          "ref": "57301612-07c9-4d84-b009-a8897b0d3497",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e321f685-52b6-4676-8272-c67b46e42752"
        },
        "item": {
          "id": "8e0c46a4-3491-4373-ba2e-f95965b8df06",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c642f97b-8375-4ba9-99c2-1df037d77c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00efd1ba-00d4-48e8-895b-84f112102eb0",
        "cursor": {
          "ref": "1680903b-94ee-482e-b5af-3deb37e5a168",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9e5f2d0d-81b4-4f22-a223-ad44a2c4065c"
        },
        "item": {
          "id": "00efd1ba-00d4-48e8-895b-84f112102eb0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "97c55c0b-535b-4e36-a566-786bb1db137d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8272217-504d-4f94-bf08-c1f27a325d00",
        "cursor": {
          "ref": "e6f8c071-fdde-48e1-bfb0-e27d1a0eebfa",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "72949e9a-947b-405b-a6c6-eafc756e0e3f"
        },
        "item": {
          "id": "c8272217-504d-4f94-bf08-c1f27a325d00",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c57862b6-bcbe-46f6-84de-ec938271cbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c3acf0-5036-42bd-9217-a638f3e5c806",
        "cursor": {
          "ref": "97884136-2601-4ffd-b1c9-bceaf1c77377",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "485230df-4dfb-4334-b82a-d88748438bff"
        },
        "item": {
          "id": "28c3acf0-5036-42bd-9217-a638f3e5c806",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "70cd953e-43b6-4b66-93f3-d78198821ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d127ed45-08aa-465a-9d5d-fbda8c518605",
        "cursor": {
          "ref": "6638c87e-1c9e-40d2-8ba0-75734dc7abeb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "927969cc-8946-4ad2-ad54-f342e399119e"
        },
        "item": {
          "id": "d127ed45-08aa-465a-9d5d-fbda8c518605",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cb282ec8-9527-4cd6-8c7d-2d8ed3e76097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b041364-17f1-449f-8e94-16430e0d1cb5",
        "cursor": {
          "ref": "d7c42165-7d99-4d4f-816d-ab9daf16fb3e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aa5f7e81-57f5-44e9-a00e-fe38cd96b2be"
        },
        "item": {
          "id": "5b041364-17f1-449f-8e94-16430e0d1cb5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d3a92bef-8b04-4bf0-8d2f-450b9ee049b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8cf179-ec95-4aa1-a8ee-9e684ab0460d",
        "cursor": {
          "ref": "bb9faad4-4a94-4a19-b9bd-3fa2f6a94da7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4252941-46c2-4ce9-8b95-00d6291b0a87"
        },
        "item": {
          "id": "ac8cf179-ec95-4aa1-a8ee-9e684ab0460d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0d8890cc-1832-47f6-9cfd-6d7a4c3902c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8076ae37-5fc8-44d3-a686-71a2f2c047bf",
        "cursor": {
          "ref": "87d74a8b-347c-431d-a2ee-746e60ebbe67",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "06b8daa8-e07b-44e0-8094-af0c22e1bcef"
        },
        "item": {
          "id": "8076ae37-5fc8-44d3-a686-71a2f2c047bf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1461c807-01ee-468f-81cb-0ac1b569399a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09c1e8c-1b77-4e8e-bd73-632c833345ca",
        "cursor": {
          "ref": "11bb5895-81ff-4009-a473-2e5737655e66",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "88997e1f-692e-4297-b21f-8f7f61de115f"
        },
        "item": {
          "id": "c09c1e8c-1b77-4e8e-bd73-632c833345ca",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "591ca7d7-40c2-4eb2-b36d-1cba7401f8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dac81a3-f4b7-44bb-8715-4e46d6bd930f",
        "cursor": {
          "ref": "3c9f1654-6b21-4cea-834e-091f8337d3dc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9ca42172-e94f-4e43-bbb1-9d6f2416036c"
        },
        "item": {
          "id": "1dac81a3-f4b7-44bb-8715-4e46d6bd930f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "16899c80-0d08-4c16-9fc1-cc9803e8b424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4abd191-7a5b-4c00-8c65-0be4949d5cda",
        "cursor": {
          "ref": "b10cc428-a408-4275-8044-6d40fd1dfdbb",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fb19712b-8ebf-4d88-a393-f861ace7a85a"
        },
        "item": {
          "id": "b4abd191-7a5b-4c00-8c65-0be4949d5cda",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "43a15c7f-7b07-4e97-863c-99d4c8f8265a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ab621d-69ec-4379-8791-03af5ba320e3",
        "cursor": {
          "ref": "7f76da4e-bc77-43f7-971a-2aeceff55f99",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1c3c6a62-d348-476d-b826-9d317c36eb6e"
        },
        "item": {
          "id": "81ab621d-69ec-4379-8791-03af5ba320e3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "db45c6f1-6e8c-42c0-bef4-5f185ec7c60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ae8d71-def4-4588-b424-29564c45bbd8",
        "cursor": {
          "ref": "36957977-524c-4490-abbe-cd012ef87841",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b8b8fe26-60d4-4270-bd63-2adf89d2797f"
        },
        "item": {
          "id": "32ae8d71-def4-4588-b424-29564c45bbd8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e38c3f84-6362-44ac-8343-eabed94305df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c54d7ff-d258-4bbf-b03f-3dde99fe4bec",
        "cursor": {
          "ref": "8bdfcfc7-bbdb-410a-8f06-95e3d0bba996",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4347df5b-77fa-481a-9cd2-3552ee107a26"
        },
        "item": {
          "id": "2c54d7ff-d258-4bbf-b03f-3dde99fe4bec",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "35ddb986-1df2-48ae-9ca2-f74f7a400b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9da3b6-b55e-4927-84b7-c4a22af97131",
        "cursor": {
          "ref": "1c03c3cd-6e87-4e00-a80c-019ef89f3d03",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "32408390-6ddd-495b-837a-953febc57e36"
        },
        "item": {
          "id": "eb9da3b6-b55e-4927-84b7-c4a22af97131",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d762cfe1-f02a-4f03-9e40-1bd40356216c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4d4a33-c2da-40a9-85c6-08a40c2bdd01",
        "cursor": {
          "ref": "a266ba9b-ea42-423f-ae39-d14066bdf674",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c5f80d78-4e6a-4571-8e6a-794553477b22"
        },
        "item": {
          "id": "1e4d4a33-c2da-40a9-85c6-08a40c2bdd01",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "91bcd322-0cdb-4f98-ae54-ad684c5a52f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14017dfa-b660-4887-b610-1d526de09ebc",
        "cursor": {
          "ref": "d0249fe6-74c4-4354-8923-1db24a48c48c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "78da8188-17cf-4747-8422-d9d91b7da53f"
        },
        "item": {
          "id": "14017dfa-b660-4887-b610-1d526de09ebc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b6f66ec8-09ed-4bc5-8374-6bba75c2d0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0342fac3-adab-4e8e-bafc-1bfad8195a42",
        "cursor": {
          "ref": "b31352fa-2c74-40cd-b0e5-2ae5347f8a34",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9aa780bd-dc79-4fbd-97c9-87ee2ba14a0d"
        },
        "item": {
          "id": "0342fac3-adab-4e8e-bafc-1bfad8195a42",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1e8f7aac-1345-42ad-94d1-73c8680c9d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b678c652-6abf-4d0f-a73e-fcf40bd5842e",
        "cursor": {
          "ref": "bd9c2055-f45c-4a51-8e21-8a7d1bca3702",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "be3d3e52-271a-4755-a79d-8c2250035d22"
        },
        "item": {
          "id": "b678c652-6abf-4d0f-a73e-fcf40bd5842e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f21ad059-b46e-4558-8f0f-0739c17bddd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ebe5fd-e027-4737-a95b-5f710955253b",
        "cursor": {
          "ref": "e00ee91e-ca9e-452d-bdfb-aeec6e40a6fd",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "227c2f70-483f-4211-9dc9-14e8dd14cef7"
        },
        "item": {
          "id": "f6ebe5fd-e027-4737-a95b-5f710955253b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f6995ef3-ef27-4a7c-953f-08188cf0a1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26a66a5-55f9-418c-9942-b1be71f244e1",
        "cursor": {
          "ref": "c8915892-302c-4f51-8d42-09abb9117da9",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "42c61f9d-a232-4a33-bf54-4a413b1e2678"
        },
        "item": {
          "id": "b26a66a5-55f9-418c-9942-b1be71f244e1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d706df74-35e1-49c1-b0af-e4c1d92a476a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80876c1-f01c-4bf1-b0be-c08aa3e5999d",
        "cursor": {
          "ref": "fea1bd1a-6e3d-4434-896f-089a51a82408",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "195e8715-e7fd-4e19-991b-978ce09e84a7"
        },
        "item": {
          "id": "e80876c1-f01c-4bf1-b0be-c08aa3e5999d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6c9a6b15-eced-4a1f-9f59-14934f987ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cffcde-c01b-4cd1-9d64-f7c1c41bae30",
        "cursor": {
          "ref": "e80fdbac-1968-4d2e-8d1a-76c50f780551",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "18f1bba8-a63b-46d9-8226-51f3ac4ccf0e"
        },
        "item": {
          "id": "45cffcde-c01b-4cd1-9d64-f7c1c41bae30",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "443cb94e-3455-4909-b8d4-176f5e49cbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89ea28f-8465-4a7b-ae78-f1c7fc5c415b",
        "cursor": {
          "ref": "a628ee4e-3fa6-4687-a25c-990bf469f362",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "771daabd-5874-4383-89c9-12fc615eb2de"
        },
        "item": {
          "id": "a89ea28f-8465-4a7b-ae78-f1c7fc5c415b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d939822c-ddb6-4ca1-b122-4a7a16391833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2494c2b3-ff93-4b1f-83fd-6fc82323fc7b",
        "cursor": {
          "ref": "b72a0756-0b86-4426-b7cd-de01c400cfbc",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6fb25e15-e9d6-470f-ae67-6118313bf35a"
        },
        "item": {
          "id": "2494c2b3-ff93-4b1f-83fd-6fc82323fc7b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "873afa5e-69b8-4525-abc0-30a3f78b2096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97a4a70-805a-4911-8504-a33f21d11230",
        "cursor": {
          "ref": "46c7285f-4de5-4e47-be26-5a7ed365c48d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b03e0241-bc94-4d55-8ae0-37673d902666"
        },
        "item": {
          "id": "c97a4a70-805a-4911-8504-a33f21d11230",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7fa3187f-ddfd-4370-906d-c7b73f79fc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0368eaa-def7-4054-aa1a-3e7f0265ecb9",
        "cursor": {
          "ref": "b35d02d6-42f8-467a-8d6b-849ca612fca4",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "42248ac2-2c8b-43ba-8e25-d4d308d420a9"
        },
        "item": {
          "id": "f0368eaa-def7-4054-aa1a-3e7f0265ecb9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6f1e5ea-5119-474c-8f42-a9ac069a0b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4aa3078-be43-42b4-ac00-8f565299a57a",
        "cursor": {
          "ref": "3106ad0b-99a4-4de2-bbef-267f2d3f61a8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f3344de1-34d5-4ca0-a9ff-d9e5173ce480"
        },
        "item": {
          "id": "e4aa3078-be43-42b4-ac00-8f565299a57a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d7fa5af2-b29c-4526-bec5-505de8fccd6d",
          "status": "Created",
          "code": 201,
          "responseTime": 514,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b80da3c3-bc16-4b39-ab2b-759bb6663657",
        "cursor": {
          "ref": "d9bf8ff1-16e4-4768-a047-ecd34fa0b0ac",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f4e89e68-8312-4ba2-a492-74770a7ad48f"
        },
        "item": {
          "id": "b80da3c3-bc16-4b39-ab2b-759bb6663657",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "de6fb564-5113-437a-bcc0-88c8fa7f4df7",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ba72ddea-21cf-4c2e-a7dc-afad259cd94e",
        "cursor": {
          "ref": "46cd5562-99be-4d3f-96ee-9c60ab6998e1",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "17dca1c3-c592-4a16-8d4e-0396bbc9c1c4"
        },
        "item": {
          "id": "ba72ddea-21cf-4c2e-a7dc-afad259cd94e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "55b9c17b-a753-415d-9c05-c0195e22675a",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9be84680-f0a0-4567-884a-f165437782d3",
        "cursor": {
          "ref": "9b21d5d1-6ac6-437d-9d03-d788f8e04da7",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a984999d-4657-417c-80ce-9b0937920600"
        },
        "item": {
          "id": "9be84680-f0a0-4567-884a-f165437782d3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "97f267db-cd3a-4d5f-bb8e-b2d9cad9c577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55ece13-ff77-407d-8492-1dfa4df7ed2e",
        "cursor": {
          "ref": "a75ea257-a5b5-444f-8b93-829d85adaa15",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "314f119f-ceca-4115-89ef-427d3f9758c9"
        },
        "item": {
          "id": "f55ece13-ff77-407d-8492-1dfa4df7ed2e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b6c0813d-0be9-476c-a365-073ddf01cefd",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d3ebc2b0-5a36-4fbd-a552-ac19ee10315a",
        "cursor": {
          "ref": "865054c9-0e28-491a-85fa-57e22981c342",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "25703a19-93fa-42b4-9149-52dac0b25fac"
        },
        "item": {
          "id": "d3ebc2b0-5a36-4fbd-a552-ac19ee10315a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "05a05d49-404e-4e0f-808a-e6b528c4519f",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8d7644a0-f97e-4707-8b2a-66b8469cc284",
        "cursor": {
          "ref": "fc93b9f2-4057-4551-95d3-a395101a2446",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00997e1c-7457-42ef-be2e-709d7b4fbcd7"
        },
        "item": {
          "id": "8d7644a0-f97e-4707-8b2a-66b8469cc284",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "367d2db2-8266-4cd8-b156-a51ed3af3668",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ea0e78e9-74c4-4e0f-8884-710acff05c21",
        "cursor": {
          "ref": "84b547ad-7bda-4a04-a104-d187a23a9d10",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2b826e77-97d6-41b1-8a11-3d8c2e6041c4"
        },
        "item": {
          "id": "ea0e78e9-74c4-4e0f-8884-710acff05c21",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1581f1c4-14b4-4815-966d-2e3c439c3167",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "038afee1-e1e4-43c8-b887-2297259fa005",
        "cursor": {
          "ref": "72777164-83a9-45e8-bd50-81209cf3f6f7",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "90e5bbbb-ce57-473e-8c08-b14e1bf8d52f"
        },
        "item": {
          "id": "038afee1-e1e4-43c8-b887-2297259fa005",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7fb5cbc8-a7b5-4a75-9865-0e87bc4d771b",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8e422d68-d15a-48ad-b82b-d464b3306eea",
        "cursor": {
          "ref": "13dd9789-52be-4c3e-96cc-c3e3b3e23433",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "050d1e04-1de9-4484-b36b-ce2dd25e470b"
        },
        "item": {
          "id": "8e422d68-d15a-48ad-b82b-d464b3306eea",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fd3caa27-b78c-4602-8b1d-b458c3feef7e",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "434174e6-2aa7-4855-8781-03b867dc2a19",
        "cursor": {
          "ref": "5af53d4b-b2a4-4360-9b03-da2ced605043",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6ca86bec-eacc-4c7d-a4ef-15c3b0c8b20c"
        },
        "item": {
          "id": "434174e6-2aa7-4855-8781-03b867dc2a19",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a505c5a9-14c5-4599-990e-50aea61f4086",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f76b6671-8716-43a3-b355-deb1b36021c5",
        "cursor": {
          "ref": "c11c5bdd-a539-4fe2-88db-1f47714c67ed",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1903b975-4a7b-463c-9e68-426d1c3a896c"
        },
        "item": {
          "id": "f76b6671-8716-43a3-b355-deb1b36021c5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "27cdd836-230f-486c-bcf2-5460d61c1028",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c5bd77d9-05e9-4067-9596-9f0f180bad4d",
        "cursor": {
          "ref": "555da35c-d5b0-48b0-89be-3daea0f70ba7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9fc53b53-3891-42de-bfea-1e5184d2d43f"
        },
        "item": {
          "id": "c5bd77d9-05e9-4067-9596-9f0f180bad4d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f8aa156b-59fc-49b2-b5fb-ac6aaf5a2c05",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8255f17a-b213-45a2-b927-be8a1e685e6e",
        "cursor": {
          "ref": "c77e3194-344c-4fae-a6ac-1f86b86ff566",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "94a6e46a-df98-4a75-9806-4a981c7fd9d7"
        },
        "item": {
          "id": "8255f17a-b213-45a2-b927-be8a1e685e6e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3085b76a-0fba-4d46-94d1-6cdabab34c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bcaaca-bf84-4553-8696-e37bdafcf0f9",
        "cursor": {
          "ref": "614669a0-d5be-44b7-aa12-4f61936b3050",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cb549cc6-8913-4b5b-89de-c0e61fd4938a"
        },
        "item": {
          "id": "38bcaaca-bf84-4553-8696-e37bdafcf0f9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f97d5f9b-4dff-4847-a4a8-995745dfe4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2d1c5f-afbb-467f-8993-36ff5f623aec",
        "cursor": {
          "ref": "4a13d30d-983d-44c0-9c49-c33416e5a67e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "be5f31e8-ff6b-4a95-a71f-da981b550116"
        },
        "item": {
          "id": "3c2d1c5f-afbb-467f-8993-36ff5f623aec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "416589ec-ea72-49ff-85e0-b170fbb9def2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db83348-3a98-459a-b4c1-27cea02262ed",
        "cursor": {
          "ref": "f1fb585c-f641-489a-b82d-2ccadd189109",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1a46ccb3-9822-4cd2-947f-47c43e079937"
        },
        "item": {
          "id": "4db83348-3a98-459a-b4c1-27cea02262ed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4b7b3a3d-c537-4bc9-9e09-7a5d78c731cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c575252-f140-4925-856c-458b6a3845af",
        "cursor": {
          "ref": "4f9f24be-faf6-4883-b0ac-7f6b44c454d4",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "eb301b6b-0679-421b-8207-9e9bb365b3af"
        },
        "item": {
          "id": "2c575252-f140-4925-856c-458b6a3845af",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "72692267-0e67-4bdb-9bf4-5496590387a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4e4cc4-5757-43f7-8c97-2eb31f1641fd",
        "cursor": {
          "ref": "fbbe391d-a28e-4aa0-8106-40c8b6be8a15",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8676f5db-3994-4358-92eb-78e3ec8fc461"
        },
        "item": {
          "id": "5c4e4cc4-5757-43f7-8c97-2eb31f1641fd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "20c82faf-2d91-4eb6-9919-9f4530026c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd638e4f-6261-4df5-80ca-c2df1e405fe2",
        "cursor": {
          "ref": "c6e149fa-d5b8-4297-8e9c-0038248f9b7f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "471457bd-a092-463c-8ee6-600a3c804b3d"
        },
        "item": {
          "id": "dd638e4f-6261-4df5-80ca-c2df1e405fe2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1a0f377f-3f23-46c9-8f56-064e82310beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404f89c9-8f32-4cb1-802b-a4d532567c43",
        "cursor": {
          "ref": "6b3ae561-cafd-45db-810a-1ed2d51f41b1",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1c43cfea-ce9c-4b9a-b581-35142df1e1a0"
        },
        "item": {
          "id": "404f89c9-8f32-4cb1-802b-a4d532567c43",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a292857d-f9ca-4375-9342-802945786e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6563cc2d-bc75-4e53-a1e8-82d3f71013b9",
        "cursor": {
          "ref": "6a96b4ba-d734-41cb-a791-4fd65d6201c0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "153ed990-99d2-42b9-ad4b-c0f5dfc1070e"
        },
        "item": {
          "id": "6563cc2d-bc75-4e53-a1e8-82d3f71013b9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "859e0a70-5e55-4428-bff0-b455aa34a918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9189c3-e058-4a29-8369-68d37b6c0091",
        "cursor": {
          "ref": "427a296e-77bf-41fe-82cb-8abf21083956",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ad647c68-e5f4-4052-ae56-34cb537dd49e"
        },
        "item": {
          "id": "ac9189c3-e058-4a29-8369-68d37b6c0091",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e721238d-649f-41c1-ab62-7873f32c5fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaca298-4fa5-45b7-80e2-bc3e35bec8a6",
        "cursor": {
          "ref": "6b908773-d4f6-4ca1-a946-fff2bdd2b9df",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2c5eaec0-b433-4ede-be86-23d74d61b8ab"
        },
        "item": {
          "id": "dfaca298-4fa5-45b7-80e2-bc3e35bec8a6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f94a5230-0d3e-45c2-9275-759240c7d6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afeb2c12-809c-4d5c-a69c-1915ea7b04b1",
        "cursor": {
          "ref": "677cb67d-4528-44b7-87bb-dad29218ed46",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cfd081dc-6299-4141-9348-a3eaa355b813"
        },
        "item": {
          "id": "afeb2c12-809c-4d5c-a69c-1915ea7b04b1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "442a2ccd-f561-4428-9c13-096dc84cdb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b001ec-9139-4c67-ad7d-ceb7db72e98b",
        "cursor": {
          "ref": "aba42d9a-6cf9-4c23-b337-0dec08164362",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fe9b7598-9192-4d69-9727-4d7df8410ea1"
        },
        "item": {
          "id": "77b001ec-9139-4c67-ad7d-ceb7db72e98b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2c6cf96c-48e0-488f-819e-432e0f441667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb2fe1b-bda3-44dc-b713-78097cb60fde",
        "cursor": {
          "ref": "763899fd-210a-4c94-b8da-b5ece8e24a31",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "891ab63a-18d3-4736-a729-34e667800389"
        },
        "item": {
          "id": "cfb2fe1b-bda3-44dc-b713-78097cb60fde",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a8105a08-e625-4b44-a705-badc529fb2bc",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "56c52dce-0b19-4216-98e6-7e2a4e719c63",
        "cursor": {
          "ref": "ab3dda6c-95bf-4d18-bb60-6f9c07ec1bd0",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "eb1b7e49-60c0-4480-a438-4916d4e62506"
        },
        "item": {
          "id": "56c52dce-0b19-4216-98e6-7e2a4e719c63",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0e8ba46f-8765-4061-b874-da25e28a73c2",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ffb3cbba-e0f5-40f6-a13f-4f71a6149c5d",
        "cursor": {
          "ref": "23e76265-0c58-47a3-a4a3-013726077c59",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cf702f0f-1280-47ef-b0a1-b5d20e918662"
        },
        "item": {
          "id": "ffb3cbba-e0f5-40f6-a13f-4f71a6149c5d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2580244c-81d1-4041-8b3c-5ade6a6f8926",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0aa5e5db-96ff-4f1f-ab0f-1aac047ca00e",
        "cursor": {
          "ref": "9be1de5f-91ec-4a18-8ecb-b8cf14ab8612",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5f0d9f09-fe6e-4614-ba86-1f124050c891"
        },
        "item": {
          "id": "0aa5e5db-96ff-4f1f-ab0f-1aac047ca00e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "57924fe6-fdfe-47ed-abf4-256678b62439",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "13d62173-8ea8-4f8b-a5ab-7ff965ddfb43",
        "cursor": {
          "ref": "758dcbd5-b5f7-49a8-9223-77159bb3c76b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "08467cee-e592-4032-b36f-e873237df4ce"
        },
        "item": {
          "id": "13d62173-8ea8-4f8b-a5ab-7ff965ddfb43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e7f06c16-587c-4820-8152-6c6014cf3b59",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4c81c925-dcc4-427a-be9a-d3067fe1acf9",
        "cursor": {
          "ref": "5bf6cc08-4c32-41a9-a4a3-04fda131e24e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5a05b0fa-83e7-4f1e-8828-31f44fb603d4"
        },
        "item": {
          "id": "4c81c925-dcc4-427a-be9a-d3067fe1acf9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "744e96ea-eb86-4df7-b4c3-7b48d61f109f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6387ca-ffd0-4d07-870f-536580d424b8",
        "cursor": {
          "ref": "69d56f21-3c95-4d52-8f45-a604c49b80c5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "53341978-20cb-44ed-865c-dd1b4bccc88f"
        },
        "item": {
          "id": "ba6387ca-ffd0-4d07-870f-536580d424b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "08d53d86-8b08-4198-b25d-301633533da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaaa0af-b1ac-400e-b663-04274465e45a",
        "cursor": {
          "ref": "4fe35a50-5843-498e-b765-106c11d8d8bf",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "be65c491-846a-4f7c-add1-f2474c2a534f"
        },
        "item": {
          "id": "edaaa0af-b1ac-400e-b663-04274465e45a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "26d148e2-686c-41a4-865c-b2a9e70bcb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8ed694-30bd-42c0-835b-c379fb5aa058",
        "cursor": {
          "ref": "b04430a3-2fc5-4b2d-9838-6260a38fb295",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1422dfa5-42ae-4b15-86aa-a74d8e9a56f9"
        },
        "item": {
          "id": "ff8ed694-30bd-42c0-835b-c379fb5aa058",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4a155bf3-e305-4596-96a4-904af65796c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f7d72-71d9-4727-8476-a34357f4b2a9",
        "cursor": {
          "ref": "8ccf33b4-b2a1-4fcf-a768-9e39a543cb54",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a55d5799-0a59-4e67-bf07-5e8083fe7638"
        },
        "item": {
          "id": "191f7d72-71d9-4727-8476-a34357f4b2a9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8794190c-0025-4ae0-8f37-ef6bfb2fc38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdd11bf-8160-4ce4-8e29-5819a9f51be8",
        "cursor": {
          "ref": "c8419b5d-8ec3-478d-b550-9cdb3757d458",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "615c51fd-19fa-482c-b5d1-926b2c6f1b4c"
        },
        "item": {
          "id": "2fdd11bf-8160-4ce4-8e29-5819a9f51be8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "87b27a2e-a00f-435d-ad24-40bc22706ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5748c2e-f027-435f-aebc-32669c14ed53",
        "cursor": {
          "ref": "8a6e83e4-3a62-4816-b9fc-e1bcba5cec8a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5b021c08-4e57-404c-a0ac-8abf4196ffe8"
        },
        "item": {
          "id": "a5748c2e-f027-435f-aebc-32669c14ed53",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3dfbae31-fb06-4052-8241-9831f2131307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24204ba0-959b-47f4-9976-8f5ebf64c662",
        "cursor": {
          "ref": "a733301c-0f27-4fdc-b9c2-b77e35af3bfd",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9b909847-641a-4d42-9708-d0fe28646074"
        },
        "item": {
          "id": "24204ba0-959b-47f4-9976-8f5ebf64c662",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f2b065c4-7a0a-4d44-8e97-05530d94b64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95141e9-894b-40bc-8a25-39ab52774ee7",
        "cursor": {
          "ref": "4d9d179d-d64f-4d47-9f3b-19a4e4dfceb8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "47b42243-fa1b-4138-9a86-10c9d1cc438e"
        },
        "item": {
          "id": "a95141e9-894b-40bc-8a25-39ab52774ee7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "55047a45-bbd4-4a32-97ac-f67287d6d779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d9a924-04f1-4e4c-8627-51dd3c9f302a",
        "cursor": {
          "ref": "6f89d73f-2368-4f1a-94cf-5d90ddd346a4",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "731c6c61-37c1-418b-ad00-cf34f7b0ca00"
        },
        "item": {
          "id": "03d9a924-04f1-4e4c-8627-51dd3c9f302a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "84187dbb-3943-435c-ba25-d6103b51295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dad475-56a5-4456-b029-58b5bbe40bed",
        "cursor": {
          "ref": "41102f93-86fd-4465-90c2-57c55b7ed65a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0096d3e8-2087-423e-aa74-87f7a3c4b51f"
        },
        "item": {
          "id": "b1dad475-56a5-4456-b029-58b5bbe40bed",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c7de8bc9-b0a8-4a9e-ba08-9364df6f7e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22371f8c-4c5d-40be-b0ca-a3c38bdb3ca7",
        "cursor": {
          "ref": "1ea4db8a-1f04-4037-83b9-0581e4498f32",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ef7aeee5-6942-4343-946a-e69e1b2015e7"
        },
        "item": {
          "id": "22371f8c-4c5d-40be-b0ca-a3c38bdb3ca7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ec702b5e-5c53-457b-96db-606a873e8e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d46168-c79c-47b9-bb3f-913ada82d679",
        "cursor": {
          "ref": "2b18fa21-974a-4f8f-b126-eb294e3e6705",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3c4e1ece-4eba-4c6c-ad73-30f378b9f3bd"
        },
        "item": {
          "id": "41d46168-c79c-47b9-bb3f-913ada82d679",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2002d0ed-400f-44c9-aa02-bf40f047e7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845a3ab8-01c4-4792-88f2-66db3a6f5bd6",
        "cursor": {
          "ref": "207bbbc2-0ae2-46bb-b723-1ec36c28dc97",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d171a1ad-5373-4451-b1eb-d0ad16cfdd75"
        },
        "item": {
          "id": "845a3ab8-01c4-4792-88f2-66db3a6f5bd6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6366df17-d7ab-408e-9f31-027f13f04108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0e586f-1d90-40e3-b3b2-10ec6b1ff860",
        "cursor": {
          "ref": "3599f395-39fe-4083-9df0-2c08b1f1b14d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d0d05db3-2100-46b1-b418-af0329c1da6f"
        },
        "item": {
          "id": "ab0e586f-1d90-40e3-b3b2-10ec6b1ff860",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5395c08f-8884-42d3-a818-c6e0bd5b9609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfba378-b0d1-4e39-b4f3-eec063c49a19",
        "cursor": {
          "ref": "8eac51dd-13be-4d63-9157-92dc29065a55",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "57780e83-bd31-45ac-9ba2-30c7c4e63a1c"
        },
        "item": {
          "id": "8bfba378-b0d1-4e39-b4f3-eec063c49a19",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d2da5218-7ef5-4032-8a12-a8df83eaa1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d57f19-a87c-44d3-afe6-04ce522ea4f8",
        "cursor": {
          "ref": "3b783b03-650f-4c92-a8cd-db77a355df8b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "261eb8ca-61a1-4b13-aa01-d9b9e674d8ba"
        },
        "item": {
          "id": "e8d57f19-a87c-44d3-afe6-04ce522ea4f8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "97beb483-8eb8-480c-bf8c-f4e1a38c05cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb24fd5-d1f6-4afd-a542-6e0fa50eeaae",
        "cursor": {
          "ref": "971e541b-79c2-4c29-a7e9-9354ee662e03",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "182b6983-ef49-4b03-9106-484efaddb922"
        },
        "item": {
          "id": "0cb24fd5-d1f6-4afd-a542-6e0fa50eeaae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3ff254ac-ba43-452e-92f1-a3cc5557bdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d725876-1186-4965-9f71-8ae66451aef4",
        "cursor": {
          "ref": "1bc64e89-9e9c-4030-9c75-548254ffcd31",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "59ae48e3-58d2-4ee1-b301-b6f269ef5454"
        },
        "item": {
          "id": "1d725876-1186-4965-9f71-8ae66451aef4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26b363b5-ca01-48fd-a55a-24362d46c2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae34ff7-a81c-4a22-83fc-dc20075f73de",
        "cursor": {
          "ref": "6461f7b5-6c1c-473c-9896-384540953224",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "883edc1d-94bc-4b74-8608-8ee4b81ac349"
        },
        "item": {
          "id": "3ae34ff7-a81c-4a22-83fc-dc20075f73de",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fae4c411-b914-4869-86ee-c61124287c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e46287-6780-4757-b87f-0c1862a3db0b",
        "cursor": {
          "ref": "e4e80c52-124e-4189-b415-13637768d92c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7e2e306b-707e-45ff-93c5-b3cb8b5bdb55"
        },
        "item": {
          "id": "d6e46287-6780-4757-b87f-0c1862a3db0b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8554115b-5606-4649-b783-a82ea9686961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1459e8-83f5-46bf-be01-bc52286c03c1",
        "cursor": {
          "ref": "767afc8c-34b2-43c6-9a4d-1c5474011a14",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a1e777ff-1758-430a-a2d4-d45a3182bb53"
        },
        "item": {
          "id": "ef1459e8-83f5-46bf-be01-bc52286c03c1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "39735f41-ebf6-4433-a9a6-a1b4a20d4a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc20ce84-a961-49e2-9f2a-15d57c11245d",
        "cursor": {
          "ref": "adb8aaa0-c610-4d0e-8ade-e584c804ff3a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "55d00a8d-86b4-4007-9398-5b1689c3cf82"
        },
        "item": {
          "id": "bc20ce84-a961-49e2-9f2a-15d57c11245d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8d287f0b-9ad8-4764-b5bb-beb8ad45db7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0b441b-832f-41ac-bf65-10dee1b801e4",
        "cursor": {
          "ref": "b8eaab0d-5720-4f7b-b744-4517fdde9c3b",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "05b45977-c7c9-4569-b3a3-ba1068765e78"
        },
        "item": {
          "id": "8c0b441b-832f-41ac-bf65-10dee1b801e4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "23ae272b-f0ea-49c1-99db-5dc0a88701d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06783357-d503-44eb-ab9c-c03deb813a62",
        "cursor": {
          "ref": "6de84358-6410-4ef3-a986-750fde3b9e50",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4cba5f1a-6a9a-437f-ba0b-97a916168c6f"
        },
        "item": {
          "id": "06783357-d503-44eb-ab9c-c03deb813a62",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "16077078-263d-47dc-8580-14b969927213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4587af-a0aa-44b2-be9b-ada7da82c101",
        "cursor": {
          "ref": "700009fd-0b34-43b8-9b50-9168f4a5d43b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7f3315b5-de76-456e-bd40-c1a38d0a7da6"
        },
        "item": {
          "id": "3d4587af-a0aa-44b2-be9b-ada7da82c101",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "07af5772-cfcc-477e-9702-42ecb02a1913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb14bb8-ce3e-4ccb-aa2a-87fb17a7c6dd",
        "cursor": {
          "ref": "2ea6876f-416f-465f-85b0-cd037300a056",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6b2e7ed4-bb59-4f47-86fe-555626fabc47"
        },
        "item": {
          "id": "0bb14bb8-ce3e-4ccb-aa2a-87fb17a7c6dd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4e8e2be0-f73c-459b-ab3b-6a4a281e0487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd9cd12-9833-45ac-b59e-0dbe4a877ba8",
        "cursor": {
          "ref": "f347f927-6bc6-4df3-8422-20b61901f40e",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "edb26daa-8721-499c-a3a3-03394082cfaa"
        },
        "item": {
          "id": "fdd9cd12-9833-45ac-b59e-0dbe4a877ba8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a41be649-a539-4556-88da-0f9d3a6cf4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c899572-3cd1-47cf-bebd-a585274574bb",
        "cursor": {
          "ref": "09269323-a651-4588-b4fa-0826b72da752",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "de979f9b-f8cf-4be6-90dd-0a6bf725ea75"
        },
        "item": {
          "id": "9c899572-3cd1-47cf-bebd-a585274574bb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac143a79-6e93-48d3-a868-804927b5fcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa180317-4bcc-4494-ab13-94695ef00c9b",
        "cursor": {
          "ref": "5426927c-1067-4061-beb5-78aa0f0ca836",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0be0dc86-e49f-4ae3-b0df-2becfb3255cf"
        },
        "item": {
          "id": "aa180317-4bcc-4494-ab13-94695ef00c9b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0891671c-83b3-4164-8777-8d3af568546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5301536b-71ed-45bf-b926-d02e1d66b41c",
        "cursor": {
          "ref": "de11aa25-5065-49b8-8347-7af2ee47fe8a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d71e1bf9-79a2-4ccf-8849-4d232338d7bd"
        },
        "item": {
          "id": "5301536b-71ed-45bf-b926-d02e1d66b41c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e0eddbe1-8c2b-4e7e-82b5-3f102a879d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4df2d59-6399-4966-8388-b9d056a35e38",
        "cursor": {
          "ref": "3a676cba-d204-4a0b-bdaf-801f6eb7a157",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c413c4f6-3d81-46b7-80ab-7f7725e43629"
        },
        "item": {
          "id": "e4df2d59-6399-4966-8388-b9d056a35e38",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2efc2d87-ae2d-4550-a5e9-a67d6bfed85e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5947358d-a08d-427f-af27-73b8c700f3f6",
        "cursor": {
          "ref": "db7c4567-bc2e-45f1-871f-ca29324e21ba",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "78210e29-c177-4b56-9e72-1bd32c3b07b9"
        },
        "item": {
          "id": "5947358d-a08d-427f-af27-73b8c700f3f6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fc11feda-b17f-4a4a-b956-a1e512ca0914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c5af54ac-499f-439b-8b3c-e42e9adc1088",
        "cursor": {
          "ref": "1b54c49c-42f1-4169-8f60-f523206ab48b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c3476aee-28f8-4806-b5d1-4223c708fde8"
        },
        "item": {
          "id": "c5af54ac-499f-439b-8b3c-e42e9adc1088",
          "name": "credentials_issue"
        },
        "response": {
          "id": "61dfb9d5-263c-4c89-82cd-84f14d333f2f",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea65736-893f-4ce2-96be-e488e1897243",
        "cursor": {
          "ref": "88eb57ba-beb0-48c7-88a5-892837d16676",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "798852dd-a6f2-4207-ae6a-38560caf3c4e"
        },
        "item": {
          "id": "7ea65736-893f-4ce2-96be-e488e1897243",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4ea035ee-2a15-4a97-be1a-ccaadc00591e",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "406862b2-2542-49ff-ab53-49f4926e74eb",
        "cursor": {
          "ref": "b4a085f8-377c-4eb6-b87d-72f0e7c6fa34",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b7e694fe-7c2e-44b7-97f1-7095979556ba"
        },
        "item": {
          "id": "406862b2-2542-49ff-ab53-49f4926e74eb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8ff95a5d-addb-4039-90e5-bb423bd21691",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47edb9c3-1742-41a4-8979-4a0d36355db4",
        "cursor": {
          "ref": "a6959c0b-14c4-482a-9ade-1c1b14c6c8b7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7ae0a27d-8565-48a6-bb9b-61513ff3cca3"
        },
        "item": {
          "id": "47edb9c3-1742-41a4-8979-4a0d36355db4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "08845a75-f119-4414-88a9-66f4470763bb",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e69a71-bbef-46c1-8b6c-ef954146eb16",
        "cursor": {
          "ref": "43a53b68-caa0-45d8-8e53-a6ef3b17311d",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "921471f1-b506-4bf7-b7db-79e3f8fe5fc0"
        },
        "item": {
          "id": "d9e69a71-bbef-46c1-8b6c-ef954146eb16",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83f70587-f501-4295-b9e4-bfc9d1ba5867",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-14T00:33:44.719Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-14T00:33:44.719Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "972ff634-86b8-4ef9-a22c-2c02f9f34e66",
        "cursor": {
          "ref": "8aa7e0a4-f355-48cb-98b0-34e5c97b2904",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0fe36c47-517f-4054-a7a0-689eabe3285b"
        },
        "item": {
          "id": "972ff634-86b8-4ef9-a22c-2c02f9f34e66",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "be8948e4-4e3f-45f1-9683-8d04adbf5ebc",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7caec49d-69be-483c-950b-028e53a69f91",
        "cursor": {
          "ref": "0981906a-7e94-4e44-b684-9f447ffa495a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0eb90745-4462-43aa-9d7e-4aab54533782"
        },
        "item": {
          "id": "7caec49d-69be-483c-950b-028e53a69f91",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3600f328-2543-41f4-81a3-871bbb21cfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6156582e-74b3-47a9-9cd4-aa02db6ee72c",
        "cursor": {
          "ref": "bc069b48-c3ba-40a3-a4e4-f2a71b55193c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6be2e5bc-2862-4172-b6cc-d58fd7b201f6"
        },
        "item": {
          "id": "6156582e-74b3-47a9-9cd4-aa02db6ee72c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47a80a85-f3d9-46d9-b35e-c8537ceddc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07afdd-ff68-4239-a6ca-d02ae6d10eae",
        "cursor": {
          "ref": "f007008a-f291-433f-914d-a84a2e716fe9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "378f4f05-f07f-4dec-8cb6-f7229b416306"
        },
        "item": {
          "id": "1e07afdd-ff68-4239-a6ca-d02ae6d10eae",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "18fad500-ad10-4535-ac8b-7e78b7f0a66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca477f4-fb99-46b7-b92e-498cccb20ed9",
        "cursor": {
          "ref": "efe6b505-8d5d-4c86-b363-c589bc6a1fc5",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "30cb1802-5ae3-41d5-bd9f-318fc4bed39c"
        },
        "item": {
          "id": "8ca477f4-fb99-46b7-b92e-498cccb20ed9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3849a385-4127-4870-8fe9-eda1af7de507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5f6f5e-0445-4950-b61b-bfb41758b8cc",
        "cursor": {
          "ref": "f9490ef0-76d1-4cd2-9ec9-39bd824e529a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cd6cde9b-a41f-4a5f-b79a-a8f7b960f207"
        },
        "item": {
          "id": "ca5f6f5e-0445-4950-b61b-bfb41758b8cc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c758326d-9206-4794-baca-d6c5ea8c17a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be857028-82dd-4a50-96ed-15d460177049",
        "cursor": {
          "ref": "5d9beaba-c655-4c8a-bfb6-eb8896bb5882",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2100967e-a975-4969-b9d7-b1a6a25765b9"
        },
        "item": {
          "id": "be857028-82dd-4a50-96ed-15d460177049",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c3bf8e89-9683-4f52-8456-875ec12f866d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d3ce51-7007-4a32-9d1d-552de7179e62",
        "cursor": {
          "ref": "384dbf16-11b6-4b37-a407-cb0940ae9e89",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9e5ab8d2-d4fb-44ea-98ac-7caa2d08e4e4"
        },
        "item": {
          "id": "75d3ce51-7007-4a32-9d1d-552de7179e62",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "566baa3f-b7ee-4537-aa42-7ce422494750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bf6cf1-07ce-4f29-a464-0a372ad5a20c",
        "cursor": {
          "ref": "6c865b6d-7000-45f8-a5ba-d34633a77987",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "805a1577-070e-40b0-97f8-9d68a9db005b"
        },
        "item": {
          "id": "66bf6cf1-07ce-4f29-a464-0a372ad5a20c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fb886bb6-734a-4d9d-891f-3e5e7e826b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8e6ab9-8790-41f4-9669-6f317ff5739e",
        "cursor": {
          "ref": "eb60b3d0-e4db-4d3d-b437-046589a848c5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "067b5e48-b59f-4b35-bc68-e6f88712db9e"
        },
        "item": {
          "id": "fd8e6ab9-8790-41f4-9669-6f317ff5739e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d0255855-b29b-4554-9ecc-7c4ff21586ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cacfbc6-bc8e-45aa-b8c2-f33ef959405f",
        "cursor": {
          "ref": "39a297e1-c152-4acc-b36c-8a9cbdd210b7",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a0f14a67-ef98-4284-a5fa-4436b8e790a6"
        },
        "item": {
          "id": "8cacfbc6-bc8e-45aa-b8c2-f33ef959405f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f3323c6e-609c-43f1-ad2c-9b31932c9234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516fdae7-6e02-49b3-a4d5-da360f57c91a",
        "cursor": {
          "ref": "0d88aeb3-ec7f-4a19-afe2-304cfa8f481f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "267ecd92-bdcd-4a6c-b78a-3cdcd35bac05"
        },
        "item": {
          "id": "516fdae7-6e02-49b3-a4d5-da360f57c91a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2a371922-3048-49e3-bd47-05a1f49d173c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcb1fc5-a215-4cfc-819e-2bc8a46b66ed",
        "cursor": {
          "ref": "2049a9b6-4e46-42f3-adc4-76c36fd8244d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "217fefbe-a22d-4d0d-bc98-c156cf426993"
        },
        "item": {
          "id": "6bcb1fc5-a215-4cfc-819e-2bc8a46b66ed",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "58f4fcce-bee3-4087-9da0-ddf5a97a44e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b52f90-3c5b-4eeb-a515-751185863c22",
        "cursor": {
          "ref": "d36b9715-989e-4a29-8ca7-0d0709d33dec",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7951e0ac-6883-47d3-8aed-7b83363913df"
        },
        "item": {
          "id": "60b52f90-3c5b-4eeb-a515-751185863c22",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3c2dcf74-f47f-4af0-8732-94c31781ced0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "68ccbabf-2104-4d09-8c30-c80c0cf5f2b3",
        "cursor": {
          "ref": "0b21bdf0-0ba7-4b0c-bed9-a4b0e35f27d4",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "da3c14b6-b783-4d2d-91bc-b8cd05b4dab9"
        },
        "item": {
          "id": "68ccbabf-2104-4d09-8c30-c80c0cf5f2b3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "89a38933-f44d-48b6-bb32-31f0b08e4005",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a7905cfc-a485-4892-98c5-7d3d76a51761",
        "cursor": {
          "ref": "da6bf1e4-1663-41fd-b259-7eae4cfc8537",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dc3eb43e-b7fc-4629-8432-a94614e84619"
        },
        "item": {
          "id": "a7905cfc-a485-4892-98c5-7d3d76a51761",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "85664b42-a0b2-4f61-95af-a9d11310ed7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553a3698-45cb-4f40-bd19-a113686c346d",
        "cursor": {
          "ref": "3667c2f9-5a28-4efe-8c84-c93ce5431365",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7241ea74-daf1-400d-a0e2-e4acf4b62976"
        },
        "item": {
          "id": "553a3698-45cb-4f40-bd19-a113686c346d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c8972c9e-cba4-45a4-9071-2610d9d70ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfb8dfc-f7c8-43e5-a294-51301b2f153b",
        "cursor": {
          "ref": "c8429f54-1ddb-4321-9642-86248915e0e7",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a95c640-fcfd-4266-b967-ae78ff5c97cd"
        },
        "item": {
          "id": "ddfb8dfc-f7c8-43e5-a294-51301b2f153b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ac1cb787-6ef8-4e67-adbe-4cff33aa6819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180e9b18-647c-47c0-b283-13f61beef665",
        "cursor": {
          "ref": "9b80eeb1-71aa-4b25-ae1e-00b0e59daab9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "92fcbb45-7c5e-451a-87d6-639dbf580694"
        },
        "item": {
          "id": "180e9b18-647c-47c0-b283-13f61beef665",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "948ba91c-3df1-4098-95da-5b0b0acc4055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e20622-9dea-49d0-9da5-c339f89e8366",
        "cursor": {
          "ref": "957f674c-a70b-43a8-a975-75c2e828352f",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "441a6b51-e894-4f61-8a77-5222cbbd29f1"
        },
        "item": {
          "id": "39e20622-9dea-49d0-9da5-c339f89e8366",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a7d0654e-6ed8-42b8-bb18-85a859b8d627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891c62a4-5569-47bb-8776-fca3c30947de",
        "cursor": {
          "ref": "7618667a-ca52-4f98-bdad-384fb59dcda5",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "56efedf0-c0c1-4472-a83f-1f9dd21718a4"
        },
        "item": {
          "id": "891c62a4-5569-47bb-8776-fca3c30947de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0faaea83-8e96-4c80-9798-8e35569e7f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e088bb-8550-4f8a-ac71-27755046d0b9",
        "cursor": {
          "ref": "ae614925-1125-4dc5-bb1b-6a42cce965de",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3e633312-9084-4a3b-83e5-2a6da7577ad0"
        },
        "item": {
          "id": "f4e088bb-8550-4f8a-ac71-27755046d0b9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "407750ba-70d7-4707-a989-80db51ad46ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193f3a54-4077-4905-ae03-41c20b903174",
        "cursor": {
          "ref": "c4152337-3d77-4d3d-98ce-ad11a0270c90",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "38705e76-2126-4694-9d51-1c843dd6fcfb"
        },
        "item": {
          "id": "193f3a54-4077-4905-ae03-41c20b903174",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "698969c5-6710-4fec-a85a-4e7f77479cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c005a5-9bea-4d2e-8168-53ab85b640cf",
        "cursor": {
          "ref": "98307731-5cc8-4022-8e50-e16f62503aa9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f8082f8c-dcf3-4dc4-9017-adfd482b4f45"
        },
        "item": {
          "id": "a7c005a5-9bea-4d2e-8168-53ab85b640cf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "65856af2-84a3-46d6-bcbb-eac3072825fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703a2fdc-3943-4c6a-af5a-713a3a091e2d",
        "cursor": {
          "ref": "6dace1dd-7f10-4187-9b01-326ccef192f1",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7132af49-622d-4369-807d-f5b12c38fa90"
        },
        "item": {
          "id": "703a2fdc-3943-4c6a-af5a-713a3a091e2d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e4bbf0d2-ede4-48cd-89dd-3fdb2179bc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4641a170-a5cd-4d20-9cc0-6155fc9280c8",
        "cursor": {
          "ref": "0567cc81-4821-4e23-b2ce-e91ce8c4e67e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d4e80653-532c-4cc5-a812-1816a7a068b3"
        },
        "item": {
          "id": "4641a170-a5cd-4d20-9cc0-6155fc9280c8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7692602a-2856-4cb2-bdf2-41e0d97b869c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18eece2a-be7f-4357-88f0-6d4718a83d80",
        "cursor": {
          "ref": "dca62c11-8545-416f-a8ad-43cc42e726a8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f07f2978-f2b2-43e0-bd8c-181ac079c2e7"
        },
        "item": {
          "id": "18eece2a-be7f-4357-88f0-6d4718a83d80",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dafc4ae0-d5bb-4aa4-932f-3180b71bf614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160860c9-6ec7-429d-8de3-74851bd28cfa",
        "cursor": {
          "ref": "c6afc398-0be2-4a4a-8cda-6187514fe031",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "90627b69-2ca8-49a4-90c2-05963b3640e3"
        },
        "item": {
          "id": "160860c9-6ec7-429d-8de3-74851bd28cfa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "71eff14e-ce3c-4591-8999-888d7e5c9e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fedd4b-5cc1-4c8b-b091-e8345c254ce3",
        "cursor": {
          "ref": "f1a5789e-37d0-424e-9450-833d4715397f",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "664cb0e0-53e3-4c81-b9c0-75494b86c90a"
        },
        "item": {
          "id": "12fedd4b-5cc1-4c8b-b091-e8345c254ce3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "77799cff-833e-49b0-bfd6-3c147efd2c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f1a406-c536-43a9-9b47-a85dc3077d14",
        "cursor": {
          "ref": "a77da653-29e9-4236-b835-80aed2d9764c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0257b4af-38a6-4b2e-b962-97042c9a4236"
        },
        "item": {
          "id": "c4f1a406-c536-43a9-9b47-a85dc3077d14",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bc8cfab2-39a1-4ecb-93f2-fa3cb06c974f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe922c8-a33d-4abe-9285-fa110fc742fb",
        "cursor": {
          "ref": "2a71be82-029e-4134-8d1f-30e09b129934",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "04e04732-95fe-4bd4-9b2a-b6a96d9abfba"
        },
        "item": {
          "id": "cfe922c8-a33d-4abe-9285-fa110fc742fb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dbe1ff07-0566-4fba-9711-0f1ea8b721ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2529c497-da81-41c2-85b4-b965806afa69",
        "cursor": {
          "ref": "8f4f4ff2-5a6d-46c6-8c2b-927b8976cd0f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "36fa41bb-ce81-4848-b27b-565d36778c39"
        },
        "item": {
          "id": "2529c497-da81-41c2-85b4-b965806afa69",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "23ab841b-9291-4deb-849f-ff07793a0c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c90ed9-dfb0-42a5-8ff7-61abb0f83037",
        "cursor": {
          "ref": "0485dfb5-144d-4aba-a1e6-954a794a30ad",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6558a10c-a0c5-477b-a7f7-255d275a2c65"
        },
        "item": {
          "id": "51c90ed9-dfb0-42a5-8ff7-61abb0f83037",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6da08103-12a1-4796-b06b-5e81fccf878f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3d6341ff-6223-4de9-b894-ca01d5e8dd41",
        "cursor": {
          "ref": "9c90e28f-19de-4bb4-b149-639bfe4a1942",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6c54693d-85b6-47f3-a334-f836e30846a0"
        },
        "item": {
          "id": "3d6341ff-6223-4de9-b894-ca01d5e8dd41",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "102b9d28-cb9e-495c-ba66-59711085269c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32f630e-f50f-41fc-8c29-50cd44cadca0",
        "cursor": {
          "ref": "3ec34c85-eaab-43b3-a53d-8bab8ce9ec36",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "404a6473-1fcb-4928-b5a1-7a73363f412d"
        },
        "item": {
          "id": "e32f630e-f50f-41fc-8c29-50cd44cadca0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8bc502ae-0099-43db-8762-8b8b0824af2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f46a09b-f26b-451e-b5f9-fa4b385fe73c",
        "cursor": {
          "ref": "47d51e28-f9a7-4492-8a90-7fca36dd0f41",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5d9a8163-0cf1-48d7-a30a-c2ad76b1ca9b"
        },
        "item": {
          "id": "2f46a09b-f26b-451e-b5f9-fa4b385fe73c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "86a11790-099e-4558-9dd1-9450d04fbf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf544bf-a28f-4ee8-96cb-23d59d989c74",
        "cursor": {
          "ref": "4c9e7af7-b4a8-4ee1-a910-34c34cb3073e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2b3084ce-6622-4a37-8c06-f69a1878da56"
        },
        "item": {
          "id": "4cf544bf-a28f-4ee8-96cb-23d59d989c74",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e25ce88f-3142-416c-ab2a-0276d66940e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a1e854-a618-4cd4-aeed-1a16ea456cf7",
        "cursor": {
          "ref": "193bd5ca-2356-4f36-a127-ee561de1e97c",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5bf2d7cb-c1b8-4566-8217-bf44a8f2a5e5"
        },
        "item": {
          "id": "c6a1e854-a618-4cd4-aeed-1a16ea456cf7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1f5318a6-105a-4147-aaad-cc8a1274079d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27b8b42-ffbf-43fd-bb73-46a87bff081f",
        "cursor": {
          "ref": "71d0af4e-82ec-489a-9f01-f6515dbb7d44",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c575e4bb-3717-48a9-a255-681ce2110186"
        },
        "item": {
          "id": "e27b8b42-ffbf-43fd-bb73-46a87bff081f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aa6af7e3-61f4-4fc7-819d-32bef4635765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd08f4e2-6d7b-4bc6-b74a-c0d50b2ccb23",
        "cursor": {
          "ref": "b0ae422e-d1c8-49eb-befa-d05af8f07437",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "972247f9-b7a5-4b73-97ed-965e5663a91c"
        },
        "item": {
          "id": "fd08f4e2-6d7b-4bc6-b74a-c0d50b2ccb23",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5df8b72a-68ef-414e-8ecc-2040ff7ae9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d1ecd1-3bf3-4ed1-9f83-7141878aa0c5",
        "cursor": {
          "ref": "890e53f8-c17f-4910-838e-9d9e1545f5f3",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "15d7eaa1-f601-4a5f-b27c-3996a86a155f"
        },
        "item": {
          "id": "e2d1ecd1-3bf3-4ed1-9f83-7141878aa0c5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e6c00260-350b-4e4d-a7de-b912cb23ab39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c0b1e4-ce3a-489a-ac95-1eca6d95a4f7",
        "cursor": {
          "ref": "8fb0552c-08f0-4a6d-9ec2-6cd75115df41",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "95a78073-de2d-4a76-a834-1f0ac66a08be"
        },
        "item": {
          "id": "f7c0b1e4-ce3a-489a-ac95-1eca6d95a4f7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c071cafc-7204-4d2e-bf49-d3b25ec9f7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8144a937-c33f-4e78-801c-437a93f7f7ab",
        "cursor": {
          "ref": "8b0b6943-c078-44c0-9785-032fc00cff54",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b1284274-39aa-4df6-be64-52bd4ee14d05"
        },
        "item": {
          "id": "8144a937-c33f-4e78-801c-437a93f7f7ab",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "994ce797-95e5-4e5d-915c-81d1c79ecf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ff135a-9ca1-4a9f-8d80-b178f6252c52",
        "cursor": {
          "ref": "ff36bf31-a7fb-4649-af96-74a0422cb67a",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2a40141c-81b3-4d10-b2af-e1080a377d05"
        },
        "item": {
          "id": "d1ff135a-9ca1-4a9f-8d80-b178f6252c52",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e5a74344-6c75-4361-b00b-b145bce58c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ef485d-5283-4fe4-96c2-25bc140ca1a9",
        "cursor": {
          "ref": "b17fab81-c582-49a2-bab2-d756e1fcddae",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e495cf8f-d627-4ba1-8dcd-ed1ac81f4a4e"
        },
        "item": {
          "id": "72ef485d-5283-4fe4-96c2-25bc140ca1a9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "77f32394-9b4d-479a-9253-17b05248929f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2963439-c86b-4926-8e92-cc8c5df321a5",
        "cursor": {
          "ref": "c2c11de5-423d-49f9-861c-f89a06cbd74f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "847239d7-72ef-4f56-af5e-292ec066c8fe"
        },
        "item": {
          "id": "b2963439-c86b-4926-8e92-cc8c5df321a5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e1029f97-5a14-4a5f-b6bb-62946740183c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e543fc69-577e-4c11-8027-0c7f07d0c112",
        "cursor": {
          "ref": "7b785001-911d-487a-a388-17261019c8e7",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "253d3a72-8aee-422d-88d9-5817bea52401"
        },
        "item": {
          "id": "e543fc69-577e-4c11-8027-0c7f07d0c112",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1323e887-6e15-4c46-9573-c55b26d65eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c80e86e-0482-40af-a9c9-6abf4034660e",
        "cursor": {
          "ref": "973c1986-217f-4832-a231-02a8ab655d30",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "27ae2d34-21bc-4326-895d-f833cd944fca"
        },
        "item": {
          "id": "4c80e86e-0482-40af-a9c9-6abf4034660e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "851098d1-22ab-4998-ab19-d103b31e5d2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6d26f0fa-c29a-4fc3-a818-51aaef102de7",
        "cursor": {
          "ref": "e63e1302-6f74-4fbb-938f-26b83636a6de",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3ab6ab74-ddab-4db2-9679-00a7534fe5e3"
        },
        "item": {
          "id": "6d26f0fa-c29a-4fc3-a818-51aaef102de7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1916fa0b-adae-40c6-a613-dc5f605ffcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f556c2c-254c-43b8-b599-b2ce1a782987",
        "cursor": {
          "ref": "81b72670-d09d-442b-8c5b-2f1c9578ad37",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7a69ebce-7181-4e57-9241-ab926e1a7258"
        },
        "item": {
          "id": "1f556c2c-254c-43b8-b599-b2ce1a782987",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f15a076e-2f9e-44eb-80ea-8c23a929bb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d6cdf3-e9b8-4d7c-ba75-66294e55bae8",
        "cursor": {
          "ref": "5473d6f1-e9db-48f0-beb5-a08f1ac9d221",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d6d05ef7-5106-46df-b2cc-ea108dbb2b2d"
        },
        "item": {
          "id": "f3d6cdf3-e9b8-4d7c-ba75-66294e55bae8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "36ad62b7-8f2a-494b-8d6c-6b0ee73f5d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8819958e-f11f-401b-94ae-de0bdc083c28",
        "cursor": {
          "ref": "3a781b75-ec13-4b63-985c-2947ddd8f4eb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "42e34bff-c316-4cd1-8011-bb889b3513cf"
        },
        "item": {
          "id": "8819958e-f11f-401b-94ae-de0bdc083c28",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "783bc8be-092c-4af2-abb0-c6e32759e100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515fc4ee-d686-49b9-a9f8-9ae70c2eba4a",
        "cursor": {
          "ref": "61ebdec4-fec8-49c0-a517-52b271ad7e6e",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "82c2d2bf-fb9e-475e-bd87-c3ea652e8bd9"
        },
        "item": {
          "id": "515fc4ee-d686-49b9-a9f8-9ae70c2eba4a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71395cff-24fd-432b-bf14-d178e9bdea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a211982f-f196-423b-918b-5aa76219af34",
        "cursor": {
          "ref": "6be435e8-fcaa-4f71-8ffd-bb4bcef97181",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "040cd55a-ad7a-47b9-934a-9903c7d83edc"
        },
        "item": {
          "id": "a211982f-f196-423b-918b-5aa76219af34",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "94bca258-5c50-4be5-82b8-62b13a31b4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03151c3c-a949-4cf5-92be-70c705cb7203",
        "cursor": {
          "ref": "eb9d0a09-e3f1-4ed1-b4eb-523cb7aaeb5f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3e3378be-ff20-4612-80ba-cf37438eb785"
        },
        "item": {
          "id": "03151c3c-a949-4cf5-92be-70c705cb7203",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe94d537-9acd-4a08-ab4f-303d4739c447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0134db-1c7d-473a-a09a-cc8733ff36f9",
        "cursor": {
          "ref": "a8a65198-42ba-4d4c-aaab-f21d67871baf",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "782d0b2f-0455-4b39-ace0-a7ab621349f9"
        },
        "item": {
          "id": "ee0134db-1c7d-473a-a09a-cc8733ff36f9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c806af2c-0ffb-4ebe-9fbb-cf4e63c19035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20812f64-a4b3-47fc-9400-dbf2382e9140",
        "cursor": {
          "ref": "1e271e24-5c7f-457f-b4ef-af0608e7c3e5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "74f6f9ac-1285-456c-97b7-a6b76cb9e190"
        },
        "item": {
          "id": "20812f64-a4b3-47fc-9400-dbf2382e9140",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0c6030c2-5850-44dd-b9b7-5374196b1a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655342d2-303f-4d11-a2fc-58828cbb3bee",
        "cursor": {
          "ref": "84ec44fa-43e5-49db-91a5-fd7239000d38",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ba28f2db-865d-4c01-8dc2-042d1058daec"
        },
        "item": {
          "id": "655342d2-303f-4d11-a2fc-58828cbb3bee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "50f10502-8948-47a2-8982-4eb85282f952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67fab13-8a80-43e8-8c38-16cf266ee1fc",
        "cursor": {
          "ref": "753e3b69-bc28-488b-a963-fbb0cc8252c9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4f586c2f-6d9d-4d44-a08a-5e291975d3f6"
        },
        "item": {
          "id": "b67fab13-8a80-43e8-8c38-16cf266ee1fc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9b44959a-ae0a-46da-b09c-2314afe65973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4c6c8d-31a0-4942-9dd4-cfc539c0f730",
        "cursor": {
          "ref": "22ddcda5-2673-4773-9538-8a1edb00d46c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "477530c5-0c27-4b39-abd8-f2cc0a7c8cc6"
        },
        "item": {
          "id": "0a4c6c8d-31a0-4942-9dd4-cfc539c0f730",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e896b851-b49e-4fc9-8790-3ba1187f30d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050321f7-44e5-4848-bcdb-5410569cc718",
        "cursor": {
          "ref": "b0dfd7ec-8d50-4075-9684-2147fe863b39",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0374ff00-f9fc-46a4-b73d-44a519196bc4"
        },
        "item": {
          "id": "050321f7-44e5-4848-bcdb-5410569cc718",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8cdac10e-bdb9-4ce7-a1c0-a14f64cf879d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cffaaa46-f541-4dea-b6f7-51f173b42363",
        "cursor": {
          "ref": "a20f775d-b2ec-45ab-b102-0af79cd95b01",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e62a58f5-4513-4c28-80e5-9c85f78b03ec"
        },
        "item": {
          "id": "cffaaa46-f541-4dea-b6f7-51f173b42363",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e88908c1-cf93-41b6-a784-247cf27b5a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0774b599-a209-470d-bfcf-1361fc113105",
        "cursor": {
          "ref": "9dfbb46c-30d1-4c41-9c7a-edfe600ed20f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e4b2b5a4-43b2-41bf-96b9-b2234221aadf"
        },
        "item": {
          "id": "0774b599-a209-470d-bfcf-1361fc113105",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b119c46e-887d-4f4d-9830-1e970cff92c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5246f87d-dc1d-4807-8ea0-5b1556f4cbb9",
        "cursor": {
          "ref": "3c2e0068-8b98-4da9-82a9-2acdc79fe8b0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6150002c-5fec-47b7-a569-d5cdedad2639"
        },
        "item": {
          "id": "5246f87d-dc1d-4807-8ea0-5b1556f4cbb9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "96686bab-c984-4d52-8e17-4333bb4d86d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8167f805-6c1f-42b9-8176-1b31ddba48ee",
        "cursor": {
          "ref": "9e561212-abfd-4666-8d34-6703a0e279be",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1cfe1e2c-9769-44ae-b4f1-7575a9de1dbe"
        },
        "item": {
          "id": "8167f805-6c1f-42b9-8176-1b31ddba48ee",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0770db64-6843-4cc5-8844-aef087640d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff04048c-ec04-4ebf-9f97-c3d6350f947a",
        "cursor": {
          "ref": "ff13d1d6-00a9-4ffb-9cde-d19ed188466e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "76ed0d41-5243-4c9e-a382-213da3b0fde5"
        },
        "item": {
          "id": "ff04048c-ec04-4ebf-9f97-c3d6350f947a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "67b45c57-e52c-41c6-adc9-595796c2d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c32bbe9-405c-4f90-b65e-6b66b188b521",
        "cursor": {
          "ref": "dcfd7f31-4290-444d-a9b9-2f7b8c70f86b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6483940a-f6e4-440d-a3c3-9356aad4a9ed"
        },
        "item": {
          "id": "1c32bbe9-405c-4f90-b65e-6b66b188b521",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ffe98b47-26e6-4f4c-99b2-b8f7b40b17c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1df65b2-f3ae-4ee2-ae85-e9f832a12b3a",
        "cursor": {
          "ref": "a8cadc15-5be5-4405-99e6-dc4333c083df",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "51fc53c7-8147-4a58-84b3-5a284e208a6d"
        },
        "item": {
          "id": "c1df65b2-f3ae-4ee2-ae85-e9f832a12b3a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "80e50243-7b5b-443f-8e19-e8967605f3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f7d490-8e80-418b-a907-ff67f81e9eba",
        "cursor": {
          "ref": "998abbb0-812a-4a53-aa64-06151f039482",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "45a06d14-b078-43d2-80ca-2da5c9afc012"
        },
        "item": {
          "id": "f6f7d490-8e80-418b-a907-ff67f81e9eba",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ca9854a0-ae49-46de-83d5-7b17e398ed7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5aa221-6794-47a0-beb3-94065b118a64",
        "cursor": {
          "ref": "a6e714ae-7d7c-4cea-9757-ca0e95747a83",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f9950ae9-9c4b-4a9c-972d-47ba37aa1b42"
        },
        "item": {
          "id": "0c5aa221-6794-47a0-beb3-94065b118a64",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "733f5ece-9293-46b8-b04a-bca1e1370236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9beb95a-1967-42d6-bdfb-1b90751b152e",
        "cursor": {
          "ref": "2f2d2453-9682-4804-ba28-7096f3358b79",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6537ba07-abb4-4b4f-8ca3-7d79b7c1039a"
        },
        "item": {
          "id": "f9beb95a-1967-42d6-bdfb-1b90751b152e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "817447bf-2465-43ea-a034-c14e601ecdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7371bcca-2463-4eb1-9f40-d246fc44b239",
        "cursor": {
          "ref": "3092c991-ec81-4ce2-9c37-49e3faebe115",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "103f26e5-32e7-44ca-8808-0b46f0d9950d"
        },
        "item": {
          "id": "7371bcca-2463-4eb1-9f40-d246fc44b239",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c13458f4-d8c5-4987-a9f1-ca81a058482d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e04210-835e-4c44-bdc2-02b36b7d11e4",
        "cursor": {
          "ref": "67d0a9f1-9fde-48ec-bb83-dd4645ed44a2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0755c746-bf9f-46e0-85d4-7e876f49b212"
        },
        "item": {
          "id": "22e04210-835e-4c44-bdc2-02b36b7d11e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66466fee-f18f-460b-841c-05fec4bd7423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88865411-93b8-436e-a869-068975c7cc06",
        "cursor": {
          "ref": "bfe19ed9-1561-48a5-9749-2b79f9b462fb",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a62f5730-fb60-4c6e-9029-599b541bd36d"
        },
        "item": {
          "id": "88865411-93b8-436e-a869-068975c7cc06",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6ee7be98-d8f4-4330-81a9-44a64217fd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce49b38-c26e-4569-bd1e-67dfe9e2a99f",
        "cursor": {
          "ref": "58e06c2a-4183-48f5-adb6-aca03d8af12e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fc328791-607a-40bb-b176-41bedda2e501"
        },
        "item": {
          "id": "bce49b38-c26e-4569-bd1e-67dfe9e2a99f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "788844df-6c37-4ce1-9e7d-8a22ae5f37c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928bc6bb-9ede-43ee-85d5-d306ae8ff1ba",
        "cursor": {
          "ref": "e65fa9fa-2db4-4c6f-97a1-b4e992ceda7a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "505881d2-80c1-442d-9de2-a2cff1009842"
        },
        "item": {
          "id": "928bc6bb-9ede-43ee-85d5-d306ae8ff1ba",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c836d793-6db7-456d-a63b-d46c5e0c1f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f1821c-2255-4efb-bfd9-92177e9f3a4c",
        "cursor": {
          "ref": "0378559a-caaf-481e-9ed6-b028c07684ce",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "27129402-9ab1-40aa-8d1e-85b57e41173d"
        },
        "item": {
          "id": "19f1821c-2255-4efb-bfd9-92177e9f3a4c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a24ca572-569d-48c3-a800-726404d14b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e220fde2-28e3-4feb-aedc-ed4e12fd4e98",
        "cursor": {
          "ref": "7fe4a2b5-128a-4012-a66b-f3873f08d548",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7b2226dc-c55b-4630-86d1-5b49346afd40"
        },
        "item": {
          "id": "e220fde2-28e3-4feb-aedc-ed4e12fd4e98",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a998e894-902b-49f6-ad07-fc54b56b9bf8",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b8799ca7-2614-4ff3-a9a4-a04b5407e8bb",
        "cursor": {
          "ref": "41697e73-fa73-4e70-8b2e-8bdb7a595cc5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b12b09e4-ca82-4e45-a447-968462f4f88c"
        },
        "item": {
          "id": "b8799ca7-2614-4ff3-a9a4-a04b5407e8bb",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f02fc4da-c63f-4021-8a2f-aed9c9f20323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19741ed8-d33e-4fae-98c6-d024a0fb8191",
        "cursor": {
          "ref": "24ea0515-def7-4665-88ce-407dd9b8cc8a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fc8b9b96-011a-43cc-9a92-3fdea44f02a8"
        },
        "item": {
          "id": "19741ed8-d33e-4fae-98c6-d024a0fb8191",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bbc3c6be-2e3f-4b6a-ac57-ee9bfafbd8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b03e7f7-f004-4d69-819a-1401e4c50b65",
        "cursor": {
          "ref": "5a09b87f-075a-4d7c-b64f-5e6965520526",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "244c0e21-31a5-4339-b007-87a3cd708882"
        },
        "item": {
          "id": "0b03e7f7-f004-4d69-819a-1401e4c50b65",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "054a0fda-6909-46d6-95d7-84e1e1402098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2043224b-d4fb-4b21-99b6-3323ba8ac06d",
        "cursor": {
          "ref": "b7d4cedf-2c96-48b9-ac48-8dea7ae67b80",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d6254df7-5d90-4c87-a821-30d430eceb63"
        },
        "item": {
          "id": "2043224b-d4fb-4b21-99b6-3323ba8ac06d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e2818c1c-a615-41c8-8f35-db3c04d620c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175134a4-1e04-4334-ba78-bf48ba457b78",
        "cursor": {
          "ref": "0e72650f-8031-4cbb-8019-734a5615ad00",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9682052b-b5c6-4b58-87ed-bf5db3561b3d"
        },
        "item": {
          "id": "175134a4-1e04-4334-ba78-bf48ba457b78",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "dcf0be74-167f-45a9-9f7e-8230838c3d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1619a9-6c06-4b1a-8760-a5470c8b369a",
        "cursor": {
          "ref": "0569c8a9-50f2-4aa4-85cb-6a755e447066",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "98698854-5faf-46eb-aaac-89df9805de56"
        },
        "item": {
          "id": "3e1619a9-6c06-4b1a-8760-a5470c8b369a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9fcbe2e2-b688-46af-aad0-17f529bc162c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0955cc42-c6c9-4e73-b219-bacbe6afb122",
        "cursor": {
          "ref": "1c648cb3-5f3f-4adb-af66-1b9322a3ad13",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2661e037-90a8-43ba-90e1-71cb7d839b16"
        },
        "item": {
          "id": "0955cc42-c6c9-4e73-b219-bacbe6afb122",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "55a8fd10-bfab-44c6-8875-3bbea879277c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7269102-c903-4367-b4d8-f3b3a5285e48",
        "cursor": {
          "ref": "b7ba44e8-ea8d-47f4-86a9-5ec15eb298c6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "51d9ce55-4ff2-4874-b5b1-342902c57374"
        },
        "item": {
          "id": "b7269102-c903-4367-b4d8-f3b3a5285e48",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "745b991d-4ed3-4d2e-809e-b8d1569acea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b8f051-0e3d-45db-93dc-5b0146e3532a",
        "cursor": {
          "ref": "4ab333e0-6a58-4ea4-82f8-fa9f45abe88b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a7c628bb-8746-4c15-917e-ab069bc5ed8e"
        },
        "item": {
          "id": "05b8f051-0e3d-45db-93dc-5b0146e3532a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4b9662a2-68b7-475d-98e8-418de3e6c796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ecedf4-2996-4362-a7a8-5702bec107ac",
        "cursor": {
          "ref": "525b4f50-48fd-4fff-ae86-42c7de13f1e4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "06875bb2-aad7-45ca-beba-57dbabf17c2c"
        },
        "item": {
          "id": "f2ecedf4-2996-4362-a7a8-5702bec107ac",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "de6474e5-e21f-4ecd-9a50-2388df4db337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96cc451-e77e-4418-b54d-4dcb1c295f93",
        "cursor": {
          "ref": "be6b29c9-6436-477c-aa65-e469e1466e91",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "03fb6a02-d266-4649-a0d4-22689c2eaac8"
        },
        "item": {
          "id": "c96cc451-e77e-4418-b54d-4dcb1c295f93",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "21a87f60-8c1b-4f35-bba9-f899ff7feb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef397d1-81a9-4edc-aa25-56c25c12ffe6",
        "cursor": {
          "ref": "00bff159-f48a-4b2f-be28-b1d70eac40dc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9f3de06a-204f-4bc6-93d0-679579580c36"
        },
        "item": {
          "id": "4ef397d1-81a9-4edc-aa25-56c25c12ffe6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ea10103d-e8b8-4d7a-add3-5c1c5f5dd669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473f6230-9a16-41ae-acc7-617e777a3c0b",
        "cursor": {
          "ref": "d1bc6134-0c5c-4a69-9d6d-9c2402b8ee59",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "77402a0d-e1d3-4225-81f8-2cbe4b15370a"
        },
        "item": {
          "id": "473f6230-9a16-41ae-acc7-617e777a3c0b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a1086f4e-6b21-4182-bbe3-0b8a4952a3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7696f484-1ea6-4be6-9b9d-261f2d95603f",
        "cursor": {
          "ref": "42c14813-19e0-4d7c-82a4-ad11255cda55",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fb08244e-0f50-457a-a7f1-3c50d1ac9e6b"
        },
        "item": {
          "id": "7696f484-1ea6-4be6-9b9d-261f2d95603f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4b8a033c-213b-40be-93e5-b7a87a2b2c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e994928-8717-4f82-ad44-ca790945c871",
        "cursor": {
          "ref": "6fd50538-6b6c-496e-8d5e-e7e11858052f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4c4cc15b-724e-48a3-a693-fccc5e7fb4ea"
        },
        "item": {
          "id": "3e994928-8717-4f82-ad44-ca790945c871",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5f6f127b-084f-4d7a-9a4b-db6cb156e648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4f0127-03e3-4c5c-a1c6-f7c38e46afcf",
        "cursor": {
          "ref": "1a8ec877-0693-44dd-8837-5b7564f31a91",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e2947f76-79f3-4fad-a3ee-7b52c6a3571b"
        },
        "item": {
          "id": "4f4f0127-03e3-4c5c-a1c6-f7c38e46afcf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4dece5b0-95c5-49d0-8cc8-26ac0574c908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed699f6-6685-4660-b7bb-ee3722e4f424",
        "cursor": {
          "ref": "ccb9f1c8-7d06-424f-90a7-2b56100b033e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eae81c50-2936-48bf-b588-0c600956e542"
        },
        "item": {
          "id": "fed699f6-6685-4660-b7bb-ee3722e4f424",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a9677139-4c55-4ed0-9b97-0ef8b7a8ec0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0af5838-9908-4555-9011-63e4d612ae29",
        "cursor": {
          "ref": "dad4404e-75b2-4c64-a78e-01461827bd44",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ac192603-9771-404b-868e-f442f6dcb3b4"
        },
        "item": {
          "id": "f0af5838-9908-4555-9011-63e4d612ae29",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bc00474b-587e-4729-8893-07fd046d0db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d1e564-4bca-4cb7-949a-851288efe882",
        "cursor": {
          "ref": "c4e7f94a-da75-42cb-8691-2e45b0976985",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "26959a0d-fbc6-46ce-9353-4c90a7425e43"
        },
        "item": {
          "id": "94d1e564-4bca-4cb7-949a-851288efe882",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6dd0e988-bbb2-4179-9f36-2141a438866a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b41778-dd31-4e03-9cf7-8eb6f034c810",
        "cursor": {
          "ref": "498346ce-5cb7-43ca-9425-f63546e28866",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "188d2b0d-a8b1-485a-8194-66716b99ce8c"
        },
        "item": {
          "id": "d4b41778-dd31-4e03-9cf7-8eb6f034c810",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a533610f-773a-454b-a95e-e159138ff927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb35e813-83c9-4915-94e1-5ee88d3948c0",
        "cursor": {
          "ref": "5c6b2ea4-1096-4937-b24f-3c7b00b0d741",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d0944def-0356-4df6-b242-9e3f4f2f8802"
        },
        "item": {
          "id": "cb35e813-83c9-4915-94e1-5ee88d3948c0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d11185e5-43dc-4c8f-9b34-dd46afc2dcc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3308ec-50c4-438e-9774-b1c2a740ccbd",
        "cursor": {
          "ref": "b69581e7-9ec7-4c74-9dd9-a209f56fbdab",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ea275132-4677-47b5-9b1a-6a4ce2870b61"
        },
        "item": {
          "id": "6f3308ec-50c4-438e-9774-b1c2a740ccbd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "83783537-4b7e-4f33-b7a5-a84812d6da85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbabd16-35ff-426a-bd4a-b8ab2fa0f11d",
        "cursor": {
          "ref": "ebcd97a8-06da-41d1-bba8-c41990232381",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6a13d924-bd28-4266-877d-287b6e75d092"
        },
        "item": {
          "id": "3dbabd16-35ff-426a-bd4a-b8ab2fa0f11d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d805b85e-421b-4b0f-ad75-c88a03f4d68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc01f461-dcd9-414f-9c2f-3b86cdea97eb",
        "cursor": {
          "ref": "7f72b7b7-5326-4f08-9908-b579c4ecc8d7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9855afa2-d8a5-48d5-879e-454cc8b4b005"
        },
        "item": {
          "id": "cc01f461-dcd9-414f-9c2f-3b86cdea97eb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cf57ef06-f7da-404a-b65d-67121e6a2d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1998bcb-e250-4bf4-a0c9-9bbb76f8b442",
        "cursor": {
          "ref": "d8644a98-52d1-48f3-8c23-9eb3d6844344",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "88f603d6-375c-4700-abfd-54fcfee3dcf7"
        },
        "item": {
          "id": "c1998bcb-e250-4bf4-a0c9-9bbb76f8b442",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "033eba35-a102-4a09-9d31-45b3e544feda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b771d518-6168-462e-a3f3-5b7b3e4b8a07",
        "cursor": {
          "ref": "1d542620-d577-4555-acd7-fa2cafafb1f6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dc39e954-08ab-427c-8f89-c3ad08f76a34"
        },
        "item": {
          "id": "b771d518-6168-462e-a3f3-5b7b3e4b8a07",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "81bd7789-78d1-49d7-8e56-7f7cda90881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a4fde4-d7f9-4c61-92a0-81d359a87579",
        "cursor": {
          "ref": "2976b232-e8af-4822-abca-697b56edc6a9",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c248a649-8cf6-4ac7-b0fd-91325a88d3db"
        },
        "item": {
          "id": "86a4fde4-d7f9-4c61-92a0-81d359a87579",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "65dc3ec1-387e-4374-9503-a9e778bde862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3026aad3-bd0b-498f-b696-cfd88f3679ff",
        "cursor": {
          "ref": "a0198412-98eb-4be1-88cd-19e5a9cd39be",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "59ccb4b0-317d-4196-826e-8556080cd6d9"
        },
        "item": {
          "id": "3026aad3-bd0b-498f-b696-cfd88f3679ff",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e6712ae0-f006-4d4e-be2e-a717b68a16d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6196df84-d1b3-4b40-bd74-11c59940c759",
        "cursor": {
          "ref": "a2354a86-a8f9-4566-99d3-95759cc8221b",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d48a3dcd-d95e-40c6-976a-6e6ccf630d7e"
        },
        "item": {
          "id": "6196df84-d1b3-4b40-bd74-11c59940c759",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3ad93a67-e966-4760-b950-59d7b232c18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd92fdc-61af-4fce-8dc9-055ffa7180b4",
        "cursor": {
          "ref": "9e8a33ce-7bd6-4d1f-b5ca-fb93f6f710c8",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "81dc2227-91f9-486c-b47f-c07654f738eb"
        },
        "item": {
          "id": "edd92fdc-61af-4fce-8dc9-055ffa7180b4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8999fdb1-47da-4963-ade0-23029cf355e5",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cf772b0c-941a-479d-b22a-b43e586bc534",
        "cursor": {
          "ref": "87fb88c4-cebb-4c1d-933d-a3c48a74f3f2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "08db2a77-e3fe-4c63-ac83-ff82586482ae"
        },
        "item": {
          "id": "cf772b0c-941a-479d-b22a-b43e586bc534",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d2bfb866-8c27-4610-9fbe-99f5d80c843f",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "753a8adb-26f2-4d36-bdca-b9853fad65ac",
        "cursor": {
          "ref": "392ebde8-453f-489e-9acc-32e01699fab4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c615978d-d6f0-4cfe-b58b-1005972f4133"
        },
        "item": {
          "id": "753a8adb-26f2-4d36-bdca-b9853fad65ac",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d7151f8d-3b04-4686-b246-7d5b7c18abe8",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c95b211e-ccbd-4030-a7a5-4deeaba959c0",
        "cursor": {
          "ref": "a1d78e53-702d-4c8b-9f61-51959d6d9069",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2661677f-d81d-4f4e-8a38-1900dcb089a9"
        },
        "item": {
          "id": "c95b211e-ccbd-4030-a7a5-4deeaba959c0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d0f373c4-9843-4f44-8636-d22896289545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f2dced-b82d-4aaf-9994-fc535859f812",
        "cursor": {
          "ref": "7f594821-d965-4211-ab3f-ad275135ff21",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d0e81adb-56f7-4f33-949a-2ba58f52cee6"
        },
        "item": {
          "id": "20f2dced-b82d-4aaf-9994-fc535859f812",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ade40567-4bef-466d-9b98-6bc1aa9ee2b8",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9f2dbbc3-dd15-430a-a28f-3a5119030857",
        "cursor": {
          "ref": "8e54b7df-1d5d-4814-910a-97cbf984e8c9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7dd86e28-9983-402c-8e76-f25a8aab2768"
        },
        "item": {
          "id": "9f2dbbc3-dd15-430a-a28f-3a5119030857",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "59a6f501-5ac1-4a58-90c9-3cfb9d732131",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2f5893c8-c40d-4231-8652-829e3cb7d7d1",
        "cursor": {
          "ref": "a4d933bc-888a-4736-9823-0810d549abda",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b43e3791-4a22-470b-9776-c6699ceee40b"
        },
        "item": {
          "id": "2f5893c8-c40d-4231-8652-829e3cb7d7d1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6e118b37-c593-4031-b89f-099d87d42b32",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d2da1afd-0bd9-4ba0-895f-777f04a7f766",
        "cursor": {
          "ref": "aa5442a4-2cb9-45ef-ba39-22c8a333bbf6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "72346254-3a3d-45cb-aae2-9377745b2acc"
        },
        "item": {
          "id": "d2da1afd-0bd9-4ba0-895f-777f04a7f766",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "69af7d3c-a08e-4c28-958b-70c079555eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6192c2a0-fa5c-4c98-8663-7ef0a941f69c",
        "cursor": {
          "ref": "f1f5b4f3-0b50-4bdf-a57b-a0cbed51ae20",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0541a3e5-0476-4db5-8631-82e563e61661"
        },
        "item": {
          "id": "6192c2a0-fa5c-4c98-8663-7ef0a941f69c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1527da96-fe2d-43ba-baae-c7106a979483",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "04aaab59-6f81-4c4c-b26a-a2c24664c732",
        "cursor": {
          "ref": "8fd80996-5a11-4794-8a39-0b5f0a975e30",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b3a79ddd-86de-4460-b27c-bfd44aa67992"
        },
        "item": {
          "id": "04aaab59-6f81-4c4c-b26a-a2c24664c732",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bdaf228d-9098-4e20-b6f0-54664f1a012b",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "16215e10-dae4-40db-8faf-aa7ab08378ae",
        "cursor": {
          "ref": "b08e0a04-c268-472d-af8b-d53737c19ad4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8555ac6b-093e-4ed9-bc05-a4fee493149e"
        },
        "item": {
          "id": "16215e10-dae4-40db-8faf-aa7ab08378ae",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a4a5740c-989b-40cb-950b-6e5ffac3596f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31150f9-d625-4631-be2d-4380f02cf48e",
        "cursor": {
          "ref": "97fae2d4-c50f-4ca3-93bc-54749bb534eb",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4ab456d0-4d43-4f7d-8046-f9fb4d5f1e75"
        },
        "item": {
          "id": "c31150f9-d625-4631-be2d-4380f02cf48e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9fa875d3-0d6f-4eda-864c-a4d30be3655d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fde6718-c499-478f-8103-8018d1eba40d",
        "cursor": {
          "ref": "7050f0ac-054a-4140-95e6-0bbb8eb348ec",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3fa72777-694b-4df2-8e87-fe2d73ba1750"
        },
        "item": {
          "id": "6fde6718-c499-478f-8103-8018d1eba40d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f1958ca5-e8bc-4c62-8bbd-1b171b15bb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada2747f-0d27-4880-8e69-4110b425cd12",
        "cursor": {
          "ref": "44da22cc-d841-4ddb-94e0-dac90092c2e3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab40659e-8847-4cb6-a2da-cb3addc085dc"
        },
        "item": {
          "id": "ada2747f-0d27-4880-8e69-4110b425cd12",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "517f822f-7aeb-4aec-a772-289195769897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4601e81b-9bfb-4566-b82c-a15d7a5c0ed8",
        "cursor": {
          "ref": "97d7573c-cf6e-4f79-ad88-b687c0272f68",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b2331173-09d2-4ffc-af15-948e7a5088c0"
        },
        "item": {
          "id": "4601e81b-9bfb-4566-b82c-a15d7a5c0ed8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d431667c-02a1-45e2-a880-41ae2930f003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf59cb8-20c9-4fe2-a9b2-3936fdb6b998",
        "cursor": {
          "ref": "3965ec71-e7a9-4914-82e7-75e5a9375490",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b7b13e75-e161-4fc4-86b0-ef17d416830f"
        },
        "item": {
          "id": "edf59cb8-20c9-4fe2-a9b2-3936fdb6b998",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7f591bfc-1a8d-4d3d-bad8-4f4e79d6b89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2612125-64ac-4af9-b314-ec085faf4612",
        "cursor": {
          "ref": "ee506974-a544-4de4-ba80-042fbbb7fb7c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6c3750d8-05f0-4a18-9e65-54f01c175d4e"
        },
        "item": {
          "id": "a2612125-64ac-4af9-b314-ec085faf4612",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c5dd7dc0-585a-4707-a018-e7e56679cfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0117df03-90a2-42f4-bd59-5a1995a813df",
        "cursor": {
          "ref": "d4b2b18f-2134-491a-a33c-5cf44903bc58",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c726788e-6633-4dcb-afa3-e185a38e410e"
        },
        "item": {
          "id": "0117df03-90a2-42f4-bd59-5a1995a813df",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "28c0b8ae-d49b-4517-b5e7-81ef50033aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00060796-8878-4e07-b768-97d3d585c1d4",
        "cursor": {
          "ref": "3e1d5249-3c53-4559-96ec-90a01d353243",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "97b3684b-eda9-400e-9bea-33d192f3d4bc"
        },
        "item": {
          "id": "00060796-8878-4e07-b768-97d3d585c1d4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d4a444bf-5fef-465b-9843-b7b1726bb295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fdbecd-6fdc-49d9-8f9e-92d671ace124",
        "cursor": {
          "ref": "5256b62b-68ec-42cb-8243-5bf7892d2b7e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "554de70f-b387-482a-8e7c-9e4ef016ba73"
        },
        "item": {
          "id": "93fdbecd-6fdc-49d9-8f9e-92d671ace124",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f0542dc5-6ea5-4a03-827c-c1ba23c0e28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a118f07d-ffde-4011-82e8-f88397a9d976",
        "cursor": {
          "ref": "b51b9301-5a13-4ee5-9abd-2328b540c0ac",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1fdac340-9a22-4133-ab43-9774e849ef5a"
        },
        "item": {
          "id": "a118f07d-ffde-4011-82e8-f88397a9d976",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fb52dcd3-b304-4f6f-b1d1-8608fc5ee7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9d0507-365a-4303-90d5-088a4d861d0d",
        "cursor": {
          "ref": "ee66bf93-1b51-4b3d-a632-6de9becc5836",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "48bd232c-6ecf-4997-80b9-dcf32eca8227"
        },
        "item": {
          "id": "0f9d0507-365a-4303-90d5-088a4d861d0d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "619e85f4-11b8-4680-a9be-bb69b87fd249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77abcfa-5a16-41ab-ac67-98c24f2a0c38",
        "cursor": {
          "ref": "8f32ebb2-b7fa-4588-8aaf-f89336ffc5c0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ee7c830f-5148-4047-85f6-404028fb1431"
        },
        "item": {
          "id": "d77abcfa-5a16-41ab-ac67-98c24f2a0c38",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e39bcf3d-5271-40df-96bd-85c89c4a7fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0013f89-30c2-4152-b037-c70d78484016",
        "cursor": {
          "ref": "fb065a0b-a209-44f0-aaef-9bdf964c3aa5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f6973b9a-26d7-4628-8a2c-cdb3d85c7dff"
        },
        "item": {
          "id": "b0013f89-30c2-4152-b037-c70d78484016",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1a039d91-fb8b-4afb-9929-44cac60b7b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "087147f4-eb04-4c75-a9d5-e4b472765210",
        "cursor": {
          "ref": "4ddab1a2-a521-44bd-a9ab-2b728da537ca",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "703e878b-d367-4681-a3b9-f983ec235aef"
        },
        "item": {
          "id": "087147f4-eb04-4c75-a9d5-e4b472765210",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6f6b1846-5ec7-463c-8d32-559b7e09de48",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "99b8b9f6-e05b-44f7-90ec-07d11f70f8ee",
        "cursor": {
          "ref": "667453ac-24a4-4df5-b1ac-0cc30dcc44ac",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f8952023-b0e6-4bb9-8fb4-6601b490858a"
        },
        "item": {
          "id": "99b8b9f6-e05b-44f7-90ec-07d11f70f8ee",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "341e3a14-f66d-433b-b648-ae831f0547ac",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a4dd5f8f-76e6-4240-93d7-5c6955689f2d",
        "cursor": {
          "ref": "a91d60ca-b7d7-4c6c-87b9-97838f3b7553",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "61bbf857-99bd-4b09-bdee-1b082a9d638b"
        },
        "item": {
          "id": "a4dd5f8f-76e6-4240-93d7-5c6955689f2d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f470971-239f-46fb-8537-f226589c7fa5",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1fd45b71-afb1-4841-9e4b-dbe8666b9e8d",
        "cursor": {
          "ref": "a7e5ddc1-0f14-44ec-a850-a4eed43dfdd3",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1918b754-af7b-402b-b1f8-5b066525a6a2"
        },
        "item": {
          "id": "1fd45b71-afb1-4841-9e4b-dbe8666b9e8d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b361cba5-686f-4821-9641-9532fe6535f0",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a81e420b-6dd0-4059-8cb2-7bafaa8d7c89",
        "cursor": {
          "ref": "62481a53-37a2-40cf-8ceb-7431903ee8fc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1d0ac663-6815-4e2d-b5fe-5f7284b6732c"
        },
        "item": {
          "id": "a81e420b-6dd0-4059-8cb2-7bafaa8d7c89",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "38cd069d-d81c-47f1-9a4c-40f2ed71a966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b7fad0-539d-4fb8-83cd-f7eb5848936f",
        "cursor": {
          "ref": "ee6198f4-edc3-4b7a-8efd-adc7398c7cbb",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "51640686-9a04-4dde-8114-8d1cf7287aaa"
        },
        "item": {
          "id": "80b7fad0-539d-4fb8-83cd-f7eb5848936f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7430ed3e-4dd3-4982-b21f-07dce94a0e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1a1681-910a-4884-a540-2b3e9e6a8608",
        "cursor": {
          "ref": "b7f7ccb3-6739-4501-9a7c-0a883e1ad85c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a6b8faec-1241-46ae-8693-84d52b76cfa6"
        },
        "item": {
          "id": "dd1a1681-910a-4884-a540-2b3e9e6a8608",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "28c466f1-dd2a-4d0d-ba15-ee7d01f37360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51002d0f-65d0-470a-835a-42631111bb9e",
        "cursor": {
          "ref": "11c90e80-d8e9-4890-9a1b-db568909c0c3",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b487cbb3-73cc-4043-a7cd-54a195dd4cd4"
        },
        "item": {
          "id": "51002d0f-65d0-470a-835a-42631111bb9e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6c6e306e-1611-4697-8f52-e11baa4492db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fe74d9-f69d-4e0e-a581-6b8847bfbac8",
        "cursor": {
          "ref": "4e342362-f9b4-4a56-8e86-4c97c077c05b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "35ba59a6-ee56-4517-8ee7-c410bf443e20"
        },
        "item": {
          "id": "21fe74d9-f69d-4e0e-a581-6b8847bfbac8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "74324c89-8930-4908-a1ed-31dd12ec1789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2520ce6-17b8-4fd7-9395-5c55942fff94",
        "cursor": {
          "ref": "605af8b7-81fd-46b2-a449-6806ea4e69ef",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3d134ad4-edba-496b-9e9d-aaf94ce05817"
        },
        "item": {
          "id": "d2520ce6-17b8-4fd7-9395-5c55942fff94",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "440bb8a3-08e5-4bdf-bd59-2dd2109c86b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9004a3-1e23-4b60-bb28-6dc53f085ce2",
        "cursor": {
          "ref": "f02b30d1-ad16-44af-8bd6-afd9d483b07f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f2d051e4-d412-4d9a-b3d6-8448bb09b2c7"
        },
        "item": {
          "id": "1c9004a3-1e23-4b60-bb28-6dc53f085ce2",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a6ebf4c5-c070-4d38-909b-9d5ae308e8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8742d54-18c3-41ef-91b6-bacaf4445ac7",
        "cursor": {
          "ref": "d81494d0-77a2-4186-97a9-3915985e6a6a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "47e76856-1763-44c0-85bb-638f13e746b4"
        },
        "item": {
          "id": "c8742d54-18c3-41ef-91b6-bacaf4445ac7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3b8e6788-f69e-4270-9243-2bb5bc9cbba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87e0ad8-716b-4d83-9c9f-a4285de29cd4",
        "cursor": {
          "ref": "54edc519-01c4-4c85-acb4-e23509b66e56",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8d8a560b-d133-49a2-a04b-0398aba7c3d2"
        },
        "item": {
          "id": "f87e0ad8-716b-4d83-9c9f-a4285de29cd4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "56126fbf-0cd8-4ff1-95d3-d4c26e3972b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11f8229-094d-4c59-a2b8-0d32a8da2a19",
        "cursor": {
          "ref": "700eef4c-8d3e-46c8-bb71-e825c0256d26",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6d63ba8f-39fc-4726-837d-a451c367367a"
        },
        "item": {
          "id": "d11f8229-094d-4c59-a2b8-0d32a8da2a19",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "91ae25af-eda5-4c35-a4aa-e46d89bc929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ec30dd-c125-4537-a0a2-0ab5f7fef1ad",
        "cursor": {
          "ref": "d4bcc0d0-0054-4097-b0d7-256bbcd6158f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9d42713c-2139-4f7f-bdfc-6ccadaea9342"
        },
        "item": {
          "id": "92ec30dd-c125-4537-a0a2-0ab5f7fef1ad",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4c7c3b35-24b6-486a-bda5-a1c6c1a4d4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d9942e-df4d-4880-a94d-476d6f42e35c",
        "cursor": {
          "ref": "63ad8f73-7284-4e19-a715-8d2bae4b636b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7d1d3943-069a-45fa-815c-4dc7f0756a97"
        },
        "item": {
          "id": "d1d9942e-df4d-4880-a94d-476d6f42e35c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5976ccc1-94dd-4e1f-885e-16c4370543b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9197661-0adc-4549-94e0-279391e8fd19",
        "cursor": {
          "ref": "a791f2a2-a61c-43a9-9330-5834163d10d4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bdaaad34-ce85-4f9d-a1e7-54b3d91265b2"
        },
        "item": {
          "id": "c9197661-0adc-4549-94e0-279391e8fd19",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bc87fec2-c1be-40f8-8bdf-08f304f1769f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70a9306-4506-488c-a7dd-19753d368a92",
        "cursor": {
          "ref": "290fa489-75be-469f-adb4-443479698fec",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b6aa66ae-0304-4007-8408-d43f7355a5f1"
        },
        "item": {
          "id": "f70a9306-4506-488c-a7dd-19753d368a92",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "04a86961-8f3e-4e1a-a3ed-7469f205d552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2d50cf-456f-4034-b646-9f7ae46ede09",
        "cursor": {
          "ref": "8c18c2ad-b928-4333-ae7e-4434b97110f3",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4ce93d14-f2b1-4442-b3c1-51d6cdc20962"
        },
        "item": {
          "id": "ed2d50cf-456f-4034-b646-9f7ae46ede09",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "67954674-64cf-4d14-861f-b02f788a5fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0a14b9-3290-4742-98a8-c87726fd2215",
        "cursor": {
          "ref": "270ff691-7b3e-49ad-b2a9-25dd4327cb48",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9e378a94-30a5-496d-87e8-f01a719d3f2b"
        },
        "item": {
          "id": "1b0a14b9-3290-4742-98a8-c87726fd2215",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d182055f-bd5b-451d-8a46-1495157b6d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dee2445-a53e-4b65-9338-4f28d3dcf166",
        "cursor": {
          "ref": "524291f6-1868-4246-b288-99e38e1be816",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fff8d0e6-4800-4367-92f9-ea825173e60e"
        },
        "item": {
          "id": "4dee2445-a53e-4b65-9338-4f28d3dcf166",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2d927ee1-9ea0-4639-9d48-c9b15b561586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba398e3-2eea-453c-a138-9546d4c10d3d",
        "cursor": {
          "ref": "00664c59-7561-48e6-89af-e2c6cdaa01c3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3b9e787e-ae71-4e4e-ae80-51081269642c"
        },
        "item": {
          "id": "2ba398e3-2eea-453c-a138-9546d4c10d3d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "62d55f7b-6902-4c40-8560-43a09a9349ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915092fe-490c-4665-b553-7ee584b361bf",
        "cursor": {
          "ref": "fc64197c-2924-446b-8d62-2dd3552fdbd4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8b66a719-5f10-470f-a3e6-c73c742ac4dc"
        },
        "item": {
          "id": "915092fe-490c-4665-b553-7ee584b361bf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7e793ad9-d0ac-46ec-b3dd-29c155d65a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662d89ca-3499-4da9-bff3-711b1d918c2f",
        "cursor": {
          "ref": "e7117ea9-f8ab-4910-a011-4d714039d524",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "176e30f4-c002-4487-bc76-08a3c59b4cdb"
        },
        "item": {
          "id": "662d89ca-3499-4da9-bff3-711b1d918c2f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3cf61248-e391-4448-bcf1-f581fa6c0b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0918c100-2c87-48ea-b14d-0d2be88f3f06",
        "cursor": {
          "ref": "a9413084-e709-482c-acb8-64622b9fc537",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c1f591b0-6c96-4561-b007-dff4242b2443"
        },
        "item": {
          "id": "0918c100-2c87-48ea-b14d-0d2be88f3f06",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6042b122-ffee-4bd4-a703-0e97b09a7209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b097e7-293b-4735-92e8-58813ddad312",
        "cursor": {
          "ref": "e6164c95-3685-461f-ab43-ba840e7568d0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "efa30042-429e-417f-8f58-bf2795240b6c"
        },
        "item": {
          "id": "a3b097e7-293b-4735-92e8-58813ddad312",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "01be72f8-0b05-4714-8f6b-4cc24809d4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d55fd8-dc99-422b-b627-9d820049f815",
        "cursor": {
          "ref": "78a7b131-bea8-438b-b994-d6a82950a187",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4c5751d1-37a3-4b3c-bf60-621b53401292"
        },
        "item": {
          "id": "c1d55fd8-dc99-422b-b627-9d820049f815",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0440d322-2035-4fc4-a846-82bb3e9625e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf52ef10-7fe9-4f45-9e0b-6e5dc90839f8",
        "cursor": {
          "ref": "12ff0677-ab66-4cf9-bb80-5ba7fe0dcfc9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4a01d20c-660d-49fb-a31b-25c4da47650a"
        },
        "item": {
          "id": "bf52ef10-7fe9-4f45-9e0b-6e5dc90839f8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f3fae19f-65a2-4468-b19f-2faa6f906b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91ef6a3-4d8a-4c6f-8e97-9ef19ba7fdaa",
        "cursor": {
          "ref": "2c5eb4cf-f99f-4499-823f-e148f9680d06",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3b294ab1-16f7-4118-ba00-65a3817f783d"
        },
        "item": {
          "id": "e91ef6a3-4d8a-4c6f-8e97-9ef19ba7fdaa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7f91f3ab-93be-4c12-a6dc-d5139eb071f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97019c7-728f-421b-acb9-9465c82ae9e1",
        "cursor": {
          "ref": "f1f26378-ad7f-4425-a92a-b59791272d9e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1c2428e1-8bf7-4d6b-89c3-df7c09bc2cb4"
        },
        "item": {
          "id": "b97019c7-728f-421b-acb9-9465c82ae9e1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2c82a31a-654f-420e-b137-601d8959dd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68810b8e-6fcd-49b1-9ee8-db8cee76d029",
        "cursor": {
          "ref": "0e282cd7-3635-449d-b553-0c93a9f9da02",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a381b29c-a061-4546-933d-0af71ac42cc3"
        },
        "item": {
          "id": "68810b8e-6fcd-49b1-9ee8-db8cee76d029",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b40420eb-b278-4728-aecf-470da5050c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec7ed49-485c-4d74-b378-1170e04fa27f",
        "cursor": {
          "ref": "8f690e36-12fe-4552-8cc5-82ddfc27e00e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a0c3ce3f-539b-4aeb-852d-0c642bf2707f"
        },
        "item": {
          "id": "bec7ed49-485c-4d74-b378-1170e04fa27f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a7d9d851-9f81-49de-b4b7-420193a522d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec11ec7e-dbb1-489a-a853-3772dfe6efef",
        "cursor": {
          "ref": "2a31662d-d8b8-4be3-93f3-705a573717ca",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9b5970ae-4dae-4661-b839-fafb12ccb86e"
        },
        "item": {
          "id": "ec11ec7e-dbb1-489a-a853-3772dfe6efef",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a99f8d3f-5575-4f3e-89fb-6f00a42602f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670250e8-21c0-427d-846c-1529b4b84541",
        "cursor": {
          "ref": "dd9ea674-c888-4610-aaca-3fa285a02d3a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8f033d9a-ed69-4f88-b7d7-f1e52464fe25"
        },
        "item": {
          "id": "670250e8-21c0-427d-846c-1529b4b84541",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "75c3184c-8988-4161-a4ec-5ea7a080070c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f4fc25-3e5e-4f10-b309-8c98f8b99811",
        "cursor": {
          "ref": "b88953ce-9842-4616-bb50-7989c3bd4166",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a55e7ae1-ed74-4609-9816-e3582d160f76"
        },
        "item": {
          "id": "68f4fc25-3e5e-4f10-b309-8c98f8b99811",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "41a64609-908d-48a3-9561-5e6c042d1f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a60ec9a-35ba-4228-821b-ba21a97bd7b6",
        "cursor": {
          "ref": "407c85fb-abd6-4362-9d04-3e7bdf2eae64",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "cc7acddd-1fb1-4ccf-8f72-f61e561288d7"
        },
        "item": {
          "id": "5a60ec9a-35ba-4228-821b-ba21a97bd7b6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "82a90b01-2029-4c69-8bc6-9cfdcbc5b29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281f382a-d01c-43d6-ad59-af86740d2d4e",
        "cursor": {
          "ref": "2a3b233c-0479-4b7b-96e5-53c1e0dbd842",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "fc0d5ed5-8c6f-4d10-82bb-f6ff2332f9c9"
        },
        "item": {
          "id": "281f382a-d01c-43d6-ad59-af86740d2d4e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "38e231be-60f4-4930-836b-212cca534e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c4d41c-475f-41cf-ad93-35a614d685af",
        "cursor": {
          "ref": "4132ab75-71c1-44a4-a5f2-650c47dc39ee",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ee03c30b-0ce8-4bd6-ab74-62f200cdf063"
        },
        "item": {
          "id": "88c4d41c-475f-41cf-ad93-35a614d685af",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4d411d41-2a12-4520-a264-5458840faa14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b4d241-a1ad-4dc7-ae71-8f63f9885122",
        "cursor": {
          "ref": "e29c1a47-1e4d-4445-a0a8-1ccea8556928",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "73afaf1d-349d-4217-9c34-b53cc7452c86"
        },
        "item": {
          "id": "28b4d241-a1ad-4dc7-ae71-8f63f9885122",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "800c307b-de03-431d-8f71-a3105f55e6b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890236c8-04ba-483a-8ccb-ca4b48187673",
        "cursor": {
          "ref": "cf8f9249-d6ae-4f76-bdfc-a30edf0ee821",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "0d78f48e-1d1c-4d5a-a413-324a937c3e48"
        },
        "item": {
          "id": "890236c8-04ba-483a-8ccb-ca4b48187673",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "883cfc78-7a2c-4556-b120-d03effd6516c",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "84266f3f-7336-450b-a5a0-0ead64963476",
        "cursor": {
          "ref": "4d76e4ca-897c-4518-8ffe-a2cdf0f445ee",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "00d889fa-45e2-48cf-b7ad-f251cd07b084"
        },
        "item": {
          "id": "84266f3f-7336-450b-a5a0-0ead64963476",
          "name": "credentials_verify"
        },
        "response": {
          "id": "617605e4-fcf6-4a4b-a874-5ffb200b9ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7b9a44-c606-46fc-a872-464334b0684a",
        "cursor": {
          "ref": "eb4d8865-3ecf-4c7a-812f-1606e9e7d2f3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b760777b-81dd-4958-bcdd-32a4fabebc27"
        },
        "item": {
          "id": "5e7b9a44-c606-46fc-a872-464334b0684a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "077b2bd1-82e8-42f3-b0ba-dab876e9f694",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a96f927-8f9c-4ec3-a64a-e8e0c70cb849",
        "cursor": {
          "ref": "d2ed2d8e-135b-4724-835b-669f98cf2730",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b14841a0-44e0-4fe5-8986-d7d59419bde9"
        },
        "item": {
          "id": "5a96f927-8f9c-4ec3-a64a-e8e0c70cb849",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37a620bc-525c-4b56-bcf4-3e27105b96eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a96f927-8f9c-4ec3-a64a-e8e0c70cb849",
        "cursor": {
          "ref": "d2ed2d8e-135b-4724-835b-669f98cf2730",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b14841a0-44e0-4fe5-8986-d7d59419bde9"
        },
        "item": {
          "id": "5a96f927-8f9c-4ec3-a64a-e8e0c70cb849",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37a620bc-525c-4b56-bcf4-3e27105b96eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0cba83-482e-4922-b82a-4dbb1fe1b46a",
        "cursor": {
          "ref": "3cc0289d-0e3b-4cc3-9e1f-4d634ddce7b5",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fcc46b23-7219-4bce-9407-d2c0844aa55b"
        },
        "item": {
          "id": "fd0cba83-482e-4922-b82a-4dbb1fe1b46a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "22dc0490-ead6-4e33-932b-75a0298dbd38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0dad89-3caf-47b9-9661-64e421992aba",
        "cursor": {
          "ref": "7e8b462f-1bb7-4ae9-966a-f9a7b97f7b47",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "dc092e1a-b92a-47cd-afa3-e674fba8e084"
        },
        "item": {
          "id": "ec0dad89-3caf-47b9-9661-64e421992aba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2296ff56-1bb3-47b6-a45f-844ac69d6ee9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}