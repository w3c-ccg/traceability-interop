{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4350cc57-368c-4be8-a78a-05880fa9ab7c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b417d828-d11c-4343-bd13-fb7c4f5f54e9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84c2df1b-2a43-464a-8490-1d8cf30cbaee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0a6fab61-ebe4-4b9d-99d4-ee2ef4c0664e"
                }
              }
            ]
          },
          {
            "id": "88551ab8-db31-433c-963d-f7a041d66a72",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f571312e-ec92-4e15-b95a-dd421292d7bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e1df3cfa-ce28-4866-baaa-af829649711f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4905c30b-bc69-46d9-8465-159264d4c188",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "49d70aab-990a-44ed-9acb-1cbb9cffe3fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "324e94f7-2ea9-4ae2-9827-71b64bd01bc0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41aba9c4-a0b1-4e9a-b7dc-56a2f53a95bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a8fea17-cde0-4e9c-828f-44bb4658afd4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "130aa046-1626-496a-bb1b-2af1f2852a89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ceb696af-2c72-4f9b-bafa-99a6c64d7e10"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e3152d4c-114e-4372-b682-57e2a7a3bd70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28fdc3f4-a426-4a34-aab4-76a5b535c53a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36ba6800-5e95-49b4-a060-3b4b78bb279c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e707a310-9fc2-4b89-84d2-f016542f1997"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a66a086-047e-4101-8a39-8eb165b7b86b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3a3d9ff-6f02-4c04-b280-be96ac7fe004"
            }
          }
        ]
      },
      {
        "id": "f49fef26-df90-4221-904c-1a75b0324ceb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6c475466-fbce-4af9-9b64-922bccf31a3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc165cf7-3916-4188-a6f8-0c13d74fd1e6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "520ae484-89aa-42b3-b386-54262e70912a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a663e0e-ee42-4410-a3ff-d1d7ef461903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67ec4851-06a0-4d4b-9e15-334423c04e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db36e2c-32ee-470f-8ce7-a24c188e7426",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738a0c0e-a543-44bd-b6ca-6f488f3febb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2972249-22e4-4096-ba12-0e6c4e8a823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb84c28-7320-42bd-8108-368afb113798",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71213f9f-119d-400c-954e-cd7a63203b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "693d42ec-86ed-4a51-9679-6ce348d20e6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4434b02-c7d8-42bb-a3b5-c10c8de918b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e259aad-0d1c-4505-adf0-4239e7e23b4a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a566125-aeec-413c-920f-d4df75e94b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "899d045a-1a84-4ff4-95b5-a67d72d45fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed306ef-7aea-4091-82ff-f64855ce535b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2745864-79c2-4395-8b0a-c92bfe8d2d39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87cd3418-f1a0-4990-ac90-aef3b2b4b751",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cb79335-daa6-4500-bb83-47c65000aead",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d88e069-7150-44ab-b383-3bcb0dcaf06e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dad768a0-9639-4244-be4d-f6d4ab832ee3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3244fca5-115d-46af-ae2f-52a8b9405765",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b0db6677-5bb8-498b-9dfe-00115454ddc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "281e1379-c31b-4f33-ab61-6b8dd19972bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c123acad-5210-46ec-a5f0-94127893dc50"
            }
          }
        ]
      },
      {
        "id": "b3b5ca89-c48e-427c-9902-e1146a273da2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "773ffe27-82dc-4de1-aa41-a04caf1e5eca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "456047f8-f64f-44ac-b8ac-f8f6834beebf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "18a29d87-d256-4ad8-b9d2-8a1d0f4b3cd7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeed19eb-7001-41d9-9597-23e8749e96cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa2e80c-432d-4f96-81b8-eb830c4779cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978ec46f-0ee0-4903-92b5-0834516dde06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b07311b-7ea4-4ed2-9930-b54dab7a79ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dfea78-ccfe-4cad-83c4-718d30925b5d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e3f37d-aaa2-4abf-b79a-50d00f831b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3206259-b7c2-4c63-8c9b-e1e019f5eadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a42465-2053-44d7-b4bb-d62f8f85ad4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47e6a3f7-5605-4745-a6ef-c4527baa90a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9120d53-5947-43d2-a50a-793b28b4ff04",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ec5ff3-6da2-41e1-ac8e-02555c2c1b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed5af3b-eba7-4502-811f-4e5dab51c9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37758986-6b06-4804-a6fe-1f877778c640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6f105cc-edde-4996-977b-f45f8ac51efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69dcf56-2aae-4855-8ec6-12d4c218cd4a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb5b43b-06e4-4319-ba31-9b26fe12dfae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a231a5e9-472e-4d76-a371-e953a7856c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfab2889-a5f2-4c6e-a890-3d4714e4d402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a2dd3a5-c40f-4a2a-9247-74bb587e5461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a13abe-e82d-414e-8975-d60e96b5a825",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a07585-ed4d-4c3d-b136-ff240f0e58d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ab2c4c-bb06-49af-9cbf-b4d9b5808d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d592d1-cad0-41b4-835e-ada57c0b07e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b58c65b0-1315-4527-8fc7-b879e953307b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d24ba9f-793d-4183-82b6-4adcfaf92a6a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b899167-451d-4ccf-9db6-10b600e217f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b50646e-bae6-4f2f-a625-8bb1c3f0200b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee30d5-8ebf-4ed1-b484-7f3c1921d95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa7ce906-24b4-45a9-b024-ff7207ea1c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c882d689-2d75-4ae2-838a-6119e4b943eb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568068ba-d46c-4b7e-95a7-d53d6bd1c90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5404cecd-b3dc-48ff-aa62-6d9d50e6ad0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5258a869-67a4-4c24-b64e-f8515bd393c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e3ff22b-c0a8-4005-83a4-0552cc2d2cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee3c0f5-40c4-4838-b51a-e83deb46527d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ec7a30-75a0-4af6-bd71-c748c9d6244c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2106207c-ee53-41c4-86af-42ffb7f658c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9723fb9f-dbef-41e1-b77a-981ad3977fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c665af5-935f-45e5-b1ae-a1e71e6caec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2c7d59-2b61-4230-a6db-f855e25f1897",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69207a10-f3f0-43e0-80a4-dcd19e4a36bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f9380e-b995-4ddb-8476-c27e80d60e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb7dc95-ffa6-4800-a8f0-83514f028eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f563e4a5-aaa6-4cb3-9f2a-a3c52dc997e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e66679-81af-4887-8a8a-ebaa3fb8bcdc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279149c7-f968-4fe6-ab5b-b275b2674a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ecb894-47cf-466b-96f2-ba3e9bcfa153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9cf77b-43c8-480d-8272-09d1bf555b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b9d12ff-e82a-48d5-8e73-d616720b113b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213c3931-29d7-45f9-97a3-648883c6bcb9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba6fc23-73c5-4d47-b686-3799ebadb1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b2cccb-69b2-459a-a726-2c1121553537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ba367a-6dc8-4e2f-9cb8-87c0055ec0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0782f99-ccf2-44fe-9101-b0bc677746e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2c4c57-84fa-4a6c-9b64-e465cc31d419",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c092b72c-e2eb-4b38-a2b3-000960222800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dd7f80-e06d-443c-8038-df1cf8ef4b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969ad75d-b65c-477a-8bdc-9def98d824f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50e4182e-6974-4260-8917-36681dc63a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98611fa-00c4-47c7-81fb-939e2cd104b7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165a3541-32ff-48b0-98a2-0e8950093391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025fe7a8-9950-40c6-b9dd-80cc545cc624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd507422-b57d-4b9e-abe9-d31d94a86606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc7a3d25-9070-493e-9c0c-c526d7722fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72aad31-805a-4903-b367-3ba093444814",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f9786d-0615-4cd8-8f38-65cd49e4bba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d72165c-c143-46e6-83df-a39bf71a62ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44627e5e-f480-4751-a5e5-40d944601167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f44a3cb-882e-4618-9d24-ad1b97bf3708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c48f1b-0d12-418b-93f1-3d0aca367d46",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881834dd-5731-4e5c-a422-8fc85d67f9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6f0fe0-c403-48ae-96c1-40224c19babf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e7a7ac-db96-49f1-83f8-3136ff5bd716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4518cf0e-4cdf-4e21-8e02-b88ced47e75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e8246f-fa5e-409c-8bee-3e6c2d039082",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6108abb0-6f9c-4d04-a699-33be0006a615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0116a70f-0114-4ba3-b016-4b129c2b94c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648781b3-5c44-4baa-a26c-374fe9232222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75ad2269-e053-4f94-9d2a-55a7d79b378f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6936159b-e1d3-4ae7-aa01-101e78a5aadb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b1f7d0-a2a1-45b2-8c0b-85d2ab87521f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed602541-89ec-44a6-b018-2225bb12db21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b5e17b-24b3-4f86-961f-bf77de09b117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "260d8ca1-d703-480a-9ffe-0a146c157826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed495d8a-4070-40f1-af21-ed63dec8df8a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f359fba0-bf42-4267-98d3-4ea794f24290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec71ecee-326d-4f06-b478-1e19a59c3695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbba093b-ed05-4487-85bf-272f811c24aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2637b587-6185-4c4f-8826-d88c4417aad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10381820-1166-4f25-a625-50a6d5b8bd57",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211ffab4-ce72-4213-b3c0-e0fa8b78c688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14d35ee-3ea2-41f1-8cbd-e96b21ce35ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b695f072-0dce-4f40-97fe-bed085045d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb27500-278b-4d81-bfa4-8ea955ab5fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40a7fc3-9801-4959-8df9-f14406b4a4db",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a8de06-be46-43da-814b-cac88eb0c8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3a7dae-43bc-4f65-82bd-5b6c5ad8d230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cd0df6-f7a1-4cc0-b0b5-3b88a7838240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c30a7590-8f1e-4150-bc56-f729f0ece6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07a2718-2544-475a-b9dc-fc9d3ad46431",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcb8fb5-f51e-4292-acb2-f64136e8cf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d558d4-c592-45b4-bec8-c73dd3326bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b6bb19-db43-442f-b450-67d5ca67af31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b69627ad-6c64-4270-a656-cf426c39a122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cd5a04-7df8-4683-bdac-2e0757086750",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddb42f7-5484-40a7-a076-75ff792eee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c22de7-b1a9-4d35-91ca-2f77e1f76e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2693b129-1df7-4986-b997-903b0651998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05ffa495-c65c-4117-8888-3ca0ef306084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defdbe2c-fe4c-46a9-91ee-dda053644ad1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442bd054-bfab-47f0-898f-f9c839ce0ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b69536-9b79-4557-816b-d9d334b60fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845580f5-8b80-4952-9205-5ffe3d791886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71cab1fa-70f6-43fe-b40a-0620b2886d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9a3187-a384-40dc-97fc-7187e2b3971c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734592bc-7f1e-4cbc-95a8-1076cb745f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "855854cf-9db6-4c8b-b023-9a0354e68684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f36fcce-95c7-46c0-ab23-443fbbb9d33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "59afb5b3-2928-4857-9521-9a2806af3f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e76e00-26cf-435c-912f-7b3a4816f88a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da32067-b41f-474c-a8ff-2981ed234de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e100e6f-0550-450e-b29e-23260550e321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f76595-3a6c-4255-a7c7-c57fe3939bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c98d89b1-7d36-444e-a830-d29f40d848b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87103253-bbfd-4b5a-9b7e-8360af0c82fa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cac6099-70de-422a-ac93-8be3062d05b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfe958f-1105-4571-b42e-4e953c53988f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983a59e5-fd16-4101-b2f7-7bf18ebac2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "474d023b-0446-444c-9cca-89dd5bde583a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92038db1-9724-4651-a627-3d99493044e8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9c367c-bbcb-4ba5-a656-0b5429f39c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e8aba8-1d72-4b94-9aa8-4ca7099a1755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2963b08b-a351-408f-aaed-42f5659eecba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca05e87-3b17-4efb-ab7b-011f9008bad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e383b7a2-d49f-4dab-8632-c132a4dc05be",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907bcd98-302a-47a9-b75c-68c6b37c43ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cfedab-3eaa-4cd7-aff7-23188d546cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0263a2b-e0f6-4432-9100-c4ff819124f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc82d9e-e30f-449a-be8c-88123aa7d4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0c85d9-e018-4e8c-ac01-d9374435e4ba",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eca27b4-0050-4b48-a07c-8636d3206940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ecb7ca4-450b-4442-9b14-6a29ac05cd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6644987d-f238-4af4-b8b7-e565c0764569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "79dcbbbd-46ad-4db6-b016-2275c502a8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db01d38-d451-4323-b16d-13a9ad9b8899",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2939eb52-fbe7-4739-bb7a-774763484e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7593fa96-3d8a-4e4f-b9f5-ad5f2f1bf2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2bf746-c4ac-437f-89fb-2162bf4285f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b45f5a4-c298-43b2-b816-77ce2bed1bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac31c05-1fdf-4bbd-8869-0089fd5edeb3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb00a775-df1b-482b-bc37-4b1f6264ab55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6369c3-e3a1-432a-8d74-009b67a0fc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba3bbbf-cc5a-43f1-958d-2f6d87503f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cab10e1-1453-477d-9283-7ff5807af411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a89c31-7a17-4e8a-b02c-28b8321daa04",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829413c0-b7a5-41b2-8fb7-5dcf3bba7a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f051e0-eb13-4bcd-a0cc-c04b9778aa56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e787a1f-5583-4cee-a816-862e9659c71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7bae7c-33f4-45db-a702-103adbba268b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6990e7e6-fe0b-419d-9ede-0ea93de80943",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767d7e46-5653-40ea-bcbc-cd10d75eeaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0d12f4-9bc4-4a4f-addc-41bb57e9b874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd0c26d-00fe-4cf7-92b7-9bd38ba07b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39605c3c-15ac-4438-8324-2200f615105b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c974b948-1391-43a7-85c7-5d5e22250ef2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fdf8a3-67f9-4456-babd-ca005241ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428e86df-ddbb-402c-ba19-a7d9db69523f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3417a01-0251-4ef1-9a26-25f63ab3e185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b13a5c95-3f49-4575-9578-698e0eac6b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6461f401-b9ed-4819-92ca-889e052d0264",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddc2195-977c-4cb0-8076-b14f50778891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ea9f06-6333-492c-89fc-6aca32a4d47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f959da4-933a-4217-8545-c2da1d3a643c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f186738-5649-4d9f-8c4e-5200a773e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcbd8ee-201a-47f0-a54d-6cece07b45c1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b2c5fe-3e4b-4b43-942a-2d7396bfc570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25f92956-7e55-4a43-93d0-1891edfacacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09721527-299b-4b45-bc5f-049baea71d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f373280-b7b6-414a-8e79-06e0b4427f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b49ab-eadb-4e9d-8f08-3468233980b4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b5be17-e590-4fd9-86fd-c3950c84d4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323632de-656a-4479-97a4-8f5a1e0fa25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02550c8-f36d-4453-8949-9e81ef790e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4311cfde-48b8-46f7-a6ca-6ac58e9b2d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64d919b-3bff-455d-99b7-97cd7d4f9620",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1f9a78-6e85-4a04-a858-0153ca2c780f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3498f4-7d59-4d11-aaaa-379775e26ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc743015-7ec9-4b77-8f25-33a0b63d3d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "82eeb727-17d2-4688-ae7a-8e161e4d0ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f38bf95-4581-468d-85d2-b5d589e79c47",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92ffe93-8987-4872-ab69-180dcc7646a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71cf0a68-21df-4a2b-89d1-e898f0000d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5dccc5-1eac-4725-a639-c90ac08d61d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d790859-f60e-4a35-a37a-4ff7ef71490a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f917e9c-cbfa-4b45-b79b-5c6c883e7dbd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba5940f-0ce7-41d5-a713-9c14e13b1f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34277b0c-5139-4441-9cca-0301459a14c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821ff66e-6d59-4051-86e7-14271b13e839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc297a0c-1fed-45f0-b8b6-e5a4d392a74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92143da2-c1a5-47bf-92fb-e6e650e49b37",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bea44a-5d5a-4853-89ce-00df4c638c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c06680-eb0a-43c4-bf07-0ef615defa5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301a2245-c82c-4507-863b-b438db4c4613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b504fb-8819-4fca-acd5-d08f8f653990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cb1922-be61-44c8-8990-047ad29db5d4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68a6e47-19af-4e83-adbf-6df3a598ebc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf546317-b9db-4750-bf85-02d939c3b14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b350861b-155e-4885-9a83-88e8c267c739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "746b3470-cd6c-4485-b045-ab8a207eb49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561b2c51-ed6a-478e-a85b-1a78ece94845",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef759d7-ceb1-43a4-b551-fa388f702e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7beaa5-1c01-4a41-b3d0-39a60a7ffee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0571421f-32a7-408d-b7cb-da6c35bf8a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "13f43382-39ac-4ef1-862d-45f2799d589d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaead4e2-9a4f-4d86-b636-8cf2f457ec9a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4550c9-8314-4260-82c3-46c46e978d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5868d012-eabf-42e9-88a6-58a3afd5ae46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc00799-7cf1-4915-871a-9cfcd837e204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cfb0941-5a2e-40cf-a46d-01328efeb14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452be99f-c1d8-4313-bf8b-1f9dccafae2a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a068ac8-cf80-4f06-b10f-22a7ac1583f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ea6fc8-9d31-4187-8939-cb0795372cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f68554-3836-452e-a369-102fca0f974f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58bc5cc6-02a7-485f-93c7-b71b8d464cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df8b0ee-9e50-4653-a970-5974bfb78652",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bd8399-b7c2-49a1-95f8-687676f8a1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ba57a0-74b6-4bf2-ad6a-e4acd502a69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236a6f2f-5490-4c76-8a3f-97661a4f56d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a03cae-619a-49c0-9727-b94dd44ce3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ae9c93-08c3-4d98-9298-0bdf1129c046",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c777db-6046-4fa9-abf0-6fea6de5aec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0baf891-6262-4562-9267-9758396013f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f86e86-7492-4397-90d9-580bd42be275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce83e9d0-cdb5-42d5-b7a6-456fd15f8c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271bf23d-68f2-4474-9ee0-74a264c23d3b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c85a21-974f-45fe-8ae3-24aea5da29ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4c1e5f-da8a-4ea6-a460-8a54c8a305e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7430ac0-9f68-472a-a435-394eabfbb12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ffbbbd4-7cba-4888-a3d5-d1d320ebde44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890fb87d-356e-45bd-8386-6e9dd9f605b6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bd64e8-1d65-4ae4-9f9f-c5e3258c9e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123ec243-b1db-4696-9c12-d8aa7336acad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365c9995-6ac3-44d8-8fff-d6dc6dd7f652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "903207a6-ec4b-4e20-8371-b0a1ea1c79f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f86a24-ee03-486e-8b28-aad085733773",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9feb9c4-55b1-43c0-b43b-1c7330261c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d65484-1354-4f5a-93e7-d7112a980a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c11f580-090e-45d9-84de-8f09ef3c1080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02b9935c-2cd5-4ef8-b5ac-e5934f5046af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa4dc2b-0d9e-433b-a353-e69ffb9bf0a5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49f2fcc-b8a4-41ba-9a9d-d0332a027ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f471c4-e2f6-4519-8d7e-e6e0ce921a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbbb097-0d21-48c7-90dd-f691345340f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f09587bb-b27c-42ff-a20c-0071c9857270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e0035-65e6-4d48-8457-3cd1b83bdb33",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65d44fe-7545-4004-b01a-e620facb80d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618ad762-4d12-4ed1-9d88-6dcf816b6392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da476163-db44-4360-a550-f6ec8349bf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f221b9-e614-4db7-b2b0-d1b3ed750a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02ffeda-a727-41dd-98d2-047aa042852b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c75a33-5a1b-4660-92e5-360bb9215d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172777a3-585b-4b56-b143-2395c5cdac64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7350ff58-1006-461a-b705-e5a2ffe89351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf82135-0a09-48e7-90a7-f9674f8c4d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfdff1a-07d6-49b7-b4a6-683b00ea8e2b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc0a099-9b4c-4952-9513-1cfbf55cfaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aac1494-6bad-4f09-a84c-6180f072d591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15066e9d-c842-4dc0-830e-9b103535bcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7cb60a-33b2-4dc6-ba05-17f543411f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bd162f-d37f-476e-b471-ddf00c0e87fe",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca02cab5-2588-4703-a70b-eb036d67b27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bc62b2-eb11-4b0a-b8c4-4c4a96fc742b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d264ec-cb41-4253-9ee8-fa407a63a4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf75d32-b7ad-4107-803e-9f9b9589d83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9333d26-875c-42f0-9984-316a0657ec04",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b203c0-fa5a-40d9-9634-bb2a6bf54789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eadc5380-02a2-49d0-996e-161c4eec6b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73f90e7-3813-451c-a5a2-040d011b1ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b89226-9b98-41e1-886b-44f2d6902684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e401c040-2480-4d35-9b28-1efe6e576db8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e31ccd9-e98f-471d-9d07-8dc9f3692195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee070d8a-7446-4e56-8501-5ad52927fa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05892d3c-35b3-4b0b-9bbb-8f0bd88bcd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "624daab2-83d5-47e1-8e80-98f7816cd873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817ab869-0e4d-4ebc-acf4-0cf2338f8685",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849e366e-4bdf-4d35-ab7a-feb476f631db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cffd33-38ac-47c3-9b5c-bfc5be0429f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e898c219-21e5-4fa5-9ffe-1c0fea8d577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bc0208-1f3b-4286-9fc4-938e80384448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4264137-a23f-4973-98bf-27589301cb4f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65016c07-8ee1-4a9c-ae38-edf0eed23497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe1c520-7842-4c7f-a7d2-2c083bcc6131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ead2e9c-b69c-42f5-af65-ea0098ba2fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79275a20-6ef6-499b-bfbc-552464d6318b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637986ec-1df5-4591-b809-27ae8f912967",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01e2b1c-0ba3-4d1b-9fed-d9897ecd0295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c9551d-d096-4317-a158-e22834a99594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80dd17d-c38b-4c49-b820-f17fa18a681e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e85dd1-231c-4c25-aecc-d69e89ebd608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a608f8e-0e64-42a6-8e5e-0c7eb8f6ce34",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c40dbf-63f7-4790-bf74-81dfd93976d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ddf4b4-2ac5-465c-a433-5d7ffedcc371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68358035-6c97-4f52-85c6-6ac687867b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "44af9893-ff34-4f99-acdf-25a0e4d1c630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628511f4-fe7c-45f4-b4b3-b700e5b8a0dc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31d9316-9b8b-4e8d-8dc4-7192f3c10d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4bd025-a0ab-4a30-b8d8-83936389d325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a664d485-561f-41b5-9350-e5b517f932ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "27acc2e8-abca-408b-b16f-acea15fa27f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ee6069-2146-4cf9-9a1c-fb12edae0ed6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f19b85b-c06d-46dc-badd-b6308b7d5466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6405a98e-7233-470b-b561-4ad61a25f539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7df17c-3fd8-434a-a49e-38b528268bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad9a94a-2a6a-45cc-af30-81f81c7e3132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072c03bf-4036-4dc9-b8d4-29f8092fd3ed",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b861e23b-21fb-4125-b38b-cb1c2d930dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40082cf-a412-46ef-ae9f-7e5f0a26a242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160e7a89-bbec-4b17-83bb-163745220a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2f2148-b677-40d3-8016-12f55521f747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25be3f5d-5459-4fa8-bfcf-3a3f505c6324",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8a3147-50f1-4be0-9eec-b0a85246f211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1934c6-ee24-49ab-ab33-02b702d7b9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629d59c2-1acd-4531-8b6f-3ed38c014c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b02eb2cb-585f-4271-93d0-f34e13e600aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d684f07-d2bc-4fe8-89cc-edacf2478654",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e054e533-7e84-4283-abc7-3961b2f52347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a72072f-4140-4a65-af45-a87fef324743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7295071-858b-4da4-9bc7-01a0ba343c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41b8ef7-1bdb-404d-a565-8dacea3372fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75da3ac8-380c-4c50-8d70-944d7e809a9a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679ff4b8-4669-4573-8a2f-f2fcbcefef62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce28fbe-dcc1-41cc-9056-16218788d898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8618bb12-02d6-485b-bde6-c68426ee5817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5078ce52-4463-4733-90e7-2b9b1bc210c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525bfeb9-45d7-4423-90e4-4da6c9470efe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a7a69-609e-49e7-8577-e661fcabbedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d02dcd-88d5-49a4-9942-cf112c09a7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ac0d16-bf58-49ef-a12e-fa1355a2ccec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea444291-80f9-45c1-abee-eba63046436d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2446c9ca-f1a6-4044-99c9-e3f44d2e1c7a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aa9962-e442-4a79-8cc0-775a37a477af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b0a871-2b8d-431a-9f7a-ab3fb16b15ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc00da9-9c6a-4e0f-ba1b-4329d57d748e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f13e062-dda7-48db-a8d7-0552ca55aa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247b3bb1-3cfd-4d83-82db-bb5103f08c70",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdf7438-5794-4a5f-b561-e88cc7e91783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16dba24a-b1ff-40d1-919a-51a0bb5df95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362ea40d-8042-4dc1-a679-647181616897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6856b773-3fe6-4ae5-aec6-fe643d7e61d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d52c3c-505c-4e9f-8407-226dea5c04eb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2536245d-2cd9-4b2c-9ae3-e626190eeb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713b7781-ff82-4620-a9fd-8fb03b7c6775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a7b686-a050-42da-83d3-063fcea102f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf62a56d-a25a-4749-bd52-3f35e63018f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fc084c-1974-4c24-9792-6d048da4603a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796b78e5-b67b-48d0-b328-7198cc3388cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ec0a24-8b6a-4080-bbc2-60fc66f597e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f21fc3-5686-4764-8559-cc183c723309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0592d558-33b5-4252-9a07-051a95efe5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1751564f-51e5-4c11-a256-151b3b290aa8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dcf76e-fa09-4b8c-9341-d1e95f84d6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a0ba78-c759-499f-86aa-59ebf2a252b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934a8a28-d698-47a9-9fdf-1b7d2deca880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ef8be1-822f-4339-b36c-a1701aaccac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc517ce-fa5e-4be6-87f0-07cc1f3fbec8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405b6ea4-c9ca-4ded-ac36-a9ba82c44d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3d896b-7de1-445a-9b16-65cb9aed880a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4a4b51-79c0-4c27-939e-a0a7d4fe9ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb57d0a7-b6e9-467d-9448-9e9a9daefdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2ba467-c099-4e2c-ad35-f6355d545369",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f6aefe-3397-4529-a2cd-308386ac1980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4faf9c4-ba6d-4e65-947f-1d5da1d9c372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec565b48-c937-427b-81d3-a443b1bbeaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd62e69-1028-4dec-a367-5736fa921e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a17fb2-4009-40ed-9d26-b9c60fb2b08e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7fa01e-4068-4d17-8ce6-4a9fb8caffee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0642c89-c083-424f-b8a2-5ebb18805ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07b9ca9-9fa8-4ee4-a024-6b29705cb369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86a77b7-056c-4f17-b3ee-464b5d5d0e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4711a167-0e62-45e7-93cd-72cc231d4814",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5de86b-e7c2-4cc2-ad1a-ce0b136c0d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dc40b6-4826-4eab-b354-7aa460cbf435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8395dc-a13e-40df-9e1f-abfb8e78ae6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd1c0f30-67a1-484f-8873-c1448c7a38c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4afafc1-2024-43c3-8dde-2dad5ace533d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcff5fb-b8cc-4187-ad94-adec87a57274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4870ce-a2b2-4aaf-9e4f-d929b5425c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d709f45-67e9-4bdc-a983-d6ed03b6e680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71de4eda-72bd-4ab4-9c69-d1d9291edc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d8c66b-8d83-41a7-901a-c2a28fc39177",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4006c97a-a89b-4209-8b9a-0f398aaafb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8436a2-900a-491d-a6f9-dc8e3e57015c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5395456b-d050-40b8-b0d5-2ce31bddb5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0163d261-4ac3-4355-9450-58bcd73121de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c548bdc4-3c35-49d8-b17b-40bacd99c7c2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89602524-e7b8-4136-815f-a684d1d24613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a019b951-f920-4e8c-bfb8-3a6ca95dbc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785f58d4-cb06-42f3-8f23-95fc33055e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79544f59-f929-4933-92e6-3863e706930c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f274ced5-fb66-41e7-baea-dda289d51d97",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41edc6d3-054d-4c8b-a189-52647321f740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54660a8-552f-45b3-89a3-9a99c6d86cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ca047a-d02e-4cd5-b87b-6cf303041873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6d22b6-504f-4379-b613-8bc0eb023f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4123b5-d2f9-4653-b746-c162a96bcf8d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9fd5c5-c8b9-44de-82f7-daaaee94b2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db513d71-f06e-4139-b706-edf4e7edbf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ee6bd-943e-41b2-bc75-c7e6329f2a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8647e043-a9e5-4dc4-b15a-e50ef8ed2f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5eda3cd-aa90-42a5-af61-b56a041a1807",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e842a12f-21a9-4b46-8876-ec66f15702cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39cf2b9-aeab-4783-9eb5-adf3bf553a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3577182f-0b5c-45ab-95df-7f2681f9ad95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "905ca8f2-8c33-47f9-b8a8-408d3720074e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df9d6e2-e1c2-4648-bf13-00ddce915171",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b05028-f519-4089-92d0-4de9e8ea8ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bcd57c-35f0-454b-baa9-e3abbd027dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39031652-fb1a-4342-bab7-530c4fc01101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b086ee9a-497c-4156-84d5-812ae4a1f5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d13e7c-e750-486b-9215-42d04bb965a7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7342c1-1435-42b9-affe-c6acaa6cba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3ca158-d197-48d0-9db2-8b050d41705d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6f0930-bc53-48a1-a3f4-5121dec457c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "756898e7-4c7a-46e5-85ab-bf76da56757a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b1859a-8367-4626-9e27-254fb71863bd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d690feb-4c1b-486c-886d-2b0527a21c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbff9e2-9c71-4f97-8fcd-a2153ace275f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db64e9ce-fb12-48e5-b6e8-b27bcbf152f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e476f22-2b26-4583-a556-97ff47aa54a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2927b0-31cf-4311-8e48-dd4f8b35f392",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5193205-2fca-47b1-96bd-c1e6db4267b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f792cc-2c9e-4605-94ff-5f34419097d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2d9131-2b7c-4fe3-a082-5807d5cb40e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a15a929-bc0f-4eac-88cc-e0f0266a7c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1431c1-03e8-4b8f-8f02-e76d489a90e8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e490b6-01ea-46e9-aa51-2a9c0145bbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c36ae2-c354-4751-8190-6ee9f263bc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc56dab-cb4c-484e-bafc-f9f11b44b1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bae73fd-3809-40e8-b2c7-27961761f3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460563d6-e7de-4d1f-b54f-3441e9617e98",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf74ff3-cfff-40d5-8ac5-eb2721840039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97ae7bd-811a-48c9-b5c0-cd713acd6bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ba8677-6601-4e17-b9de-4a26c11ba469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7aa757-9821-4324-a896-382aee531e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc37f61-5465-4864-ab06-21572405d6c2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e69486-34c9-4372-a31e-5f91507bb3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8bdb25-b101-4bd6-b603-c01339402abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a324ba20-aa07-4c8a-a4de-717f2d9a4975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "61df0ee7-6246-43c3-a886-3e437dfcc6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f62408-9de0-4926-b190-88434e998f87",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6df1205-5fc7-4f56-b0cd-3778a65b1cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a99944c-eb38-4c90-9b71-170988139833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa63f64-21eb-4401-8e02-2144414a1fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "65a1bcda-2587-4afe-bb3b-9147026ef6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa57e448-e69b-472f-ad3a-cabbc839eb85",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e193c0b-7455-4a6b-966b-129446e11c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "98e5a4c8-f129-426e-be60-f7e3934f978b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6b7024-5159-4066-9278-9b5669713ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d98b0cfd-4d1a-4607-9c21-f62c0b0273c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf643d26-367d-4a26-8da9-fe7791898260",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bee0c44b-cb11-473b-9314-18a4828c1a96",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f025e102-bfd9-43d7-a70b-425e4ed9f363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00074892-9017-45bc-a3f8-d83d5eaa62d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa72bdb-1447-4687-bd34-0491b0a6bbf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f0cf845-5579-4f5c-b417-3bf9b0d3549d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03266d67-206e-45de-aa9d-be147a9fe5ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b8044ae-d3a9-4d3e-ad3b-72682e4e7844"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87fa135f-48cd-401f-8345-6bd4c16dcb61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9802c5a5-c632-42dd-8869-6fd641d38ba4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26b37dac-9626-4587-9e40-5dc9b274f23d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "859de61c-ef23-4869-8e44-893288bfa011"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e214c235-e585-404f-9b95-e42347173fef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72704f39-b008-4216-ac7f-9eb3d27366bb"
                }
              }
            ]
          },
          {
            "id": "5642451e-b810-49e5-af25-1753fdbbfccb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c4c8ebf0-6a0a-4dcc-a057-8231ba516626",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "22f339bd-bf31-472d-a9ed-a154f5a494fe",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf51385-661b-4a0c-a0a0-7792caa9a520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c96b6f97-a57f-4092-b920-88b1b18a71a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f801b320-cf68-4bc4-9924-bf5e907daed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bb643e-49c3-4322-a32a-9cf0d7ffcb00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4aa128e0-0afc-4fcc-8130-fe1d202a3962",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27349617-b945-4583-b674-f8a3557c5a71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e9d2080-d78e-4b2f-9c9a-857d5be9bfca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1321411f-b878-4d42-b25a-f17792c1ba64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48936a99-76d7-4828-a1d2-f2c4912210c0"
                    }
                  }
                ]
              },
              {
                "id": "3bffef5e-ea80-4f23-87c1-fa013cad9c22",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cd6d8f8-3b7d-4064-8dee-3d5470cd23a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "628d7e13-b680-4a4e-8aff-fd7d53ddd508"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "438bfc3c-e416-4038-81a7-bf96eb271053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1873b60-60cb-4a5f-b072-f7d33a96e985"
                    }
                  }
                ]
              },
              {
                "id": "3bb40e78-d7cb-4b3c-95b2-8de6d1fca72e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0b65e29-86f4-4684-99ae-029bbb7187ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f2a157a-2d7c-42c9-9d2b-40dc2eb68bc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a221d8f-f32d-4f5e-9f34-86dc7c7ed757",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d245a3d4-bb40-471e-a893-e62857fd8d76"
                    }
                  }
                ]
              },
              {
                "id": "dae0d72f-ba47-4c0d-bf27-983324c202b2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b053111-4bae-41f2-b370-d26ffc8a944a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa9367fc-7b07-4c03-8bfa-725c942a6fcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccfd289a-8600-4bfd-87c4-460ee5d2c2e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d9455ae7-2f77-42bd-845c-6de0039c5134"
                    }
                  }
                ]
              },
              {
                "id": "8494d2ff-0f27-4a5a-89a9-a5f9ca549cf0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02634ecd-dd8e-4a0b-a139-7e286e545ae9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e1124c1-1ca5-4306-97e9-c61bf88f398b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8edb2f5e-c115-416b-89f1-f5bf82af1847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "45af85f7-e47c-4530-8303-c5b44a6f38cf"
                    }
                  }
                ]
              },
              {
                "id": "b9b00246-5002-4d21-adc9-36ff115eb647",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba43d9be-3c20-48ff-b294-60621226b743",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1ccde72-e44c-42db-8bfb-205f3974d06e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f393b67-1b2d-4cf1-a79e-613aa505b716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f21f927a-ee8f-4bf6-ba8a-6e20247b8a71"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f06e04ac-c845-478e-80e4-f959bf3611da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c69cfb5-f34d-4290-8bf1-32061d866b28"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "048f4049-517d-4e76-8fd3-a40629fae6b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53d16b93-c04b-4fa8-8661-378de329e553"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a3232c7-b950-4ce1-9f86-79a780726d8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "51c813d7-2941-4934-9b92-2daf429fb594"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b97dcd30-52ef-47bd-a68a-ed101b6d7ab9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5cb06fd-792b-4bf3-abcc-dfc92e4dfeba"
            }
          }
        ]
      },
      {
        "id": "d41eb3e4-89c5-421a-bcd7-09eeed875d25",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "48860064-64ee-484a-b812-a7e29d1150e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dedf4721-a881-49bb-b248-d99d9cbd1883",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d875529-c71d-45fb-8ae5-6f3c17431560",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f368f9fe-599e-46a4-b497-a178111d8cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1178277d-dba7-4f93-aafe-c6a372d46d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa32a7ed-7da5-4703-8edf-a9887f88e322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5591c936-d1bb-4f09-9555-fb9c7df4c298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608d9a9b-b5f9-4d40-a20a-4624286ed342",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7878c28-1d40-4323-bb41-a3e6b49489c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26101a83-3ad6-4940-9565-c9385d71fd1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ed650d-910e-440d-858a-3af827769e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd88913-3e5d-4f71-be48-fc0c87dec39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992655a1-2fcb-47c3-addb-e9831a26c6d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a72c6d-fae5-407c-a1c9-45ccf2edc8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a773b93-eefa-42a4-918f-6b641b829763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec99921-5088-42d6-a7ac-9e44d8e95201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "139eb141-65bf-4ea4-a3bd-c633429b50b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c06d74-cb03-433c-822e-5592bb7b0312",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6d3069-b12f-4809-a69b-91d05eb9677c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670bae55-b971-47f2-b14a-a395d3117dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c64c6b-de5e-49f4-bf0f-64fe6ddbd525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1a45e0-9b2a-4010-a2c5-d5608944bfcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faa0b7c-5919-4cba-9539-32c6f5126c31",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba099199-a41e-4275-8626-a0c047e08d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f692eb-031f-4487-8f9c-04c1d66a85a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff39c56d-ba2b-4c91-8d85-8941ecac8cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4dc1cb-9eed-46ac-953b-22cb2ece45b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8ee392-29d6-4cdb-a258-1e83fc541661",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc58e73-0698-49d1-8aee-cdeb3ebe4411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1ce662-5554-49d4-a5c6-08ce1be81cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ee5cd7-f487-4901-8106-e1e6066e8375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "482d7f1a-94f4-42e3-9751-ca2897f2261c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc36808b-c40a-43af-87d2-3ae323e47434",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a991e62-340e-4c52-8938-6718cfffb456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ffb8123-0a06-4d61-982f-ab92ebd54866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e309eb-9aee-4817-a337-0dfe3b673477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2d48bd-3823-4002-9323-d0170bfd50b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738f4b7f-4f80-4db1-a25f-c763c7fe7c56",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccdd5bf-e1c2-4be6-9063-90d69d39e738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8fc4aa-617b-4c59-b066-e14dfa155b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f4c216-7e1c-4f0a-af32-75ba913b2921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdced597-a805-4232-bd4e-b9eeb7b54cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae84e479-9de3-470b-a2f5-c4e84997cf78",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624bd479-39f6-4f7b-9613-f30c65f6163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b326ffe3-daf2-4638-98a9-903af6c35308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a6d001-cfc1-4172-9bc5-bf11ce68524b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6e4d6a-4b2a-49ef-ba7b-efc04f39f318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ffbd4b-9fd0-4752-807b-bd40344677d7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b38815-ac06-49af-9b71-8634d547ac4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e006098-5f67-47b6-9aa1-f905f81462f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0f4f24-3fb9-4b21-8f09-cdddfe0d9edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2f6409-c1d7-463f-b3dc-eb6a81409f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b583b000-973c-4b43-93da-449c7ef6f81d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add79012-b0fd-4029-8ca1-8959751a193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671e6ab4-cb04-4499-ae35-e804428ddd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddceb2f-9010-41c6-9a65-84d9ba138045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a7e31e-e813-4cfd-ac83-10b600e0dfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e00819-1535-4d2b-91b5-8ddaa9268a66",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a95294a-77a2-437f-b0fb-131f086bd32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7102575-25b9-4bc6-803c-eef0ab931737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fa4f1b-4989-4def-a3c1-f3b50cd12117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fb8aa9-bbdc-434e-9de6-7dc2ff241336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e89bd6-57b7-423e-8aee-f64cc592876d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc1418c-20f7-4e5c-8759-d24fd1fd2e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348f4d9d-dfc6-4574-bb67-d131f9b396ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba948476-fef8-4d22-9bdd-46d48f0b5252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b94469-727b-4122-afe8-cc7f780fe36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae7b0ea-335a-408c-9875-4a3480f1bc81",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdccb9b-c039-428a-97d8-1bca80233b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f290f3c-75de-483d-a797-e6a301036886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c78744-5c17-4106-a84e-06e4aa2861a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "909dcbad-5aa5-4455-9f78-02944f703260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f7614f-7946-440a-ba40-2af0f0d5357e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70d2853-2e23-4e4a-b3f4-83e119c27ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedc2534-395e-462d-85d4-a9245969dd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07891618-ccf1-4d9d-95ee-4a27eb08be04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b617c25a-5a84-4b01-ae18-0db3f467ecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedee294-80f6-453a-9206-c99eda952817",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d92571d-24bd-4f01-ab00-1067e3c3764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fde8f2-7f56-4ab9-a250-8e28830f66a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b48763-99e0-42f4-b6d3-a3a78f34221c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba66a1f4-3687-4b5e-a0c2-6ac08af3c356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bbaa04-fd10-48ba-9d6b-889e74dd4132",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e997eb1-62c1-4b55-b716-872194b8f122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5144f878-3d9f-4721-a3b0-27c56a89bec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61786688-0260-462e-92f4-0cf4ecf39aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "599e7bef-388b-46b2-8b17-3f482784397c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7e75cf-c339-44f1-ade3-3811cf364873",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c092675b-82fe-448b-a06c-de1d8e1ce7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ac53a5-697d-4eb5-9e60-24e406353660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcae106e-1999-4644-aa07-e1914e6f2fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e43d9c-8947-4c05-ac5a-6a28a8c4a350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05e42a4-f174-4c71-a550-d310229d5808",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7d055d-106b-47cf-a6c9-9c0f2cda5bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350950c6-2e52-45b2-8c46-bf2bf080a56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ec8e1-c767-4338-aaee-63eb9c80177d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "103c1198-2588-420d-ab0b-1335f0e82da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fce351-1a13-4a5e-8548-409d147b36e7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85ef394-8319-4576-b05d-8d95eb8f4c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b401e0b-b258-4487-8382-e64f8951dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb31a96-50ea-4206-a2db-842294b48c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a872b1-ff3a-4793-b9c1-6172871d0634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d885f0-330b-4317-a38c-5419825f2a33",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aabfbc-2ef7-4a18-8bd1-010a448ab0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fa225a-c14f-4c50-8321-6b268301cc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f14c3f6-fb24-4601-b167-1b73d95194c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d2054d-9b15-4c0f-b16e-78a0bee999f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef252e7-b3e1-4605-8a65-27239abe139c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9f44c6-067a-41cf-9335-5f92c640b899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f9659b-99bb-4999-8b82-89946a166e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f66ad0a-d6b5-4d58-8afa-45c830172634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d44b532-0975-4922-a45c-d727e112497e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacc01d4-d51c-44de-97b2-8ff3ed11d036",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a709418a-39b7-4816-9041-a1fedec2ddd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670b565b-07e8-46d3-84d6-4c220ecff5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3269c95-e23e-4b7a-8074-134af19170bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85144260-f869-430c-82d9-dc4a55cda998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5533e354-78f8-4c49-8da1-b1feabd788b6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a129c9-425f-4254-a3ca-77dec566a559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684d7e01-d1f8-42d3-9c97-a6d0b938d5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb1ac0f-fab5-462f-8d4a-98fb61968a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1294542-05a2-48da-a564-7b178b5ca3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7bfd6-8b1c-4e09-a153-cda099076f67",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b05716-480e-4025-8c94-b9c82fe23d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da73ab8-9ba4-4a3c-9d9d-6c0cf1f3c55d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3192c1d8-9826-4646-8604-643a20283e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4077412-7640-49b9-b0a9-6da74eaaf313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a7f6d0-3c05-4bd7-8d12-30ee82b0e8cf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37c6ef4-c182-412b-9e09-248ac946953b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e98b37-be3a-4eff-b951-82522c44891a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1db297-1751-4cf6-abad-d575d964e61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a548ed1c-e656-46df-a4a7-6aea306eb884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8776ae40-a8ff-4750-8d13-999f34ac520e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53584cd-4aa4-40cb-b1ea-b015296dfb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ef454b-fd4e-4779-944c-2dd54c8aab62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3b277c-3192-44e5-8173-2b6176b8d1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f105bf-d915-4da1-b95f-50ddaabb9176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2f589b-324e-430d-a78b-e9ea5cae6911",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e397d540-74a9-44b3-af66-5de9c0e3f68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79efb76-842c-4aeb-acb3-b9f1fb806742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246752df-c99d-401e-87ac-35cde00a67f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a638b11c-7ec0-444e-b6e5-9f2eeb550c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fafbd47-32d0-42ed-9bc0-de4ad6ea5972",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e6ac58-df1c-4cbd-8c1e-d05127184274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70928fe9-b75b-43f3-ba49-5ec49083e481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a74418-54ed-4c21-bfb6-14ee4baad657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8334ad-b361-42e4-a5e5-4fa692f0138f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3fb082-34e1-4250-8506-ae1901d20a52",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b063b69f-721c-4af9-8f3d-77da3c45ba6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1760cfdf-b3a5-4ca2-b05a-f6154f17142c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f559574-3c0e-47b2-bf61-8d1d7d013c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3474dd-e83f-4041-9cd6-609107165da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd431b84-b9b5-4c42-90e1-f2613b52706b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f814223-dc1a-428b-b0e5-3ac1f66e4066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399f73ee-6706-4ef7-a157-bbc14347cdbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1176d96d-0899-4c62-ae18-7cb272db455c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d48f37-268d-4f1d-a0a2-af41f864c05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a6d1f4-1313-4d29-96c3-b3390dc02b91",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d096cf52-f800-447e-95c6-860b7c78ddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fda743-b9ff-48e4-aae1-4869e09f4cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9de6a24-89d6-4f07-a191-5bf0ac84f30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe36a43-0577-4238-91d6-2d2a8831ed97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de846f8-1f82-4eef-b905-0b56a0210cff",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbb7c22-a67f-472b-b9b0-2935c76a4764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ffd432-7850-45a7-a105-743dd7bbba61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee0f9a3-4ba1-47f5-b781-b3f9c1a842e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4227cbcf-1093-4d0f-bfe0-f56f12e0e835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581fd883-8000-4725-9a6b-c4ade9d20af7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3556213f-3f2d-434e-be0f-3fe45bf05b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec37dc7-234c-4027-ba35-06d4e95b3f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77748f68-4495-4bed-b5a8-757f485110d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbc40a1-0898-4ffe-b351-be1f284790ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135e3ea1-0c6f-4434-b1fb-7664e1f96363",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dad3065-3db3-433c-860f-28bc74143818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71fb55f-81c1-44ff-8dba-18d70110f061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe62d96-7c22-4b0e-bf48-f8d7819a91ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e34df88-a2f6-4d16-acdf-cac08059ef89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55553029-30e1-4e6a-b717-bd83358b63da",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aea6952-3480-465c-95d0-e0e85ac1e1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a245ef8-9439-4ace-ad15-430f28ae0d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8493041-5e75-4635-bceb-6aa87e53f453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f719df-33c3-4c9d-9ac4-5713e7b48a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c46e62-0334-4c1d-98e7-1ad79bb4e1ec",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def8cc48-1be0-40a0-b5d9-54e7ee572ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b35d8a-162a-4639-a33a-18fc0a29aa1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23b7f40-bfea-44b2-bb3e-873a500d9753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07aecdf2-deea-4866-8f07-4e3a6758dffa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bfca246a-3867-4b2c-9b80-434b0863d369",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac7097dd-21ea-4d9a-8396-b425d3a3adca",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00867008-5e5c-4cba-a191-50111888aa27",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5a257dbc-332c-438a-bb3b-3a6f348b80a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e10545-55f2-4943-a618-7db279e14c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50f4edf5-cad1-44d6-8a17-b27eb98ca060"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c84e0de9-213c-459a-8d85-dd27acbb7d70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9811bbf5-579a-4ab5-9d15-8723f4f699fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1208c2cd-c22c-4ad4-8177-973bd49534de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3ab612e-3663-4a39-84ba-0637c191930d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "976b7dad-907d-4d8f-8422-2803122b3a89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6bffb794-6f64-4abb-8a49-f8ac678595b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a5683b6-3d99-46f5-a829-2cc4064fa14b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11aaa314-1219-4484-b2e1-f0c7e6fa7769"
            }
          }
        ]
      },
      {
        "id": "2c79440d-bf5b-4452-9aed-4282c3603725",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4d36fa5f-fd2a-4a80-9786-e98dcf1d3d0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "753dd966-70e3-47ad-8a16-aa117fa2d081",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39506a97-9181-4636-a495-7a1e3f856148",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da05a7b-f89b-4f6b-b32b-8147ad1e3a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb02516d-18de-4b82-b71d-9f40fa41d223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccddc090-53b6-4108-a501-1d34b907f2c2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e7f032-21b6-4315-91f9-0405ccc92b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92e15f1-6aac-40ec-b2cf-baebd3ae1f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537a2c3c-a06f-4da0-82be-21ca1bc031ae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fc8b8a-bfb8-4692-a34b-aa13ca9082f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb9f7ac-0cc0-449d-911c-dc8923deb604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa9d2e9-de30-4904-9a40-ef8a6af5d829",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9be012b-7383-460c-9a12-767b5122fca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95ef620-b993-4203-ae79-55313c801630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46eecdf-1446-4f57-b6ab-d37ff85c9ed5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c6216b-b0ad-46f8-a5cc-dc8306c70f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65284f2e-a53b-4c00-aebb-8dba6a3810da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbbf896-9b95-4974-b25e-a973cb5036d9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578159d6-84cf-4abb-8429-a26411b6462c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209f6686-1259-4de6-82eb-0a69a646af8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8da24dc-c624-45ae-b4ce-2253b67af7ae",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a53f4b-f8f4-4a2e-86c9-7f97bba51a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dee2dc-8c48-4bfb-bb57-4d9ade30684a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723b8f91-bebb-4140-a136-3da6274a91bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a03635-8bc0-4d62-a251-a3f60479ee9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11c7dad-bddb-4400-89ae-1b2d8716eef6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d33288-827c-4112-928e-092d30e02956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e7dc86-fe6e-4c40-b50c-05a98cedd24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af101a-26f4-4b0f-ad29-5616065d2283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484b397c-19ec-4c87-822f-f45f8c5571c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835004b5-160a-477d-a326-f9aa0ac78d2f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4bc80d-6807-4e09-b116-cb58fda20c8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c995542a-e348-42a6-9108-3dc4b06f14cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d24176-2acc-4ac0-bf24-8f757a487668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f38b7e1-0755-4965-bfff-cf0008469ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866f51e4-aaeb-4326-8803-faafbd2c9ac5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19bfba3-aabf-4e78-8e6a-2d6a7f4311cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7670f5fe-be24-456b-b3a6-f515a59acddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a62f26-01fe-4951-bb6b-570e5b6e9987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab842c0-4c01-4676-b5d1-40cb5dc54119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0250ea95-a2d5-4605-b7d4-e0ccb707b694",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d29355a-555a-41ca-8866-908e75c26d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce0a655-e2da-4644-9538-7dd95c4f9240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf41f874-4e6a-46c9-bff7-332cc400f9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5bfc92-da65-4549-a328-55990f0ab2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20aeabca-fc54-40ab-87f3-418650c05098",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36881aa5-e614-4853-a175-03ac7c75a010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39051bb-410d-4ac5-be4a-3a7a4928573d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd371b4d-5477-4d48-95c9-37bd3f185183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c9ef3d-bbc0-4caf-86ac-1e0015a17423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316646ab-c85b-406e-91f7-889e079c7987",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19feecd-8ef6-4247-ac32-2ff0ff2db516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f257993a-c90a-493a-b76b-8350f9035e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0876f3f-1f40-40c9-b65b-493462388092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871a7dd2-44e3-4379-a5fe-7f7814ca1bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97f52fe-67a1-44e8-9796-45d883724822",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad99ec4e-5d7a-4973-a717-287871f2fe9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f71d7178-7fdc-4725-80fd-1be159add9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a81f6f-c709-439e-bf1d-4416b42918be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9ecf76-8415-45f0-9d96-62affe100ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884ee10f-8db8-4391-8d74-e6c846e6ab8e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32fa0c9-0bac-4fcb-9397-58b15a5c9121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55763599-05f7-40ac-86e5-6653a53a4000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd172fb-8097-4713-878a-ad9a968d7a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30182f40-c31a-47cf-a991-eb9c8f1060e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8033005-2e20-47ca-abde-1ae5bae6cd5f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422caedb-f5cd-4410-902c-ef32a0b25626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb75428a-94be-47f8-8701-940dfebc23a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db461170-569b-448f-ad86-74ebe6bfeff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652a6c8f-86f4-4732-a3b2-386a3e7af6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db74277-0fbc-4929-86c6-b1727a9d841b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d38314-dac0-45ad-8aa7-d26566856083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ac5b8f-9efb-4d38-916a-68b0c73430a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1431a246-aa38-4111-b4f7-34d2dedfd1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e643f7dc-843c-4158-b10e-c0dc3f0b2a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8c3788-993a-4c0b-927a-ca45d1507257",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17c8c58-eaf5-44aa-955d-298caa5f6f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28213bf0-8192-40a5-952a-f84a40bea238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfcb4b6-da22-4a1c-8f78-4d7dfa7e1a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb9f168-0d5f-49ab-85fc-44af943f81be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0acc4ac-1e89-4be8-8271-1ca48a3ea89d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3115fc9-8c62-4576-b6df-09b09cf869f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42b535c-c876-4f58-a512-877980df02e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f2b293-b237-44ba-9215-36a5e2629c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac88f9b-ed94-4d60-8e77-13a069c6323f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8efa016-3806-427f-850a-b5d9469c6aba",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e07495a-5a62-47cd-a807-9f688a770638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a2e5b4-69c2-4670-b2a5-6c5768865a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddaa98a-01ee-486c-b9b1-66aa60ffa96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e804b7-6756-4b4a-a89d-3bb94da07d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e7b35d-a6a6-4b77-aff2-54d7f5769a63",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4939f83e-800f-4b5c-a358-90e832fb851b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14482097-7b9c-4105-8bc1-2abc38efa58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42876579-9bdb-46f8-a451-db37d9a16529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7309e03e-c30b-4aa7-9e05-fd0f00115d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f6b8ea-470a-42a5-a857-eec35b761c03",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1cc3bd-e8de-4c29-9ddd-b51f0492f28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9c5b0f-665d-4e5c-8ee5-83aed5158373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b478179-ae6e-4e78-a03d-7a5cace829e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317b70da-dc07-41f0-b5b6-8a15feaacff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61789acb-970b-40a8-a09a-e3f1d4b970da",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050e7619-7f51-4fa4-9907-d7e7e3fc3f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d449e3-90b9-4d85-ba0e-efaaf5ef98b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79bae8a-869b-4010-b6f1-05e7d5542ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792312ed-6fba-41f8-8dcc-2847e6444131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdedd5d-e3fa-4ae3-a51b-00705a58deba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3560ae53-ff5c-4825-8178-b414e9e37153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d787e30-8aad-44a7-a250-3f92a9ad5125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c633cc5-8601-49b3-a739-3c3bb1359448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0905d6fa-ee29-4446-9c85-ac5afab87ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1472ac08-a040-4c19-9648-1bd0f5d5f276",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537ae158-05d9-4d6f-8fcc-3953fb951ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c698484-f109-43f9-a02b-e19203e77125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0272ff-ecf7-4f45-86a4-205614c623a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65c15b8-e950-4564-afa1-8587e96eebad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0de34b-4133-4599-b381-e2eddd280bc9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3128d8f8-55f2-4f2a-9513-fbf58131b259",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "253dc6d5-66e4-4201-827c-170e8c115155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29748428-cc93-47c6-8538-b3b62008ba5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839326d4-3a46-4cdb-a465-32b4cd489ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e625c999-b92b-43b4-a53b-718b60c20424",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933db3d8-af10-4798-955c-600b8228286b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae52a0d-bc70-4087-ab2d-0842338be571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438885db-14a6-4e55-86cb-341c4d16615f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1ef923-ec1e-43fb-9ce0-b2880e4e342c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cb9181-6d46-4177-a5ca-77dd89943e65",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082f591c-0300-4bc4-a3c4-4af90563363d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae17f18-22a6-4f18-9573-b65fda07d0a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0904ef54-7014-4a62-8ebb-08ba9ecaa1aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97ed7cb-f825-43b1-a93d-bff206f723e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19be3184-9930-473c-8d2b-2599a51471e1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3505bc47-51b2-49a2-bcf1-583dafa3cb59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269a4db0-15e7-40ff-b2c6-a93dc48adda1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d766fb08-7fb2-410b-a728-26ed1f4f4e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45a6558-d916-4a58-87c4-13f081d1bbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41406c8-db6f-4908-97fe-758ed8b5973f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dc24d5-c756-4ad7-89a2-b3507e8a9367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4f5fbb8-d731-46b4-9060-408c2ecce715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddecf02-0033-41e7-aab1-f072a23b1456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311c1d13-ef9b-4602-a3fc-b1f83eb9d246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a34ab0-6245-4551-a2fb-cb03c624df2a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955e9fa6-d4a2-45d1-87ba-fac7d784b573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e3dbc3-926c-4c6d-834d-7a4a5b69f18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4747d1ff-aa07-4773-8880-4b2178eb45be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1108de4-fba2-49e1-b59a-0f90389d1c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b001408d-d1ab-46cd-85e8-ac88e5581d86",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a05e85-f461-4b48-8727-e58340998534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "802ca76c-cb92-400a-8ea9-1d23ff344d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb80b1a-b7a7-4aa3-b366-5da696d5bb1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5fa73c-f5ad-4570-81da-1395dfea5a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d7db66-03c5-433a-a270-b4545098e8be",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88ad6c6-39fa-42fd-a3c4-ab501c3234c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c97eaf2-7797-4ff4-95fe-e43d70156a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a72b8e-9579-4e03-868b-a1fa8b2b1688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0f0581-fe99-40f8-a359-0b9da7b70729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538e3acf-af54-4d26-90a3-5508e46dc7c8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06661bf3-3dcd-46dd-aa41-1ab1b5206ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff64e7f-cae0-4497-9c8d-31b9c52a247b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65416d15-4842-4278-a8ae-1d5378f6fb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b50ab8-3ef7-416f-a49e-0a1af770dbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a69a7f0-e26c-4fcf-ac8c-99647d0b8f2b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ecb834-9163-4fa3-bf5c-9be4ef72c0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2054bb-fdeb-4e02-b856-ddd2678f061f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacda4f6-4220-4b4c-b3d7-90d9c103a426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e77d3c-1e3c-47eb-a68e-3b0025f9de25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa5f3ea-2ac8-484c-9352-a10a27b3b4c5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a110b75a-1d67-494d-bf6c-2d42a26d0b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f118a81d-fe35-4705-aaa7-cbe2ee5e4629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c437240-885d-4cdb-b0dc-65a2f40059c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a1a277-9709-42c7-a555-3a6733557dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8867a3dc-eb0c-4871-b9ed-58da4d0fd11e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8a6465-7cf8-4485-bbfc-f3a60cce81e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52f1ffe-6b66-4233-a04d-2702be0d980e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676a6168-8f98-4b40-9d51-cea100791646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdf5b10-f208-4bb9-adaf-c14a51370e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4516a486-fde7-412c-a5c4-5dd631e1144b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f371fd6-5ef6-4cb6-ad0a-11043edde57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c602ff2a-6a7c-4de3-8e19-1cb02bf7d31c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffeed72-6de0-4cee-bf09-b8d216479bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27f7ea4-1379-4194-bb40-472419895dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7606c8c-0ff4-49d4-a826-66966805d629",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206f158d-fd04-4543-9762-56929619e9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7cae49-79a3-47a4-8e39-5f55ef27553f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f426c2-9c9c-4a38-a620-10cdef6a39f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdb31c7-1261-4e3a-a3f9-6406669a7df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba299ee-83a4-42b1-baba-80168495e088",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf353f8-5b7e-4422-854c-7291c5346f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce162606-b25c-4dd1-8b74-f7e1e9d86ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bfc49f-4128-4119-9673-62f381fdf0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c265da-dc0b-44b8-9fe9-ce6c35a86590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df88811-f545-42f0-a9cb-cc23e62487e0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529891bf-9402-464a-accb-e5d495f93480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8980b52-15ee-4007-9934-ff08b189d9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562160f0-933a-4d3d-8b03-72db9d5d8e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dac91b5-b11f-4009-94e2-fdde72470c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40f1039-8be0-4152-bb7f-e92c8c1ccb2a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fa4be0-97e8-4eaa-89bf-38630512f198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5836069-aaff-4f38-b601-155e9f5edb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd649dc-337e-48ce-819b-e9300291a787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05347439-7ab8-4397-b6b5-0c66f2362811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55db70-899e-4d13-968e-a9dd47a15511",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbf5b2b-1a6b-4eb9-a02d-84d6891d6acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d028500-bbe8-4481-8ef8-029d45bf8caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4456869-9f47-43be-a402-a42441508928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781b9955-1edf-4808-a970-b982e482645f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a8fae6-427b-49e8-83ca-1d8ed83757bc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c224c0cc-9d2a-406b-b75b-49e415f1700f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0767f8c-8b22-49c2-ad30-95445040a568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec31228-e7be-4add-b5d5-2a1dd340a254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36768e2e-4f81-4dd6-8a6b-c937f3c5e315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770735d3-e291-4005-9831-9696e71da718",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b2fb99-ef18-4f56-b160-29bc3cd8d657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243ec261-b8fe-4c1b-978a-3deaa4dde2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de7c7c9-57a1-47f8-88af-e8ee7772aff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b89d58-5e12-4266-8fd5-fc10369c8a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4dd90e-96cc-421e-8158-f95d5bedd24b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2c43f3-9203-4688-9266-8bfc76809d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e60759-6b6f-4748-b64a-6aeed8c51c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1eed704-dde9-4d2e-9e7c-120152686f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b15ade-a32e-4bfa-a3a0-b614ceaba92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b890c4-8b66-4f59-9d5b-8358e84a7a57",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead14586-07d0-4f1f-8237-f3fb80b21640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd88118-3385-432f-af51-a0889db1765f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db44ed06-641c-4956-80f9-5970e45d4c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6408eab-ac99-4067-a1e0-766697f55ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0d3829-d3d3-460d-a1cd-9563740abaef",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52aed6dc-b1da-4704-a249-cd9d45d7d15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea756cec-04c4-49c2-b762-680d53d922ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3f1f1c-6279-4ff6-923f-b9a9aa5c49fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6247772-629e-4800-b145-c07158decab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d2903c-106f-4e23-9f08-2a38a3a178e8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e74b6d7-f9af-4cf5-a244-81d938cb3b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b99fa5-c81a-43f8-a924-d704d6a3447a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484a16d5-4f0b-4532-95bb-496c907e8d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4751ba47-601f-42e8-b142-b0bcc056c844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86203acd-426a-4628-a792-e815f98cf55b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa04fe1-30d8-4898-8773-331cf8719cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0611aea1-060f-4208-b4c0-c67d4a80ab9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534c4669-1fa0-447c-8eaa-fd9513e3bd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c7b5d7-8446-4769-a5ab-2857bb8773f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72f4a34-80fc-4bc4-b886-8be34cc8bd3b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cb6af6-3313-47de-98e3-f7b2af01ba7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3056e41c-b2cf-47db-8eb1-27c94114b825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5307ac-1c03-4ff8-b990-563ba61a3b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1cacc7-68c7-4b4d-9168-e53e509631f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f97c0-626f-4622-b9f6-f7e1972ee13a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a9a0d6-880c-4ff6-9f64-aaf0861af9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fb6dca-32f5-42f2-a354-75d642ef6252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473c3297-a152-4fd5-9d3d-fa4a7979ec87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6fc6da-c6be-4e21-86b9-f0a291a8a774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6cb94a-cb5a-413d-bba7-3c100753f77f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22deec1b-597a-4385-8e4f-4280a5df075b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a786485-4a7e-425e-bccc-e29ffc485f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4326d547-31ec-4f68-9198-c42a6f47138b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0dd43e-b1e0-43ea-b368-5220bd81ee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeb441b-2b90-4d13-a2bc-ef3fdb589aa3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf60ee22-200c-4e87-ac8c-c90d9bb8baa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb93854-9729-41fa-8067-2e18e4775cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ad015-84f1-4af0-a91b-0f62d1143330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b0a714-f4c1-43fd-b9a2-709c829c5fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177622fa-0f0c-4afd-be73-1ec5e6e9e653",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a170839-1de1-4445-882d-928a3115756c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ada946d-2c2f-40e2-ad1f-556ffe186709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fce7bb0-97f9-433c-a35d-2457ffb2c273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e3c3ef-be30-4a59-a4e1-9cb1b376860d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5220f624-68cd-470c-afa0-144e586f102f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6804efb1-6d5a-4992-b440-cf700d5421da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8e00dc-f0d8-482f-a4cd-5583604daabe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94c899c-6727-46e1-9d92-a3e2fc13bb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9df470-44bd-4199-a999-1235afd4f89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da843bd6-32ce-4405-858e-bb00bfd9c591",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bb51fc-0662-44d5-9c82-c7112fc78895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e27cddd-e8bd-4612-8108-bdb1653c96b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eccbc8-cb69-4b4e-aca2-714ecfb5f3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8f06ed-6238-4ece-a5c4-4b7682b91e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2246f5-3a98-4b9f-9d2b-17aa80fc4fe7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e72a822-d3d0-487f-a134-4b248e02a4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08a5abf-afdf-4623-b1f2-8408ae462ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40c9063-d45e-486e-9b9f-7d75396fd98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16a4ef8-7c51-4bc0-b14c-82859ef7c84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89eb22f-8e47-4077-8a34-788df1859940",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994c30fd-ace5-41f7-a042-ae6cdba21948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a07c8ab-8798-45d6-bd06-385353de79df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79965a9-c2b2-4930-ad68-def7ea9d2d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e353b857-f322-49d9-a247-c010fb9e9589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06eed15e-a39d-426e-9598-cfd981351a4a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3ab4d0-c862-49c3-bb45-758d1e1004ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d292f01-8a66-48fc-bd5e-90f57fb071d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83e4d76-0e72-42f4-86cb-f135bfb7e140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea91036-7f2b-4a25-9801-d01e5ff5fc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c96a18-9e4a-4084-ad0c-6acd2fddfcac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6fe504-ced0-4443-a9f8-c408c65ff12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f83aded-a20a-4ee6-bfb2-eb13897f9e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f15960-7261-4013-8315-d8204befdd9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6429dc0-1faf-4ecc-b8a0-00e7207ee275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4924de5-dbf8-416f-a498-a3651c401828",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39de3bca-127a-4815-9f45-0c515fe13866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4736b8-1bff-4d7a-ad00-15c470b692d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b17683d-de07-429f-a2c8-65257fc7a7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4371b1-9712-4d8b-862d-44cc1a272da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44da7a22-abd4-4ef0-89ad-2efb8f278f59",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35256de-6c98-4e43-9107-9ddfd858972c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e00716-36ae-4b97-a727-f5ec92ef95f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a40bdc-d900-4531-8d64-33325c4e23c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475f1cc7-fbef-45d1-8821-d59c99d8a1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f404bec-3a74-48df-b8e0-05621eae496c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d91af0-d28e-46b0-bf9a-1b2b2d95499e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60c62bd-23a1-4194-870a-3a95432dd136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69821ca6-e8a6-49a4-94a5-c4b115fba85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2094af76-6b46-4a2b-b7eb-b951ea0b5b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54daaecd-e703-4ce5-9b02-d771b42113ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6638b75a-b236-42cc-ad56-a484210d3dfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11633e94-96b2-458b-8857-c94733b0cb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a18405-2bfa-4256-942a-d4b6e8ef6c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53a7079-d6a6-4de5-ba4e-1e84376c06d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2abb412-82f0-412f-9daf-6cdc254bc95c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5531ce-183e-4283-981b-15cbeffb698f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d49f135c-cbcb-4703-bc3d-d7749ad3ecfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1669fcb4-0a14-481c-a743-cfb772c1db94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86001a0-e29d-48c4-bdb8-ac9864a303d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef87600-791e-452f-be13-3cbac33ef9d1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231470b3-aa2a-4170-86d6-cb7e07a70d3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53c839d-983e-4034-b616-4db929f752f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fd1397-3666-4ee8-b7d9-443bcf352c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edd09a0-3f17-4de8-94fc-ad032941a504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bfc4f0-909a-40bf-b93f-0819bc012c72",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86720e2-b1b8-4e2d-b29f-57702a8275cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7929438-ab09-45db-9e46-c0a178ac4ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3504e6-8e46-4656-b920-c5e69d1d62f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93046576-27f8-4cc1-8f73-6291356c551f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602223aa-6022-473a-8739-6f138b3bd926",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88522632-a367-4bf5-b2a3-b2496f2996da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d798dda9-5ce7-4acb-a82e-feab63893dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a37acb-c750-426a-a4e7-bb9ffd482bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790e5738-ad06-4225-8965-4f602a8e1e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed657632-c7c3-4c90-8990-8b90f58deb62",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4df676-57fb-4edb-9f6c-cd67c190c678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "546e919e-283b-48d1-82dc-5fba6b6c6d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0762609-5e54-4264-92f0-534943bcd8ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49a9712-6540-4834-96d4-32bd8d2098e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b36fb76-3c7e-4905-8e32-642c585b72ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec578a09-ecb4-4be0-b9e4-2cd86e9ff4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5d679cd-f8c9-4ce6-8138-889b117df826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d93d521-373e-42bd-8016-76f7daf1cea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0246f0aa-adbd-4714-a0a5-a4c86a0290d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c4ce23-499b-4851-b0de-2cbceffb7e57",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f81e7a2-8c7f-465a-abd9-875d32222df5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97270604-7a8a-49b0-86d7-606ec4def374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e108c09-48d5-4a9a-a002-251cb7c86af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d786d27-55e4-4f5f-ad8e-ed346e91b3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697b4ea6-2f96-4d6d-9ec0-f7d18d86acd9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21504add-fae0-4ab7-90dc-d7c2cd71f750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d1895d-0114-4ca0-a66f-54e9b9fa34e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a187ad80-e045-41c7-a9c4-10eb765b41ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd137f8-8fed-45cc-9777-7e648c960bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd94a47-b879-4e19-8d1c-9b23daada9b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e8463b-a20c-4814-9ef1-c9307de949aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35b9b579-04ad-4281-aaa3-0c9ac84bf2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f9df93-b407-4c47-a182-a64a419ba601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e295aeb-b368-4374-bee1-76b860867e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a244a3-8c6d-433f-9ad4-1e7852aa4c72",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403e94f9-f796-4f32-ac40-ae9c33b71711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b790280-98a1-4772-adab-4c95d6252302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5ade12-fbd2-4a5a-bc9b-164a9d1ed42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1089176a-1ef6-49d1-bffc-9ed71be63ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dedb333-3c25-4ef3-8a1d-defc3fb9411f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99084317-a5b9-42e7-a1c6-7403cda459e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d80d8e-de0b-4b35-bc98-68268a02dbb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc169327-23a5-4a6e-8aa2-4e08feab614f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2798b2-9182-4fc8-8f72-3800e7915796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087b209a-0821-48d7-95c0-1566ba589861",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b097c6ab-e9b8-4a8a-a6e2-de9c81a449fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4567cf2b-cca7-46ee-9da3-409f97c04039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98250e6b-8d52-42a3-98bc-6808deb5839d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbceedd-15da-4989-bff6-00ea64a43490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd0505b-75d4-4d3b-bf10-369d4cc44d4e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6fb8b4-31a6-4e05-bc3b-d7fe4e94d810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1413456-2bc4-4aab-88d6-347f77a11690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066db5e5-292d-437b-ae96-f5d555b72503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40331441-646b-48e0-9f58-ad056010f545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e4c136-0ecd-4a21-819d-c25300863da3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6ca7ab-6b9e-4d2b-af59-98786cd1912f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b7a962-6ddc-4b37-9161-32b089e6ab96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de15f1d3-74d1-42e3-ad8b-8975fac10c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60b5c536-35ba-40a1-a07a-a9e6dda0268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fab5f6-9378-41c1-a378-58d66e721f34",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286e78d0-43da-4946-b8b2-3be995ecf84f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25226728-2a41-4090-93e6-bea025ad7d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ddcf45-d48e-4236-ac8b-8434c1661a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d481b3f1-b42b-48c1-85d5-271e10323a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ccdd17-761b-4f47-9c29-bf7e56bd5d73",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdc2ee5-da95-4c02-a121-d0d4d13c74bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45157559-7bab-49a0-a359-73145088c387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a243edd6-0690-41b6-9803-507fc6c6013d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c28422a-dc35-41d7-8d31-d1d9e84871b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43afc4d7-289c-40e2-80a0-e516fde6315e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d58d03-4110-449c-9cc7-79ced5015e6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3186c9-4889-4f81-a49e-3540e3099b34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f48315-72b7-4936-b919-dbeb6fad00db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ec1489-b8d2-4588-b778-ce08364b6db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e789b991-81c2-4330-bbb6-c5d0eb0f3e72",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3357d321-8097-4b1d-9776-071912e65fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f98fc0-d413-491b-8fb2-18e3830403fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56b1f6a-986a-4020-9286-032987b9c7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85691d2-d3fb-47ae-95ed-7fa5dbc4d2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac42fb-86a4-4ef7-99c7-a9d501ae2a6f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eee2353-1155-4f20-9eca-d58a8d176930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffe2d865-6fc0-4383-95b3-0428f0afb84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d03b665-1d82-48f7-b500-7433bc9920ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d97354-b4cd-4304-b979-5f982c7531e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199d1aa6-0618-4664-a1a5-c5c79021ae89",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f019aa80-576f-443d-9da1-9cb30b506e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b71228-f057-4a08-82ea-a603e7252d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d389241a-4dde-4330-9e98-e4559ca3e4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60215ea-a87f-4e32-a9e3-0fbdad46ea20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae9af20-bf84-45a9-8ed5-ec323d1f0c5b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e72a4ad-9053-4b5f-9125-f37dd9ef38dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b07da102-09f9-457a-bbc9-4378026082d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5e1bfa-ed23-4729-bacb-04f207987f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f47b5004-16cf-4b0e-9188-a3294428f1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd00279-556d-4194-ba4a-d03a4e8feafa",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cd5ebd-032b-403b-b20d-dc42f6532b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0571f236-fb28-4646-af48-2e09f547f939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b104e7-5e2e-45da-8514-8ac08ff014d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0078ce6f-441e-48ee-a651-11b9f60d7bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07aee431-e58e-495e-8f44-59430ec913dd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508c8d39-8aee-41a0-8187-8fd88d34a9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b4908d2-e7a7-4b0a-9550-41eb8259a832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4104c7-bea5-4048-9e12-144e77878a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d9a4c77-bfdc-4046-a66b-2a9263ee269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62e47a7-75e6-4c54-a0a9-43e736fe5d7a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94274670-a389-4b5e-ae83-f0954d77e89a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae54b3d5-6d4f-4a99-a525-b1be65da0dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda307e4-8ba1-4958-afe8-0deedf6dc9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e3453c-aee5-43e0-bab5-fc83421b1977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad6f225-2e90-441a-b735-f95f16f1e65d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448f369d-3e8c-4c61-b1ae-da252d830774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3d9b8d-cdbe-43b1-a999-010f1a0afd0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280be3c5-1c44-4e0c-bd8b-2a9f0db920cc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dea3cd-8d02-4435-adf1-05c911fca6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab7ecab-c68d-4fd5-8046-80c90adfb348",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b717e46b-622d-4948-ae43-af05e059541b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb0844d4-478f-45f7-b4a9-b78d7127e4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b3a203-74ab-4ee9-8336-962fa632d4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e349250-1833-48ef-bd05-51d5aa1b187f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2293ad-a5f6-4f2c-af1f-5f9d5d7007c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61b4231-9a1e-4e1c-a983-4ac60b3deed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a685039f-921a-4e67-a5cc-fea2c7232bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6466c2-65eb-4b0c-a65b-597c707c5809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b18a6a-e6cd-4237-b6bb-93e37b2c74ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c224c79b-7b2b-4105-95c8-ffae6740b8ae",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4709efe-5e6c-4b0b-b37e-c00b76f08c80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e67cab-0092-4b32-a9dc-233e91648374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe9f90-53b6-4e52-8b83-b53b1ce1458a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd46d5c2-ee04-457c-9c1a-95d05951948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd77d56-8f29-4544-9e35-a37d853fcca0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78763f9c-1b2d-4da6-bd99-86292711e2a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19e68866-0376-48a3-823d-94678a879053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99044ed-b607-48fa-85be-5cebaddbc875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596ada5b-4985-48b9-943a-9696a6b2129b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466de81c-441a-48d2-bf20-f2c1b2350531",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951c3f31-2609-4c7a-8e31-cf30d4e0b87b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b32af07-7f78-4f0c-940e-6816863db230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9f1dfd-aa5b-4c94-ad43-c0d11ff6941d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a38d79-7e6a-491d-8b17-24f03d5a7a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a548a78d-fc40-4592-b5a0-96f593a733cf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad0eb05-a47c-41b4-8db8-804a6f8ca747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e862182e-eb9c-4bf8-90c2-c06bde26e6f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f33e2a-d447-4a1a-a567-49aed1a854f9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d1cc18-7495-4ad3-aff9-d0088e43442b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52cb87e-fb1d-4864-ad96-3267b52880a3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08915e03-8cba-4484-b2c5-9bfce36f0026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e474808-ec70-40fe-9b15-e59f3bce1026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d7da50-a072-4f43-a912-b5fc76ff472d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b07659-a974-4fbc-a208-7919a7565ab0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "021d3515-d108-416b-955a-221b43b2cf00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "452a014e-e0f7-47e5-835a-ed1860228007"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42e896de-0ac0-4c35-b383-6bc00258bcad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8406e2c4-ad73-4990-9036-aafcd089ad83"
                    }
                  }
                ]
              },
              {
                "id": "437da6b4-edf5-4a17-9e3c-3c1283dec205",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ffff805-fc06-423c-a983-64eee945f5d4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e326a1b2-4572-42e3-b3b4-5d065f01f141",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c5f92c74-40b4-4c47-a311-89fec985f2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2d956d-5ba5-4a40-a89a-6ea585444dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5569b4d1-bbce-4ad1-804c-90a1a1b70313"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5234ff5-351f-4d53-85e3-447875b87afc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1644500-2c36-4640-b25f-561b2e1721c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccad18b0-86a9-4e32-936d-bac54158ad67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a82ca28b-9742-4e8a-a306-0320e4d67c4c"
                    }
                  }
                ]
              },
              {
                "id": "3da2162b-ed87-4f45-becd-62eefc9de0f3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9d895515-71f3-446b-a9da-b316866d5339",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cd2cba-fddb-4dc7-8cd5-f2c1f0036ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "33b95432-b3ad-40cc-ba75-5e2ec0b3c1a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1d16e3-f03a-46d1-be38-7dff07e13666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fc78f2-bd01-4a7a-84d3-132120933902"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac75b3a2-042c-4f07-850d-0f4256ba48ca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "359aa249-1078-4e6b-a49e-ab7b4778579d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24e8ac5c-cde1-4144-9905-ea3e09c9acf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3da377a4-53e6-4303-b25f-fec843791d9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "910dedaa-9343-427d-8ed6-39c4cce4d347",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e27be52-7540-4663-95d4-cd778f5ce366"
                    }
                  }
                ]
              },
              {
                "id": "07616882-f2c8-43eb-a232-f4bb49e227cb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab5a7657-4f5e-4ff3-a125-14ad130c335e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5911d21e-aa79-43fe-961d-05939e1258cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "090ed56b-58d8-4c84-be07-6679e283579d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e4c748f-df9c-48c4-b5fd-9342ff714d8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "063fcf4b-90e8-46d5-9962-038e6451e964",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ce93235e-9c2a-4ccf-8704-abcecc7c9d6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8677317f-be79-45cd-8a58-43133b0b803d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd41f1c1-8a83-4225-864a-cb459478f04b"
            }
          }
        ]
      },
      {
        "id": "4c8619a0-0169-4d9e-becf-b60df47b4ac7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "23a21c4f-ecc3-459d-8835-3266e00ad911",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f7254a5-0ff2-4239-b78b-f794f8af4642",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b77b5b48-0434-4536-88d0-50dd18cb291a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531f2c17-5822-4789-8039-08992ba5c554",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4b08244b-7e36-400a-a718-1166f67b9f1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "839bfc84-7889-4064-a4a4-2519cd0225a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff12f759-6607-4609-b8c1-c8124eacbce1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d70d7c0-181b-42ed-984b-343210431a28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0d4ab98-70b8-4dab-85e6-f560116b5ead"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "959f7391-f4e9-4795-9527-3159a2441106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eca4f288-f658-41ea-a7dc-9071c4a912c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3734183-6761-4619-b300-d32a9a49d3a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e85a278a-0205-4e68-885f-e3a8166112c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da17bc5e-ddec-4385-b8c0-0f6d2fbfd930",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52c22e68-7d35-4b43-80b1-c950d49aad3f"
            }
          }
        ]
      },
      {
        "id": "64814f0c-07d3-4307-a91b-7e905ffda332",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9ed2028c-deac-442a-b6ff-564dc4c47c6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72945663-608f-43e8-9f2c-a4afa6d77214",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "696c8bef-3611-4482-9373-4814d586c405",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027d1f02-de46-49cc-b2a2-533260fdf910",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8440b830-5c5d-4133-82ab-3d2b463c1e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c9eb9f-b468-4267-ba01-f0391dfc26da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59d530ed-247e-4893-bb69-4e76e469fa42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfcb868b-7c15-41f6-82dd-e3ff1d0797f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e3fa532-af14-46f3-92d0-ce2446301463"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd139cf8-c9d2-4cc5-8904-aa3d41f636cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6259a780-d829-4dc2-a49b-b6d7a0057ec5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a42bcad4-0e2b-4c3a-a429-25e47f6341ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "271c2c35-36d1-4c3d-8c4d-440ef4cb52b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc249c18-8b64-4192-8efc-a9f3aeb578c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7ece485-b1a7-4be4-81e8-d8ac4767afd2"
            }
          }
        ]
      },
      {
        "id": "370ee4ca-c84d-44d4-a663-1bc9c8a1aec0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8ce983b4-9ff5-4449-ab4a-d0d93545d09e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d56029e-0b43-416f-a740-600fabce2a71",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "948bab83-27ea-404c-8a62-036c4995a48d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8759558c-4453-4b4f-bad7-724799fc645f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ec5ff7e-954c-409b-990d-5cf53a5c1725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "775ddc3d-5ab6-40dd-b008-6e0c99a17463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dac5bd1-5824-460d-96e8-d2bb83ad106c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdbf0abd-6194-4e42-abb3-94bff5b71262",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acb6bac1-4933-4ca1-8b56-ed157ff116d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9050c424-f8a3-4569-8209-7197ca5a2b44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "474e9b8a-6578-44b1-b69b-603bcc374dfd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "245c50ff-12a8-442f-92ad-ccfbcb7536fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ea75f271-c3b3-4fac-b810-dbb36b341278"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09b730e5-aeaa-411e-b670-2575d45b0a83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48262445-ed20-4868-86e1-ba3c042be19d"
            }
          }
        ]
      },
      {
        "id": "b6a40b8f-8c07-4eba-ae22-a2fcdc3fe3ad",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "404da557-514b-4eae-8b51-68b509fce222",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3acd217a-b73a-42e7-a9b9-7d096b832fca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "137e8285-588f-4c37-afc2-8a9086dceee9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80f72edb-9ad6-47f7-91e7-33826633b606",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e49b237f-5dc7-45fe-94c2-b0f19673632a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.3095238095238,
      "responseMin": 22,
      "responseMax": 270,
      "responseSd": 23.411421810770353,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714696669001,
      "completed": 1714696692042
    },
    "executions": [
      {
        "id": "b417d828-d11c-4343-bd13-fb7c4f5f54e9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e473a421-bb1b-4457-b46b-1dc323caee2b",
          "httpRequestId": "66bb98dd-d965-4310-96a8-403c2c6462ef"
        },
        "item": {
          "id": "b417d828-d11c-4343-bd13-fb7c4f5f54e9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5e3867be-f42e-406e-98ec-88465bc174d3",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 0
        }
      },
      {
        "id": "88551ab8-db31-433c-963d-f7a041d66a72",
        "cursor": {
          "ref": "8e5bfbed-e7bc-4aad-aec8-3f1c15dc32d9",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12e74bd7-1c76-40dd-8db9-bdfd464243d0"
        },
        "item": {
          "id": "88551ab8-db31-433c-963d-f7a041d66a72",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dce1c85d-de42-44d0-9e2e-a43cfa1a0dec",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "324e94f7-2ea9-4ae2-9827-71b64bd01bc0",
        "cursor": {
          "ref": "5c43600c-04f7-4b65-b783-2b3953096c36",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4547f814-77cf-4ed5-8674-e975e4893438"
        },
        "item": {
          "id": "324e94f7-2ea9-4ae2-9827-71b64bd01bc0",
          "name": "did_json"
        },
        "response": {
          "id": "fd135107-f04a-4c91-9a01-679215dcdd16",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520ae484-89aa-42b3-b386-54262e70912a",
        "cursor": {
          "ref": "c98cd1a5-fadc-4545-8851-d4cf156eeaba",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aad9571e-2ad6-4e3a-9667-8ea8bd3b17ea"
        },
        "item": {
          "id": "520ae484-89aa-42b3-b386-54262e70912a",
          "name": "did:invalid"
        },
        "response": {
          "id": "2e9ca291-498e-4dd4-bb9e-388a979d188f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520ae484-89aa-42b3-b386-54262e70912a",
        "cursor": {
          "ref": "c98cd1a5-fadc-4545-8851-d4cf156eeaba",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aad9571e-2ad6-4e3a-9667-8ea8bd3b17ea"
        },
        "item": {
          "id": "520ae484-89aa-42b3-b386-54262e70912a",
          "name": "did:invalid"
        },
        "response": {
          "id": "2e9ca291-498e-4dd4-bb9e-388a979d188f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db36e2c-32ee-470f-8ce7-a24c188e7426",
        "cursor": {
          "ref": "9426f04a-fe9e-4052-9d1c-c886a19a6516",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5597e6a0-3085-4bb7-a566-6345cc7246b4"
        },
        "item": {
          "id": "3db36e2c-32ee-470f-8ce7-a24c188e7426",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3c63836d-5842-4e69-a2d6-92a574748b7b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 144,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb84c28-7320-42bd-8108-368afb113798",
        "cursor": {
          "ref": "a7deca7c-c3c8-45f0-bc6f-574385ca5157",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c3171cba-5d22-4eff-9072-86032111d873"
        },
        "item": {
          "id": "cbb84c28-7320-42bd-8108-368afb113798",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d73bf816-00d5-4d86-95df-f492f5e218e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e259aad-0d1c-4505-adf0-4239e7e23b4a",
        "cursor": {
          "ref": "dedbd7e4-049f-4ba9-a905-71b40d261646",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "18c9524c-0cb0-4015-94db-a34cabe37cfd"
        },
        "item": {
          "id": "1e259aad-0d1c-4505-adf0-4239e7e23b4a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "432fc7a6-9d63-4191-a23c-4019b6913a0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb79335-daa6-4500-bb83-47c65000aead",
        "cursor": {
          "ref": "6a6d54d7-4782-46a6-98cd-9f0914841413",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9dcc2d07-7d25-46a8-b906-7607f0971b5f"
        },
        "item": {
          "id": "6cb79335-daa6-4500-bb83-47c65000aead",
          "name": "identifiers"
        },
        "response": {
          "id": "63e8ae7b-ae6f-4c7e-9a31-e0ad534bcbbd",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a29d87-d256-4ad8-b9d2-8a1d0f4b3cd7",
        "cursor": {
          "ref": "71933006-4857-419c-9eee-92cdc6bbfb8a",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f3ec5d0c-905f-410a-b2a4-9e7e54523fdb"
        },
        "item": {
          "id": "18a29d87-d256-4ad8-b9d2-8a1d0f4b3cd7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ae35fc49-7047-4911-8ca9-940b5da3b872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dfea78-ccfe-4cad-83c4-718d30925b5d",
        "cursor": {
          "ref": "c75dd115-726d-41f4-829a-0b1988bdecd4",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "65f45edc-3c79-49a1-984f-4c40821c01c7"
        },
        "item": {
          "id": "66dfea78-ccfe-4cad-83c4-718d30925b5d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "59e80ace-577c-4b81-892b-5523196ccd76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9120d53-5947-43d2-a50a-793b28b4ff04",
        "cursor": {
          "ref": "5ef870b7-f278-4dba-80f2-4adf18e041a3",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c37e6432-e340-4b27-b261-6b9cc832120b"
        },
        "item": {
          "id": "c9120d53-5947-43d2-a50a-793b28b4ff04",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6856c65d-b610-4f56-88db-8a75de00d009",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69dcf56-2aae-4855-8ec6-12d4c218cd4a",
        "cursor": {
          "ref": "facb6562-805d-4474-a9be-65f3c385420a",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "18ab012e-23c0-4783-979b-fd1ecef32db2"
        },
        "item": {
          "id": "f69dcf56-2aae-4855-8ec6-12d4c218cd4a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2bdd7705-7617-470a-bee8-3e018f476778",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a13abe-e82d-414e-8975-d60e96b5a825",
        "cursor": {
          "ref": "230021c0-3da9-4c34-8e95-24d9e11be57c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9575ebe1-7ed9-4d7e-848e-c7a9cf859033"
        },
        "item": {
          "id": "40a13abe-e82d-414e-8975-d60e96b5a825",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c6faf0f6-23b2-499a-9cde-77e6b1df3124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d24ba9f-793d-4183-82b6-4adcfaf92a6a",
        "cursor": {
          "ref": "e61059f7-0e8d-4904-8e07-7c7e936e6a7b",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4bc4c34-f72b-44bb-8c3e-78f6ebec6588"
        },
        "item": {
          "id": "8d24ba9f-793d-4183-82b6-4adcfaf92a6a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "06fbe5f7-3ff8-4d10-a27e-219708e11b76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c882d689-2d75-4ae2-838a-6119e4b943eb",
        "cursor": {
          "ref": "16a3c31e-1a43-426a-aa5f-b7b5ab9de792",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6e675144-647a-47ae-8fbc-93a19d46959c"
        },
        "item": {
          "id": "c882d689-2d75-4ae2-838a-6119e4b943eb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "19ef5f9a-c5d9-424b-a956-cc1ec5468a53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee3c0f5-40c4-4838-b51a-e83deb46527d",
        "cursor": {
          "ref": "6cdbc4b2-bfb8-4b80-a821-b627e9f013c9",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d2e869b8-2fb5-48f0-ba95-2eb12c21d53e"
        },
        "item": {
          "id": "3ee3c0f5-40c4-4838-b51a-e83deb46527d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "748fd650-fe6f-4e82-909c-af4a1620fb81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2c7d59-2b61-4230-a6db-f855e25f1897",
        "cursor": {
          "ref": "f9194c56-b661-4aa1-8a4b-4dc7febc5f9f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ab16b8a5-4220-406c-94cb-26e7f5717712"
        },
        "item": {
          "id": "2d2c7d59-2b61-4230-a6db-f855e25f1897",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a87c4a97-6c5a-4d23-bd9c-4e8968d3ad9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e66679-81af-4887-8a8a-ebaa3fb8bcdc",
        "cursor": {
          "ref": "b16e3aca-4e71-46c8-a6a1-67470cca42b2",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "11b60096-1da3-4a93-b407-98b1d744a54e"
        },
        "item": {
          "id": "c6e66679-81af-4887-8a8a-ebaa3fb8bcdc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "040a1449-b06a-43f6-8d01-31c188d4c226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213c3931-29d7-45f9-97a3-648883c6bcb9",
        "cursor": {
          "ref": "edc6aa0d-c938-4fd0-b797-179f1652c412",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "40a4ef83-be75-4413-863b-7c436ce0660e"
        },
        "item": {
          "id": "213c3931-29d7-45f9-97a3-648883c6bcb9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e1273976-c0a5-4617-9d49-d716dc69d323",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2c4c57-84fa-4a6c-9b64-e465cc31d419",
        "cursor": {
          "ref": "ed0c2b68-3a1d-49d3-9878-d08220ef0f6c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e8edff37-57c3-4557-8930-0798580412a0"
        },
        "item": {
          "id": "ea2c4c57-84fa-4a6c-9b64-e465cc31d419",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "62468556-af60-4efd-bd86-d6bf515cbad5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98611fa-00c4-47c7-81fb-939e2cd104b7",
        "cursor": {
          "ref": "632c91d0-5750-4341-b291-510a4ad3b4b6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d3df2eea-fd31-4790-b425-393ec7c01e8e"
        },
        "item": {
          "id": "c98611fa-00c4-47c7-81fb-939e2cd104b7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c00a32ed-17c2-448d-8a6e-e8fcbd599c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72aad31-805a-4903-b367-3ba093444814",
        "cursor": {
          "ref": "6511315f-8de7-461f-bb3b-cd61d2382fbe",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2dfa46c6-df46-4cde-8959-fc5c3e3d48f0"
        },
        "item": {
          "id": "f72aad31-805a-4903-b367-3ba093444814",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4e5b33ad-b7f7-4608-a438-298b28bef3b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c48f1b-0d12-418b-93f1-3d0aca367d46",
        "cursor": {
          "ref": "3bdaf986-d4f7-4fa6-b539-b6f889f5434d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6bd8d641-c80c-4a3f-bd72-c543c02aa0e0"
        },
        "item": {
          "id": "84c48f1b-0d12-418b-93f1-3d0aca367d46",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "456cca87-afd8-48f6-81aa-c67b70e80e0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e8246f-fa5e-409c-8bee-3e6c2d039082",
        "cursor": {
          "ref": "29b8756f-98ea-4027-a0ea-37626bca6c73",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f66c5227-22a2-47e4-893c-7e4ac529115e"
        },
        "item": {
          "id": "f2e8246f-fa5e-409c-8bee-3e6c2d039082",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a35224e6-2a50-42cf-92bc-9da1ee73c290",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6936159b-e1d3-4ae7-aa01-101e78a5aadb",
        "cursor": {
          "ref": "437f6c38-0d90-497c-a230-922a9f1d27d3",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "80f4449f-7a36-42cf-b53c-b3f271129222"
        },
        "item": {
          "id": "6936159b-e1d3-4ae7-aa01-101e78a5aadb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8b2da961-79b7-49b3-a86d-51c6ac3db930",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed495d8a-4070-40f1-af21-ed63dec8df8a",
        "cursor": {
          "ref": "a1572f36-b497-44f5-a3ed-a7439185b962",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc05024c-065f-4ce2-b2a8-7f2d9e20d2d5"
        },
        "item": {
          "id": "ed495d8a-4070-40f1-af21-ed63dec8df8a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8e19c9e7-13fc-4021-a8c5-6f4b8496d3c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10381820-1166-4f25-a625-50a6d5b8bd57",
        "cursor": {
          "ref": "cdc2750c-e04b-4266-b3a4-9c185650bf94",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "12cdc5fa-18f6-4479-8b26-c5be63e9fbed"
        },
        "item": {
          "id": "10381820-1166-4f25-a625-50a6d5b8bd57",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dc9292c0-c265-4bba-9f8a-de4604451d27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40a7fc3-9801-4959-8df9-f14406b4a4db",
        "cursor": {
          "ref": "b5e8bccf-7f4f-4036-b89d-eb1e38ca4059",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5331f2bf-21e5-4a4a-818c-80db94b180ce"
        },
        "item": {
          "id": "b40a7fc3-9801-4959-8df9-f14406b4a4db",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "841fa2e4-2778-4e80-b51b-00d9432704a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07a2718-2544-475a-b9dc-fc9d3ad46431",
        "cursor": {
          "ref": "6dc1873d-8553-4a92-ac8a-748ce39ce6b4",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ea425ab-3382-4407-90c0-3646365ba25c"
        },
        "item": {
          "id": "e07a2718-2544-475a-b9dc-fc9d3ad46431",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "11c0b474-63f0-4b85-ab7c-4e4e201f89b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cd5a04-7df8-4683-bdac-2e0757086750",
        "cursor": {
          "ref": "024152ee-d489-49e1-8b37-e1b8d15dc857",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "33cfe137-07b5-4b1b-8f5e-a48f46acdf88"
        },
        "item": {
          "id": "f9cd5a04-7df8-4683-bdac-2e0757086750",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a2c606f2-230c-4fee-ae88-169fdb0ea9a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defdbe2c-fe4c-46a9-91ee-dda053644ad1",
        "cursor": {
          "ref": "7d834598-f110-4d23-b04c-17313350cc56",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4952973d-a903-4b94-9f2c-651976195af5"
        },
        "item": {
          "id": "defdbe2c-fe4c-46a9-91ee-dda053644ad1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "76570aaf-ecdd-4a45-8155-4caf33290243",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9a3187-a384-40dc-97fc-7187e2b3971c",
        "cursor": {
          "ref": "f0248e46-e2ef-458a-abba-88b4704158b2",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ed3ade03-743d-43f7-a159-af67c58e8674"
        },
        "item": {
          "id": "0b9a3187-a384-40dc-97fc-7187e2b3971c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "09f960e8-13aa-4b1b-b866-795c68e901f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e76e00-26cf-435c-912f-7b3a4816f88a",
        "cursor": {
          "ref": "a7e3b111-a15e-4250-b781-9a3226faf942",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3da99522-23ee-4dbc-b4b2-357ab945489a"
        },
        "item": {
          "id": "63e76e00-26cf-435c-912f-7b3a4816f88a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "030b753e-b991-40e2-8315-074955184b0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87103253-bbfd-4b5a-9b7e-8360af0c82fa",
        "cursor": {
          "ref": "3c922678-9493-45d5-bd8f-987345de3d27",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c6baca21-9bf5-4c52-92e4-2b8635c502c2"
        },
        "item": {
          "id": "87103253-bbfd-4b5a-9b7e-8360af0c82fa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "47f279e0-d76d-49e9-b064-103dc7db4efc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92038db1-9724-4651-a627-3d99493044e8",
        "cursor": {
          "ref": "0360baaf-7ae2-458a-929c-e44502ec2edc",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a7031498-6d6c-4746-ae45-e5ed5d0638a2"
        },
        "item": {
          "id": "92038db1-9724-4651-a627-3d99493044e8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "edfaa818-ce86-4524-a08d-837e9ed719ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e383b7a2-d49f-4dab-8632-c132a4dc05be",
        "cursor": {
          "ref": "0695e2f6-1441-4b48-89b8-ff70182bb3f6",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d2aff789-de95-4e61-8c88-94f9958c2145"
        },
        "item": {
          "id": "e383b7a2-d49f-4dab-8632-c132a4dc05be",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "68a5a119-c123-490a-bc47-8f74f88ae627",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0c85d9-e018-4e8c-ac01-d9374435e4ba",
        "cursor": {
          "ref": "1b347eef-928d-4e28-bd9e-1552d011f43d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e299e89f-dc8b-4880-bbdf-cb203b4ab356"
        },
        "item": {
          "id": "ef0c85d9-e018-4e8c-ac01-d9374435e4ba",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6f2b24ca-0c09-453a-9d17-6284a95545b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db01d38-d451-4323-b16d-13a9ad9b8899",
        "cursor": {
          "ref": "02829da1-141b-4b94-ac34-9965311f8eb7",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fe15ff18-af7a-4d72-8d88-49d45ef7a8c2"
        },
        "item": {
          "id": "3db01d38-d451-4323-b16d-13a9ad9b8899",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e8b8a29e-c50c-413a-8b63-32c847abec52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac31c05-1fdf-4bbd-8869-0089fd5edeb3",
        "cursor": {
          "ref": "5cbac887-98bc-4238-859f-f023ccc970f0",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6217eb3f-61b5-41bb-840e-9b9807066b59"
        },
        "item": {
          "id": "aac31c05-1fdf-4bbd-8869-0089fd5edeb3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e7db2934-7c24-4d99-999f-85e2f08d0202",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a89c31-7a17-4e8a-b02c-28b8321daa04",
        "cursor": {
          "ref": "d4670af1-d0b2-4b07-a726-9a3fe4929569",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "366dc91a-380f-4aab-a83b-f038c3576dad"
        },
        "item": {
          "id": "53a89c31-7a17-4e8a-b02c-28b8321daa04",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "98d6ed48-7792-4006-ada8-ac7a7eaa9153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6990e7e6-fe0b-419d-9ede-0ea93de80943",
        "cursor": {
          "ref": "d83579e6-5456-41de-99b5-5712af41746b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ed9ac0aa-0830-4540-9f9a-bfe90a7300da"
        },
        "item": {
          "id": "6990e7e6-fe0b-419d-9ede-0ea93de80943",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "950762a7-6fe1-48c4-9ab7-227f56a97cba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c974b948-1391-43a7-85c7-5d5e22250ef2",
        "cursor": {
          "ref": "58e8b90f-4e61-42a0-884c-e503481cf63b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc24ad7f-c5fe-45b7-9446-174d7ef32a9e"
        },
        "item": {
          "id": "c974b948-1391-43a7-85c7-5d5e22250ef2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "790dc9c9-e4a7-4687-b537-1fc4b77d2c48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6461f401-b9ed-4819-92ca-889e052d0264",
        "cursor": {
          "ref": "340cdfb0-d32f-45bf-886b-c6d49ef21153",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f9f3f31f-c4be-4343-86ec-d0b9b21fed23"
        },
        "item": {
          "id": "6461f401-b9ed-4819-92ca-889e052d0264",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "477386bc-a8a0-4d72-8a2d-28142661aed9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcbd8ee-201a-47f0-a54d-6cece07b45c1",
        "cursor": {
          "ref": "bb1f4f76-f2eb-4dd1-8ccd-b74dcfe4b519",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "79aa9f20-a5b0-4ff8-842f-15aa91fcd3cc"
        },
        "item": {
          "id": "4fcbd8ee-201a-47f0-a54d-6cece07b45c1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "673c87c7-6550-44a7-a15a-c01d6a6d4738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b49ab-eadb-4e9d-8f08-3468233980b4",
        "cursor": {
          "ref": "4b68ddff-ed0f-47ec-bceb-6ec9aa36dd70",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "52189c04-7521-4842-94de-b448efc87b7e"
        },
        "item": {
          "id": "653b49ab-eadb-4e9d-8f08-3468233980b4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cdfc19b5-1346-4f18-b95f-7c9ef0b52d8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64d919b-3bff-455d-99b7-97cd7d4f9620",
        "cursor": {
          "ref": "3f7aa878-698b-4b36-8154-abbec70d6ae7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "95e3f541-467c-4bb9-affd-4e5a8f846cbd"
        },
        "item": {
          "id": "c64d919b-3bff-455d-99b7-97cd7d4f9620",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "446bfdf8-f7c2-4e14-8a52-47f839aa9621",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f38bf95-4581-468d-85d2-b5d589e79c47",
        "cursor": {
          "ref": "bb57fddd-093e-4f6e-8af4-9c2daf5f9082",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "99251642-5202-4abc-88ce-988c78766455"
        },
        "item": {
          "id": "7f38bf95-4581-468d-85d2-b5d589e79c47",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "02296acf-387e-4a3e-85f7-84a612c073af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f917e9c-cbfa-4b45-b79b-5c6c883e7dbd",
        "cursor": {
          "ref": "bac05c90-f750-4740-a37d-a02af753d2a9",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f6ad8cc4-be1d-4288-8a3d-f660e992347d"
        },
        "item": {
          "id": "8f917e9c-cbfa-4b45-b79b-5c6c883e7dbd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "53ff4058-b0b6-4f4b-8e01-5f2469c4d2bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92143da2-c1a5-47bf-92fb-e6e650e49b37",
        "cursor": {
          "ref": "7a7c8609-b96a-43a1-a740-13cb1c2ba80c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9993c34f-d176-444c-9f8f-91cffb3b14e0"
        },
        "item": {
          "id": "92143da2-c1a5-47bf-92fb-e6e650e49b37",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0cfd6459-d3a9-4d60-8852-f247fb1f3b1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cb1922-be61-44c8-8990-047ad29db5d4",
        "cursor": {
          "ref": "426b1720-df75-4603-b180-a085a350fd42",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "48d65608-f739-4d82-a2a8-716521172e91"
        },
        "item": {
          "id": "79cb1922-be61-44c8-8990-047ad29db5d4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c98bd58c-ec8d-4637-913b-012cabbe66a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561b2c51-ed6a-478e-a85b-1a78ece94845",
        "cursor": {
          "ref": "0be933da-5382-41dc-add7-aa3f2f60fd39",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9055c76d-ea14-4611-9c56-ae241cdf0fec"
        },
        "item": {
          "id": "561b2c51-ed6a-478e-a85b-1a78ece94845",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "44288698-fb92-4243-aa00-cd050ae98507",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaead4e2-9a4f-4d86-b636-8cf2f457ec9a",
        "cursor": {
          "ref": "ef95855a-022b-4333-ba40-d9911dd72c19",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f65acaea-eedd-47d2-9636-47143c309d32"
        },
        "item": {
          "id": "eaead4e2-9a4f-4d86-b636-8cf2f457ec9a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "97bf87ea-9821-462c-9b03-81770ea99e90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452be99f-c1d8-4313-bf8b-1f9dccafae2a",
        "cursor": {
          "ref": "fce6e517-df14-49a5-a9b2-e3d10ffc495a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "376e3da2-e074-497d-9072-f2597af4dae5"
        },
        "item": {
          "id": "452be99f-c1d8-4313-bf8b-1f9dccafae2a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4a2128bf-e90e-4e87-bb79-9c2d232ed41c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df8b0ee-9e50-4653-a970-5974bfb78652",
        "cursor": {
          "ref": "2b5bd75f-40c3-4a5f-8c24-4fb7bb516c29",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "04748161-0cd1-4370-bc10-1696de8b80ab"
        },
        "item": {
          "id": "9df8b0ee-9e50-4653-a970-5974bfb78652",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "182ada3e-3b5f-468b-8f8e-b6bc94c6dd68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ae9c93-08c3-4d98-9298-0bdf1129c046",
        "cursor": {
          "ref": "4856a281-1f91-4487-8801-76f56e406294",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b49bd5c1-33fb-431b-9e69-1922b85d2ef9"
        },
        "item": {
          "id": "95ae9c93-08c3-4d98-9298-0bdf1129c046",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e37d1540-75a0-4fdd-9cc4-66d457b79649",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271bf23d-68f2-4474-9ee0-74a264c23d3b",
        "cursor": {
          "ref": "a8a5e4e1-b43d-483c-a84a-a4e3377203b7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1911957e-3cd0-4966-a65b-97898077489d"
        },
        "item": {
          "id": "271bf23d-68f2-4474-9ee0-74a264c23d3b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "008f257e-e376-4e82-b0c9-8f84db143979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890fb87d-356e-45bd-8386-6e9dd9f605b6",
        "cursor": {
          "ref": "a0ef378c-f9f4-46fb-9f6e-a140ec7cd675",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "60931ee6-9d55-4bdc-8dc4-c3a1371921c6"
        },
        "item": {
          "id": "890fb87d-356e-45bd-8386-6e9dd9f605b6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1575b83e-e431-4c52-9a63-061abb88315b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f86a24-ee03-486e-8b28-aad085733773",
        "cursor": {
          "ref": "2757dc71-bf16-4a00-9b63-f0f139cc9c16",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "67fe2e32-f3a2-4754-bae8-6768d37e8d20"
        },
        "item": {
          "id": "50f86a24-ee03-486e-8b28-aad085733773",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e9989eeb-e9cb-43ce-87ed-a91e028a7623",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa4dc2b-0d9e-433b-a353-e69ffb9bf0a5",
        "cursor": {
          "ref": "4a8eb515-65a6-4182-b8c5-74517d57b00f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a5ddabc6-9746-4798-8672-cd52f04b7a9c"
        },
        "item": {
          "id": "dfa4dc2b-0d9e-433b-a353-e69ffb9bf0a5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f7a97635-57d5-4fd9-a7f5-bbbf92d86a09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38e0035-65e6-4d48-8457-3cd1b83bdb33",
        "cursor": {
          "ref": "8b8c1031-4b4e-404f-b8c9-6c35fd2a891f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "08d20e9f-5caf-4766-aa4a-ef54c013d50c"
        },
        "item": {
          "id": "b38e0035-65e6-4d48-8457-3cd1b83bdb33",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a7b2976e-b4b5-4626-9929-3afb665ff8b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02ffeda-a727-41dd-98d2-047aa042852b",
        "cursor": {
          "ref": "4659b3b3-a3b2-4a99-8088-bdbe2981ee7c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "54985464-5839-402d-a97d-d46b517ddf68"
        },
        "item": {
          "id": "e02ffeda-a727-41dd-98d2-047aa042852b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "41df2e3c-c9e0-448f-80d2-38bbfe4f62a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfdff1a-07d6-49b7-b4a6-683b00ea8e2b",
        "cursor": {
          "ref": "e2a17482-ccff-44ed-b5a2-69027482520f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4ebf94df-954a-4fed-bc68-8a7180b795a3"
        },
        "item": {
          "id": "3bfdff1a-07d6-49b7-b4a6-683b00ea8e2b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0c5fcaa1-22e1-44f1-a40a-6320ef8a0247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bd162f-d37f-476e-b471-ddf00c0e87fe",
        "cursor": {
          "ref": "17cdf413-d16d-45fd-a62f-407248f53842",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36a540c2-0c80-4d2f-b712-2bbfd2be383c"
        },
        "item": {
          "id": "f5bd162f-d37f-476e-b471-ddf00c0e87fe",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b15cae5c-92ba-4e1a-8be9-635dcc75a594",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9333d26-875c-42f0-9984-316a0657ec04",
        "cursor": {
          "ref": "e0cd24d5-247c-4551-a888-47a41f844257",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "13cd3068-f223-467a-8b1c-5456eac78316"
        },
        "item": {
          "id": "a9333d26-875c-42f0-9984-316a0657ec04",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "18439d75-2e77-471b-b517-8c03ed5f17b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e401c040-2480-4d35-9b28-1efe6e576db8",
        "cursor": {
          "ref": "a30de2bf-a0d1-403d-9ccc-50e142b33c9d",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "62721e09-a555-42ef-87b3-1299b4324f9b"
        },
        "item": {
          "id": "e401c040-2480-4d35-9b28-1efe6e576db8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1024f662-ce82-4c9d-beef-59cb56cb617e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817ab869-0e4d-4ebc-acf4-0cf2338f8685",
        "cursor": {
          "ref": "87603463-175c-4486-8dcc-14f15daa26b6",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ada8caf9-bc7e-4a30-95a4-9654f85113c1"
        },
        "item": {
          "id": "817ab869-0e4d-4ebc-acf4-0cf2338f8685",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b9073a3d-f8bb-48f4-813b-e872ab189e56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4264137-a23f-4973-98bf-27589301cb4f",
        "cursor": {
          "ref": "ce77b2d0-67f7-4e0f-b0b1-26c6ddc55a93",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "03793cfa-2571-4e90-9d7f-b4178f9512aa"
        },
        "item": {
          "id": "f4264137-a23f-4973-98bf-27589301cb4f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5d51cc10-b5fb-4580-9bcc-2b7ce145b226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637986ec-1df5-4591-b809-27ae8f912967",
        "cursor": {
          "ref": "0dc275ee-b027-4b25-8e41-b902fb2ec096",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e347b7ba-1d05-4ec6-9937-9730de582b33"
        },
        "item": {
          "id": "637986ec-1df5-4591-b809-27ae8f912967",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2e506c61-e1dc-4d1d-95c6-6447afd29381",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a608f8e-0e64-42a6-8e5e-0c7eb8f6ce34",
        "cursor": {
          "ref": "32e3fd00-f1d1-42ee-ae0e-8ddbdbb3f6d9",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "68a851f5-9360-43d4-8852-05ec7d045b11"
        },
        "item": {
          "id": "3a608f8e-0e64-42a6-8e5e-0c7eb8f6ce34",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a981be1a-2684-4978-8eb0-b31a1800d770",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628511f4-fe7c-45f4-b4b3-b700e5b8a0dc",
        "cursor": {
          "ref": "a89abbb3-c6c5-4c21-b7eb-f58d40476644",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d970ec68-0521-4007-94a3-8c837e5e3f0f"
        },
        "item": {
          "id": "628511f4-fe7c-45f4-b4b3-b700e5b8a0dc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "aba9a9d3-cb15-493d-bad8-01da4bd8bcb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ee6069-2146-4cf9-9a1c-fb12edae0ed6",
        "cursor": {
          "ref": "d269b8a6-180c-4e6d-a953-2864d5e33fae",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "483b8c0c-c8ca-482a-9fd0-10c70e02abae"
        },
        "item": {
          "id": "e5ee6069-2146-4cf9-9a1c-fb12edae0ed6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bbf1fae5-1593-4a70-8e13-fc5743fdc9bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072c03bf-4036-4dc9-b8d4-29f8092fd3ed",
        "cursor": {
          "ref": "407fabcd-cca2-4650-bd1a-bec305ada15f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bdd3c29d-faa0-4c4a-a9d3-8b323cecdb3e"
        },
        "item": {
          "id": "072c03bf-4036-4dc9-b8d4-29f8092fd3ed",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6a75bf00-cbf2-471d-99df-c50ecc98ba2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25be3f5d-5459-4fa8-bfcf-3a3f505c6324",
        "cursor": {
          "ref": "d8070596-8fde-45f3-a9f1-77a13ce0e7de",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "92eb49ef-219c-42ee-983b-1ec4a7b1f876"
        },
        "item": {
          "id": "25be3f5d-5459-4fa8-bfcf-3a3f505c6324",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "eaf16185-1b87-453e-880b-3a3e4dcfbfc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d684f07-d2bc-4fe8-89cc-edacf2478654",
        "cursor": {
          "ref": "b31cd2b3-074c-4011-b2a7-b2bfb6328e5a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0e83fec9-7ae0-4926-b3be-f7e3cf14d34e"
        },
        "item": {
          "id": "7d684f07-d2bc-4fe8-89cc-edacf2478654",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d9c7c119-2b08-46d6-b244-f6f25c534e95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75da3ac8-380c-4c50-8d70-944d7e809a9a",
        "cursor": {
          "ref": "3ed8eb14-6123-44d7-bdb2-f0f3e81c88e8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6878bd83-3ac8-4af6-b03b-94ceeacc12b5"
        },
        "item": {
          "id": "75da3ac8-380c-4c50-8d70-944d7e809a9a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "675036b6-29c3-4498-8edb-430e940fbacc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525bfeb9-45d7-4423-90e4-4da6c9470efe",
        "cursor": {
          "ref": "2c80fb37-4058-4b4b-a550-3fe900836d43",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5d8668ad-8deb-4def-b6af-dbac05f4d276"
        },
        "item": {
          "id": "525bfeb9-45d7-4423-90e4-4da6c9470efe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dea6e445-6233-46f9-adc1-d6adfd7794bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2446c9ca-f1a6-4044-99c9-e3f44d2e1c7a",
        "cursor": {
          "ref": "c362e754-4de0-4a70-bd57-58d4cbac77fb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "633d84da-7931-4fe7-86e4-9736894e9f2e"
        },
        "item": {
          "id": "2446c9ca-f1a6-4044-99c9-e3f44d2e1c7a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f5a515d5-22ba-42f5-8ba1-aba5a7ac9973",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247b3bb1-3cfd-4d83-82db-bb5103f08c70",
        "cursor": {
          "ref": "0f0216a5-7807-45a0-92eb-b047e8897a74",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e9a5149f-b559-43d2-980e-30aa267d26e2"
        },
        "item": {
          "id": "247b3bb1-3cfd-4d83-82db-bb5103f08c70",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "85f08a46-665a-48dc-b025-c230226475f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d52c3c-505c-4e9f-8407-226dea5c04eb",
        "cursor": {
          "ref": "2555877b-f9f1-4584-bd73-8142ed69005a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4bb4fe89-47ee-4445-936a-ac874fcb7f4e"
        },
        "item": {
          "id": "82d52c3c-505c-4e9f-8407-226dea5c04eb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8124ccf2-0bcc-414e-a973-8cc4837b1d11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fc084c-1974-4c24-9792-6d048da4603a",
        "cursor": {
          "ref": "01a0b94b-7d4f-41c9-bc77-781b0ad75fca",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cc087c34-ae4b-4337-aad9-388956def54c"
        },
        "item": {
          "id": "b5fc084c-1974-4c24-9792-6d048da4603a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "eb99407b-64c2-4ea5-95f7-bafbf37a595e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1751564f-51e5-4c11-a256-151b3b290aa8",
        "cursor": {
          "ref": "891c4b61-50b3-4e90-acf2-ef2777d98c87",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a4e9623a-467b-4a82-8afe-d5194bf3519c"
        },
        "item": {
          "id": "1751564f-51e5-4c11-a256-151b3b290aa8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "539f401d-bb56-4099-af31-127bf5ca170d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc517ce-fa5e-4be6-87f0-07cc1f3fbec8",
        "cursor": {
          "ref": "2cd6530e-cacc-4d26-a6c1-c164f0d86f63",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fe35e4d9-e685-487a-9955-ff351e802cf1"
        },
        "item": {
          "id": "4fc517ce-fa5e-4be6-87f0-07cc1f3fbec8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0f025349-cac1-491f-8120-54155b85791b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2ba467-c099-4e2c-ad35-f6355d545369",
        "cursor": {
          "ref": "fd1599e8-9b1e-4d95-bcac-a15760ebd819",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "69011899-6299-497d-8400-6d7dddda2d0a"
        },
        "item": {
          "id": "8b2ba467-c099-4e2c-ad35-f6355d545369",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a97c0032-3bbf-4a56-9b6b-de3b7b13ce31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a17fb2-4009-40ed-9d26-b9c60fb2b08e",
        "cursor": {
          "ref": "b06db7f9-922c-4bf8-9634-b222116ddbe7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a9bf44aa-2a3a-49c0-8f1f-7d8238092cac"
        },
        "item": {
          "id": "e1a17fb2-4009-40ed-9d26-b9c60fb2b08e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b35a3d2f-3ac8-49d1-b290-7cf19a27136c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4711a167-0e62-45e7-93cd-72cc231d4814",
        "cursor": {
          "ref": "4d07f219-6434-46f2-afc4-c60760f97cf0",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c1b94c66-1a52-41cb-9f25-5261cecc2c20"
        },
        "item": {
          "id": "4711a167-0e62-45e7-93cd-72cc231d4814",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0dc5cfed-7c1d-4173-b0c7-704d9e9729fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4afafc1-2024-43c3-8dde-2dad5ace533d",
        "cursor": {
          "ref": "546b0e7f-26aa-4fcb-a3ce-cba1244b98f1",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6aed72c9-558e-47b4-9c5e-460ab6ab2dbb"
        },
        "item": {
          "id": "e4afafc1-2024-43c3-8dde-2dad5ace533d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2f29474e-f216-496b-a3e5-8bb056079226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d8c66b-8d83-41a7-901a-c2a28fc39177",
        "cursor": {
          "ref": "e977c3af-8e02-4a13-828e-98e64d81c1ed",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "44c3025e-b88b-4e1c-8973-fa378fa9eda6"
        },
        "item": {
          "id": "70d8c66b-8d83-41a7-901a-c2a28fc39177",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f834b016-f6bb-4389-8eb6-5db33cba7cdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c548bdc4-3c35-49d8-b17b-40bacd99c7c2",
        "cursor": {
          "ref": "66e97152-593d-4980-9df3-816776ac991b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "66c82aa6-51bf-4f74-8b15-df2f9f385014"
        },
        "item": {
          "id": "c548bdc4-3c35-49d8-b17b-40bacd99c7c2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "763b5541-a2de-49f8-b5e1-27dc487e307f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f274ced5-fb66-41e7-baea-dda289d51d97",
        "cursor": {
          "ref": "ea5e35d4-63dc-4f8a-a560-b2fae3e96895",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bc4b197a-128d-4ea3-bf9b-ecff026027df"
        },
        "item": {
          "id": "f274ced5-fb66-41e7-baea-dda289d51d97",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "49f31afa-bd5e-448a-b9de-ef022b2464c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4123b5-d2f9-4653-b746-c162a96bcf8d",
        "cursor": {
          "ref": "cb221435-beb4-41c5-b994-0264cdffeaf2",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9107a443-9e93-4a21-9756-7d48563bba20"
        },
        "item": {
          "id": "7d4123b5-d2f9-4653-b746-c162a96bcf8d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e8581c8-aadf-4094-9ae0-f9b233d6858f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5eda3cd-aa90-42a5-af61-b56a041a1807",
        "cursor": {
          "ref": "87d5a49c-d829-43e2-8a16-e281f3ee2cc1",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1635a08c-9e87-4210-9007-1dbb48137283"
        },
        "item": {
          "id": "a5eda3cd-aa90-42a5-af61-b56a041a1807",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bb507f10-8828-40e8-9550-e2629e5fdb40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df9d6e2-e1c2-4648-bf13-00ddce915171",
        "cursor": {
          "ref": "0720e915-6caf-4be0-bcc6-679454114026",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2be3290e-e50b-4024-a6a7-3fa2d48f77cd"
        },
        "item": {
          "id": "1df9d6e2-e1c2-4648-bf13-00ddce915171",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8ea3ab01-2e7c-4a81-8d84-66aa1391bced",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d13e7c-e750-486b-9215-42d04bb965a7",
        "cursor": {
          "ref": "9588dff5-e11d-4ca0-9172-fdb0b724126a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a213b390-d5f3-403f-951d-d58a5f6a8e40"
        },
        "item": {
          "id": "c3d13e7c-e750-486b-9215-42d04bb965a7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cf73cb39-cbd7-40c4-a684-5f8bf27745db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b1859a-8367-4626-9e27-254fb71863bd",
        "cursor": {
          "ref": "ca473d17-4774-4a73-96e2-6795944f9589",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "14a5a319-b8f5-4b3a-8959-b7624c67e2e1"
        },
        "item": {
          "id": "15b1859a-8367-4626-9e27-254fb71863bd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0066adea-86dc-461a-8bbd-e51be06f1a7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2927b0-31cf-4311-8e48-dd4f8b35f392",
        "cursor": {
          "ref": "05ce26e0-b8b8-4092-8f36-e0474c813551",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a4f8184d-c4d9-43f7-bb96-9b88c234889f"
        },
        "item": {
          "id": "4f2927b0-31cf-4311-8e48-dd4f8b35f392",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "763c5334-94d0-40b4-9384-d70cfc999977",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1431c1-03e8-4b8f-8f02-e76d489a90e8",
        "cursor": {
          "ref": "2b4e7809-d39a-42b8-9247-10f5e0735913",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b076a781-3337-4b36-854e-769de2b5d37d"
        },
        "item": {
          "id": "ac1431c1-03e8-4b8f-8f02-e76d489a90e8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0fe7b723-be07-457a-b2dd-fd6e4eb65104",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460563d6-e7de-4d1f-b54f-3441e9617e98",
        "cursor": {
          "ref": "474e6b05-8bc7-4a52-9f82-c4634b3e7ac6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4eff2b94-20e6-4cfd-ab00-263b09a624f2"
        },
        "item": {
          "id": "460563d6-e7de-4d1f-b54f-3441e9617e98",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "98c3c2da-1754-41cc-b205-ead4dfbee589",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc37f61-5465-4864-ab06-21572405d6c2",
        "cursor": {
          "ref": "22a0a498-be7d-4390-a5db-e37102b9c9a8",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "00187d9e-57cb-48b7-a6a8-9b6b5de500bd"
        },
        "item": {
          "id": "cdc37f61-5465-4864-ab06-21572405d6c2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d43ff299-56c0-47a7-b1f6-5694ca85a7ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f62408-9de0-4926-b190-88434e998f87",
        "cursor": {
          "ref": "273fc174-043e-4dfa-877a-1923733f22ee",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a7ee477f-75fb-4c33-bcb9-d95d49874bbd"
        },
        "item": {
          "id": "b4f62408-9de0-4926-b190-88434e998f87",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7334d9d5-634e-43eb-93a2-9d52317bacde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa57e448-e69b-472f-ad3a-cabbc839eb85",
        "cursor": {
          "ref": "1e748fd1-f705-4e46-ac62-5d5d175dc471",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5f262534-32bb-4502-92a4-185dc0517653"
        },
        "item": {
          "id": "aa57e448-e69b-472f-ad3a-cabbc839eb85",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "001c5750-591f-454d-b895-f4e6b49962c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee0c44b-cb11-473b-9314-18a4828c1a96",
        "cursor": {
          "ref": "e1abbb98-0d01-42a8-ba08-c1c38905faa2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ac4158bb-d11d-4fb3-8ecf-6e7c5ee376ba"
        },
        "item": {
          "id": "bee0c44b-cb11-473b-9314-18a4828c1a96",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cd0eccb8-9f0b-47a2-9260-9f482ebe7d9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f339bd-bf31-472d-a9ed-a154f5a494fe",
        "cursor": {
          "ref": "17542df4-9f73-42b3-9689-fd91993fd1fd",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "200beb2c-11e0-4b1e-840b-e0f39aa46f75"
        },
        "item": {
          "id": "22f339bd-bf31-472d-a9ed-a154f5a494fe",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e57b8656-399d-441a-9891-063636d8c2be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4aa128e0-0afc-4fcc-8130-fe1d202a3962",
        "cursor": {
          "ref": "0d66d172-2017-4c25-80ae-186e8b2e4cf9",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "95b90b30-d846-4d90-a5cb-4c5a2383ec2d"
        },
        "item": {
          "id": "4aa128e0-0afc-4fcc-8130-fe1d202a3962",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cfcaf63c-b16f-4860-a723-ed7eaf1de2a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 189,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "3bffef5e-ea80-4f23-87c1-fa013cad9c22",
        "cursor": {
          "ref": "f746eb2d-74b8-47e3-85c8-daa8a3a3863b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e036f021-58f5-4581-a080-7e189505a78c"
        },
        "item": {
          "id": "3bffef5e-ea80-4f23-87c1-fa013cad9c22",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0a9c45a1-e4f2-45fa-96f9-f93695ea6df4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "3bb40e78-d7cb-4b3c-95b2-8de6d1fca72e",
        "cursor": {
          "ref": "23deee21-b829-4a4d-9018-60c560b41414",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b70cd84f-7f25-43d5-86ee-a4b7e84ccac8"
        },
        "item": {
          "id": "3bb40e78-d7cb-4b3c-95b2-8de6d1fca72e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a94aff11-5dff-4b29-9866-647a7cdda4ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "dae0d72f-ba47-4c0d-bf27-983324c202b2",
        "cursor": {
          "ref": "30cafb93-745b-42ab-a2f4-ca06378ee6da",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "73e54d33-4bdb-4d9d-8cd8-d6131106b345"
        },
        "item": {
          "id": "dae0d72f-ba47-4c0d-bf27-983324c202b2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fc1c9b8e-cd0a-4fb8-a5c3-7fdb6e744012",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "8494d2ff-0f27-4a5a-89a9-a5f9ca549cf0",
        "cursor": {
          "ref": "a0ff6fd9-70f2-42fe-97d3-f8616affca4b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "afc085b6-ec56-40e6-bab5-6333fd38017e"
        },
        "item": {
          "id": "8494d2ff-0f27-4a5a-89a9-a5f9ca549cf0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "df340a8c-90b0-435e-9a13-e46ed97defa8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b9b00246-5002-4d21-adc9-36ff115eb647",
        "cursor": {
          "ref": "f323f662-2102-4290-82e3-7647ac782dd8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b1f11683-c7c6-4ef9-b7d1-a9cb2fe2e75a"
        },
        "item": {
          "id": "b9b00246-5002-4d21-adc9-36ff115eb647",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1fa99cdb-4f3c-4d60-9ba0-e5ee9064fd0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "3d875529-c71d-45fb-8ae5-6f3c17431560",
        "cursor": {
          "ref": "5abaad1b-2436-4aa5-be58-fb449fff7752",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d188a948-9343-4ad4-b48e-baddb7683823"
        },
        "item": {
          "id": "3d875529-c71d-45fb-8ae5-6f3c17431560",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c7980a1f-d126-409f-b0e3-9ee42d9720ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608d9a9b-b5f9-4d40-a20a-4624286ed342",
        "cursor": {
          "ref": "3c7622af-8402-46fa-af5e-dd29d0b9e54e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1950ece8-6aff-4941-9b38-b680a417286e"
        },
        "item": {
          "id": "608d9a9b-b5f9-4d40-a20a-4624286ed342",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b85f8af2-4823-45be-9a32-52019ad6d939",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992655a1-2fcb-47c3-addb-e9831a26c6d2",
        "cursor": {
          "ref": "288c06ee-6797-4d62-a6bb-39e8cc660741",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b040618f-9ff4-4420-a821-47797c50da61"
        },
        "item": {
          "id": "992655a1-2fcb-47c3-addb-e9831a26c6d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bf7120f7-dd02-4eba-b69c-cae86d50720f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c06d74-cb03-433c-822e-5592bb7b0312",
        "cursor": {
          "ref": "f12462fa-8d7e-4f94-b79e-9cf265227a65",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6629644-e51c-4a19-8662-b5d9fd119387"
        },
        "item": {
          "id": "74c06d74-cb03-433c-822e-5592bb7b0312",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4bd56b4-7da4-48af-84a9-2de9dcb662fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3faa0b7c-5919-4cba-9539-32c6f5126c31",
        "cursor": {
          "ref": "6fb13780-cee6-4a2c-9e07-24a2c66ccfa7",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "77bc3844-fe1b-479e-9a2e-d5c3625e326a"
        },
        "item": {
          "id": "3faa0b7c-5919-4cba-9539-32c6f5126c31",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f441dc3-15a7-43c1-a1bc-7a0134bd3115",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8ee392-29d6-4cdb-a258-1e83fc541661",
        "cursor": {
          "ref": "a405ea11-fb3d-45a5-a557-30cfb6af6c4e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d75f67ec-f305-4a50-8da0-6c026ed4b141"
        },
        "item": {
          "id": "ca8ee392-29d6-4cdb-a258-1e83fc541661",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8b4b0fd3-23c6-41bb-a6a5-8c124152d89a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc36808b-c40a-43af-87d2-3ae323e47434",
        "cursor": {
          "ref": "c71de003-8d45-4c18-ac7a-17e5a4c9347a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e64b2fbd-4eac-40d9-a7eb-03963f22ee43"
        },
        "item": {
          "id": "fc36808b-c40a-43af-87d2-3ae323e47434",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3d155c03-2152-4bec-9b74-85530fd9076a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738f4b7f-4f80-4db1-a25f-c763c7fe7c56",
        "cursor": {
          "ref": "03f666ae-30e9-4bd3-af40-814b10f5e8c4",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "57d027ee-ed53-48c2-a7a2-62507183167a"
        },
        "item": {
          "id": "738f4b7f-4f80-4db1-a25f-c763c7fe7c56",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ad14d435-5b93-4dda-bc8e-f3803a390018",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae84e479-9de3-470b-a2f5-c4e84997cf78",
        "cursor": {
          "ref": "75cea7cf-5ff3-406d-97b6-f6b603d75e66",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e7508ab0-c08d-4981-85d9-9c80095c8a01"
        },
        "item": {
          "id": "ae84e479-9de3-470b-a2f5-c4e84997cf78",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ecf6a02-c5a1-48be-881f-3bfde72583e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ffbd4b-9fd0-4752-807b-bd40344677d7",
        "cursor": {
          "ref": "c0a412ec-02ac-4796-8504-1bd4e6c91e31",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "307070d2-d241-44de-8dc9-2077bed72837"
        },
        "item": {
          "id": "48ffbd4b-9fd0-4752-807b-bd40344677d7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ba2085a3-4dc9-478d-8901-65d14138713b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b583b000-973c-4b43-93da-449c7ef6f81d",
        "cursor": {
          "ref": "5e325de5-a44d-40c1-aaf4-10ce3e587005",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3124582d-ae26-4a0b-a08f-67bee4f8437d"
        },
        "item": {
          "id": "b583b000-973c-4b43-93da-449c7ef6f81d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "26a4c8dd-4e7d-45a1-a683-f293ba160221",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e00819-1535-4d2b-91b5-8ddaa9268a66",
        "cursor": {
          "ref": "62e3ab33-1aa3-4e24-9f71-0c2ef17d4a61",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7c3d1e6a-ab3b-49f8-bbc4-c155a5c87e3e"
        },
        "item": {
          "id": "d5e00819-1535-4d2b-91b5-8ddaa9268a66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cb133c4f-b7d9-4d64-ac8d-9badcd7236b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e89bd6-57b7-423e-8aee-f64cc592876d",
        "cursor": {
          "ref": "8556729b-ba0e-4357-aaf4-6fe876038736",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eee6318d-ca70-45fe-afe6-9cf85ce07a8d"
        },
        "item": {
          "id": "06e89bd6-57b7-423e-8aee-f64cc592876d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3654fcd0-b777-42fe-a972-2bf37162b189",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae7b0ea-335a-408c-9875-4a3480f1bc81",
        "cursor": {
          "ref": "4c59e1eb-cd92-4943-814d-4c3cf15c60ed",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "91af653e-2729-4279-9f8d-42982117d44d"
        },
        "item": {
          "id": "7ae7b0ea-335a-408c-9875-4a3480f1bc81",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aa15a47b-767d-45f9-bf0a-fd8868718328",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f7614f-7946-440a-ba40-2af0f0d5357e",
        "cursor": {
          "ref": "d8841cfd-e544-471b-8abb-448ec9de1633",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9a665d42-724c-468c-9ad7-521a7b8bd131"
        },
        "item": {
          "id": "03f7614f-7946-440a-ba40-2af0f0d5357e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f76f58f1-8155-49ad-8458-31fd5f327877",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedee294-80f6-453a-9206-c99eda952817",
        "cursor": {
          "ref": "a5182761-b496-4b46-815e-07135015f020",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c17304f0-e3db-4fd1-8d0f-e758b046ae19"
        },
        "item": {
          "id": "cedee294-80f6-453a-9206-c99eda952817",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cad7a5db-53a4-49b4-9bc6-d0f43b5278a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bbaa04-fd10-48ba-9d6b-889e74dd4132",
        "cursor": {
          "ref": "6aad297f-54e4-4bc4-8df1-c6c2d725f972",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aa322dee-09af-43f7-a51e-c534eb973a73"
        },
        "item": {
          "id": "18bbaa04-fd10-48ba-9d6b-889e74dd4132",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "237b4eef-b0a7-4f34-9eb2-6e376855302d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7e75cf-c339-44f1-ade3-3811cf364873",
        "cursor": {
          "ref": "2e9951e6-cdcd-40f2-9a99-0c4dc32dfe8e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0df1800c-b76e-497c-b8df-8037279c9a9e"
        },
        "item": {
          "id": "8d7e75cf-c339-44f1-ade3-3811cf364873",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bf83f2d9-3794-4e53-b499-d2aee6833e5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05e42a4-f174-4c71-a550-d310229d5808",
        "cursor": {
          "ref": "8850b58a-0283-4d77-8b6b-f8c49fb88f10",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2ab790a4-d245-412d-9d67-acd7b5938fcb"
        },
        "item": {
          "id": "e05e42a4-f174-4c71-a550-d310229d5808",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "005935a6-a965-4f93-ab6d-e6cfe08b80d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fce351-1a13-4a5e-8548-409d147b36e7",
        "cursor": {
          "ref": "e535011c-55a0-4b98-ba3f-febab56737a2",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fe6bdd0c-4430-4e9b-946c-6d8aaf118857"
        },
        "item": {
          "id": "d0fce351-1a13-4a5e-8548-409d147b36e7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24caed6c-3da9-4ac2-812b-2e12de708e90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d885f0-330b-4317-a38c-5419825f2a33",
        "cursor": {
          "ref": "ff9597c9-bc8f-4e5f-a345-9277209c8c75",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ed57f885-70fc-47aa-902f-76213573371e"
        },
        "item": {
          "id": "27d885f0-330b-4317-a38c-5419825f2a33",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d738ca23-8fcf-4d18-99bc-60792b65e9eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef252e7-b3e1-4605-8a65-27239abe139c",
        "cursor": {
          "ref": "69b4370b-0726-4c1b-a636-6c7d95f3b387",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fc4764e1-e3a7-4446-ad9e-f87b24fe6922"
        },
        "item": {
          "id": "aef252e7-b3e1-4605-8a65-27239abe139c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "51bd0584-5e79-4c29-9b43-6b8f578c612c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacc01d4-d51c-44de-97b2-8ff3ed11d036",
        "cursor": {
          "ref": "87d3a235-389a-4576-8dab-abec178103d1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1c31d42b-0764-40cc-b2b3-d394f35f204e"
        },
        "item": {
          "id": "bacc01d4-d51c-44de-97b2-8ff3ed11d036",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a41c2c95-a1b5-49e6-bb7b-635c11722fb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5533e354-78f8-4c49-8da1-b1feabd788b6",
        "cursor": {
          "ref": "df7b6d8a-bbde-4326-949e-bb8a729cabae",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "440bdd97-00f9-49fa-a85f-13edb6b9fb3d"
        },
        "item": {
          "id": "5533e354-78f8-4c49-8da1-b1feabd788b6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d0fc5cc2-6fe8-42a2-bf19-a05900e7d1d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7bfd6-8b1c-4e09-a153-cda099076f67",
        "cursor": {
          "ref": "36609d99-3b2a-4c78-b2cf-e7f688a5d098",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5606159a-b4df-433c-a79d-f5a4a873beae"
        },
        "item": {
          "id": "97f7bfd6-8b1c-4e09-a153-cda099076f67",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dc1ddffe-1722-468d-ad1e-035e2a58522c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a7f6d0-3c05-4bd7-8d12-30ee82b0e8cf",
        "cursor": {
          "ref": "87611aa6-e9a8-4bd3-be4e-3546f1140af9",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d4192fa0-d22c-4342-9362-ba2464f2aa7a"
        },
        "item": {
          "id": "a2a7f6d0-3c05-4bd7-8d12-30ee82b0e8cf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "44f101b0-32c6-4281-8c30-4f57d73ca4db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8776ae40-a8ff-4750-8d13-999f34ac520e",
        "cursor": {
          "ref": "ad20dfe2-9d05-4850-8ca5-027ec824ae04",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "28340000-51ef-461a-9c5f-20062ef5c753"
        },
        "item": {
          "id": "8776ae40-a8ff-4750-8d13-999f34ac520e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0fd10575-3389-4209-934e-99681275473d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2f589b-324e-430d-a78b-e9ea5cae6911",
        "cursor": {
          "ref": "c48891ca-7837-41db-9dbf-091dbd016510",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d35f166a-1ef7-4cd0-a00c-0e5a647494d2"
        },
        "item": {
          "id": "bb2f589b-324e-430d-a78b-e9ea5cae6911",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c511c7af-798c-496c-b2ad-6698de512210",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fafbd47-32d0-42ed-9bc0-de4ad6ea5972",
        "cursor": {
          "ref": "713ffa26-3a17-45db-b182-f951d0e37a90",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e363df81-447e-45ad-9bce-68023d5c315d"
        },
        "item": {
          "id": "2fafbd47-32d0-42ed-9bc0-de4ad6ea5972",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3d1fbde8-75a2-4117-9309-21fa18c2efbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3fb082-34e1-4250-8506-ae1901d20a52",
        "cursor": {
          "ref": "34b62bc5-8964-4c11-ada2-bb42610fdb6e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "317b3749-fbf5-4db0-808f-f7507ef9e8ea"
        },
        "item": {
          "id": "2d3fb082-34e1-4250-8506-ae1901d20a52",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59a8fc98-c403-4cf9-b4e4-d952a16f5937",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd431b84-b9b5-4c42-90e1-f2613b52706b",
        "cursor": {
          "ref": "f62916f6-d869-4501-b05d-e8ab5457a9eb",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fc8307a2-4f70-4c32-b7a5-5ddf3266c94f"
        },
        "item": {
          "id": "cd431b84-b9b5-4c42-90e1-f2613b52706b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "82526881-24ee-4a4a-a424-3f409a5a76ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a6d1f4-1313-4d29-96c3-b3390dc02b91",
        "cursor": {
          "ref": "28ca1274-b5fb-4d09-9832-77af645e2ea4",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6f3b5252-881f-4c62-9f03-37b9b1d61b5c"
        },
        "item": {
          "id": "c9a6d1f4-1313-4d29-96c3-b3390dc02b91",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "719e6a1b-84c0-47cf-a75c-552326ca3dfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de846f8-1f82-4eef-b905-0b56a0210cff",
        "cursor": {
          "ref": "11b94355-0f25-44ed-95b4-067cb4ef5ff0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9052a116-f630-4c9e-88f1-e788682fb486"
        },
        "item": {
          "id": "2de846f8-1f82-4eef-b905-0b56a0210cff",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9175462a-7d67-4d28-957b-fa5baf0ac1fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581fd883-8000-4725-9a6b-c4ade9d20af7",
        "cursor": {
          "ref": "9a6b092c-599a-4464-a436-f6511235d716",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "36654ce3-34a2-414d-ac67-931e82c84b81"
        },
        "item": {
          "id": "581fd883-8000-4725-9a6b-c4ade9d20af7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "448e4396-6a76-4675-b6e0-b14befbeada3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135e3ea1-0c6f-4434-b1fb-7664e1f96363",
        "cursor": {
          "ref": "6f92fe40-aa99-4c35-a4a0-d2486f0c3474",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "91d247ce-ec16-4519-859c-46cea4a5e27a"
        },
        "item": {
          "id": "135e3ea1-0c6f-4434-b1fb-7664e1f96363",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "aca54272-d893-45d5-a1ca-feb7a1dcda1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55553029-30e1-4e6a-b717-bd83358b63da",
        "cursor": {
          "ref": "c6838443-b0da-475e-98e7-9d5ad41ada59",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d723556-dd4e-4148-ae85-50b312c64104"
        },
        "item": {
          "id": "55553029-30e1-4e6a-b717-bd83358b63da",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "190c2b63-c9bf-4877-a0ee-9085ffa6910a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c46e62-0334-4c1d-98e7-1ad79bb4e1ec",
        "cursor": {
          "ref": "b8422595-3de1-46ea-9bed-68805f799e52",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a2f8ba36-11b0-48c3-9d3a-15f09e4d63a4"
        },
        "item": {
          "id": "97c46e62-0334-4c1d-98e7-1ad79bb4e1ec",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "9102eedd-ebaa-46fc-a5b0-3f17d1e72547",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7097dd-21ea-4d9a-8396-b425d3a3adca",
        "cursor": {
          "ref": "acec0887-1404-49b1-b04b-a94d993e7f71",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8ea7dde2-63c2-4987-ac38-90d590b436d1"
        },
        "item": {
          "id": "ac7097dd-21ea-4d9a-8396-b425d3a3adca",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6b8e37ca-1c44-48f2-b0cd-21cd0391c764",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39506a97-9181-4636-a495-7a1e3f856148",
        "cursor": {
          "ref": "6aed3939-23a3-48ee-8650-67fcc7108d52",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "32970f54-e616-47b1-8412-6196e61d7693"
        },
        "item": {
          "id": "39506a97-9181-4636-a495-7a1e3f856148",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dfacd835-7132-49c1-abb3-d83011e40d29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccddc090-53b6-4108-a501-1d34b907f2c2",
        "cursor": {
          "ref": "8cfc40e1-ed0e-46d2-b09f-7de2be46c7c4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3da5a328-19f8-49a2-81dd-45417d5b38b3"
        },
        "item": {
          "id": "ccddc090-53b6-4108-a501-1d34b907f2c2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "85476193-65a1-43f6-bd54-8c3a886877c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537a2c3c-a06f-4da0-82be-21ca1bc031ae",
        "cursor": {
          "ref": "b23e1590-5bd3-40e4-a0e0-4979b2f989c7",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "db466782-d38e-4235-afcc-a0d12dd089d4"
        },
        "item": {
          "id": "537a2c3c-a06f-4da0-82be-21ca1bc031ae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "277c43d3-0727-4a7e-8305-d193417ad337",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa9d2e9-de30-4904-9a40-ef8a6af5d829",
        "cursor": {
          "ref": "93ed297f-df51-468f-98fd-f7f1989cd5d9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f36472a9-29fb-40f1-8767-f1be91512456"
        },
        "item": {
          "id": "ffa9d2e9-de30-4904-9a40-ef8a6af5d829",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b9fee7e2-d243-4378-a6e9-ca35a10baefd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46eecdf-1446-4f57-b6ab-d37ff85c9ed5",
        "cursor": {
          "ref": "7f251ee0-d378-4ccd-a13f-a26c009bc97f",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "855a9b69-a3d8-43d3-afab-e8c8236a9c1f"
        },
        "item": {
          "id": "b46eecdf-1446-4f57-b6ab-d37ff85c9ed5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cfb03d5b-57e3-4334-a9e8-800b0784d7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbbf896-9b95-4974-b25e-a973cb5036d9",
        "cursor": {
          "ref": "a9b10db8-8a38-455d-93d4-f77d1437a2d2",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a299c1d4-427b-4735-b61c-743441349bbb"
        },
        "item": {
          "id": "ddbbf896-9b95-4974-b25e-a973cb5036d9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2c34ae8c-88c4-4ce5-a60e-32468bf20937",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8da24dc-c624-45ae-b4ce-2253b67af7ae",
        "cursor": {
          "ref": "597b1054-83a0-4f3f-a7ad-e3df1a9a26b8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "49234e69-d0b3-455e-af66-4db90545d78d"
        },
        "item": {
          "id": "f8da24dc-c624-45ae-b4ce-2253b67af7ae",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5c2b35ea-9b7a-445f-9818-25c0f69291fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11c7dad-bddb-4400-89ae-1b2d8716eef6",
        "cursor": {
          "ref": "e293ad9f-967f-4b49-aacf-691a89a9a3f8",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e994a599-1a70-412f-8f17-c44168f21ab1"
        },
        "item": {
          "id": "d11c7dad-bddb-4400-89ae-1b2d8716eef6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7a391e86-ec1f-40f8-b048-298296c19732",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835004b5-160a-477d-a326-f9aa0ac78d2f",
        "cursor": {
          "ref": "4f92751e-417a-49e6-8883-7b7d05b23f0d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "da7ad390-b71f-460c-8b8e-d262100cb922"
        },
        "item": {
          "id": "835004b5-160a-477d-a326-f9aa0ac78d2f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5f49f999-dd27-4522-bf5c-c491ae124908",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866f51e4-aaeb-4326-8803-faafbd2c9ac5",
        "cursor": {
          "ref": "92c77103-f073-43d6-8d59-d2ce5f9b1f3f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fd83552c-4e8d-4a2f-9742-120884e7215d"
        },
        "item": {
          "id": "866f51e4-aaeb-4326-8803-faafbd2c9ac5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "91abfe48-343b-45ee-895b-7a401a11740b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0250ea95-a2d5-4605-b7d4-e0ccb707b694",
        "cursor": {
          "ref": "9972a02f-addc-4511-8ae1-b099c36b2712",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5bb1b201-3186-49cd-82c2-e8ff2d5acaf8"
        },
        "item": {
          "id": "0250ea95-a2d5-4605-b7d4-e0ccb707b694",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b6158e25-cfe9-4e00-9118-a931a59bd515",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20aeabca-fc54-40ab-87f3-418650c05098",
        "cursor": {
          "ref": "6125291f-9782-480f-bc27-a44d74a05cac",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "30c5a956-532c-4872-b712-35e884fbe17e"
        },
        "item": {
          "id": "20aeabca-fc54-40ab-87f3-418650c05098",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5d774395-5208-4e31-9a44-01bbe6657bd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316646ab-c85b-406e-91f7-889e079c7987",
        "cursor": {
          "ref": "b10ef956-fe5b-4665-adc8-2c73ff017a1e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "20d7659d-502e-45f3-b13c-fc9c7470a911"
        },
        "item": {
          "id": "316646ab-c85b-406e-91f7-889e079c7987",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4f978e75-574c-4336-819a-e60cc1fb5553",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97f52fe-67a1-44e8-9796-45d883724822",
        "cursor": {
          "ref": "5a99d8a1-696f-4037-a8ed-1fb4de361537",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f7f30d3c-ed2e-4b6c-9538-3dc5a87fda14"
        },
        "item": {
          "id": "c97f52fe-67a1-44e8-9796-45d883724822",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fe2f4d11-3fac-4a06-a0fe-7cfcdc6b5b8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884ee10f-8db8-4391-8d74-e6c846e6ab8e",
        "cursor": {
          "ref": "39dcca07-3603-4082-913b-feddbd7459aa",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "59807426-d36f-4379-a896-689686361ace"
        },
        "item": {
          "id": "884ee10f-8db8-4391-8d74-e6c846e6ab8e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7cfe10e4-8342-4935-9ebd-d9b28544a529",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8033005-2e20-47ca-abde-1ae5bae6cd5f",
        "cursor": {
          "ref": "df02d0aa-7592-465f-b359-636d3734b3e7",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5a578569-3bf9-43eb-afb1-db028b913ac2"
        },
        "item": {
          "id": "e8033005-2e20-47ca-abde-1ae5bae6cd5f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e27b0be4-eea0-4391-a142-66fe27fd49e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db74277-0fbc-4929-86c6-b1727a9d841b",
        "cursor": {
          "ref": "9ed756d9-f836-451b-bb9f-7082f1963024",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3bbdedbe-ca9b-4b01-a3dc-d2c21115d848"
        },
        "item": {
          "id": "7db74277-0fbc-4929-86c6-b1727a9d841b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ad62965b-a16a-4b8f-a8f1-8e566c8a143e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8c3788-993a-4c0b-927a-ca45d1507257",
        "cursor": {
          "ref": "0dccda56-0eb3-463c-b71f-0ff637f20280",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "24bdf8ce-94cb-45ca-a1ec-fc354fe789e3"
        },
        "item": {
          "id": "cf8c3788-993a-4c0b-927a-ca45d1507257",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3f2b7589-e593-466d-9852-3a8f161d5f20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0acc4ac-1e89-4be8-8271-1ca48a3ea89d",
        "cursor": {
          "ref": "1c01728b-65ac-49ca-b4f9-d9ac6a3136b5",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bd32c9f4-e3b5-497f-8d45-1257b9544956"
        },
        "item": {
          "id": "c0acc4ac-1e89-4be8-8271-1ca48a3ea89d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0cebb013-e8db-45bd-b33c-60d6c8f0e865",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8efa016-3806-427f-850a-b5d9469c6aba",
        "cursor": {
          "ref": "6cedc7de-1d74-47dc-b281-727c4fd1259c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7e4bfad6-0592-428c-bdbd-bd85f6684359"
        },
        "item": {
          "id": "e8efa016-3806-427f-850a-b5d9469c6aba",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b315c6af-13bb-420e-b802-e840d01e80fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e7b35d-a6a6-4b77-aff2-54d7f5769a63",
        "cursor": {
          "ref": "5abaa4a3-c1fe-44e7-820b-b2c98b4da624",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5064338a-23ae-4ef5-b9bc-b3277a474202"
        },
        "item": {
          "id": "01e7b35d-a6a6-4b77-aff2-54d7f5769a63",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2ca037bf-0d32-4a5c-a960-0adb56e9a245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f6b8ea-470a-42a5-a857-eec35b761c03",
        "cursor": {
          "ref": "a34c5878-a4f8-42d3-9b9e-f809d6ffc4fa",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9f81720c-02fd-4c10-8325-a17052820e75"
        },
        "item": {
          "id": "24f6b8ea-470a-42a5-a857-eec35b761c03",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c83c7711-1b48-45ff-afcd-d0a8b5246de4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61789acb-970b-40a8-a09a-e3f1d4b970da",
        "cursor": {
          "ref": "e1b84469-f5fd-479c-b721-56fdbdfc966b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "602f2be8-ac82-497f-8371-e9fe92ec31a1"
        },
        "item": {
          "id": "61789acb-970b-40a8-a09a-e3f1d4b970da",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "15831ff9-be47-4583-b13a-4bdbf1d04b58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fdedd5d-e3fa-4ae3-a51b-00705a58deba",
        "cursor": {
          "ref": "d1d9cb1b-6f72-4709-b1e3-6c4fcce584c2",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4dd28b36-29b7-4b8e-9a31-15725f1d67a3"
        },
        "item": {
          "id": "6fdedd5d-e3fa-4ae3-a51b-00705a58deba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "55ea14d6-3b24-4131-8e1b-3e6b8971cd08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1472ac08-a040-4c19-9648-1bd0f5d5f276",
        "cursor": {
          "ref": "e744c6a0-ecdd-4c43-8057-c1014b843ee7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ca3a9266-b004-4d6c-9ab1-ec59e544a321"
        },
        "item": {
          "id": "1472ac08-a040-4c19-9648-1bd0f5d5f276",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "77b3bc40-cc1f-4eaf-bdf2-9af92629d7d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0de34b-4133-4599-b381-e2eddd280bc9",
        "cursor": {
          "ref": "4399eb23-0106-43a8-8f10-e520b10fdb10",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f7fe73cb-246b-4c3e-b361-7e7aa24e3ef0"
        },
        "item": {
          "id": "0c0de34b-4133-4599-b381-e2eddd280bc9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0c0646ce-fe26-40a2-8407-9410ae43f3bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e625c999-b92b-43b4-a53b-718b60c20424",
        "cursor": {
          "ref": "24b13d54-500f-4c7d-92a8-ea6b329b201a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3e65dbd4-53ee-4b8e-ba2d-e1fa86b62bab"
        },
        "item": {
          "id": "e625c999-b92b-43b4-a53b-718b60c20424",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c0419123-c79f-44cc-b22a-213746ce039e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cb9181-6d46-4177-a5ca-77dd89943e65",
        "cursor": {
          "ref": "2843850d-ce21-4698-bbeb-ceadfceade00",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "706916ad-f01f-4c03-a46e-ce7b1529daec"
        },
        "item": {
          "id": "b4cb9181-6d46-4177-a5ca-77dd89943e65",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b3aab0db-37e3-4103-8f90-71201bbc1831",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19be3184-9930-473c-8d2b-2599a51471e1",
        "cursor": {
          "ref": "50390e98-5c42-4fd4-b880-8330d0b0e863",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7bf2e8ae-8b6e-4e02-9a7f-265a0cc05860"
        },
        "item": {
          "id": "19be3184-9930-473c-8d2b-2599a51471e1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d7197bdd-7cab-40da-aba9-24ae363c3866",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41406c8-db6f-4908-97fe-758ed8b5973f",
        "cursor": {
          "ref": "0ee3c3e5-c1e4-40a1-96c1-3e5a485729fd",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4a5b0149-b70f-40c0-a234-7c4d0db04c3f"
        },
        "item": {
          "id": "d41406c8-db6f-4908-97fe-758ed8b5973f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7fd3236e-f463-4956-9591-70c92e72b5c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a34ab0-6245-4551-a2fb-cb03c624df2a",
        "cursor": {
          "ref": "d938cf4d-d719-48a7-934d-e19902100f19",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dba115b0-4f98-4866-a5b1-aab13cee894a"
        },
        "item": {
          "id": "b6a34ab0-6245-4551-a2fb-cb03c624df2a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f2fdd287-4e81-420a-bf2d-d3d726d4bc14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b001408d-d1ab-46cd-85e8-ac88e5581d86",
        "cursor": {
          "ref": "78f9d0b3-9bb6-4097-b20b-cf3b34150d6c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a4d5c7ec-39d8-4c86-ab5a-3f250970ec27"
        },
        "item": {
          "id": "b001408d-d1ab-46cd-85e8-ac88e5581d86",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8d33e092-270e-495a-8e82-f621c46fc62f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d7db66-03c5-433a-a270-b4545098e8be",
        "cursor": {
          "ref": "51d027ca-cde1-4656-b4e4-28f3df2ac3fa",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "41d24a65-f71d-4354-9514-a97a8cb32b08"
        },
        "item": {
          "id": "a7d7db66-03c5-433a-a270-b4545098e8be",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "12206136-d657-4cba-8606-c84aafa328d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538e3acf-af54-4d26-90a3-5508e46dc7c8",
        "cursor": {
          "ref": "21d6a0c5-5402-4bfb-98e2-df0e0f5e32bf",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c794579-34f9-460d-a61a-4b316ae633f4"
        },
        "item": {
          "id": "538e3acf-af54-4d26-90a3-5508e46dc7c8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8c386064-ff1f-4a42-9e89-9aa421448880",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a69a7f0-e26c-4fcf-ac8c-99647d0b8f2b",
        "cursor": {
          "ref": "878554ce-f450-4108-9c33-4aa22ad03368",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d3060e77-fff4-4f08-ae7c-382a196c73b4"
        },
        "item": {
          "id": "1a69a7f0-e26c-4fcf-ac8c-99647d0b8f2b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6bcb1abb-88ac-4613-b245-d6a711653709",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa5f3ea-2ac8-484c-9352-a10a27b3b4c5",
        "cursor": {
          "ref": "430b6c14-e204-499f-a138-aa78b8be6312",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7c44e589-c384-4764-aeb3-c7c12a28eed5"
        },
        "item": {
          "id": "efa5f3ea-2ac8-484c-9352-a10a27b3b4c5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "721baa17-f8ea-44bb-bafc-a2c4b7a1f3c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8867a3dc-eb0c-4871-b9ed-58da4d0fd11e",
        "cursor": {
          "ref": "7cf2264f-eaea-4355-bf53-56f3ba554f12",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "527ffc6f-9a77-4b55-a9df-bcde9e4d8767"
        },
        "item": {
          "id": "8867a3dc-eb0c-4871-b9ed-58da4d0fd11e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1572c8db-a8f4-4896-8984-1b12a0b7d6f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4516a486-fde7-412c-a5c4-5dd631e1144b",
        "cursor": {
          "ref": "c4beb457-f390-4719-94d0-bfda69fcf4d0",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8b46313c-4845-49ef-a023-b4f26bc9b06a"
        },
        "item": {
          "id": "4516a486-fde7-412c-a5c4-5dd631e1144b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d0bb5136-b5a4-45fd-be4d-84496728809d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7606c8c-0ff4-49d4-a826-66966805d629",
        "cursor": {
          "ref": "9be1fad2-4012-4874-9e88-255d1c31f12b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a11761e1-d15b-4fa4-b863-60aa36c15afe"
        },
        "item": {
          "id": "e7606c8c-0ff4-49d4-a826-66966805d629",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c93a42d4-7e5b-4033-a9dc-1b158d4eae40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba299ee-83a4-42b1-baba-80168495e088",
        "cursor": {
          "ref": "4f9c1751-67d6-4ef2-8b56-8aaa9f45b4a0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ae0ded5f-b288-4759-b1a9-cb826181140f"
        },
        "item": {
          "id": "dba299ee-83a4-42b1-baba-80168495e088",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a79170c8-ae4d-496d-b170-083689a6640f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df88811-f545-42f0-a9cb-cc23e62487e0",
        "cursor": {
          "ref": "1fe523ca-fa3e-44f4-8c75-bd2b3778886a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "65c54788-2d61-4ef3-b2eb-d7c1128d8d60"
        },
        "item": {
          "id": "4df88811-f545-42f0-a9cb-cc23e62487e0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "40395ad4-5f72-49e6-ac77-d32dce30ce66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40f1039-8be0-4152-bb7f-e92c8c1ccb2a",
        "cursor": {
          "ref": "3b7760fb-dac8-42f4-9ffa-58a4dfbf67d1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "70b0c17f-7711-4aea-b661-99a19390c6aa"
        },
        "item": {
          "id": "d40f1039-8be0-4152-bb7f-e92c8c1ccb2a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b0747480-6c68-4126-b965-ced853930e08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55db70-899e-4d13-968e-a9dd47a15511",
        "cursor": {
          "ref": "6d1e13c4-3249-47e7-9c67-a3a42eef2955",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "54e9cd03-9336-4f42-a580-54fb63e787b8"
        },
        "item": {
          "id": "1a55db70-899e-4d13-968e-a9dd47a15511",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1c259137-ff50-4a16-beb9-0f189001de42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a8fae6-427b-49e8-83ca-1d8ed83757bc",
        "cursor": {
          "ref": "518f392b-1553-4cf7-aac6-0aeccabcf339",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1c5d7fdf-d415-4374-85f8-d3fcc64ed5a0"
        },
        "item": {
          "id": "b6a8fae6-427b-49e8-83ca-1d8ed83757bc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "98db80f3-6fd1-42ac-8000-87bb0d8d27f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770735d3-e291-4005-9831-9696e71da718",
        "cursor": {
          "ref": "6db9de73-0108-4266-abb6-80e1d720dd6c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "23f894bb-90bd-4ee0-95b1-65a74b594d8d"
        },
        "item": {
          "id": "770735d3-e291-4005-9831-9696e71da718",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eef2803b-7e9a-4bf1-a2d6-b0a5ead058b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4dd90e-96cc-421e-8158-f95d5bedd24b",
        "cursor": {
          "ref": "fb096f08-8936-46b8-8b19-1b726385dcfc",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f01357c-6b07-4eca-8c9f-f7fe6d289743"
        },
        "item": {
          "id": "1e4dd90e-96cc-421e-8158-f95d5bedd24b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8d61d9db-285a-4580-acd7-3cb83b5918d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b890c4-8b66-4f59-9d5b-8358e84a7a57",
        "cursor": {
          "ref": "8b486c52-de4a-4d7b-8d54-aed7d5631318",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "59120dab-9367-4a76-8c99-ef2d30981544"
        },
        "item": {
          "id": "03b890c4-8b66-4f59-9d5b-8358e84a7a57",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5e492c47-b230-412d-be73-e085c4ca13c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0d3829-d3d3-460d-a1cd-9563740abaef",
        "cursor": {
          "ref": "853aa806-35b6-4cce-bbac-ce98a38a718f",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2407f50e-0be7-48ef-86e6-eb449f25c941"
        },
        "item": {
          "id": "ce0d3829-d3d3-460d-a1cd-9563740abaef",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e001fdef-6116-4a6e-94aa-53317b578d78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d2903c-106f-4e23-9f08-2a38a3a178e8",
        "cursor": {
          "ref": "a1dcedb4-b64f-4372-b07c-4988c438223c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9de22c8a-8e2e-401e-9b0c-385649febdd7"
        },
        "item": {
          "id": "29d2903c-106f-4e23-9f08-2a38a3a178e8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b1d91e95-31c7-43e5-9220-e8b5fa345c46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86203acd-426a-4628-a792-e815f98cf55b",
        "cursor": {
          "ref": "559dee91-1244-4170-a3e6-62a2b91d7b75",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "83f75241-c9b4-4532-8fa6-0f0ac44f2588"
        },
        "item": {
          "id": "86203acd-426a-4628-a792-e815f98cf55b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d3655f4b-cc21-4e4d-a5d0-83d9e1b3abc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72f4a34-80fc-4bc4-b886-8be34cc8bd3b",
        "cursor": {
          "ref": "69234d92-7abe-489f-807e-4478ba29ef2c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8bc52215-2dbc-40a0-8466-13bb86f4c5e0"
        },
        "item": {
          "id": "b72f4a34-80fc-4bc4-b886-8be34cc8bd3b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d7de7f78-5c1f-42f7-9a07-9a2d1c90db7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719f97c0-626f-4622-b9f6-f7e1972ee13a",
        "cursor": {
          "ref": "76dd957e-aeab-4aaa-9b43-e95a87a726de",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ea1a2b77-36b8-492e-9ab8-8f818240f317"
        },
        "item": {
          "id": "719f97c0-626f-4622-b9f6-f7e1972ee13a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1862ce6-8aba-4d34-a413-5211a4f3c659",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6cb94a-cb5a-413d-bba7-3c100753f77f",
        "cursor": {
          "ref": "77b6aa3f-d706-4e20-89db-d825c3e6c226",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d073bd14-9661-4986-a605-d2b4ba961cae"
        },
        "item": {
          "id": "4d6cb94a-cb5a-413d-bba7-3c100753f77f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4daba12f-a080-43cc-93e1-05f37e0b05b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeb441b-2b90-4d13-a2bc-ef3fdb589aa3",
        "cursor": {
          "ref": "1cee09d8-bb23-4896-8930-4389d805139b",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bee8f712-fe86-42e4-b2d7-4d3790f1097e"
        },
        "item": {
          "id": "6aeb441b-2b90-4d13-a2bc-ef3fdb589aa3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ddff50c5-e9ca-4111-9441-42c6e3a1a0ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177622fa-0f0c-4afd-be73-1ec5e6e9e653",
        "cursor": {
          "ref": "e9470a28-02cf-43e0-a5cf-3b3f1fc4b0fb",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "97cfb7ed-ce30-4134-b425-87f99ed7de38"
        },
        "item": {
          "id": "177622fa-0f0c-4afd-be73-1ec5e6e9e653",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "040cce4f-538c-40a9-a476-5f56d1695f37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5220f624-68cd-470c-afa0-144e586f102f",
        "cursor": {
          "ref": "2995a291-a36a-4f3c-b464-4e1c247fd0c4",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "befd9a75-a6d1-4514-aa64-a9d234b769c2"
        },
        "item": {
          "id": "5220f624-68cd-470c-afa0-144e586f102f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7ce941a0-3679-434b-8cf9-c6f21caeb43b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da843bd6-32ce-4405-858e-bb00bfd9c591",
        "cursor": {
          "ref": "c5386aa4-1692-4258-8cd5-d4bb320c27b1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1011ab35-084c-4f04-b691-8caeb135010c"
        },
        "item": {
          "id": "da843bd6-32ce-4405-858e-bb00bfd9c591",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5fbae17f-01a4-4078-813a-e7ad548c309b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2246f5-3a98-4b9f-9d2b-17aa80fc4fe7",
        "cursor": {
          "ref": "42d66a65-7e3d-453e-a82d-612c1c5242dd",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4ee7a6c3-62fb-4ef8-9dfb-48362a78fcc6"
        },
        "item": {
          "id": "ca2246f5-3a98-4b9f-9d2b-17aa80fc4fe7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "926f06cb-1326-439d-9b7f-7483d90498c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89eb22f-8e47-4077-8a34-788df1859940",
        "cursor": {
          "ref": "9b18a246-61e9-4937-8061-16a633a1c66c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "421f39f1-d778-498c-9bc5-0a3677d6e5de"
        },
        "item": {
          "id": "f89eb22f-8e47-4077-8a34-788df1859940",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a4aca2e0-20b4-4bf1-8ae5-c582ebb02d2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06eed15e-a39d-426e-9598-cfd981351a4a",
        "cursor": {
          "ref": "b3917db2-6c72-4d04-a8bc-532d638191e2",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "95b5d290-d4a6-41b7-97a0-7cbeb247298f"
        },
        "item": {
          "id": "06eed15e-a39d-426e-9598-cfd981351a4a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "79593291-104e-4501-9000-e2cddebf4f36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c96a18-9e4a-4084-ad0c-6acd2fddfcac",
        "cursor": {
          "ref": "65d65745-c6f8-43c7-88a9-82ed4ee759ad",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0d688de9-d54c-4142-9c1c-1a2422d997d6"
        },
        "item": {
          "id": "10c96a18-9e4a-4084-ad0c-6acd2fddfcac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "29f9cda9-1939-42a4-8394-cf5fd4301f02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4924de5-dbf8-416f-a498-a3651c401828",
        "cursor": {
          "ref": "3084af71-aa08-4bc8-8add-69e3295da56d",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b484fa2c-4c4c-43bc-9531-ded113205fb8"
        },
        "item": {
          "id": "d4924de5-dbf8-416f-a498-a3651c401828",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b85fed17-2b04-4608-a797-331c7d13d356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44da7a22-abd4-4ef0-89ad-2efb8f278f59",
        "cursor": {
          "ref": "9bbd708e-f30f-4bfc-acc0-000028a70716",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a285c418-5b68-43b1-9da4-9adf3658a906"
        },
        "item": {
          "id": "44da7a22-abd4-4ef0-89ad-2efb8f278f59",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "911f3bdd-2c11-47ac-9fdc-a05e5d796b3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f404bec-3a74-48df-b8e0-05621eae496c",
        "cursor": {
          "ref": "bd214ac2-c763-492b-8aab-bc4bf70dc04d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "45ef7b33-d6e1-4a92-aacc-f7edb0457cfa"
        },
        "item": {
          "id": "5f404bec-3a74-48df-b8e0-05621eae496c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e1aab398-1ca0-47dc-8d5a-8dc5c09c9801",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54daaecd-e703-4ce5-9b02-d771b42113ed",
        "cursor": {
          "ref": "908c4920-b3af-4c86-b60d-c9d2429dd803",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "090f736e-784b-4700-9d20-1e4bc571ce2c"
        },
        "item": {
          "id": "54daaecd-e703-4ce5-9b02-d771b42113ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dd48c640-0909-4725-a937-cd9348f1a2d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2abb412-82f0-412f-9daf-6cdc254bc95c",
        "cursor": {
          "ref": "72f2c348-a30e-4d36-afc2-d7c69d7e779f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4ae655e6-8934-4088-ba3b-5d88f26bacd1"
        },
        "item": {
          "id": "a2abb412-82f0-412f-9daf-6cdc254bc95c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8498fd16-1fce-4cc5-967d-a64adf6a9cc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef87600-791e-452f-be13-3cbac33ef9d1",
        "cursor": {
          "ref": "b0066c55-9959-4fac-b655-6333d0ed436a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1a78e869-a97d-40ac-9708-d8de04696605"
        },
        "item": {
          "id": "1ef87600-791e-452f-be13-3cbac33ef9d1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fbecb396-4f73-411b-989b-54f2eab75ff2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bfc4f0-909a-40bf-b93f-0819bc012c72",
        "cursor": {
          "ref": "78c4f09d-07b5-4aed-9b92-b6ccec9e5391",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8f23d159-17ce-4776-bf7f-9d5d30647a54"
        },
        "item": {
          "id": "f1bfc4f0-909a-40bf-b93f-0819bc012c72",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8297de11-4c33-4fee-adcf-3b82f8aa2ac5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602223aa-6022-473a-8739-6f138b3bd926",
        "cursor": {
          "ref": "599d8538-4e74-4446-97c7-9fd838ae9d84",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c777e4e6-dc0d-43ff-8ea0-99adad7719ce"
        },
        "item": {
          "id": "602223aa-6022-473a-8739-6f138b3bd926",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "958f76aa-72c4-4a68-b651-7abdd9760fa8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed657632-c7c3-4c90-8990-8b90f58deb62",
        "cursor": {
          "ref": "d49e4a5a-0676-48af-a0bb-6173674df09b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "695c07c7-20e7-42b6-9e89-1bb9a69d3140"
        },
        "item": {
          "id": "ed657632-c7c3-4c90-8990-8b90f58deb62",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "554af767-831b-45df-8a94-b0f45d79ea69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b36fb76-3c7e-4905-8e32-642c585b72ea",
        "cursor": {
          "ref": "d7fae0d2-8bdf-4fde-a820-498dd898f4ca",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4eaf8267-287d-48b5-9939-60d5b280f314"
        },
        "item": {
          "id": "2b36fb76-3c7e-4905-8e32-642c585b72ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a6c58045-0f54-4d93-bd7e-ee8ec306b13e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c4ce23-499b-4851-b0de-2cbceffb7e57",
        "cursor": {
          "ref": "34579f9e-a69c-4906-8b92-73a7115b049c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ea860b9d-24e3-47e2-b189-7c0e83e805fd"
        },
        "item": {
          "id": "08c4ce23-499b-4851-b0de-2cbceffb7e57",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0875d3c9-e13a-40c0-bf0b-85cbca44e304",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697b4ea6-2f96-4d6d-9ec0-f7d18d86acd9",
        "cursor": {
          "ref": "a67c9664-ccc0-40a3-b0f3-b663f2d8ca52",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "383d2a21-63ff-45ed-abcf-46b868b3138f"
        },
        "item": {
          "id": "697b4ea6-2f96-4d6d-9ec0-f7d18d86acd9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a1d3b599-48f5-469a-b350-45e040dc3552",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd94a47-b879-4e19-8d1c-9b23daada9b5",
        "cursor": {
          "ref": "3e62ca51-f25a-43cf-84ec-f3afa095c50a",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5757691c-d3b7-4d2a-b277-1fc027ff8296"
        },
        "item": {
          "id": "9fd94a47-b879-4e19-8d1c-9b23daada9b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9378ee81-39af-4a65-ac1a-bea5e6eddfcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a244a3-8c6d-433f-9ad4-1e7852aa4c72",
        "cursor": {
          "ref": "eda61c24-23c3-4125-a442-9d53fbe83f6f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2f1a7cfb-3ac9-49f5-b40a-63145f7b742e"
        },
        "item": {
          "id": "65a244a3-8c6d-433f-9ad4-1e7852aa4c72",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4d4dd44a-57c4-478e-83c8-bc4802d75db5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dedb333-3c25-4ef3-8a1d-defc3fb9411f",
        "cursor": {
          "ref": "fd8dfdd5-ab06-4f2b-b964-9560f2667fc7",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "74fc1886-7a14-4819-879a-43872b7b7c54"
        },
        "item": {
          "id": "5dedb333-3c25-4ef3-8a1d-defc3fb9411f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f2b580ef-2015-42cd-b7b8-1d1990012ada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087b209a-0821-48d7-95c0-1566ba589861",
        "cursor": {
          "ref": "ff133986-6295-42c9-a091-278869aff5fd",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb0c7987-0c42-4929-b1de-8b3699c0e6ac"
        },
        "item": {
          "id": "087b209a-0821-48d7-95c0-1566ba589861",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6dd51a4b-4540-437d-9138-c87840c3b500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd0505b-75d4-4d3b-bf10-369d4cc44d4e",
        "cursor": {
          "ref": "9507f6cd-8bff-4e0d-92b7-505e3a61c839",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fa6e6822-da70-49da-aa0f-85d1e763f170"
        },
        "item": {
          "id": "4bd0505b-75d4-4d3b-bf10-369d4cc44d4e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c61c2be9-50ce-4f8e-a14b-92b5ed83c136",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e4c136-0ecd-4a21-819d-c25300863da3",
        "cursor": {
          "ref": "008585b2-4b0b-406e-9361-d5466145ff5d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "18500f5c-96cf-4a90-b960-8387b852b6fd"
        },
        "item": {
          "id": "c6e4c136-0ecd-4a21-819d-c25300863da3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5ab24ba6-6499-4994-ad2d-70a6922269f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fab5f6-9378-41c1-a378-58d66e721f34",
        "cursor": {
          "ref": "94aa2ff7-e5ff-4295-bc89-4cc462c36408",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e87bc876-f0e5-457d-8d3b-936254cde8e8"
        },
        "item": {
          "id": "86fab5f6-9378-41c1-a378-58d66e721f34",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b0b223b-9bb0-4b84-87fc-191ff1649079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ccdd17-761b-4f47-9c29-bf7e56bd5d73",
        "cursor": {
          "ref": "49db9b7a-8701-4562-9a6f-520145ccdcd4",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "563f916f-424e-4fa6-b095-a6d5df11fc63"
        },
        "item": {
          "id": "13ccdd17-761b-4f47-9c29-bf7e56bd5d73",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c2c0ea3a-e4b9-442b-bf3d-6b004f13d6aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43afc4d7-289c-40e2-80a0-e516fde6315e",
        "cursor": {
          "ref": "bfe945b3-d74a-4969-970d-a986a8e8ac2b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d65e6177-8b44-41a8-b6df-3bdd6bff21e6"
        },
        "item": {
          "id": "43afc4d7-289c-40e2-80a0-e516fde6315e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c39ae5b6-4377-4e75-a828-d49c1d7b8842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e789b991-81c2-4330-bbb6-c5d0eb0f3e72",
        "cursor": {
          "ref": "3d7e2907-73bf-4a3e-b165-319d71a062c4",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3b83a765-511b-4e5e-98fd-15604f40e75a"
        },
        "item": {
          "id": "e789b991-81c2-4330-bbb6-c5d0eb0f3e72",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d73fd746-4460-4141-8297-3b9abc608daa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac42fb-86a4-4ef7-99c7-a9d501ae2a6f",
        "cursor": {
          "ref": "b81a3947-67d6-4b4e-8cb6-c5f74007ff1e",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eedc353c-4c61-4445-9fc5-4296262b01cc"
        },
        "item": {
          "id": "61ac42fb-86a4-4ef7-99c7-a9d501ae2a6f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7fe9788b-707a-47e8-818b-ac2a1bfa7197",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199d1aa6-0618-4664-a1a5-c5c79021ae89",
        "cursor": {
          "ref": "7b9fdeb0-f1e3-4dd4-8edb-eb16d2f8406b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fae35a2b-757f-47db-9ee5-2828092a7eb0"
        },
        "item": {
          "id": "199d1aa6-0618-4664-a1a5-c5c79021ae89",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3443b269-8c2b-4c9d-82e1-734659e7741a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae9af20-bf84-45a9-8ed5-ec323d1f0c5b",
        "cursor": {
          "ref": "0b77123e-0d40-4a1a-ae9c-63aac8302058",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "beb761f8-c28f-4e42-a9d6-b4696644b79f"
        },
        "item": {
          "id": "cae9af20-bf84-45a9-8ed5-ec323d1f0c5b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "39e9fe2f-c051-41d2-b90e-53f44dbaebcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd00279-556d-4194-ba4a-d03a4e8feafa",
        "cursor": {
          "ref": "8304b530-3615-4b2a-9f96-86c19a7bff5d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d80b00a7-fc04-4031-a85c-62eacc9849fb"
        },
        "item": {
          "id": "cfd00279-556d-4194-ba4a-d03a4e8feafa",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c3e21670-635e-41df-9d24-bcd987396a7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07aee431-e58e-495e-8f44-59430ec913dd",
        "cursor": {
          "ref": "2926aea1-462f-4f86-96e9-f21f259016ec",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2e411c2c-9a65-4f4d-941c-a760a19053a6"
        },
        "item": {
          "id": "07aee431-e58e-495e-8f44-59430ec913dd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f0dc0780-afd7-4887-8882-d3931d2f59d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62e47a7-75e6-4c54-a0a9-43e736fe5d7a",
        "cursor": {
          "ref": "40141e38-bb63-4b2b-9b69-785e73149c45",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "19ca5616-259b-4f86-a634-c4b58425ae02"
        },
        "item": {
          "id": "c62e47a7-75e6-4c54-a0a9-43e736fe5d7a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4a7b5b9a-e717-4f01-a5cc-947c937bfeed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad6f225-2e90-441a-b735-f95f16f1e65d",
        "cursor": {
          "ref": "83f7241c-2e2c-481b-b65c-72144fd4c9fc",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a1f7b095-b03d-4f49-b56f-4e3a8af78308"
        },
        "item": {
          "id": "cad6f225-2e90-441a-b735-f95f16f1e65d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1b39e4a9-2f08-4cf4-bf01-ab1c383508ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab7ecab-c68d-4fd5-8046-80c90adfb348",
        "cursor": {
          "ref": "ae2ac731-25ac-439e-ad41-77c7b719e8a3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bc23b030-b0b1-4689-b394-4a24d53237cc"
        },
        "item": {
          "id": "9ab7ecab-c68d-4fd5-8046-80c90adfb348",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "17adcdde-e013-42ec-ac15-dda3f0b8d792",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2293ad-a5f6-4f2c-af1f-5f9d5d7007c4",
        "cursor": {
          "ref": "f346d560-7413-4789-a5ea-f1157b87d9f1",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "64d65a10-214e-4a38-824d-f812ec73ff94"
        },
        "item": {
          "id": "2c2293ad-a5f6-4f2c-af1f-5f9d5d7007c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "94b7b139-69f2-4146-b2ec-27b92873854d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c224c79b-7b2b-4105-95c8-ffae6740b8ae",
        "cursor": {
          "ref": "e045bba3-96e1-4762-b8c3-00016241da2e",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "644ef3bb-9e96-469f-b6ec-9b511cf8cf0f"
        },
        "item": {
          "id": "c224c79b-7b2b-4105-95c8-ffae6740b8ae",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3e948d4c-dbb4-466e-ad5e-1c1b34d943df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd77d56-8f29-4544-9e35-a37d853fcca0",
        "cursor": {
          "ref": "c5a3ba1d-8134-4c09-b846-bf64b8287af4",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7c6e4a8d-1fbc-4349-9d90-2315ff4b965a"
        },
        "item": {
          "id": "5dd77d56-8f29-4544-9e35-a37d853fcca0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "08545da8-839c-4611-8631-e14b98295883",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466de81c-441a-48d2-bf20-f2c1b2350531",
        "cursor": {
          "ref": "7b70586e-0b0d-4890-8a96-4243fac56e0b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1eace9fd-35cf-4f48-80ba-32a2ceca6e84"
        },
        "item": {
          "id": "466de81c-441a-48d2-bf20-f2c1b2350531",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a254349-585a-4864-80d7-c10a60680fc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a548a78d-fc40-4592-b5a0-96f593a733cf",
        "cursor": {
          "ref": "f746f2d7-0c08-4252-b51a-062dbf5d0d86",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d72e82a7-633b-404b-8de8-f4f3f6610827"
        },
        "item": {
          "id": "a548a78d-fc40-4592-b5a0-96f593a733cf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8e7a8252-53a6-4ee1-9d30-dc75e31ef213",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52cb87e-fb1d-4864-ad96-3267b52880a3",
        "cursor": {
          "ref": "1218e733-2d27-4ecf-9c2a-2979a140cb1c",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dbd8462c-2c62-42ea-89fb-49bfb83c5dee"
        },
        "item": {
          "id": "a52cb87e-fb1d-4864-ad96-3267b52880a3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "917a361e-c440-4b56-bfe7-e90cf6eec19f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffff805-fc06-423c-a983-64eee945f5d4",
        "cursor": {
          "ref": "d31a32b4-5445-4014-bd21-1e01c8b29c5f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "24570cd8-9db8-4f68-bc98-9eb03e040693"
        },
        "item": {
          "id": "6ffff805-fc06-423c-a983-64eee945f5d4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ac82a782-716c-483c-930b-8cea20aa71dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d895515-71f3-446b-a9da-b316866d5339",
        "cursor": {
          "ref": "fb5ca427-c3e7-40ad-b82a-4bf48c8f3c25",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4ee1fc32-6224-4ec9-a658-248277695b2c"
        },
        "item": {
          "id": "9d895515-71f3-446b-a9da-b316866d5339",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0476a587-1cab-4f4e-8de5-3af6b2263ddf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "359aa249-1078-4e6b-a49e-ab7b4778579d",
        "cursor": {
          "ref": "2291b8a5-282e-43c2-ae41-794a2061447e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5d5270fb-654e-4a75-83f1-47923f569465"
        },
        "item": {
          "id": "359aa249-1078-4e6b-a49e-ab7b4778579d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f64f9204-2e54-42d7-a6a5-6da678f0d844",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "07616882-f2c8-43eb-a232-f4bb49e227cb",
        "cursor": {
          "ref": "0719def0-0808-43ed-8848-b352e6aeb5f8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3b77c824-2e92-4bb1-854e-926952e63177"
        },
        "item": {
          "id": "07616882-f2c8-43eb-a232-f4bb49e227cb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "96bc55f2-bc84-4584-bd00-111a670675a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b77b5b48-0434-4536-88d0-50dd18cb291a",
        "cursor": {
          "ref": "32003383-8225-4abf-af66-065c7813e2a9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b6536aa3-9628-4841-9853-0a5f4ef006bc"
        },
        "item": {
          "id": "b77b5b48-0434-4536-88d0-50dd18cb291a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dcbe2557-9e8a-4bd8-911b-6ed1f111a9bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77b5b48-0434-4536-88d0-50dd18cb291a",
        "cursor": {
          "ref": "32003383-8225-4abf-af66-065c7813e2a9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b6536aa3-9628-4841-9853-0a5f4ef006bc"
        },
        "item": {
          "id": "b77b5b48-0434-4536-88d0-50dd18cb291a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dcbe2557-9e8a-4bd8-911b-6ed1f111a9bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696c8bef-3611-4482-9373-4814d586c405",
        "cursor": {
          "ref": "acb3b557-d5f1-47fb-915d-ca3fc6bd3355",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b322c150-4fff-4204-aa8b-c5b39d474e44"
        },
        "item": {
          "id": "696c8bef-3611-4482-9373-4814d586c405",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b637cf6d-592c-4a6b-9675-389d0a167423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948bab83-27ea-404c-8a62-036c4995a48d",
        "cursor": {
          "ref": "805551b4-71f2-4d63-8ce3-11763ede4bb4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5e1d53c4-0260-48e5-999e-1ad55295a232"
        },
        "item": {
          "id": "948bab83-27ea-404c-8a62-036c4995a48d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dd39db88-f018-45d4-abc0-5ad1615d5cbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}